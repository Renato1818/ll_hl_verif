(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-16 14:26:43
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Rng<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_CASR<TYPE> TYPE)
(declare-const class_LFSR<TYPE> TYPE)
(declare-const class_Combinate<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Rng_m: Ref]
(declare-fun $FVF.domain_Rng_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Rng_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Rng_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Rng_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Rng_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Rng_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [CASR_m: Ref]
(declare-fun $FVF.domain_CASR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_CASR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_CASR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_CASR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_CASR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_CASR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [LFSR_m: Ref]
(declare-fun $FVF.domain_LFSR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_LFSR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_LFSR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_LFSR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_LFSR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_LFSR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Combinate_m: Ref]
(declare-fun $FVF.domain_Combinate_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Combinate_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Combinate_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Combinate_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Combinate_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Combinate_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun CASR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun CASR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Rng<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_CASR<TYPE> class_LFSR<TYPE> class_Combinate<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Rng<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_CASR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_LFSR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Combinate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Rng_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Rng_m vs) ($FVF.domain_Rng_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Rng_m vs))
            (= ($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x)))
          :pattern (($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Rng_m pm r))
    :pattern ($FVF.perm_Rng_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Rng_m f r) true)
    :pattern ($FVF.loc_Rng_m f r))))
; /field_value_functions_axioms.smt2 [CASR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_CASR_m vs) ($FVF.domain_CASR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_CASR_m vs))
            (= ($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x)))
          :pattern (($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_CASR_m pm r))
    :pattern ($FVF.perm_CASR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_CASR_m f r) true)
    :pattern ($FVF.loc_CASR_m f r))))
; /field_value_functions_axioms.smt2 [LFSR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_LFSR_m vs) ($FVF.domain_LFSR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_LFSR_m vs))
            (= ($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x)))
          :pattern (($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_LFSR_m pm r))
    :pattern ($FVF.perm_LFSR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_LFSR_m f r) true)
    :pattern ($FVF.loc_LFSR_m f r))))
; /field_value_functions_axioms.smt2 [Combinate_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Combinate_m vs) ($FVF.domain_Combinate_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Combinate_m vs))
            (= ($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x)))
          :pattern (($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Combinate_m pm r))
    :pattern ($FVF.perm_Combinate_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Combinate_m f r) true)
    :pattern ($FVF.loc_Combinate_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Rng_Rng_EncodedGlobalVariables_Main ----------
(declare-const __globals@0@07 $Ref)
(declare-const __m_param@1@07 $Ref)
(declare-const sys__result@2@07 $Ref)
(declare-const __globals@3@07 $Ref)
(declare-const __m_param@4@07 $Ref)
(declare-const sys__result@5@07 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@6@07 $Snap)
(assert (= $t@6@07 ($Snap.combine ($Snap.first $t@6@07) ($Snap.second $t@6@07))))
(assert (= ($Snap.first $t@6@07) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@5@07 $Ref.null)))
(assert (=
  ($Snap.second $t@6@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@6@07))
    ($Snap.second ($Snap.second $t@6@07)))))
(assert (= ($Snap.first ($Snap.second $t@6@07)) $Snap.unit))
; [eval] type_of(sys__result) == class_Rng()
; [eval] type_of(sys__result)
; [eval] class_Rng()
(assert (= (type_of<TYPE> sys__result@5@07) (as class_Rng<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@6@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@6@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@6@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@6@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@6@07)))))))))))))
  $Snap.unit))
; [eval] sys__result.Rng_m == __m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@6@07))))
  __m_param@4@07))
(pop) ; 2
(push) ; 2
; [exec]
; var m_param__3: Ref
(declare-const m_param__3@7@07 $Ref)
; [exec]
; var globals__2: Ref
(declare-const globals__2@8@07 $Ref)
; [exec]
; var diz__1: Ref
(declare-const diz__1@9@07 $Ref)
; [exec]
; diz__1 := new(Rng_m, Rng_clk, Rng_reset, Rng_loadseed_i, Rng_seed_i, Rng_number_o, Rng_LFSR_reg, Rng_CASR_reg, Rng_result, Rng_i, Rng_aux)
(declare-const diz__1@10@07 $Ref)
(assert (not (= diz__1@10@07 $Ref.null)))
(declare-const Rng_m@11@07 $Ref)
(declare-const Rng_clk@12@07 Bool)
(declare-const Rng_reset@13@07 Bool)
(declare-const Rng_loadseed_i@14@07 Bool)
(declare-const Rng_seed_i@15@07 Int)
(declare-const Rng_number_o@16@07 Int)
(declare-const Rng_LFSR_reg@17@07 Int)
(declare-const Rng_CASR_reg@18@07 Int)
(declare-const Rng_result@19@07 Int)
(declare-const Rng_i@20@07 Int)
(declare-const Rng_aux@21@07 Int)
(assert (not (= diz__1@10@07 globals__2@8@07)))
(assert (not (= diz__1@10@07 __m_param@4@07)))
(assert (not (= diz__1@10@07 diz__1@9@07)))
(assert (not (= diz__1@10@07 sys__result@5@07)))
(assert (not (= diz__1@10@07 __globals@3@07)))
(assert (not (= diz__1@10@07 m_param__3@7@07)))
; [exec]
; inhale type_of(diz__1) == class_Rng()
(declare-const $t@22@07 $Snap)
(assert (= $t@22@07 $Snap.unit))
; [eval] type_of(diz__1) == class_Rng()
; [eval] type_of(diz__1)
; [eval] class_Rng()
(assert (= (type_of<TYPE> diz__1@10@07) (as class_Rng<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; globals__2 := __globals
; [exec]
; m_param__3 := __m_param
; [exec]
; diz__1.Rng_m := m_param__3
; [exec]
; sys__result := diz__1
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Rng() && acc(sys__result.Rng_m, write) && acc(sys__result.Rng_clk, write) && acc(sys__result.Rng_reset, write) && acc(sys__result.Rng_loadseed_i, write) && acc(sys__result.Rng_seed_i, write) && acc(sys__result.Rng_number_o, write) && acc(sys__result.Rng_LFSR_reg, write) && acc(sys__result.Rng_CASR_reg, write) && acc(sys__result.Rng_result, write) && acc(sys__result.Rng_i, write) && acc(sys__result.Rng_aux, write) && sys__result.Rng_m == __m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Rng()
; [eval] type_of(sys__result)
; [eval] class_Rng()
; [eval] sys__result.Rng_m == __m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- CASR_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@23@07 $Ref)
(declare-const globals@24@07 $Ref)
(declare-const diz@25@07 $Ref)
(declare-const globals@26@07 $Ref)
(push) ; 1
(declare-const $t@27@07 $Snap)
(assert (= $t@27@07 ($Snap.combine ($Snap.first $t@27@07) ($Snap.second $t@27@07))))
(assert (= ($Snap.first $t@27@07) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@25@07 $Ref.null)))
(assert (=
  ($Snap.second $t@27@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@27@07))
    ($Snap.second ($Snap.second $t@27@07)))))
(declare-const $k@28@07 $Perm)
(assert ($Perm.isReadVar $k@28@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@28@07 $Perm.No) (< $Perm.No $k@28@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             20
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             1
;  :datatype-accessor-ax  4
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           283
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            3
;  :propagations          23
;  :quant-instantiations  1
;  :rlimit-count          115304)
(assert (<= $Perm.No $k@28@07))
(assert (<= $k@28@07 $Perm.Write))
(assert (implies (< $Perm.No $k@28@07) (not (= diz@25@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@27@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@27@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@27@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@27@07))) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@28@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             26
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           286
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            4
;  :propagations          23
;  :quant-instantiations  1
;  :rlimit-count          115557
;  :time                  0.00)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@27@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@27@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@07)))))))
(push) ; 2
(assert (not (< $Perm.No $k@28@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             32
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             3
;  :datatype-accessor-ax  6
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           289
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            5
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          115841)
(declare-const $k@29@07 $Perm)
(assert ($Perm.isReadVar $k@29@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@29@07 $Perm.No) (< $Perm.No $k@29@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             32
;  :arith-assert-diseq    2
;  :arith-assert-lower    5
;  :arith-assert-upper    4
;  :arith-eq-adapter      3
;  :binary-propagations   22
;  :conflicts             4
;  :datatype-accessor-ax  6
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           293
;  :mk-clause             5
;  :num-allocs            3525731
;  :num-checks            6
;  :propagations          24
;  :quant-instantiations  2
;  :rlimit-count          116040)
(assert (<= $Perm.No $k@29@07))
(assert (<= $k@29@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@29@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@27@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@27@07)))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@28@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             38
;  :arith-assert-diseq    2
;  :arith-assert-lower    5
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   22
;  :conflicts             5
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           296
;  :mk-clause             5
;  :num-allocs            3645676
;  :num-checks            7
;  :propagations          24
;  :quant-instantiations  2
;  :rlimit-count          116313)
(push) ; 2
(assert (not (< $Perm.No $k@29@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             38
;  :arith-assert-diseq    2
;  :arith-assert-lower    5
;  :arith-assert-upper    5
;  :arith-eq-adapter      3
;  :binary-propagations   22
;  :conflicts             6
;  :datatype-accessor-ax  7
;  :datatype-occurs-check 1
;  :final-checks          2
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           296
;  :mk-clause             5
;  :num-allocs            3645676
;  :num-checks            8
;  :propagations          24
;  :quant-instantiations  2
;  :rlimit-count          116361)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@27@07)))))
  diz@25@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@30@07 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- CASR___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@31@07 $Ref)
(declare-const __globals@32@07 $Ref)
(declare-const diz@33@07 $Ref)
(declare-const __globals@34@07 $Ref)
(push) ; 1
(declare-const $t@35@07 $Snap)
(assert (= $t@35@07 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@33@07 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.CASR_m, wildcard) && diz.CASR_m != null && acc(diz.CASR_m.Main_rn_casr, wildcard) && diz.CASR_m.Main_rn_casr == diz)
(declare-const $t@36@07 $Snap)
(assert (= $t@36@07 ($Snap.combine ($Snap.first $t@36@07) ($Snap.second $t@36@07))))
(assert (= ($Snap.first $t@36@07) $Snap.unit))
(assert (=
  ($Snap.second $t@36@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@07))
    ($Snap.second ($Snap.second $t@36@07)))))
(declare-const $k@37@07 $Perm)
(assert ($Perm.isReadVar $k@37@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@37@07 $Perm.No) (< $Perm.No $k@37@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               60
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               7
;  :datatype-accessor-ax    10
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             310
;  :mk-clause               7
;  :num-allocs              3645676
;  :num-checks              11
;  :propagations            25
;  :quant-instantiations    3
;  :rlimit-count            117620)
(assert (<= $Perm.No $k@37@07))
(assert (<= $k@37@07 $Perm.Write))
(assert (implies (< $Perm.No $k@37@07) (not (= diz@33@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@36@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@36@07))) $Snap.unit))
; [eval] diz.CASR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@37@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               66
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               8
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             313
;  :mk-clause               7
;  :num-allocs              3645676
;  :num-checks              12
;  :propagations            25
;  :quant-instantiations    3
;  :rlimit-count            117873)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@36@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@07)))))))
(push) ; 3
(assert (not (< $Perm.No $k@37@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               72
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     22
;  :conflicts               9
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             316
;  :mk-clause               7
;  :num-allocs              3645676
;  :num-checks              13
;  :propagations            25
;  :quant-instantiations    4
;  :rlimit-count            118157)
(declare-const $k@38@07 $Perm)
(assert ($Perm.isReadVar $k@38@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@07 $Perm.No) (< $Perm.No $k@38@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               72
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      8
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               10
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             320
;  :mk-clause               9
;  :num-allocs              3645676
;  :num-checks              14
;  :propagations            26
;  :quant-instantiations    4
;  :rlimit-count            118356)
(assert (<= $Perm.No $k@38@07))
(assert (<= $k@38@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@38@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@07))))
  $Snap.unit))
; [eval] diz.CASR_m.Main_rn_casr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@37@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               73
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               11
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             322
;  :mk-clause               9
;  :num-allocs              3645676
;  :num-checks              15
;  :propagations            26
;  :quant-instantiations    4
;  :rlimit-count            118542)
(push) ; 3
(assert (not (< $Perm.No $k@38@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               73
;  :arith-assert-diseq      4
;  :arith-assert-lower      9
;  :arith-assert-upper      9
;  :arith-eq-adapter        5
;  :binary-propagations     22
;  :conflicts               12
;  :datatype-accessor-ax    12
;  :datatype-constructor-ax 3
;  :datatype-occurs-check   4
;  :datatype-splits         3
;  :decisions               3
;  :del-clause              4
;  :final-checks            5
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             322
;  :mk-clause               9
;  :num-allocs              3645676
;  :num-checks              16
;  :propagations            26
;  :quant-instantiations    4
;  :rlimit-count            118590)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@07)))))
  diz@33@07))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- LFSR___contract_unsatisfiable__LFSR_EncodedGlobalVariables_Main ----------
(declare-const diz@39@07 $Ref)
(declare-const __globals@40@07 $Ref)
(declare-const __m_param@41@07 $Ref)
(declare-const diz@42@07 $Ref)
(declare-const __globals@43@07 $Ref)
(declare-const __m_param@44@07 $Ref)
(push) ; 1
(declare-const $t@45@07 $Snap)
(assert (= $t@45@07 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@42@07 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@46@07 $Snap)
(assert (= $t@46@07 ($Snap.combine ($Snap.first $t@46@07) ($Snap.second $t@46@07))))
(assert (= ($Snap.first $t@46@07) $Snap.unit))
(assert (= ($Snap.second $t@46@07) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- LFSR_LFSR_EncodedGlobalVariables_Main ----------
(declare-const __globals@47@07 $Ref)
(declare-const __m_param@48@07 $Ref)
(declare-const sys__result@49@07 $Ref)
(declare-const __globals@50@07 $Ref)
(declare-const __m_param@51@07 $Ref)
(declare-const sys__result@52@07 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@53@07 $Snap)
(assert (= $t@53@07 ($Snap.combine ($Snap.first $t@53@07) ($Snap.second $t@53@07))))
(assert (= ($Snap.first $t@53@07) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@52@07 $Ref.null)))
(assert (=
  ($Snap.second $t@53@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@53@07))
    ($Snap.second ($Snap.second $t@53@07)))))
(assert (= ($Snap.first ($Snap.second $t@53@07)) $Snap.unit))
; [eval] type_of(sys__result) == class_LFSR()
; [eval] type_of(sys__result)
; [eval] class_LFSR()
(assert (= (type_of<TYPE> sys__result@52@07) (as class_LFSR<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@53@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@53@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@53@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@53@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@53@07))))))
  $Snap.unit))
; [eval] sys__result.LFSR_m == __m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@53@07)))))
  __m_param@51@07))
(pop) ; 2
(push) ; 2
; [exec]
; var m_param__107: Ref
(declare-const m_param__107@54@07 $Ref)
; [exec]
; var globals__106: Ref
(declare-const globals__106@55@07 $Ref)
; [exec]
; var diz__105: Ref
(declare-const diz__105@56@07 $Ref)
; [exec]
; diz__105 := new(LFSR_m, LFSR_LFSR_var, LFSR_outbit)
(declare-const diz__105@57@07 $Ref)
(assert (not (= diz__105@57@07 $Ref.null)))
(declare-const LFSR_m@58@07 $Ref)
(declare-const LFSR_LFSR_var@59@07 Int)
(declare-const LFSR_outbit@60@07 Int)
(assert (not (= diz__105@57@07 m_param__107@54@07)))
(assert (not (= diz__105@57@07 sys__result@52@07)))
(assert (not (= diz__105@57@07 __globals@50@07)))
(assert (not (= diz__105@57@07 __m_param@51@07)))
(assert (not (= diz__105@57@07 diz__105@56@07)))
(assert (not (= diz__105@57@07 globals__106@55@07)))
; [exec]
; inhale type_of(diz__105) == class_LFSR()
(declare-const $t@61@07 $Snap)
(assert (= $t@61@07 $Snap.unit))
; [eval] type_of(diz__105) == class_LFSR()
; [eval] type_of(diz__105)
; [eval] class_LFSR()
(assert (= (type_of<TYPE> diz__105@57@07) (as class_LFSR<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; globals__106 := __globals
; [exec]
; m_param__107 := __m_param
; [exec]
; diz__105.LFSR_m := m_param__107
; [exec]
; inhale acc(LFSR_idleToken_EncodedGlobalVariables(diz__105, globals__106), write)
(declare-const $t@62@07 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__105
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_LFSR() && acc(LFSR_idleToken_EncodedGlobalVariables(sys__result, __globals), write) && acc(sys__result.LFSR_m, write) && acc(sys__result.LFSR_LFSR_var, write) && acc(sys__result.LFSR_outbit, write) && sys__result.LFSR_m == __m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_LFSR()
; [eval] type_of(sys__result)
; [eval] class_LFSR()
; [eval] sys__result.LFSR_m == __m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- LFSR_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@63@07 $Ref)
(declare-const globals@64@07 $Ref)
(declare-const diz@65@07 $Ref)
(declare-const globals@66@07 $Ref)
(push) ; 1
(declare-const $t@67@07 $Snap)
(assert (= $t@67@07 ($Snap.combine ($Snap.first $t@67@07) ($Snap.second $t@67@07))))
(assert (= ($Snap.first $t@67@07) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@65@07 $Ref.null)))
(assert (=
  ($Snap.second $t@67@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@67@07))
    ($Snap.second ($Snap.second $t@67@07)))))
(declare-const $k@68@07 $Perm)
(assert ($Perm.isReadVar $k@68@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@68@07 $Perm.No) (< $Perm.No $k@68@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               120
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      10
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               13
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             348
;  :mk-clause               11
;  :num-allocs              3645676
;  :num-checks              29
;  :propagations            27
;  :quant-instantiations    5
;  :rlimit-count            123323)
(assert (<= $Perm.No $k@68@07))
(assert (<= $k@68@07 $Perm.Write))
(assert (implies (< $Perm.No $k@68@07) (not (= diz@65@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@67@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@67@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@67@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@67@07))) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@68@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               126
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               14
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             351
;  :mk-clause               11
;  :num-allocs              3645676
;  :num-checks              30
;  :propagations            27
;  :quant-instantiations    5
;  :rlimit-count            123576)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@67@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@67@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@07)))))))
(push) ; 2
(assert (not (< $Perm.No $k@68@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132
;  :arith-assert-diseq      5
;  :arith-assert-lower      11
;  :arith-assert-upper      11
;  :arith-eq-adapter        6
;  :binary-propagations     22
;  :conflicts               15
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             354
;  :mk-clause               11
;  :num-allocs              3645676
;  :num-checks              31
;  :propagations            27
;  :quant-instantiations    6
;  :rlimit-count            123860)
(declare-const $k@69@07 $Perm)
(assert ($Perm.isReadVar $k@69@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@69@07 $Perm.No) (< $Perm.No $k@69@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               132
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      12
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               16
;  :datatype-accessor-ax    20
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             358
;  :mk-clause               13
;  :num-allocs              3645676
;  :num-checks              32
;  :propagations            28
;  :quant-instantiations    6
;  :rlimit-count            124058)
(assert (<= $Perm.No $k@69@07))
(assert (<= $k@69@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@69@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@67@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@67@07)))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@68@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               17
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             361
;  :mk-clause               13
;  :num-allocs              3645676
;  :num-checks              33
;  :propagations            28
;  :quant-instantiations    6
;  :rlimit-count            124331)
(push) ; 2
(assert (not (< $Perm.No $k@69@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               138
;  :arith-assert-diseq      6
;  :arith-assert-lower      13
;  :arith-assert-upper      13
;  :arith-eq-adapter        7
;  :binary-propagations     22
;  :conflicts               18
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 11
;  :datatype-occurs-check   25
;  :datatype-splits         5
;  :decisions               11
;  :del-clause              8
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             361
;  :mk-clause               13
;  :num-allocs              3645676
;  :num-checks              34
;  :propagations            28
;  :quant-instantiations    6
;  :rlimit-count            124379)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@67@07)))))
  diz@65@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@70@07 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- LFSR_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@71@07 $Ref)
(declare-const globals@72@07 $Ref)
(declare-const diz@73@07 $Ref)
(declare-const globals@74@07 $Ref)
(push) ; 1
(declare-const $t@75@07 $Snap)
(assert (= $t@75@07 ($Snap.combine ($Snap.first $t@75@07) ($Snap.second $t@75@07))))
(assert (= ($Snap.first $t@75@07) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@73@07 $Ref.null)))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@76@07 $Snap)
(assert (= $t@76@07 ($Snap.combine ($Snap.first $t@76@07) ($Snap.second $t@76@07))))
(assert (=
  ($Snap.second $t@76@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@76@07))
    ($Snap.second ($Snap.second $t@76@07)))))
(declare-const $k@77@07 $Perm)
(assert ($Perm.isReadVar $k@77@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@77@07 $Perm.No) (< $Perm.No $k@77@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               166
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      14
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               19
;  :datatype-accessor-ax    25
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             376
;  :mk-clause               15
;  :num-allocs              3645676
;  :num-checks              37
;  :propagations            29
;  :quant-instantiations    7
;  :rlimit-count            125697)
(assert (<= $Perm.No $k@77@07))
(assert (<= $k@77@07 $Perm.Write))
(assert (implies (< $Perm.No $k@77@07) (not (= diz@73@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@76@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@76@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@76@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@76@07))) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@77@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               172
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               20
;  :datatype-accessor-ax    26
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             379
;  :mk-clause               15
;  :num-allocs              3645676
;  :num-checks              38
;  :propagations            29
;  :quant-instantiations    7
;  :rlimit-count            125950)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@76@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@76@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@07)))))))
(push) ; 3
(assert (not (< $Perm.No $k@77@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               178
;  :arith-assert-diseq      7
;  :arith-assert-lower      15
;  :arith-assert-upper      15
;  :arith-eq-adapter        8
;  :binary-propagations     22
;  :conflicts               21
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             382
;  :mk-clause               15
;  :num-allocs              3645676
;  :num-checks              39
;  :propagations            29
;  :quant-instantiations    8
;  :rlimit-count            126234)
(declare-const $k@78@07 $Perm)
(assert ($Perm.isReadVar $k@78@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@78@07 $Perm.No) (< $Perm.No $k@78@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               178
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      16
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               22
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             386
;  :mk-clause               17
;  :num-allocs              3645676
;  :num-checks              40
;  :propagations            30
;  :quant-instantiations    8
;  :rlimit-count            126433)
(assert (<= $Perm.No $k@78@07))
(assert (<= $k@78@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@78@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@76@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@76@07))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@77@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               179
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               23
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             388
;  :mk-clause               17
;  :num-allocs              3645676
;  :num-checks              41
;  :propagations            30
;  :quant-instantiations    8
;  :rlimit-count            126619)
(push) ; 3
(assert (not (< $Perm.No $k@78@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               179
;  :arith-assert-diseq      8
;  :arith-assert-lower      17
;  :arith-assert-upper      17
;  :arith-eq-adapter        9
;  :binary-propagations     22
;  :conflicts               24
;  :datatype-accessor-ax    27
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   29
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              12
;  :final-checks            22
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             388
;  :mk-clause               17
;  :num-allocs              3645676
;  :num-checks              42
;  :propagations            30
;  :quant-instantiations    8
;  :rlimit-count            126667)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@76@07)))))
  diz@73@07))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- LFSR___contract_unsatisfiable__run_EncodedGlobalVariables ----------
(declare-const diz@79@07 $Ref)
(declare-const __globals@80@07 $Ref)
(declare-const diz@81@07 $Ref)
(declare-const __globals@82@07 $Ref)
(push) ; 1
(declare-const $t@83@07 $Snap)
(assert (= $t@83@07 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@81@07 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.LFSR_m, wildcard) && diz.LFSR_m != null && acc(diz.LFSR_m.Main_rn_lfsr, wildcard) && diz.LFSR_m.Main_rn_lfsr == diz)
(declare-const $t@84@07 $Snap)
(assert (= $t@84@07 ($Snap.combine ($Snap.first $t@84@07) ($Snap.second $t@84@07))))
(assert (= ($Snap.first $t@84@07) $Snap.unit))
(assert (=
  ($Snap.second $t@84@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@07))
    ($Snap.second ($Snap.second $t@84@07)))))
(declare-const $k@85@07 $Perm)
(assert ($Perm.isReadVar $k@85@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@85@07 $Perm.No) (< $Perm.No $k@85@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               191
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      18
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               25
;  :datatype-accessor-ax    30
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             397
;  :mk-clause               19
;  :num-allocs              3645676
;  :num-checks              44
;  :propagations            31
;  :quant-instantiations    8
;  :rlimit-count            127475)
(assert (<= $Perm.No $k@85@07))
(assert (<= $k@85@07 $Perm.Write))
(assert (implies (< $Perm.No $k@85@07) (not (= diz@81@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@84@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@07))) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@85@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               197
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               26
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             400
;  :mk-clause               19
;  :num-allocs              3645676
;  :num-checks              45
;  :propagations            31
;  :quant-instantiations    8
;  :rlimit-count            127728)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@84@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@07)))))))
(push) ; 3
(assert (not (< $Perm.No $k@85@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               203
;  :arith-assert-diseq      9
;  :arith-assert-lower      19
;  :arith-assert-upper      19
;  :arith-eq-adapter        10
;  :binary-propagations     22
;  :conflicts               27
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             403
;  :mk-clause               19
;  :num-allocs              3645676
;  :num-checks              46
;  :propagations            31
;  :quant-instantiations    9
;  :rlimit-count            128012)
(declare-const $k@86@07 $Perm)
(assert ($Perm.isReadVar $k@86@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@86@07 $Perm.No) (< $Perm.No $k@86@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               203
;  :arith-assert-diseq      10
;  :arith-assert-lower      21
;  :arith-assert-upper      20
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               28
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             407
;  :mk-clause               21
;  :num-allocs              3645676
;  :num-checks              47
;  :propagations            32
;  :quant-instantiations    9
;  :rlimit-count            128211)
(assert (<= $Perm.No $k@86@07))
(assert (<= $k@86@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@86@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@84@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@07))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@85@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               204
;  :arith-assert-diseq      10
;  :arith-assert-lower      21
;  :arith-assert-upper      21
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               29
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             409
;  :mk-clause               21
;  :num-allocs              3645676
;  :num-checks              48
;  :propagations            32
;  :quant-instantiations    9
;  :rlimit-count            128397)
(push) ; 3
(assert (not (< $Perm.No $k@86@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               204
;  :arith-assert-diseq      10
;  :arith-assert-lower      21
;  :arith-assert-upper      21
;  :arith-eq-adapter        11
;  :binary-propagations     22
;  :conflicts               30
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 15
;  :datatype-occurs-check   30
;  :datatype-splits         9
;  :decisions               15
;  :del-clause              16
;  :final-checks            23
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             409
;  :mk-clause               21
;  :num-allocs              3645676
;  :num-checks              49
;  :propagations            32
;  :quant-instantiations    9
;  :rlimit-count            128445)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@07)))))
  diz@81@07))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- LFSR_run_EncodedGlobalVariables ----------
(declare-const diz@87@07 $Ref)
(declare-const __globals@88@07 $Ref)
(declare-const diz@89@07 $Ref)
(declare-const __globals@90@07 $Ref)
(push) ; 1
(declare-const $t@91@07 $Snap)
(assert (= $t@91@07 ($Snap.combine ($Snap.first $t@91@07) ($Snap.second $t@91@07))))
(assert (= ($Snap.first $t@91@07) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@89@07 $Ref.null)))
(assert (=
  ($Snap.second $t@91@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@91@07))
    ($Snap.second ($Snap.second $t@91@07)))))
(declare-const $k@92@07 $Perm)
(assert ($Perm.isReadVar $k@92@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@92@07 $Perm.No) (< $Perm.No $k@92@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               241
;  :arith-assert-diseq      11
;  :arith-assert-lower      23
;  :arith-assert-upper      22
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               31
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             421
;  :mk-clause               23
;  :num-allocs              3645676
;  :num-checks              54
;  :propagations            33
;  :quant-instantiations    10
;  :rlimit-count            130288)
(assert (<= $Perm.No $k@92@07))
(assert (<= $k@92@07 $Perm.Write))
(assert (implies (< $Perm.No $k@92@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@91@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@91@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@91@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@91@07))) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               247
;  :arith-assert-diseq      11
;  :arith-assert-lower      23
;  :arith-assert-upper      23
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               32
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             424
;  :mk-clause               23
;  :num-allocs              3645676
;  :num-checks              55
;  :propagations            33
;  :quant-instantiations    10
;  :rlimit-count            130541)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@91@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@07)))))))
(push) ; 2
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      11
;  :arith-assert-lower      23
;  :arith-assert-upper      23
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               33
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             427
;  :mk-clause               23
;  :num-allocs              3645676
;  :num-checks              56
;  :propagations            33
;  :quant-instantiations    11
;  :rlimit-count            130825)
(declare-const $k@93@07 $Perm)
(assert ($Perm.isReadVar $k@93@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@93@07 $Perm.No) (< $Perm.No $k@93@07))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      12
;  :arith-assert-lower      25
;  :arith-assert-upper      24
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               34
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             431
;  :mk-clause               25
;  :num-allocs              3645676
;  :num-checks              57
;  :propagations            34
;  :quant-instantiations    11
;  :rlimit-count            131024)
(assert (<= $Perm.No $k@93@07))
(assert (<= $k@93@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@93@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@07))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               254
;  :arith-assert-diseq      12
;  :arith-assert-lower      25
;  :arith-assert-upper      25
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               35
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             433
;  :mk-clause               25
;  :num-allocs              3645676
;  :num-checks              58
;  :propagations            34
;  :quant-instantiations    11
;  :rlimit-count            131210)
(push) ; 2
(assert (not (< $Perm.No $k@93@07)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               254
;  :arith-assert-diseq      12
;  :arith-assert-lower      25
;  :arith-assert-upper      25
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               36
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 23
;  :datatype-occurs-check   40
;  :datatype-splits         11
;  :decisions               23
;  :del-clause              20
;  :final-checks            28
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             433
;  :mk-clause               25
;  :num-allocs              3645676
;  :num-checks              59
;  :propagations            34
;  :quant-instantiations    11
;  :rlimit-count            131258)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@07)))))
  diz@89@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@94@07 $Snap)
(assert (= $t@94@07 ($Snap.combine ($Snap.first $t@94@07) ($Snap.second $t@94@07))))
(declare-const $k@95@07 $Perm)
(assert ($Perm.isReadVar $k@95@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@95@07 $Perm.No) (< $Perm.No $k@95@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               267
;  :arith-assert-diseq      13
;  :arith-assert-lower      27
;  :arith-assert-upper      26
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               37
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             442
;  :mk-clause               27
;  :num-allocs              3645676
;  :num-checks              61
;  :propagations            35
;  :quant-instantiations    12
;  :rlimit-count            131997)
(assert (<= $Perm.No $k@95@07))
(assert (<= $k@95@07 $Perm.Write))
(assert (implies (< $Perm.No $k@95@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@94@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@94@07))
    ($Snap.second ($Snap.second $t@94@07)))))
(assert (= ($Snap.first ($Snap.second $t@94@07)) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@95@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               273
;  :arith-assert-diseq      13
;  :arith-assert-lower      27
;  :arith-assert-upper      27
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               38
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             445
;  :mk-clause               27
;  :num-allocs              3645676
;  :num-checks              62
;  :propagations            35
;  :quant-instantiations    12
;  :rlimit-count            132240)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@94@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@94@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@94@07))))))
(push) ; 3
(assert (not (< $Perm.No $k@95@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               279
;  :arith-assert-diseq      13
;  :arith-assert-lower      27
;  :arith-assert-upper      27
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               39
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             448
;  :mk-clause               27
;  :num-allocs              3645676
;  :num-checks              63
;  :propagations            35
;  :quant-instantiations    13
;  :rlimit-count            132512)
(declare-const $k@96@07 $Perm)
(assert ($Perm.isReadVar $k@96@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@96@07 $Perm.No) (< $Perm.No $k@96@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               279
;  :arith-assert-diseq      14
;  :arith-assert-lower      29
;  :arith-assert-upper      28
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               40
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             452
;  :mk-clause               29
;  :num-allocs              3645676
;  :num-checks              64
;  :propagations            36
;  :quant-instantiations    13
;  :rlimit-count            132710)
(assert (<= $Perm.No $k@96@07))
(assert (<= $k@96@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@96@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@94@07)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@94@07))) $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@95@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               280
;  :arith-assert-diseq      14
;  :arith-assert-lower      29
;  :arith-assert-upper      29
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               41
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             454
;  :mk-clause               29
;  :num-allocs              3645676
;  :num-checks              65
;  :propagations            36
;  :quant-instantiations    13
;  :rlimit-count            132886)
(push) ; 3
(assert (not (< $Perm.No $k@96@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               280
;  :arith-assert-diseq      14
;  :arith-assert-lower      29
;  :arith-assert-upper      29
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               42
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              24
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             454
;  :mk-clause               29
;  :num-allocs              3645676
;  :num-checks              66
;  :propagations            36
;  :quant-instantiations    13
;  :rlimit-count            132934)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@94@07))))
  diz@89@07))
(pop) ; 2
(push) ; 2
; [exec]
; var globals__108: Ref
(declare-const globals__108@97@07 $Ref)
; [exec]
; var __flatten_70__109: Ref
(declare-const __flatten_70__109@98@07 $Ref)
; [exec]
; var __flatten_71__110: Seq[Int]
(declare-const __flatten_71__110@99@07 Seq<Int>)
; [exec]
; var __flatten_72__111: Ref
(declare-const __flatten_72__111@100@07 $Ref)
; [exec]
; var __flatten_73__112: Ref
(declare-const __flatten_73__112@101@07 $Ref)
; [exec]
; var __flatten_74__113: Seq[Int]
(declare-const __flatten_74__113@102@07 Seq<Int>)
; [exec]
; var __flatten_75__114: Ref
(declare-const __flatten_75__114@103@07 $Ref)
; [exec]
; var __flatten_76__116: Ref
(declare-const __flatten_76__116@104@07 $Ref)
; [exec]
; var __flatten_77__117: Ref
(declare-const __flatten_77__117@105@07 $Ref)
; [exec]
; var __flatten_78__118: Ref
(declare-const __flatten_78__118@106@07 $Ref)
; [exec]
; var __flatten_79__119: Ref
(declare-const __flatten_79__119@107@07 $Ref)
; [exec]
; var __flatten_80__120: Ref
(declare-const __flatten_80__120@108@07 $Ref)
; [exec]
; var __flatten_81__121: Ref
(declare-const __flatten_81__121@109@07 $Ref)
; [exec]
; var __flatten_82__122: Ref
(declare-const __flatten_82__122@110@07 $Ref)
; [exec]
; var __flatten_83__123: Ref
(declare-const __flatten_83__123@111@07 $Ref)
; [exec]
; var __flatten_84__124: Ref
(declare-const __flatten_84__124@112@07 $Ref)
; [exec]
; var __flatten_85__125: Ref
(declare-const __flatten_85__125@113@07 $Ref)
; [exec]
; var __flatten_86__126: Ref
(declare-const __flatten_86__126@114@07 $Ref)
; [exec]
; var __flatten_87__127: Ref
(declare-const __flatten_87__127@115@07 $Ref)
; [exec]
; var __flatten_88__128: Int
(declare-const __flatten_88__128@116@07 Int)
; [exec]
; var __flatten_89__129: Ref
(declare-const __flatten_89__129@117@07 $Ref)
; [exec]
; var __flatten_90__130: Ref
(declare-const __flatten_90__130@118@07 $Ref)
; [exec]
; var __flatten_91__131: Ref
(declare-const __flatten_91__131@119@07 $Ref)
; [exec]
; var __flatten_92__132: Int
(declare-const __flatten_92__132@120@07 Int)
; [exec]
; var __flatten_93__133: Ref
(declare-const __flatten_93__133@121@07 $Ref)
; [exec]
; var __flatten_94__134: Ref
(declare-const __flatten_94__134@122@07 $Ref)
; [exec]
; var __flatten_95__135: Int
(declare-const __flatten_95__135@123@07 Int)
; [exec]
; var __flatten_96__136: Ref
(declare-const __flatten_96__136@124@07 $Ref)
; [exec]
; var __flatten_97__137: Ref
(declare-const __flatten_97__137@125@07 $Ref)
; [exec]
; var __flatten_98__138: Ref
(declare-const __flatten_98__138@126@07 $Ref)
; [exec]
; var __flatten_99__139: Int
(declare-const __flatten_99__139@127@07 Int)
; [exec]
; var __flatten_100__140: Int
(declare-const __flatten_100__140@128@07 Int)
; [exec]
; var __flatten_101__141: Ref
(declare-const __flatten_101__141@129@07 $Ref)
; [exec]
; var __flatten_102__142: Int
(declare-const __flatten_102__142@130@07 Int)
; [exec]
; var __flatten_103__143: Int
(declare-const __flatten_103__143@131@07 Int)
; [exec]
; var __flatten_104__144: Ref
(declare-const __flatten_104__144@132@07 $Ref)
; [exec]
; var __flatten_105__145: Int
(declare-const __flatten_105__145@133@07 Int)
; [exec]
; var __flatten_106__146: Int
(declare-const __flatten_106__146@134@07 Int)
; [exec]
; var __flatten_107__147: Ref
(declare-const __flatten_107__147@135@07 $Ref)
; [exec]
; var __flatten_108__148: Ref
(declare-const __flatten_108__148@136@07 $Ref)
; [exec]
; var __flatten_109__149: Int
(declare-const __flatten_109__149@137@07 Int)
; [exec]
; var __flatten_111__150: Int
(declare-const __flatten_111__150@138@07 Int)
; [exec]
; var __flatten_112__151: Ref
(declare-const __flatten_112__151@139@07 $Ref)
; [exec]
; var __flatten_113__152: Ref
(declare-const __flatten_113__152@140@07 $Ref)
; [exec]
; var __flatten_114__153: Int
(declare-const __flatten_114__153@141@07 Int)
; [exec]
; var __flatten_116__154: Int
(declare-const __flatten_116__154@142@07 Int)
; [exec]
; var __flatten_117__155: Ref
(declare-const __flatten_117__155@143@07 $Ref)
; [exec]
; var __flatten_118__156: Ref
(declare-const __flatten_118__156@144@07 $Ref)
; [exec]
; var __flatten_119__157: Int
(declare-const __flatten_119__157@145@07 Int)
; [exec]
; var __flatten_121__158: Ref
(declare-const __flatten_121__158@146@07 $Ref)
; [exec]
; var __flatten_122__159: Ref
(declare-const __flatten_122__159@147@07 $Ref)
; [exec]
; var __flatten_123__160: Ref
(declare-const __flatten_123__160@148@07 $Ref)
; [exec]
; var __flatten_124__161: Ref
(declare-const __flatten_124__161@149@07 $Ref)
; [exec]
; var __flatten_125__162: Int
(declare-const __flatten_125__162@150@07 Int)
; [exec]
; var __flatten_126__163: Ref
(declare-const __flatten_126__163@151@07 $Ref)
; [exec]
; var __flatten_127__164: Int
(declare-const __flatten_127__164@152@07 Int)
; [exec]
; var __flatten_128__165: Ref
(declare-const __flatten_128__165@153@07 $Ref)
; [exec]
; var __flatten_129__166: Seq[Int]
(declare-const __flatten_129__166@154@07 Seq<Int>)
; [exec]
; var __flatten_130__167: Ref
(declare-const __flatten_130__167@155@07 $Ref)
; [exec]
; var __flatten_131__168: Ref
(declare-const __flatten_131__168@156@07 $Ref)
; [exec]
; var __flatten_132__169: Seq[Int]
(declare-const __flatten_132__169@157@07 Seq<Int>)
; [exec]
; var __flatten_133__170: Ref
(declare-const __flatten_133__170@158@07 $Ref)
; [exec]
; globals__108 := __globals
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               280
;  :arith-assert-diseq      14
;  :arith-assert-lower      29
;  :arith-assert-upper      29
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               43
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 25
;  :datatype-occurs-check   42
;  :datatype-splits         13
;  :decisions               25
;  :del-clause              28
;  :final-checks            30
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             454
;  :mk-clause               29
;  :num-allocs              3645676
;  :num-checks              67
;  :propagations            36
;  :quant-instantiations    13
;  :rlimit-count            132998)
(declare-const $t@159@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               286
;  :arith-assert-diseq      14
;  :arith-assert-lower      29
;  :arith-assert-upper      29
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              28
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.88
;  :mk-bool-var             454
;  :mk-clause               29
;  :num-allocs              3645676
;  :num-checks              69
;  :propagations            36
;  :quant-instantiations    13
;  :rlimit-count            133347)
(assert (= $t@159@07 ($Snap.combine ($Snap.first $t@159@07) ($Snap.second $t@159@07))))
(assert (= ($Snap.first $t@159@07) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@159@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@159@07))
    ($Snap.second ($Snap.second $t@159@07)))))
(assert (= ($Snap.first ($Snap.second $t@159@07)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@159@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@159@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@159@07))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@159@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@160@07 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@160@07 | live]
; [else-branch: 0 | !(0 <= i@160@07) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@160@07]
(assert (<= 0 i@160@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@160@07)]
(assert (not (<= 0 i@160@07)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@160@07 < |First:(Second:(Second:(Second:($t@159@07))))| && 0 <= i@160@07 | live]
; [else-branch: 1 | !(i@160@07 < |First:(Second:(Second:(Second:($t@159@07))))| && 0 <= i@160@07) | live]
(push) ; 5
; [then-branch: 1 | i@160@07 < |First:(Second:(Second:(Second:($t@159@07))))| && 0 <= i@160@07]
(assert (and
  (<
    i@160@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
  (<= 0 i@160@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@160@07 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      16
;  :arith-assert-lower      36
;  :arith-assert-upper      32
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              28
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             486
;  :mk-clause               35
;  :num-allocs              3784656
;  :num-checks              70
;  :propagations            38
;  :quant-instantiations    19
;  :rlimit-count            134695)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@159@07))))[i@160@07] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@159@07))))[i@160@07] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@159@07))))[i@160@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
    i@160@07)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@159@07))))[i@160@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
      i@160@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@160@07 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      16
;  :arith-assert-lower      36
;  :arith-assert-upper      32
;  :arith-eq-adapter        19
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              28
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             487
;  :mk-clause               35
;  :num-allocs              3784656
;  :num-checks              71
;  :propagations            38
;  :quant-instantiations    19
;  :rlimit-count            134870)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@159@07))))[i@160@07] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@159@07))))[i@160@07]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@159@07))))[i@160@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
    i@160@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@160@07 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               336
;  :arith-assert-diseq      17
;  :arith-assert-lower      39
;  :arith-assert-upper      32
;  :arith-eq-adapter        20
;  :binary-propagations     22
;  :conflicts               44
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              28
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             490
;  :mk-clause               36
;  :num-allocs              3784656
;  :num-checks              72
;  :propagations            38
;  :quant-instantiations    19
;  :rlimit-count            134993)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@159@07))))[i@160@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
      i@160@07))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@160@07 < |First:(Second:(Second:(Second:($t@159@07))))| && 0 <= i@160@07)]
(assert (not
  (and
    (<
      i@160@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
    (<= 0 i@160@07))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@160@07 Int)) (!
  (implies
    (and
      (<
        i@160@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
      (<= 0 i@160@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
          i@160@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
            i@160@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
            i@160@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
    i@160@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))
(declare-const $k@161@07 $Perm)
(assert ($Perm.isReadVar $k@161@07 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@161@07 $Perm.No) (< $Perm.No $k@161@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               341
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      33
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               45
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             496
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              73
;  :propagations            39
;  :quant-instantiations    19
;  :rlimit-count            135762)
(assert (<= $Perm.No $k@161@07))
(assert (<= $k@161@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@161@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               347
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               46
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             499
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              74
;  :propagations            39
;  :quant-instantiations    19
;  :rlimit-count            136085)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               353
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               47
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             502
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              75
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            136441)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               358
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               48
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             503
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              76
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            136698)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               363
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               49
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             504
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              77
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            136965)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               368
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               50
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             505
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              78
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            137242)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               373
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               51
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             506
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              79
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            137529)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               378
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               52
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             507
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              80
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            137826)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               383
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               53
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             508
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              81
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            138133)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               388
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               54
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             509
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              82
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            138450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               393
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               55
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             510
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              83
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            138777)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               398
;  :arith-assert-diseq      18
;  :arith-assert-lower      41
;  :arith-assert-upper      34
;  :arith-eq-adapter        21
;  :binary-propagations     22
;  :conflicts               56
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             511
;  :mk-clause               38
;  :num-allocs              3784656
;  :num-checks              84
;  :propagations            39
;  :quant-instantiations    20
;  :rlimit-count            139114)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))
(declare-const $k@162@07 $Perm)
(assert ($Perm.isReadVar $k@162@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@162@07 $Perm.No) (< $Perm.No $k@162@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               403
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      35
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               57
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             516
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              85
;  :propagations            40
;  :quant-instantiations    20
;  :rlimit-count            139605)
(assert (<= $Perm.No $k@162@07))
(assert (<= $k@162@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@162@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               409
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               58
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             519
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              86
;  :propagations            40
;  :quant-instantiations    20
;  :rlimit-count            140048)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               415
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               59
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             522
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              87
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            140542)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               420
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               60
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             523
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              88
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            140919)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               425
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               61
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             524
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              89
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            141306)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               430
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               62
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             525
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              90
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            141703)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               435
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               63
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             526
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              91
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            142110)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               440
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               64
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             527
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              92
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            142527)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               445
;  :arith-assert-diseq      19
;  :arith-assert-lower      43
;  :arith-assert-upper      36
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               65
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             528
;  :mk-clause               40
;  :num-allocs              3784656
;  :num-checks              93
;  :propagations            40
;  :quant-instantiations    21
;  :rlimit-count            142954)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))
(declare-const $k@163@07 $Perm)
(assert ($Perm.isReadVar $k@163@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@163@07 $Perm.No) (< $Perm.No $k@163@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               450
;  :arith-assert-diseq      20
;  :arith-assert-lower      45
;  :arith-assert-upper      37
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               66
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  3.97
;  :mk-bool-var             533
;  :mk-clause               42
;  :num-allocs              3784656
;  :num-checks              94
;  :propagations            41
;  :quant-instantiations    21
;  :rlimit-count            143535)
(declare-const $t@164@07 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@93@07)
    (=
      $t@164@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@07)))))))
  (implies
    (< $Perm.No $k@163@07)
    (=
      $t@164@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@93@07 $k@163@07)))
(assert (<= (+ $k@93@07 $k@163@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@93@07 $k@163@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               460
;  :arith-assert-diseq      20
;  :arith-assert-lower      46
;  :arith-assert-upper      39
;  :arith-conflicts         1
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         1
;  :binary-propagations     22
;  :conflicts               67
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             541
;  :mk-clause               42
;  :num-allocs              3928983
;  :num-checks              95
;  :propagations            41
;  :quant-instantiations    22
;  :rlimit-count            144328)
(assert (not (= $t@164@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               466
;  :arith-assert-diseq      20
;  :arith-assert-lower      46
;  :arith-assert-upper      40
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         2
;  :binary-propagations     22
;  :conflicts               68
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             544
;  :mk-clause               42
;  :num-allocs              3928983
;  :num-checks              96
;  :propagations            41
;  :quant-instantiations    22
;  :rlimit-count            144842)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               471
;  :arith-assert-diseq      20
;  :arith-assert-lower      46
;  :arith-assert-upper      41
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               69
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             546
;  :mk-clause               42
;  :num-allocs              3928983
;  :num-checks              97
;  :propagations            41
;  :quant-instantiations    22
;  :rlimit-count            145321)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))))
(declare-const $k@165@07 $Perm)
(assert ($Perm.isReadVar $k@165@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@165@07 $Perm.No) (< $Perm.No $k@165@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               476
;  :arith-assert-diseq      21
;  :arith-assert-lower      48
;  :arith-assert-upper      42
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               70
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             551
;  :mk-clause               44
;  :num-allocs              3928983
;  :num-checks              98
;  :propagations            42
;  :quant-instantiations    22
;  :rlimit-count            145942)
(assert (<= $Perm.No $k@165@07))
(assert (<= $k@165@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@165@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@165@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               482
;  :arith-assert-diseq      21
;  :arith-assert-lower      48
;  :arith-assert-upper      43
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               71
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             554
;  :mk-clause               44
;  :num-allocs              3928983
;  :num-checks              99
;  :propagations            42
;  :quant-instantiations    22
;  :rlimit-count            146515)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@165@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               488
;  :arith-assert-diseq      21
;  :arith-assert-lower      48
;  :arith-assert-upper      43
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             557
;  :mk-clause               44
;  :num-allocs              3928983
;  :num-checks              100
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            147123)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      21
;  :arith-assert-lower      48
;  :arith-assert-upper      43
;  :arith-conflicts         3
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             558
;  :mk-clause               44
;  :num-allocs              3928983
;  :num-checks              101
;  :propagations            42
;  :quant-instantiations    23
;  :rlimit-count            147630)
(declare-const $k@166@07 $Perm)
(assert ($Perm.isReadVar $k@166@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@166@07 $Perm.No) (< $Perm.No $k@166@07))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               493
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      44
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             562
;  :mk-clause               46
;  :num-allocs              3928983
;  :num-checks              102
;  :propagations            43
;  :quant-instantiations    23
;  :rlimit-count            147829)
(assert (<= $Perm.No $k@166@07))
(assert (<= $k@166@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@166@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             564
;  :mk-clause               46
;  :num-allocs              3928983
;  :num-checks              103
;  :propagations            43
;  :quant-instantiations    23
;  :rlimit-count            148345)
(push) ; 3
(assert (not (< $Perm.No $k@166@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 27
;  :datatype-occurs-check   43
;  :datatype-splits         13
;  :decisions               27
;  :del-clause              29
;  :final-checks            31
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             564
;  :mk-clause               46
;  :num-allocs              3928983
;  :num-checks              104
;  :propagations            43
;  :quant-instantiations    23
;  :rlimit-count            148393)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@159@07 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) __globals@90@07))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               575
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 57
;  :datatype-occurs-check   51
;  :datatype-splits         40
;  :decisions               56
;  :del-clause              45
;  :final-checks            34
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.07
;  :mk-bool-var             597
;  :mk-clause               47
;  :num-allocs              3928983
;  :num-checks              106
;  :propagations            43
;  :quant-instantiations    24
;  :rlimit-count            149764)
(declare-const $t@167@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_70__109 := diz.LFSR_m
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               649
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             623
;  :mk-clause               47
;  :num-allocs              4077276
;  :num-checks              108
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            150553)
(declare-const __flatten_70__109@168@07 $Ref)
(assert (=
  __flatten_70__109@168@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))
; [exec]
; __flatten_72__111 := diz.LFSR_m
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               650
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             624
;  :mk-clause               47
;  :num-allocs              4077276
;  :num-checks              109
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            150668)
(declare-const __flatten_72__111@169@07 $Ref)
(assert (=
  __flatten_72__111@169@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))
; [exec]
; __flatten_71__110 := __flatten_72__111.Main_process_state[1 := 2]
; [eval] __flatten_72__111.Main_process_state[1 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
  __flatten_72__111@169@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             625
;  :mk-clause               47
;  :num-allocs              4077276
;  :num-checks              110
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            150716)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               651
;  :arith-assert-diseq      22
;  :arith-assert-lower      50
;  :arith-assert-upper      45
;  :arith-conflicts         3
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         3
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          1
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             625
;  :mk-clause               47
;  :num-allocs              4077276
;  :num-checks              111
;  :propagations            44
;  :quant-instantiations    24
;  :rlimit-count            150731)
(declare-const __flatten_71__110@170@07 Seq<Int>)
(assert (Seq_equal
  __flatten_71__110@170@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))
    1
    2)))
; [exec]
; __flatten_70__109.Main_process_state := __flatten_71__110
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
  __flatten_70__109@168@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               661
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      54
;  :arith-assert-upper      47
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             648
;  :mk-clause               66
;  :num-allocs              4077276
;  :num-checks              112
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            151216)
(assert (not (= __flatten_70__109@168@07 $Ref.null)))
; [exec]
; __flatten_73__112 := diz.LFSR_m
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               662
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      54
;  :arith-assert-upper      47
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             649
;  :mk-clause               66
;  :num-allocs              4077276
;  :num-checks              113
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            151320)
(declare-const __flatten_73__112@171@07 $Ref)
(assert (=
  __flatten_73__112@171@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))
; [exec]
; __flatten_75__114 := diz.LFSR_m
(push) ; 3
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               663
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      54
;  :arith-assert-upper      47
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             650
;  :mk-clause               66
;  :num-allocs              4077276
;  :num-checks              114
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            151405)
(declare-const __flatten_75__114@172@07 $Ref)
(assert (=
  __flatten_75__114@172@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))
; [exec]
; __flatten_74__113 := __flatten_75__114.Main_event_state[2 := 2]
; [eval] __flatten_75__114.Main_event_state[2 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
  __flatten_75__114@172@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               664
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      54
;  :arith-assert-upper      47
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             651
;  :mk-clause               66
;  :num-allocs              4077276
;  :num-checks              115
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            151453)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               664
;  :arith-add-rows          3
;  :arith-assert-diseq      23
;  :arith-assert-lower      54
;  :arith-assert-upper      47
;  :arith-conflicts         3
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         5
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             651
;  :mk-clause               66
;  :num-allocs              4077276
;  :num-checks              116
;  :propagations            53
;  :quant-instantiations    29
;  :rlimit-count            151468)
(declare-const __flatten_74__113@173@07 Seq<Int>)
(assert (Seq_equal
  __flatten_74__113@173@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))
    2
    2)))
; [exec]
; __flatten_73__112.Main_event_state := __flatten_74__113
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
  __flatten_73__112@171@07)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               674
;  :arith-add-rows          6
;  :arith-assert-diseq      24
;  :arith-assert-lower      58
;  :arith-assert-upper      49
;  :arith-conflicts         3
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             674
;  :mk-clause               85
;  :num-allocs              4077276
;  :num-checks              117
;  :propagations            62
;  :quant-instantiations    34
;  :rlimit-count            151974)
(assert (not (= __flatten_73__112@171@07 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@174@07 $Snap)
(assert (= $t@174@07 ($Snap.combine ($Snap.first $t@174@07) ($Snap.second $t@174@07))))
(declare-const $k@175@07 $Perm)
(assert ($Perm.isReadVar $k@175@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@175@07 $Perm.No) (< $Perm.No $k@175@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               679
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      60
;  :arith-assert-upper      50
;  :arith-conflicts         3
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             679
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              118
;  :propagations            63
;  :quant-instantiations    34
;  :rlimit-count            152285)
(assert (<= $Perm.No $k@175@07))
(assert (<= $k@175@07 $Perm.Write))
(assert (implies (< $Perm.No $k@175@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@174@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@174@07))
    ($Snap.second ($Snap.second $t@174@07)))))
(assert (= ($Snap.first ($Snap.second $t@174@07)) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               685
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         3
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             682
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              119
;  :propagations            63
;  :quant-instantiations    34
;  :rlimit-count            152528)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@174@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@174@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               691
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         3
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             685
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              120
;  :propagations            63
;  :quant-instantiations    35
;  :rlimit-count            152800)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@174@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         3
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             686
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              121
;  :propagations            63
;  :quant-instantiations    35
;  :rlimit-count            152977)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         3
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             688
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              122
;  :propagations            63
;  :quant-instantiations    35
;  :rlimit-count            153196)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               709
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      62
;  :arith-assert-upper      52
;  :arith-conflicts         3
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             694
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              123
;  :propagations            63
;  :quant-instantiations    37
;  :rlimit-count            153525)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               715
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      62
;  :arith-assert-upper      52
;  :arith-conflicts         3
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.18
;  :memory                  4.18
;  :mk-bool-var             696
;  :mk-clause               87
;  :num-allocs              4077276
;  :num-checks              124
;  :propagations            63
;  :quant-instantiations    37
;  :rlimit-count            153764)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  $Snap.unit))
; [eval] (forall i__115: Int :: { diz.LFSR_m.Main_process_state[i__115] } 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|)
(declare-const i__115@176@07 Int)
(push) ; 4
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__115
(push) ; 5
; [then-branch: 4 | 0 <= i__115@176@07 | live]
; [else-branch: 4 | !(0 <= i__115@176@07) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__115@176@07]
(assert (<= 0 i__115@176@07))
; [eval] i__115 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      65
;  :arith-assert-upper      53
;  :arith-conflicts         3
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             704
;  :mk-clause               87
;  :num-allocs              4228682
;  :num-checks              125
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154203)
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__115@176@07)]
(assert (not (<= 0 i__115@176@07)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__115@176@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__115@176@07 | live]
; [else-branch: 5 | !(i__115@176@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__115@176@07) | live]
(push) ; 6
; [then-branch: 5 | i__115@176@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__115@176@07]
(assert (and
  (<
    i__115@176@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  (<= 0 i__115@176@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1
; [eval] diz.LFSR_m.Main_process_state[i__115]
(push) ; 7
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             706
;  :mk-clause               87
;  :num-allocs              4228682
;  :num-checks              126
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154360)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__115@176@07 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             706
;  :mk-clause               87
;  :num-allocs              4228682
;  :num-checks              127
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154369)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__115@176@07)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i__115@176@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115]
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             707
;  :mk-clause               87
;  :num-allocs              4228682
;  :num-checks              128
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154583)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__115@176@07 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      66
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             707
;  :mk-clause               87
;  :num-allocs              4228682
;  :num-checks              129
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154592)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__115@176@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             710
;  :mk-clause               88
;  :num-allocs              4228682
;  :num-checks              130
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154754)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__115@176@07 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             710
;  :mk-clause               88
;  :num-allocs              4228682
;  :num-checks              131
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154763)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               723
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              45
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             710
;  :mk-clause               88
;  :num-allocs              4228682
;  :num-checks              132
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            154811)
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i__115@176@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i__115@176@07))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__115@176@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__115@176@07)]
(assert (not
  (and
    (<
      i__115@176@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
    (<= 0 i__115@176@07))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__115@176@07 Int)) (!
  (implies
    (and
      (<
        i__115@176@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i__115@176@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i__115@176@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__115@176@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__115@176@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__115@176@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               728
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      69
;  :arith-assert-upper      54
;  :arith-conflicts         3
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             712
;  :mk-clause               88
;  :num-allocs              4228682
;  :num-checks              133
;  :propagations            63
;  :quant-instantiations    39
;  :rlimit-count            155436)
(declare-const $k@177@07 $Perm)
(assert ($Perm.isReadVar $k@177@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@177@07 $Perm.No) (< $Perm.No $k@177@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               728
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      55
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             716
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              134
;  :propagations            64
;  :quant-instantiations    39
;  :rlimit-count            155635)
(assert (<= $Perm.No $k@177@07))
(assert (<= $k@177@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@177@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               734
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             719
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              135
;  :propagations            64
;  :quant-instantiations    39
;  :rlimit-count            155958)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               734
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             719
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              136
;  :propagations            64
;  :quant-instantiations    39
;  :rlimit-count            156006)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             722
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              137
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            156362)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               740
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             722
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              138
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            156410)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               745
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             723
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              139
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            156667)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               745
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             723
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              140
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            156715)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               750
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             724
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              141
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            156982)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               750
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             724
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              142
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157030)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             725
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              143
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157307)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             725
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              144
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157355)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             726
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              145
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157642)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               760
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             726
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              146
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157690)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               765
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             727
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              147
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            157987)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               765
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             727
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              148
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            158035)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               770
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             728
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              149
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            158342)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               770
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             728
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              150
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            158390)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               775
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             729
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              151
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            158707)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               775
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             729
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              152
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            158755)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             730
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              153
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            159082)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             730
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              154
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            159130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               785
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             731
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              155
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            159467)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               785
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             731
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              156
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            159515)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               790
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      71
;  :arith-assert-upper      56
;  :arith-conflicts         3
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             732
;  :mk-clause               90
;  :num-allocs              4228682
;  :num-checks              157
;  :propagations            64
;  :quant-instantiations    40
;  :rlimit-count            159862)
(declare-const $k@178@07 $Perm)
(assert ($Perm.isReadVar $k@178@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@178@07 $Perm.No) (< $Perm.No $k@178@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               790
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      57
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             736
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              158
;  :propagations            65
;  :quant-instantiations    40
;  :rlimit-count            160060)
(assert (<= $Perm.No $k@178@07))
(assert (<= $k@178@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@178@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               796
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             739
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              159
;  :propagations            65
;  :quant-instantiations    40
;  :rlimit-count            160503)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               796
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             739
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              160
;  :propagations            65
;  :quant-instantiations    40
;  :rlimit-count            160551)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               802
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             742
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              161
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161045)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               802
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             742
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              162
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161093)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               807
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             743
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              163
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161470)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               807
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             743
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              164
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161518)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             744
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              165
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161905)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               812
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             744
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              166
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            161953)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               817
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             745
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              167
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            162350)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               817
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             745
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              168
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            162398)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               822
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             746
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              169
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            162805)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               822
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               132
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             746
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              170
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            162853)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               827
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             747
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              171
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            163270)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               827
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             747
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              172
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            163318)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             748
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              173
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            163745)
(push) ; 4
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               832
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             748
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              174
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            163793)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               837
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      73
;  :arith-assert-upper      58
;  :arith-conflicts         3
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             749
;  :mk-clause               92
;  :num-allocs              4228682
;  :num-checks              175
;  :propagations            65
;  :quant-instantiations    41
;  :rlimit-count            164230)
(declare-const $k@179@07 $Perm)
(assert ($Perm.isReadVar $k@179@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@179@07 $Perm.No) (< $Perm.No $k@179@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               837
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      59
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             753
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              176
;  :propagations            66
;  :quant-instantiations    41
;  :rlimit-count            164429)
(assert (<= $Perm.No $k@179@07))
(assert (<= $k@179@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@179@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               843
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             756
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              177
;  :propagations            66
;  :quant-instantiations    41
;  :rlimit-count            164962)
(push) ; 4
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               843
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             756
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              178
;  :propagations            66
;  :quant-instantiations    41
;  :rlimit-count            165010)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               849
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             759
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              179
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            165588)
(push) ; 4
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               849
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             759
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              180
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            165636)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               854
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             760
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              181
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            166103)
(push) ; 4
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               854
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.28
;  :memory                  4.28
;  :mk-bool-var             760
;  :mk-clause               94
;  :num-allocs              4228682
;  :num-checks              182
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            166151)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               859
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      75
;  :arith-assert-upper      60
;  :arith-conflicts         3
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             761
;  :mk-clause               94
;  :num-allocs              4388752
;  :num-checks              183
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            166628)
(declare-const $k@180@07 $Perm)
(assert ($Perm.isReadVar $k@180@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@180@07 $Perm.No) (< $Perm.No $k@180@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               859
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      61
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             765
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              184
;  :propagations            67
;  :quant-instantiations    42
;  :rlimit-count            166826)
(assert (<= $Perm.No $k@180@07))
(assert (<= $k@180@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@180@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             768
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              185
;  :propagations            67
;  :quant-instantiations    42
;  :rlimit-count            167399)
(push) ; 4
(assert (not (< $Perm.No $k@180@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               865
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             768
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              186
;  :propagations            67
;  :quant-instantiations    42
;  :rlimit-count            167447)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               871
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             771
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              187
;  :propagations            67
;  :quant-instantiations    43
;  :rlimit-count            168055)
(push) ; 4
(assert (not (< $Perm.No $k@180@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               871
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             771
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              188
;  :propagations            67
;  :quant-instantiations    43
;  :rlimit-count            168103)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             772
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              189
;  :propagations            67
;  :quant-instantiations    43
;  :rlimit-count            168610)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      77
;  :arith-assert-upper      62
;  :arith-conflicts         3
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             772
;  :mk-clause               96
;  :num-allocs              4388752
;  :num-checks              190
;  :propagations            67
;  :quant-instantiations    43
;  :rlimit-count            168658)
(declare-const $k@181@07 $Perm)
(assert ($Perm.isReadVar $k@181@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@181@07 $Perm.No) (< $Perm.No $k@181@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               876
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      63
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             776
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              191
;  :propagations            68
;  :quant-instantiations    43
;  :rlimit-count            168857)
(assert (<= $Perm.No $k@181@07))
(assert (<= $k@181@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@181@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             779
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              192
;  :propagations            68
;  :quant-instantiations    43
;  :rlimit-count            169460)
(push) ; 4
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             779
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              193
;  :propagations            68
;  :quant-instantiations    43
;  :rlimit-count            169508)
(push) ; 4
(assert (not (< $Perm.No $k@181@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             779
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              194
;  :propagations            68
;  :quant-instantiations    43
;  :rlimit-count            169556)
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               882
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             779
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              195
;  :propagations            68
;  :quant-instantiations    43
;  :rlimit-count            169604)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 4
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             782
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              196
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170187)
(push) ; 4
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               886
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             782
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              197
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170235)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  diz@89@07))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 5
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               889
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             783
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              198
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170641)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               889
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             783
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              199
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170656)
; [eval] -1
(push) ; 5
; [then-branch: 8 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 | live]
; [else-branch: 8 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1 | live]
(push) ; 6
; [then-branch: 8 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 8 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             784
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              200
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170851)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             784
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              201
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170866)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             784
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              202
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170919)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               890
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             784
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              203
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            170934)
; [eval] -1
(push) ; 5
; [then-branch: 9 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 | live]
; [else-branch: 9 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1 | live]
(push) ; 6
; [then-branch: 9 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 9 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             785
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              204
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            171125)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      79
;  :arith-assert-upper      64
;  :arith-conflicts         3
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              46
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             785
;  :mk-clause               98
;  :num-allocs              4388752
;  :num-checks              205
;  :propagations            68
;  :quant-instantiations    44
;  :rlimit-count            171140)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@182@07 $Perm)
(assert ($Perm.isReadVar $k@182@07 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@182@07 $Perm.No) (< $Perm.No $k@182@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      81
;  :arith-assert-upper      65
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             789
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              206
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171344)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@92@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      81
;  :arith-assert-upper      65
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             789
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              207
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171355)
(assert (< $k@182@07 $k@92@07))
(assert (<= $Perm.No (- $k@92@07 $k@182@07)))
(assert (<= (- $k@92@07 $k@182@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@92@07 $k@182@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      83
;  :arith-assert-upper      66
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             792
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              208
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171569)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      83
;  :arith-assert-upper      66
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             792
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              209
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171617)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      83
;  :arith-assert-upper      66
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             792
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              210
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171665)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      83
;  :arith-assert-upper      66
;  :arith-conflicts         3
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             792
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              211
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171713)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_71__110@170@07) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               891
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      83
;  :arith-assert-upper      66
;  :arith-conflicts         3
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             795
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              212
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171787)
(assert (= (Seq_length __flatten_71__110@170@07) 3))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         3
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             798
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              213
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171886)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         3
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             798
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              214
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            171934)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_74__113@173@07) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               892
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      84
;  :arith-assert-upper      67
;  :arith-conflicts         3
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             801
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              215
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            172008)
(assert (= (Seq_length __flatten_74__113@173@07) 6))
; [eval] (forall i__115: Int :: { diz.LFSR_m.Main_process_state[i__115] } 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|)
(declare-const i__115@183@07 Int)
(push) ; 4
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__115
(push) ; 5
; [then-branch: 10 | 0 <= i__115@183@07 | live]
; [else-branch: 10 | !(0 <= i__115@183@07) | live]
(push) ; 6
; [then-branch: 10 | 0 <= i__115@183@07]
(assert (<= 0 i__115@183@07))
; [eval] i__115 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               893
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      86
;  :arith-assert-upper      68
;  :arith-conflicts         3
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             805
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              216
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            172159)
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(0 <= i__115@183@07)]
(assert (not (<= 0 i__115@183@07)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 11 | i__115@183@07 < |__flatten_71__110@170@07| && 0 <= i__115@183@07 | live]
; [else-branch: 11 | !(i__115@183@07 < |__flatten_71__110@170@07| && 0 <= i__115@183@07) | live]
(push) ; 6
; [then-branch: 11 | i__115@183@07 < |__flatten_71__110@170@07| && 0 <= i__115@183@07]
(assert (and
  (< i__115@183@07 (Seq_length __flatten_71__110@170@07))
  (<= 0 i__115@183@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1
; [eval] diz.LFSR_m.Main_process_state[i__115]
(push) ; 7
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               893
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             807
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              217
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            172316)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__115@183@07 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               893
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             807
;  :mk-clause               100
;  :num-allocs              4388752
;  :num-checks              218
;  :propagations            69
;  :quant-instantiations    44
;  :rlimit-count            172325)
; [eval] -1
(push) ; 7
; [then-branch: 12 | __flatten_71__110@170@07[i__115@183@07] == -1 | live]
; [else-branch: 12 | __flatten_71__110@170@07[i__115@183@07] != -1 | live]
(push) ; 8
; [then-branch: 12 | __flatten_71__110@170@07[i__115@183@07] == -1]
(assert (= (Seq_index __flatten_71__110@170@07 i__115@183@07) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 12 | __flatten_71__110@170@07[i__115@183@07] != -1]
(assert (not (= (Seq_index __flatten_71__110@170@07 i__115@183@07) (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115]
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             815
;  :mk-clause               110
;  :num-allocs              4388752
;  :num-checks              219
;  :propagations            69
;  :quant-instantiations    45
;  :rlimit-count            172527)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__115@183@07 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             815
;  :mk-clause               110
;  :num-allocs              4388752
;  :num-checks              220
;  :propagations            69
;  :quant-instantiations    45
;  :rlimit-count            172536)
(push) ; 9
; [then-branch: 13 | 0 <= __flatten_71__110@170@07[i__115@183@07] | live]
; [else-branch: 13 | !(0 <= __flatten_71__110@170@07[i__115@183@07]) | live]
(push) ; 10
; [then-branch: 13 | 0 <= __flatten_71__110@170@07[i__115@183@07]]
(assert (<= 0 (Seq_index __flatten_71__110@170@07 i__115@183@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      90
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             818
;  :mk-clause               111
;  :num-allocs              4388752
;  :num-checks              221
;  :propagations            69
;  :quant-instantiations    45
;  :rlimit-count            172649)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__115@183@07 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      90
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             818
;  :mk-clause               111
;  :num-allocs              4388752
;  :num-checks              222
;  :propagations            69
;  :quant-instantiations    45
;  :rlimit-count            172658)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      90
;  :arith-assert-upper      69
;  :arith-conflicts         3
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         7
;  :arith-pivots            5
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 86
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               84
;  :del-clause              58
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             818
;  :mk-clause               111
;  :num-allocs              4388752
;  :num-checks              223
;  :propagations            69
;  :quant-instantiations    45
;  :rlimit-count            172706)
(pop) ; 10
(push) ; 10
; [else-branch: 13 | !(0 <= __flatten_71__110@170@07[i__115@183@07])]
(assert (not (<= 0 (Seq_index __flatten_71__110@170@07 i__115@183@07))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 11 | !(i__115@183@07 < |__flatten_71__110@170@07| && 0 <= i__115@183@07)]
(assert (not
  (and
    (< i__115@183@07 (Seq_length __flatten_71__110@170@07))
    (<= 0 i__115@183@07))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__115@183@07 Int)) (!
  (implies
    (and
      (< i__115@183@07 (Seq_length __flatten_71__110@170@07))
      (<= 0 i__115@183@07))
    (or
      (= (Seq_index __flatten_71__110@170@07 i__115@183@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_71__110@170@07 i__115@183@07)
          (Seq_length __flatten_74__113@173@07))
        (<= 0 (Seq_index __flatten_71__110@170@07 i__115@183@07)))))
  :pattern ((Seq_index __flatten_71__110@170@07 i__115@183@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      38
;  :arith-assert-lower      104
;  :arith-assert-upper      78
;  :arith-conflicts         5
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         9
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             856
;  :mk-clause               158
;  :num-allocs              4388752
;  :num-checks              224
;  :propagations            99
;  :quant-instantiations    48
;  :rlimit-count            173332)
(assert (forall ((i__115@183@07 Int)) (!
  (implies
    (and
      (< i__115@183@07 (Seq_length __flatten_71__110@170@07))
      (<= 0 i__115@183@07))
    (or
      (= (Seq_index __flatten_71__110@170@07 i__115@183@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_71__110@170@07 i__115@183@07)
          (Seq_length __flatten_74__113@173@07))
        (<= 0 (Seq_index __flatten_71__110@170@07 i__115@183@07)))))
  :pattern ((Seq_index __flatten_71__110@170@07 i__115@183@07))
  :qid |prog.l<no position>|)))
(declare-const $k@184@07 $Perm)
(assert ($Perm.isReadVar $k@184@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      106
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             861
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              225
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            173800)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@184@07 $Perm.No) (< $Perm.No $k@184@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      106
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             861
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              226
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            173850)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@161@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      106
;  :arith-assert-upper      79
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             861
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              227
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            173861)
(assert (< $k@184@07 $k@161@07))
(assert (<= $Perm.No (- $k@161@07 $k@184@07)))
(assert (<= (- $k@161@07 $k@184@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@161@07 $k@184@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              228
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174081)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              229
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174129)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              230
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174177)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              231
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174225)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              232
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174273)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              233
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174321)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              234
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174369)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              235
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174417)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              236
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174465)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              237
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174513)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              238
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174561)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              239
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174609)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              240
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174657)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              241
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174705)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              242
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174753)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              243
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174801)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              244
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174849)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              245
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174897)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              246
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174945)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              247
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            174993)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              248
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            175041)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      108
;  :arith-assert-upper      80
;  :arith-conflicts         5
;  :arith-eq-adapter        56
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             864
;  :mk-clause               160
;  :num-allocs              4388752
;  :num-checks              249
;  :propagations            100
;  :quant-instantiations    48
;  :rlimit-count            175089)
(declare-const $k@185@07 $Perm)
(assert ($Perm.isReadVar $k@185@07 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      110
;  :arith-assert-upper      81
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             868
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              250
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175285)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@185@07 $Perm.No) (< $Perm.No $k@185@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      110
;  :arith-assert-upper      81
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             868
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              251
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175335)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@162@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      110
;  :arith-assert-upper      81
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             868
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              252
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175346)
(assert (< $k@185@07 $k@162@07))
(assert (<= $Perm.No (- $k@162@07 $k@185@07)))
(assert (<= (- $k@162@07 $k@185@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@162@07 $k@185@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              253
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175566)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              254
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175614)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              255
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175662)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              256
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175710)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              257
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175758)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              258
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175806)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              259
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175854)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              260
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175902)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              261
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175950)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              262
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            175998)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              263
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176046)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              264
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176094)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              265
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176142)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              266
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176190)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              267
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176238)
(push) ; 4
(assert (not (< $Perm.No $k@162@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      112
;  :arith-assert-upper      82
;  :arith-conflicts         5
;  :arith-eq-adapter        57
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             871
;  :mk-clause               162
;  :num-allocs              4388752
;  :num-checks              268
;  :propagations            101
;  :quant-instantiations    48
;  :rlimit-count            176286)
(declare-const $k@186@07 $Perm)
(assert ($Perm.isReadVar $k@186@07 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      114
;  :arith-assert-upper      83
;  :arith-conflicts         5
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             875
;  :mk-clause               164
;  :num-allocs              4388752
;  :num-checks              269
;  :propagations            102
;  :quant-instantiations    48
;  :rlimit-count            176483)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@186@07 $Perm.No) (< $Perm.No $k@186@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               912
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      114
;  :arith-assert-upper      83
;  :arith-conflicts         5
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              116
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             875
;  :mk-clause               164
;  :num-allocs              4388752
;  :num-checks              270
;  :propagations            102
;  :quant-instantiations    48
;  :rlimit-count            176533)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@93@07 $k@163@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      114
;  :arith-assert-upper      84
;  :arith-conflicts         6
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             877
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              271
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            176593)
(assert (< $k@186@07 (+ $k@93@07 $k@163@07)))
(assert (<= $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07)))
(assert (<= (- (+ $k@93@07 $k@163@07) $k@186@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      85
;  :arith-conflicts         6
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         9
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             880
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              272
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            176809)
(push) ; 4
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      86
;  :arith-conflicts         7
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             881
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              273
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            176869)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      86
;  :arith-conflicts         7
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         10
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             881
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              274
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            176917)
(push) ; 4
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             882
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              275
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            176977)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      87
;  :arith-conflicts         8
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         11
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               233
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             882
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              276
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            177025)
(push) ; 4
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      116
;  :arith-assert-upper      88
;  :arith-conflicts         9
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               234
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             883
;  :mk-clause               166
;  :num-allocs              4388752
;  :num-checks              277
;  :propagations            103
;  :quant-instantiations    48
;  :rlimit-count            177085)
(declare-const $k@187@07 $Perm)
(assert ($Perm.isReadVar $k@187@07 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      118
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               235
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             887
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              278
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177281)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@187@07 $Perm.No) (< $Perm.No $k@187@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      118
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             887
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              279
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177331)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@165@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      118
;  :arith-assert-upper      89
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               236
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             887
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              280
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177342)
(assert (< $k@187@07 $k@165@07))
(assert (<= $Perm.No (- $k@165@07 $k@187@07)))
(assert (<= (- $k@165@07 $k@187@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@165@07 $k@187@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      90
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               237
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             890
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              281
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177562)
(push) ; 4
(assert (not (< $Perm.No $k@165@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      90
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             890
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              282
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177610)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      90
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             890
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              283
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177658)
(push) ; 4
(assert (not (< $Perm.No $k@165@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      120
;  :arith-assert-upper      90
;  :arith-conflicts         9
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             890
;  :mk-clause               168
;  :num-allocs              4388752
;  :num-checks              284
;  :propagations            104
;  :quant-instantiations    48
;  :rlimit-count            177706)
(declare-const $k@188@07 $Perm)
(assert ($Perm.isReadVar $k@188@07 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      122
;  :arith-assert-upper      91
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             894
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              285
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            177903)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      122
;  :arith-assert-upper      91
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             894
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              286
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            177951)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@188@07 $Perm.No) (< $Perm.No $k@188@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      122
;  :arith-assert-upper      91
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             894
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              287
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178001)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@166@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      122
;  :arith-assert-upper      91
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             894
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              288
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178012)
(assert (< $k@188@07 $k@166@07))
(assert (<= $Perm.No (- $k@166@07 $k@188@07)))
(assert (<= (- $k@166@07 $k@188@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@166@07 $k@188@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              289
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178226)
(push) ; 4
(assert (not (< $Perm.No $k@161@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              290
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178274)
(push) ; 4
(assert (not (< $Perm.No $k@166@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              291
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178322)
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              292
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178370)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 4
(assert (not (< $Perm.No $k@92@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         9
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         12
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             897
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              293
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178418)
(push) ; 4
(assert (not (< $Perm.No (+ $k@93@07 $k@163@07))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      93
;  :arith-conflicts         10
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             898
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              294
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178478)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@164@07 diz@89@07)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               913
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      124
;  :arith-assert-upper      93
;  :arith-conflicts         10
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   59
;  :datatype-splits         67
;  :decisions               89
;  :del-clause              118
;  :final-checks            37
;  :max-generation          2
;  :max-memory              4.37
;  :memory                  4.37
;  :mk-bool-var             898
;  :mk-clause               170
;  :num-allocs              4388752
;  :num-checks              295
;  :propagations            105
;  :quant-instantiations    48
;  :rlimit-count            178534)
(assert (= $t@164@07 diz@89@07))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@175@07 $Perm.Write))
(assert ($Perm.isReadVar $k@177@07 $Perm.Write))
(assert ($Perm.isReadVar $k@178@07 $Perm.Write))
(assert ($Perm.isReadVar $k@179@07 $Perm.Write))
(assert ($Perm.isReadVar $k@180@07 $Perm.Write))
(assert ($Perm.isReadVar $k@181@07 $Perm.Write))
(assert (= $t@174@07 ($Snap.combine ($Snap.first $t@174@07) ($Snap.second $t@174@07))))
(assert (<= $Perm.No $k@175@07))
(assert (<= $k@175@07 $Perm.Write))
(assert (implies (< $Perm.No $k@175@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@174@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@174@07))
    ($Snap.second ($Snap.second $t@174@07)))))
(assert (= ($Snap.first ($Snap.second $t@174@07)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@174@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@174@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@174@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  $Snap.unit))
(assert (forall ((i__115@176@07 Int)) (!
  (implies
    (and
      (<
        i__115@176@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i__115@176@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i__115@176@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__115@176@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__115@176@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__115@176@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
(assert (<= $Perm.No $k@177@07))
(assert (<= $k@177@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@177@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
(assert (<= $Perm.No $k@178@07))
(assert (<= $k@178@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@178@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@179@07))
(assert (<= $k@179@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@179@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@180@07))
(assert (<= $k@180@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@180@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@181@07))
(assert (<= $k@181@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@181@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  diz@89@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 5
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1545
;  :arith-add-rows          6
;  :arith-assert-diseq      49
;  :arith-assert-lower      140
;  :arith-assert-upper      107
;  :arith-conflicts         10
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 230
;  :datatype-occurs-check   77
;  :datatype-splits         179
;  :decisions               227
;  :del-clause              132
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1111
;  :mk-clause               185
;  :num-allocs              4738716
;  :num-checks              298
;  :propagations            114
;  :quant-instantiations    58
;  :rlimit-count            187302)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1545
;  :arith-add-rows          6
;  :arith-assert-diseq      49
;  :arith-assert-lower      140
;  :arith-assert-upper      107
;  :arith-conflicts         10
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 230
;  :datatype-occurs-check   77
;  :datatype-splits         179
;  :decisions               227
;  :del-clause              132
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1111
;  :mk-clause               185
;  :num-allocs              4738716
;  :num-checks              299
;  :propagations            114
;  :quant-instantiations    58
;  :rlimit-count            187317)
; [eval] -1
(push) ; 5
; [then-branch: 14 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 | live]
; [else-branch: 14 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1 | live]
(push) ; 6
; [then-branch: 14 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1546
;  :arith-add-rows          6
;  :arith-assert-diseq      49
;  :arith-assert-lower      140
;  :arith-assert-upper      107
;  :arith-conflicts         10
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 230
;  :datatype-occurs-check   77
;  :datatype-splits         179
;  :decisions               227
;  :del-clause              132
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1112
;  :mk-clause               185
;  :num-allocs              4738716
;  :num-checks              300
;  :propagations            114
;  :quant-instantiations    58
;  :rlimit-count            187508)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1546
;  :arith-add-rows          6
;  :arith-assert-diseq      49
;  :arith-assert-lower      140
;  :arith-assert-upper      107
;  :arith-conflicts         10
;  :arith-eq-adapter        69
;  :arith-fixed-eqs         13
;  :arith-pivots            15
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 230
;  :datatype-occurs-check   77
;  :datatype-splits         179
;  :decisions               227
;  :del-clause              132
;  :final-checks            43
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1112
;  :mk-clause               185
;  :num-allocs              4738716
;  :num-checks              301
;  :propagations            114
;  :quant-instantiations    58
;  :rlimit-count            187523)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1727
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      147
;  :arith-assert-upper      110
;  :arith-conflicts         10
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 288
;  :datatype-occurs-check   86
;  :datatype-splits         235
;  :decisions               284
;  :del-clause              143
;  :final-checks            46
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1183
;  :mk-clause               196
;  :num-allocs              4738716
;  :num-checks              302
;  :propagations            121
;  :quant-instantiations    60
;  :rlimit-count            189182
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      147
;  :arith-assert-upper      110
;  :arith-conflicts         10
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1240
;  :mk-clause               196
;  :num-allocs              4738716
;  :num-checks              303
;  :propagations            123
;  :quant-instantiations    60
;  :rlimit-count            190654
;  :time                    0.00)
; [then-branch: 15 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2 | live]
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2) | live]
(push) ; 5
; [then-branch: 15 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
        2)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      147
;  :arith-assert-upper      110
;  :arith-conflicts         10
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1242
;  :mk-clause               197
;  :num-allocs              4738716
;  :num-checks              304
;  :propagations            123
;  :quant-instantiations    60
;  :rlimit-count            190932)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      147
;  :arith-assert-upper      110
;  :arith-conflicts         10
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1242
;  :mk-clause               197
;  :num-allocs              4738716
;  :num-checks              305
;  :propagations            123
;  :quant-instantiations    60
;  :rlimit-count            190980)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@189@07 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 16 | 0 <= i@189@07 | live]
; [else-branch: 16 | !(0 <= i@189@07) | live]
(push) ; 8
; [then-branch: 16 | 0 <= i@189@07]
(assert (<= 0 i@189@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 16 | !(0 <= i@189@07)]
(assert (not (<= 0 i@189@07)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 17 | i@189@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i@189@07 | live]
; [else-branch: 17 | !(i@189@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i@189@07) | live]
(push) ; 8
; [then-branch: 17 | i@189@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i@189@07]
(assert (and
  (<
    i@189@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  (<= 0 i@189@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@189@07 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      51
;  :arith-assert-lower      148
;  :arith-assert-upper      111
;  :arith-conflicts         10
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1244
;  :mk-clause               197
;  :num-allocs              4738716
;  :num-checks              306
;  :propagations            123
;  :quant-instantiations    60
;  :rlimit-count            191116)
; [eval] -1
(push) ; 9
; [then-branch: 18 | First:(Second:(Second:(Second:($t@174@07))))[i@189@07] == -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@174@07))))[i@189@07] != -1 | live]
(push) ; 10
; [then-branch: 18 | First:(Second:(Second:(Second:($t@174@07))))[i@189@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i@189@07)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 18 | First:(Second:(Second:(Second:($t@174@07))))[i@189@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i@189@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@189@07 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      151
;  :arith-assert-upper      112
;  :arith-conflicts         10
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1250
;  :mk-clause               201
;  :num-allocs              4738716
;  :num-checks              307
;  :propagations            125
;  :quant-instantiations    61
;  :rlimit-count            191348)
(push) ; 11
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i@189@07] | live]
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i@189@07]) | live]
(push) ; 12
; [then-branch: 19 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i@189@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i@189@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@189@07 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      52
;  :arith-assert-lower      151
;  :arith-assert-upper      112
;  :arith-conflicts         10
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              143
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1250
;  :mk-clause               201
;  :num-allocs              4738716
;  :num-checks              308
;  :propagations            125
;  :quant-instantiations    61
;  :rlimit-count            191462)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 19 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i@189@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i@189@07))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(i@189@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i@189@07)]
(assert (not
  (and
    (<
      i@189@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
    (<= 0 i@189@07))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@189@07 Int)) (!
  (implies
    (and
      (<
        i@189@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i@189@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i@189@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i@189@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i@189@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i@189@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      54
;  :arith-assert-lower      152
;  :arith-assert-upper      113
;  :arith-conflicts         10
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1258
;  :mk-clause               215
;  :num-allocs              4738716
;  :num-checks              309
;  :propagations            127
;  :quant-instantiations    62
;  :rlimit-count            191908)
(assert (forall ((i@189@07 Int)) (!
  (implies
    (and
      (<
        i@189@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i@189@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i@189@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i@189@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i@189@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i@189@07))
  :qid |prog.l<no position>|)))
(declare-const $k@190@07 $Perm)
(assert ($Perm.isReadVar $k@190@07 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@190@07 $Perm.No) (< $Perm.No $k@190@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      154
;  :arith-assert-upper      114
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1263
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              310
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192469)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@177@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      154
;  :arith-assert-upper      114
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1263
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              311
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192480)
(assert (< $k@190@07 $k@177@07))
(assert (<= $Perm.No (- $k@177@07 $k@190@07)))
(assert (<= (- $k@177@07 $k@190@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@177@07 $k@190@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              312
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192688)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              313
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192736)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              314
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192784)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              315
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192832)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              316
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192880)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              317
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192928)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              318
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            192976)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              319
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            193024)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              320
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            193072)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              321
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            193120)
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      55
;  :arith-assert-lower      156
;  :arith-assert-upper      115
;  :arith-conflicts         10
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1266
;  :mk-clause               217
;  :num-allocs              4738716
;  :num-checks              322
;  :propagations            128
;  :quant-instantiations    62
;  :rlimit-count            193168)
(declare-const $k@191@07 $Perm)
(assert ($Perm.isReadVar $k@191@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@191@07 $Perm.No) (< $Perm.No $k@191@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      158
;  :arith-assert-upper      116
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1270
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              323
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193367)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@178@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      158
;  :arith-assert-upper      116
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            17
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1270
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              324
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193378)
(assert (< $k@191@07 $k@178@07))
(assert (<= $Perm.No (- $k@178@07 $k@191@07)))
(assert (<= (- $k@178@07 $k@191@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@178@07 $k@191@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              325
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193592)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              326
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193640)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              327
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193688)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              328
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193736)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              329
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193784)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              330
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193832)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              331
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193880)
(push) ; 6
(assert (not (< $Perm.No $k@178@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      56
;  :arith-assert-lower      160
;  :arith-assert-upper      117
;  :arith-conflicts         10
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1273
;  :mk-clause               219
;  :num-allocs              4738716
;  :num-checks              332
;  :propagations            129
;  :quant-instantiations    62
;  :rlimit-count            193928)
(declare-const $k@192@07 $Perm)
(assert ($Perm.isReadVar $k@192@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@192@07 $Perm.No) (< $Perm.No $k@192@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-conflicts         10
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1277
;  :mk-clause               221
;  :num-allocs              4738716
;  :num-checks              333
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            194127)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@179@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      162
;  :arith-assert-upper      118
;  :arith-conflicts         10
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         14
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1277
;  :mk-clause               221
;  :num-allocs              4738716
;  :num-checks              334
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            194138)
(assert (< $k@192@07 $k@179@07))
(assert (<= $Perm.No (- $k@179@07 $k@192@07)))
(assert (<= (- $k@179@07 $k@192@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@179@07 $k@192@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      164
;  :arith-assert-upper      119
;  :arith-conflicts         10
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1280
;  :mk-clause               221
;  :num-allocs              4738716
;  :num-checks              335
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            194352)
(push) ; 6
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      164
;  :arith-assert-upper      119
;  :arith-conflicts         10
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1280
;  :mk-clause               221
;  :num-allocs              4738716
;  :num-checks              336
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            194400)
(push) ; 6
(assert (not (< $Perm.No $k@179@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      57
;  :arith-assert-lower      164
;  :arith-assert-upper      119
;  :arith-conflicts         10
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1280
;  :mk-clause               221
;  :num-allocs              4738716
;  :num-checks              337
;  :propagations            130
;  :quant-instantiations    62
;  :rlimit-count            194448)
(declare-const $k@193@07 $Perm)
(assert ($Perm.isReadVar $k@193@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@193@07 $Perm.No) (< $Perm.No $k@193@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      58
;  :arith-assert-lower      166
;  :arith-assert-upper      120
;  :arith-conflicts         10
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1284
;  :mk-clause               223
;  :num-allocs              4738716
;  :num-checks              338
;  :propagations            131
;  :quant-instantiations    62
;  :rlimit-count            194646)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@180@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      58
;  :arith-assert-lower      166
;  :arith-assert-upper      120
;  :arith-conflicts         10
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1284
;  :mk-clause               223
;  :num-allocs              4738716
;  :num-checks              339
;  :propagations            131
;  :quant-instantiations    62
;  :rlimit-count            194657)
(assert (< $k@193@07 $k@180@07))
(assert (<= $Perm.No (- $k@180@07 $k@193@07)))
(assert (<= (- $k@180@07 $k@193@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@180@07 $k@193@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@180@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      58
;  :arith-assert-lower      168
;  :arith-assert-upper      121
;  :arith-conflicts         10
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         14
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1287
;  :mk-clause               223
;  :num-allocs              4738716
;  :num-checks              340
;  :propagations            131
;  :quant-instantiations    62
;  :rlimit-count            194871)
(push) ; 6
(assert (not (< $Perm.No $k@180@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      58
;  :arith-assert-lower      168
;  :arith-assert-upper      121
;  :arith-conflicts         10
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         14
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1287
;  :mk-clause               223
;  :num-allocs              4738716
;  :num-checks              341
;  :propagations            131
;  :quant-instantiations    62
;  :rlimit-count            194919)
(declare-const $k@194@07 $Perm)
(assert ($Perm.isReadVar $k@194@07 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      170
;  :arith-assert-upper      122
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1291
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              342
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            195116)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@194@07 $Perm.No) (< $Perm.No $k@194@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      170
;  :arith-assert-upper      122
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1291
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              343
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            195166)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@181@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      170
;  :arith-assert-upper      122
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            20
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1291
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              344
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            195177)
(assert (< $k@194@07 $k@181@07))
(assert (<= $Perm.No (- $k@181@07 $k@194@07)))
(assert (<= (- $k@181@07 $k@194@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@181@07 $k@194@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@177@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      172
;  :arith-assert-upper      123
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1294
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              345
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            195391)
(push) ; 6
(assert (not (< $Perm.No $k@181@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1906
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      172
;  :arith-assert-upper      123
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1294
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              346
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            195439)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) __globals@90@07))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1980
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      172
;  :arith-assert-upper      123
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1295
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              347
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            196994)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1980
;  :arith-add-rows          6
;  :arith-assert-diseq      59
;  :arith-assert-lower      172
;  :arith-assert-upper      123
;  :arith-conflicts         10
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         14
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    200
;  :datatype-constructor-ax 346
;  :datatype-occurs-check   95
;  :datatype-splits         291
;  :decisions               340
;  :del-clause              161
;  :final-checks            49
;  :max-generation          2
;  :max-memory              4.57
;  :memory                  4.57
;  :mk-bool-var             1295
;  :mk-clause               225
;  :num-allocs              4738716
;  :num-checks              348
;  :propagations            132
;  :quant-instantiations    62
;  :rlimit-count            197042)
(declare-const $t@195@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2199
;  :arith-add-rows          6
;  :arith-assert-diseq      61
;  :arith-assert-lower      179
;  :arith-assert-upper      126
;  :arith-conflicts         10
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              181
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1364
;  :mk-clause               235
;  :num-allocs              4924446
;  :num-checks              350
;  :propagations            139
;  :quant-instantiations    65
;  :rlimit-count            198572)
(assert (= $t@195@07 ($Snap.combine ($Snap.first $t@195@07) ($Snap.second $t@195@07))))
(assert (= ($Snap.first $t@195@07) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@195@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@195@07))
    ($Snap.second ($Snap.second $t@195@07)))))
(assert (= ($Snap.first ($Snap.second $t@195@07)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@195@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@195@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@195@07))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@195@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@196@07 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@196@07 | live]
; [else-branch: 20 | !(0 <= i@196@07) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@196@07]
(assert (<= 0 i@196@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@196@07)]
(assert (not (<= 0 i@196@07)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@196@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i@196@07 | live]
; [else-branch: 21 | !(i@196@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i@196@07) | live]
(push) ; 8
; [then-branch: 21 | i@196@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i@196@07]
(assert (and
  (<
    i@196@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
  (<= 0 i@196@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@196@07 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2249
;  :arith-add-rows          6
;  :arith-assert-diseq      61
;  :arith-assert-lower      184
;  :arith-assert-upper      129
;  :arith-conflicts         10
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              181
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1390
;  :mk-clause               235
;  :num-allocs              4924446
;  :num-checks              351
;  :propagations            139
;  :quant-instantiations    69
;  :rlimit-count            199875)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@195@07))))[i@196@07] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@195@07))))[i@196@07] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@195@07))))[i@196@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i@196@07)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@195@07))))[i@196@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
      i@196@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@196@07 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2249
;  :arith-add-rows          6
;  :arith-assert-diseq      61
;  :arith-assert-lower      184
;  :arith-assert-upper      129
;  :arith-conflicts         10
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              181
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1391
;  :mk-clause               235
;  :num-allocs              4924446
;  :num-checks              352
;  :propagations            139
;  :quant-instantiations    69
;  :rlimit-count            200050)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@195@07))))[i@196@07] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@195@07))))[i@196@07]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@195@07))))[i@196@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i@196@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@196@07 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2249
;  :arith-add-rows          6
;  :arith-assert-diseq      62
;  :arith-assert-lower      187
;  :arith-assert-upper      129
;  :arith-conflicts         10
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    210
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              181
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1394
;  :mk-clause               236
;  :num-allocs              4924446
;  :num-checks              353
;  :propagations            139
;  :quant-instantiations    69
;  :rlimit-count            200173)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@195@07))))[i@196@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
      i@196@07))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@196@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i@196@07)]
(assert (not
  (and
    (<
      i@196@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
    (<= 0 i@196@07))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@196@07 Int)) (!
  (implies
    (and
      (<
        i@196@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
      (<= 0 i@196@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
          i@196@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i@196@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i@196@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i@196@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))
(declare-const $k@197@07 $Perm)
(assert ($Perm.isReadVar $k@197@07 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@197@07 $Perm.No) (< $Perm.No $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2254
;  :arith-add-rows          6
;  :arith-assert-diseq      63
;  :arith-assert-lower      189
;  :arith-assert-upper      130
;  :arith-conflicts         10
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         15
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    211
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1400
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              354
;  :propagations            140
;  :quant-instantiations    69
;  :rlimit-count            200942)
(declare-const $t@198@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@177@07 $k@190@07))
    (=
      $t@198@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))
  (implies
    (< $Perm.No $k@197@07)
    (=
      $t@198@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))
(assert (<= $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07)))
(assert (<= (+ (- $k@177@07 $k@190@07) $k@197@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2264
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      132
;  :arith-conflicts         11
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         16
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1408
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              355
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            201650)
(assert (not (= $t@198@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2270
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      133
;  :arith-conflicts         12
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         17
;  :arith-pivots            26
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1411
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              356
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            201982)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2275
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      134
;  :arith-conflicts         13
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         18
;  :arith-pivots            27
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1413
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              357
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            202279)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2280
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      135
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         19
;  :arith-pivots            28
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    215
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1415
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              358
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            202586)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2285
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      136
;  :arith-conflicts         15
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         20
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1417
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              359
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            202903)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2290
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      137
;  :arith-conflicts         16
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         21
;  :arith-pivots            30
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    217
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1419
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              360
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            203230)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2295
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      138
;  :arith-conflicts         17
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         22
;  :arith-pivots            31
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    218
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1421
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              361
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            203567)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2300
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      139
;  :arith-conflicts         18
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         23
;  :arith-pivots            32
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    219
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1423
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              362
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            203914)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2305
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      140
;  :arith-conflicts         19
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         24
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1425
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              363
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            204271)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2310
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      141
;  :arith-conflicts         20
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         25
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1427
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              364
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            204638)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2315
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      190
;  :arith-assert-upper      142
;  :arith-conflicts         21
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         26
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1429
;  :mk-clause               238
;  :num-allocs              4924446
;  :num-checks              365
;  :propagations            140
;  :quant-instantiations    70
;  :rlimit-count            205015)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))
(declare-const $k@199@07 $Perm)
(assert ($Perm.isReadVar $k@199@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@199@07 $Perm.No) (< $Perm.No $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2320
;  :arith-add-rows          7
;  :arith-assert-diseq      64
;  :arith-assert-lower      192
;  :arith-assert-upper      143
;  :arith-conflicts         21
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         26
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1434
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              366
;  :propagations            141
;  :quant-instantiations    70
;  :rlimit-count            205506)
(declare-const $t@200@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@178@07 $k@191@07))
    (=
      $t@200@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@199@07)
    (=
      $t@200@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07)))
(assert (<= (+ (- $k@178@07 $k@191@07) $k@199@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2330
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      145
;  :arith-conflicts         22
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         27
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1442
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              367
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            206444)
(assert (not (= $t@200@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2336
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      146
;  :arith-conflicts         23
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         28
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               306
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1445
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              368
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            206886)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2341
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      147
;  :arith-conflicts         24
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         29
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1447
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              369
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            207293)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2346
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      148
;  :arith-conflicts         25
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         30
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1449
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              370
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            207710)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2351
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      149
;  :arith-conflicts         26
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         31
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1451
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              371
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            208137)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2356
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      150
;  :arith-conflicts         27
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         32
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1453
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              372
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            208574)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2361
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      151
;  :arith-conflicts         28
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         33
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1455
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              373
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            209021)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2366
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      193
;  :arith-assert-upper      152
;  :arith-conflicts         29
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         34
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1457
;  :mk-clause               240
;  :num-allocs              4924446
;  :num-checks              374
;  :propagations            141
;  :quant-instantiations    71
;  :rlimit-count            209478)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))
(declare-const $k@201@07 $Perm)
(assert ($Perm.isReadVar $k@201@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@201@07 $Perm.No) (< $Perm.No $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2371
;  :arith-add-rows          8
;  :arith-assert-diseq      65
;  :arith-assert-lower      195
;  :arith-assert-upper      153
;  :arith-conflicts         29
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         34
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1462
;  :mk-clause               242
;  :num-allocs              4924446
;  :num-checks              375
;  :propagations            142
;  :quant-instantiations    71
;  :rlimit-count            210059)
(declare-const $t@202@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@179@07 $k@192@07))
    (=
      $t@202@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@201@07)
    (=
      $t@202@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07)))
(assert (<= (+ (- $k@179@07 $k@192@07) $k@201@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2381
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      196
;  :arith-assert-upper      155
;  :arith-conflicts         30
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         35
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1470
;  :mk-clause               242
;  :num-allocs              4924446
;  :num-checks              376
;  :propagations            142
;  :quant-instantiations    72
;  :rlimit-count            210867)
(assert (not (= $t@202@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2386
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      196
;  :arith-assert-upper      156
;  :arith-conflicts         31
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         36
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    234
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1472
;  :mk-clause               242
;  :num-allocs              4924446
;  :num-checks              377
;  :propagations            142
;  :quant-instantiations    72
;  :rlimit-count            211372)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2391
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      196
;  :arith-assert-upper      157
;  :arith-conflicts         32
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         37
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1474
;  :mk-clause               242
;  :num-allocs              5117496
;  :num-checks              378
;  :propagations            142
;  :quant-instantiations    72
;  :rlimit-count            211869)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))))
(declare-const $k@203@07 $Perm)
(assert ($Perm.isReadVar $k@203@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@203@07 $Perm.No) (< $Perm.No $k@203@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2396
;  :arith-add-rows          9
;  :arith-assert-diseq      66
;  :arith-assert-lower      198
;  :arith-assert-upper      158
;  :arith-conflicts         32
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         37
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1479
;  :mk-clause               244
;  :num-allocs              5117496
;  :num-checks              379
;  :propagations            143
;  :quant-instantiations    72
;  :rlimit-count            212489)
(declare-const $t@204@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@180@07 $k@193@07))
    (=
      $t@204@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@203@07)
    (=
      $t@204@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07)))
(assert (<= (+ (- $k@180@07 $k@193@07) $k@203@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2406
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      199
;  :arith-assert-upper      160
;  :arith-conflicts         33
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         38
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1487
;  :mk-clause               244
;  :num-allocs              5117496
;  :num-checks              380
;  :propagations            143
;  :quant-instantiations    73
;  :rlimit-count            213677)
(assert (not (= $t@204@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2412
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      199
;  :arith-assert-upper      161
;  :arith-conflicts         34
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         39
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1490
;  :mk-clause               244
;  :num-allocs              5117496
;  :num-checks              381
;  :propagations            143
;  :quant-instantiations    73
;  :rlimit-count            214251)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      199
;  :arith-assert-upper      162
;  :arith-conflicts         35
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         40
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1492
;  :mk-clause               244
;  :num-allocs              5117496
;  :num-checks              382
;  :propagations            143
;  :quant-instantiations    73
;  :rlimit-count            214798)
(declare-const $k@205@07 $Perm)
(assert ($Perm.isReadVar $k@205@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@205@07 $Perm.No) (< $Perm.No $k@205@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          10
;  :arith-assert-diseq      67
;  :arith-assert-lower      201
;  :arith-assert-upper      163
;  :arith-conflicts         35
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         40
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1496
;  :mk-clause               246
;  :num-allocs              5117496
;  :num-checks              383
;  :propagations            144
;  :quant-instantiations    73
;  :rlimit-count            214996)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $t@198@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2417
;  :arith-add-rows          10
;  :arith-assert-diseq      67
;  :arith-assert-lower      201
;  :arith-assert-upper      163
;  :arith-conflicts         35
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         40
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1496
;  :mk-clause               246
;  :num-allocs              5117496
;  :num-checks              384
;  :propagations            144
;  :quant-instantiations    73
;  :rlimit-count            215007)
(declare-const $t@206@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@181@07 $k@194@07))
    (=
      $t@206@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@205@07)
    (=
      $t@206@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@181@07 $k@194@07) $k@205@07)))
(assert (<= (+ (- $k@181@07 $k@194@07) $k@205@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@181@07 $k@194@07) $k@205@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      202
;  :arith-assert-upper      165
;  :arith-conflicts         36
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         41
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1503
;  :mk-clause               246
;  :num-allocs              5117496
;  :num-checks              385
;  :propagations            144
;  :quant-instantiations    74
;  :rlimit-count            215792)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $t@198@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      202
;  :arith-assert-upper      165
;  :arith-conflicts         36
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         41
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1503
;  :mk-clause               246
;  :num-allocs              5117496
;  :num-checks              386
;  :propagations            144
;  :quant-instantiations    74
;  :rlimit-count            215803)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@181@07 $k@194@07) $k@205@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2423
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      202
;  :arith-assert-upper      166
;  :arith-conflicts         37
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         42
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 404
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               397
;  :del-clause              182
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.78
;  :memory                  4.78
;  :mk-bool-var             1504
;  :mk-clause               246
;  :num-allocs              5117496
;  :num-checks              387
;  :propagations            144
;  :quant-instantiations    74
;  :rlimit-count            215887)
(assert (= $t@206@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@195@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) __globals@90@07))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2928
;  :arith-add-rows          12
;  :arith-assert-diseq      72
;  :arith-assert-lower      221
;  :arith-assert-upper      175
;  :arith-conflicts         37
;  :arith-eq-adapter        99
;  :arith-fixed-eqs         46
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 537
;  :datatype-occurs-check   200
;  :datatype-splits         427
;  :decisions               528
;  :del-clause              220
;  :final-checks            55
;  :max-generation          2
;  :max-memory              5.00
;  :memory                  5.00
;  :mk-bool-var             1627
;  :mk-clause               275
;  :num-allocs              5508917
;  :num-checks              389
;  :propagations            160
;  :quant-instantiations    80
;  :rlimit-count            218778)
(declare-const $t@207@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@208@07 $Perm)
(assert ($Perm.isReadVar $k@208@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@208@07 $Perm.No) (< $Perm.No $k@208@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      234
;  :arith-assert-upper      181
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1733
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              391
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            220947)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@175@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      234
;  :arith-assert-upper      181
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            51
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1733
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              392
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            220958)
(assert (< $k@208@07 $k@175@07))
(assert (<= $Perm.No (- $k@175@07 $k@208@07)))
(assert (<= (- $k@175@07 $k@208@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@175@07 $k@208@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              393
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221178)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              394
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221226)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              395
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221274)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              396
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221322)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              397
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221370)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      236
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1736
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              398
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221418)
; [eval] (forall i__115: Int :: { diz.LFSR_m.Main_process_state[i__115] } 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|)
(declare-const i__115@209@07 Int)
(push) ; 6
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__115 && i__115 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__115
(push) ; 7
; [then-branch: 24 | 0 <= i__115@209@07 | live]
; [else-branch: 24 | !(0 <= i__115@209@07) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i__115@209@07]
(assert (<= 0 i__115@209@07))
; [eval] i__115 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      237
;  :arith-assert-upper      182
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1737
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              399
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221519)
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i__115@209@07)]
(assert (not (<= 0 i__115@209@07)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i__115@209@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i__115@209@07 | live]
; [else-branch: 25 | !(i__115@209@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i__115@209@07) | live]
(push) ; 8
; [then-branch: 25 | i__115@209@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i__115@209@07]
(assert (and
  (<
    i__115@209@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
  (<= 0 i__115@209@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115] == -1
; [eval] diz.LFSR_m.Main_process_state[i__115]
(push) ; 9
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      238
;  :arith-assert-upper      183
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1739
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              400
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221676)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__115@209@07 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      76
;  :arith-assert-lower      238
;  :arith-assert-upper      183
;  :arith-conflicts         37
;  :arith-eq-adapter        105
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1739
;  :mk-clause               293
;  :num-allocs              5903508
;  :num-checks              401
;  :propagations            172
;  :quant-instantiations    84
;  :rlimit-count            221685)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i__115@209@07)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
      i__115@209@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115] && diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__115]
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         37
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1745
;  :mk-clause               297
;  :num-allocs              5903508
;  :num-checks              402
;  :propagations            174
;  :quant-instantiations    85
;  :rlimit-count            221956)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__115@209@07 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         37
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1745
;  :mk-clause               297
;  :num-allocs              5903508
;  :num-checks              403
;  :propagations            174
;  :quant-instantiations    85
;  :rlimit-count            221965)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i__115@209@07)))
; [eval] diz.LFSR_m.Main_process_state[i__115] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__115]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         37
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1745
;  :mk-clause               297
;  :num-allocs              5903508
;  :num-checks              404
;  :propagations            174
;  :quant-instantiations    85
;  :rlimit-count            222118)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__115@209@07 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         37
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1745
;  :mk-clause               297
;  :num-allocs              5903508
;  :num-checks              405
;  :propagations            174
;  :quant-instantiations    85
;  :rlimit-count            222127)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      241
;  :arith-assert-upper      184
;  :arith-conflicts         37
;  :arith-eq-adapter        106
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              236
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1745
;  :mk-clause               297
;  :num-allocs              5903508
;  :num-checks              406
;  :propagations            174
;  :quant-instantiations    85
;  :rlimit-count            222175)
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@195@07))))[i__115@209@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
      i__115@209@07))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i__115@209@07 < |First:(Second:(Second:(Second:($t@195@07))))| && 0 <= i__115@209@07)]
(assert (not
  (and
    (<
      i__115@209@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
    (<= 0 i__115@209@07))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__115@209@07 Int)) (!
  (implies
    (and
      (<
        i__115@209@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
      (<= 0 i__115@209@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
          i__115@209@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i__115@209@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i__115@209@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i__115@209@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      79
;  :arith-assert-lower      242
;  :arith-assert-upper      185
;  :arith-conflicts         37
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              254
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1753
;  :mk-clause               311
;  :num-allocs              5903508
;  :num-checks              407
;  :propagations            176
;  :quant-instantiations    86
;  :rlimit-count            222621)
(assert (forall ((i__115@209@07 Int)) (!
  (implies
    (and
      (<
        i__115@209@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))
      (<= 0 i__115@209@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
          i__115@209@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i__115@209@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
            i__115@209@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@195@07)))))
    i__115@209@07))
  :qid |prog.l<no position>|)))
(declare-const $k@210@07 $Perm)
(assert ($Perm.isReadVar $k@210@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      80
;  :arith-assert-lower      244
;  :arith-assert-upper      186
;  :arith-conflicts         37
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              254
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1758
;  :mk-clause               313
;  :num-allocs              5903508
;  :num-checks              408
;  :propagations            177
;  :quant-instantiations    86
;  :rlimit-count            223179)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@210@07 $Perm.No) (< $Perm.No $k@210@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3242
;  :arith-add-rows          13
;  :arith-assert-diseq      80
;  :arith-assert-lower      244
;  :arith-assert-upper      186
;  :arith-conflicts         37
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         48
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              254
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1758
;  :mk-clause               313
;  :num-allocs              5903508
;  :num-checks              409
;  :propagations            177
;  :quant-instantiations    86
;  :rlimit-count            223229)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@177@07 $k@190@07) $k@197@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          13
;  :arith-assert-diseq      80
;  :arith-assert-lower      244
;  :arith-assert-upper      187
;  :arith-conflicts         38
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         48
;  :arith-pivots            54
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1760
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              410
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223317)
(assert (< $k@210@07 (+ (- $k@177@07 $k@190@07) $k@197@07)))
(assert (<= $Perm.No (- (+ (- $k@177@07 $k@190@07) $k@197@07) $k@210@07)))
(assert (<= (- (+ (- $k@177@07 $k@190@07) $k@197@07) $k@210@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@177@07 $k@190@07) $k@197@07) $k@210@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      188
;  :arith-conflicts         38
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         48
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1763
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              411
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223558)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      189
;  :arith-conflicts         39
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         49
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1764
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              412
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223647)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      189
;  :arith-conflicts         39
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         49
;  :arith-pivots            56
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1764
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              413
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223695)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      190
;  :arith-conflicts         40
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         50
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1765
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              414
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223784)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      190
;  :arith-conflicts         40
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         50
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1765
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              415
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223832)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      191
;  :arith-conflicts         41
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         51
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1766
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              416
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223921)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      191
;  :arith-conflicts         41
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         51
;  :arith-pivots            58
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1766
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              417
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            223969)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      192
;  :arith-conflicts         42
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         52
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1767
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              418
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224058)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      192
;  :arith-conflicts         42
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         52
;  :arith-pivots            59
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1767
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              419
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224106)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      193
;  :arith-conflicts         43
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         53
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1768
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              420
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224195)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      193
;  :arith-conflicts         43
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         53
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1768
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              421
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224243)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      194
;  :arith-conflicts         44
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         54
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1769
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              422
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224332)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      194
;  :arith-conflicts         44
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         54
;  :arith-pivots            61
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1769
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              423
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224380)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      195
;  :arith-conflicts         45
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         55
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1770
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              424
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224469)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      195
;  :arith-conflicts         45
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         55
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1770
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              425
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224517)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      196
;  :arith-conflicts         46
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         56
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1771
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              426
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224606)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      196
;  :arith-conflicts         46
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         56
;  :arith-pivots            63
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1771
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              427
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224654)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      197
;  :arith-conflicts         47
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         57
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1772
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              428
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224743)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      197
;  :arith-conflicts         47
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         57
;  :arith-pivots            64
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1772
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              429
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224791)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      198
;  :arith-conflicts         48
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         58
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1773
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              430
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224880)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      198
;  :arith-conflicts         48
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         58
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1773
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              431
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            224928)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      80
;  :arith-assert-lower      246
;  :arith-assert-upper      199
;  :arith-conflicts         49
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         59
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1774
;  :mk-clause               315
;  :num-allocs              5903508
;  :num-checks              432
;  :propagations            178
;  :quant-instantiations    86
;  :rlimit-count            225017)
(declare-const $k@211@07 $Perm)
(assert ($Perm.isReadVar $k@211@07 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      81
;  :arith-assert-lower      248
;  :arith-assert-upper      200
;  :arith-conflicts         49
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         59
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1778
;  :mk-clause               317
;  :num-allocs              5903508
;  :num-checks              433
;  :propagations            179
;  :quant-instantiations    86
;  :rlimit-count            225214)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@211@07 $Perm.No) (< $Perm.No $k@211@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3243
;  :arith-add-rows          14
;  :arith-assert-diseq      81
;  :arith-assert-lower      248
;  :arith-assert-upper      200
;  :arith-conflicts         49
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         59
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              256
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1778
;  :mk-clause               317
;  :num-allocs              5903508
;  :num-checks              434
;  :propagations            179
;  :quant-instantiations    86
;  :rlimit-count            225264)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@178@07 $k@191@07) $k@199@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          14
;  :arith-assert-diseq      81
;  :arith-assert-lower      248
;  :arith-assert-upper      201
;  :arith-conflicts         50
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         59
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1780
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              435
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225342)
(assert (< $k@211@07 (+ (- $k@178@07 $k@191@07) $k@199@07)))
(assert (<= $Perm.No (- (+ (- $k@178@07 $k@191@07) $k@199@07) $k@211@07)))
(assert (<= (- (+ (- $k@178@07 $k@191@07) $k@199@07) $k@211@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@178@07 $k@191@07) $k@199@07) $k@211@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      202
;  :arith-conflicts         50
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         59
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1783
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              436
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225577)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      203
;  :arith-conflicts         51
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         60
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1784
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              437
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225655)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      203
;  :arith-conflicts         51
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         60
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1784
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              438
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225703)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1785
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              439
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225781)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      204
;  :arith-conflicts         52
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         61
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1785
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              440
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225829)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      205
;  :arith-conflicts         53
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1786
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              441
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225907)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      205
;  :arith-conflicts         53
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         62
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1786
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              442
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            225955)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      206
;  :arith-conflicts         54
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         63
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1787
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              443
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226033)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      206
;  :arith-conflicts         54
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         63
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1787
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              444
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226081)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      207
;  :arith-conflicts         55
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         64
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1788
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              445
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226159)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      207
;  :arith-conflicts         55
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         64
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1788
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              446
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226207)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      208
;  :arith-conflicts         56
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         65
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1789
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              447
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226285)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      208
;  :arith-conflicts         56
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         65
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               379
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1789
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              448
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226333)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      209
;  :arith-conflicts         57
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         66
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1790
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              449
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226411)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      209
;  :arith-conflicts         57
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         66
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1790
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              450
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226459)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@178@07 $k@191@07) $k@199@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      250
;  :arith-assert-upper      210
;  :arith-conflicts         58
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         67
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1791
;  :mk-clause               319
;  :num-allocs              5903508
;  :num-checks              451
;  :propagations            180
;  :quant-instantiations    86
;  :rlimit-count            226537)
(declare-const $k@212@07 $Perm)
(assert ($Perm.isReadVar $k@212@07 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      252
;  :arith-assert-upper      211
;  :arith-conflicts         58
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         67
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1795
;  :mk-clause               321
;  :num-allocs              5903508
;  :num-checks              452
;  :propagations            181
;  :quant-instantiations    86
;  :rlimit-count            226734)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@212@07 $Perm.No) (< $Perm.No $k@212@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3244
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      252
;  :arith-assert-upper      211
;  :arith-conflicts         58
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         67
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              258
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1795
;  :mk-clause               321
;  :num-allocs              5903508
;  :num-checks              453
;  :propagations            181
;  :quant-instantiations    86
;  :rlimit-count            226784)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@179@07 $k@192@07) $k@201@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      252
;  :arith-assert-upper      212
;  :arith-conflicts         59
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         67
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1797
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              454
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            226862)
(assert (< $k@212@07 (+ (- $k@179@07 $k@192@07) $k@201@07)))
(assert (<= $Perm.No (- (+ (- $k@179@07 $k@192@07) $k@201@07) $k@212@07)))
(assert (<= (- (+ (- $k@179@07 $k@192@07) $k@201@07) $k@212@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@179@07 $k@192@07) $k@201@07) $k@212@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      213
;  :arith-conflicts         59
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         67
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1800
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              455
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227097)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      214
;  :arith-conflicts         60
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         68
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1801
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              456
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227175)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      214
;  :arith-conflicts         60
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         68
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1801
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              457
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227223)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      215
;  :arith-conflicts         61
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         69
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1802
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              458
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227301)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      215
;  :arith-conflicts         61
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         69
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1802
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              459
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227349)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      254
;  :arith-assert-upper      216
;  :arith-conflicts         62
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         70
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1803
;  :mk-clause               323
;  :num-allocs              5903508
;  :num-checks              460
;  :propagations            182
;  :quant-instantiations    86
;  :rlimit-count            227427)
(declare-const $k@213@07 $Perm)
(assert ($Perm.isReadVar $k@213@07 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      256
;  :arith-assert-upper      217
;  :arith-conflicts         62
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         70
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1807
;  :mk-clause               325
;  :num-allocs              5903508
;  :num-checks              461
;  :propagations            183
;  :quant-instantiations    86
;  :rlimit-count            227623)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@213@07 $Perm.No) (< $Perm.No $k@213@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3245
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      256
;  :arith-assert-upper      217
;  :arith-conflicts         62
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         70
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              260
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1807
;  :mk-clause               325
;  :num-allocs              5903508
;  :num-checks              462
;  :propagations            183
;  :quant-instantiations    86
;  :rlimit-count            227673)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@180@07 $k@193@07) $k@203@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      256
;  :arith-assert-upper      218
;  :arith-conflicts         63
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         70
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1809
;  :mk-clause               327
;  :num-allocs              5903508
;  :num-checks              463
;  :propagations            184
;  :quant-instantiations    86
;  :rlimit-count            227753)
(assert (< $k@213@07 (+ (- $k@180@07 $k@193@07) $k@203@07)))
(assert (<= $Perm.No (- (+ (- $k@180@07 $k@193@07) $k@203@07) $k@213@07)))
(assert (<= (- (+ (- $k@180@07 $k@193@07) $k@203@07) $k@213@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@180@07 $k@193@07) $k@203@07) $k@213@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      83
;  :arith-assert-lower      258
;  :arith-assert-upper      219
;  :arith-conflicts         63
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         70
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1812
;  :mk-clause               327
;  :num-allocs              5903508
;  :num-checks              464
;  :propagations            184
;  :quant-instantiations    86
;  :rlimit-count            227989)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      83
;  :arith-assert-lower      258
;  :arith-assert-upper      220
;  :arith-conflicts         64
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         71
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1813
;  :mk-clause               327
;  :num-allocs              5903508
;  :num-checks              465
;  :propagations            184
;  :quant-instantiations    86
;  :rlimit-count            228070)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      83
;  :arith-assert-lower      258
;  :arith-assert-upper      220
;  :arith-conflicts         64
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         71
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1813
;  :mk-clause               327
;  :num-allocs              5903508
;  :num-checks              466
;  :propagations            184
;  :quant-instantiations    86
;  :rlimit-count            228118)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@180@07 $k@193@07) $k@203@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      83
;  :arith-assert-lower      258
;  :arith-assert-upper      221
;  :arith-conflicts         65
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         72
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1814
;  :mk-clause               327
;  :num-allocs              5903508
;  :num-checks              467
;  :propagations            184
;  :quant-instantiations    86
;  :rlimit-count            228199)
(declare-const $k@214@07 $Perm)
(assert ($Perm.isReadVar $k@214@07 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      260
;  :arith-assert-upper      222
;  :arith-conflicts         65
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         72
;  :arith-pivots            66
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1818
;  :mk-clause               329
;  :num-allocs              5903508
;  :num-checks              468
;  :propagations            185
;  :quant-instantiations    86
;  :rlimit-count            228396)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      260
;  :arith-assert-upper      223
;  :arith-conflicts         66
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         73
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1819
;  :mk-clause               329
;  :num-allocs              5903508
;  :num-checks              469
;  :propagations            185
;  :quant-instantiations    86
;  :rlimit-count            228485)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@214@07 $Perm.No) (< $Perm.No $k@214@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      260
;  :arith-assert-upper      223
;  :arith-conflicts         66
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         73
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1819
;  :mk-clause               329
;  :num-allocs              5903508
;  :num-checks              470
;  :propagations            185
;  :quant-instantiations    86
;  :rlimit-count            228535)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $t@198@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3246
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      260
;  :arith-assert-upper      223
;  :arith-conflicts         66
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         73
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              262
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1819
;  :mk-clause               329
;  :num-allocs              5903508
;  :num-checks              471
;  :propagations            185
;  :quant-instantiations    86
;  :rlimit-count            228546)
(push) ; 6
(assert (not (not (= (+ (- $k@181@07 $k@194@07) $k@205@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      260
;  :arith-assert-upper      224
;  :arith-conflicts         67
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         73
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1821
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              472
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            228626)
(assert (< $k@214@07 (+ (- $k@181@07 $k@194@07) $k@205@07)))
(assert (<= $Perm.No (- (+ (- $k@181@07 $k@194@07) $k@205@07) $k@214@07)))
(assert (<= (- (+ (- $k@181@07 $k@194@07) $k@205@07) $k@214@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@181@07 $k@194@07) $k@205@07) $k@214@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      225
;  :arith-conflicts         67
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         73
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1824
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              473
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            228862)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@177@07 $k@190@07) $k@197@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      226
;  :arith-conflicts         68
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         74
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1825
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              474
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            228951)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  $t@198@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      226
;  :arith-conflicts         68
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         74
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1825
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              475
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            228962)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@181@07 $k@194@07) $k@205@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      227
;  :arith-conflicts         69
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         75
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1826
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              476
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            229043)
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      227
;  :arith-conflicts         69
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         75
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1826
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              477
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            229091)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 6
(assert (not (< $Perm.No $k@175@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      227
;  :arith-conflicts         69
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         75
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1826
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              478
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            229139)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@179@07 $k@192@07) $k@201@07))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1827
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              479
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            229217)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@202@07 diz@89@07)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3247
;  :arith-add-rows          20
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            68
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 619
;  :datatype-occurs-check   253
;  :datatype-splits         507
;  :decisions               608
;  :del-clause              264
;  :final-checks            58
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  5.01
;  :mk-bool-var             1827
;  :mk-clause               331
;  :num-allocs              5903508
;  :num-checks              480
;  :propagations            186
;  :quant-instantiations    86
;  :rlimit-count            229228)
(assert (= $t@202@07 diz@89@07))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | !(First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
          2)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3487
;  :arith-add-rows          21
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    248
;  :datatype-constructor-ax 704
;  :datatype-occurs-check   262
;  :datatype-splits         565
;  :decisions               690
;  :del-clause              279
;  :final-checks            61
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             1888
;  :mk-clause               332
;  :num-allocs              6111461
;  :num-checks              481
;  :propagations            188
;  :quant-instantiations    86
;  :rlimit-count            231183
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3772
;  :arith-add-rows          21
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 817
;  :datatype-occurs-check   274
;  :datatype-splits         674
;  :decisions               798
;  :del-clause              280
;  :final-checks            65
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             1999
;  :mk-clause               333
;  :num-allocs              6111461
;  :num-checks              482
;  :propagations            192
;  :quant-instantiations    86
;  :rlimit-count            233183
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4057
;  :arith-add-rows          21
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 930
;  :datatype-occurs-check   286
;  :datatype-splits         783
;  :decisions               906
;  :del-clause              281
;  :final-checks            69
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2110
;  :mk-clause               334
;  :num-allocs              6111461
;  :num-checks              483
;  :propagations            196
;  :quant-instantiations    86
;  :rlimit-count            235183
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4342
;  :arith-add-rows          21
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1043
;  :datatype-occurs-check   298
;  :datatype-splits         892
;  :decisions               1014
;  :del-clause              282
;  :final-checks            73
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2221
;  :mk-clause               335
;  :num-allocs              6111461
;  :num-checks              484
;  :propagations            200
;  :quant-instantiations    86
;  :rlimit-count            237183
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4627
;  :arith-add-rows          21
;  :arith-assert-diseq      84
;  :arith-assert-lower      262
;  :arith-assert-upper      228
;  :arith-conflicts         70
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         76
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2332
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              485
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239183
;  :time                    0.00)
(declare-const $t@215@07 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@175@07)
    (= $t@215@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))))
  (implies
    (< $Perm.No (- $k@92@07 $k@182@07))
    (=
      $t@215@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))))))
(assert (<= $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07))))
(assert (<= (+ $k@175@07 (- $k@92@07 $k@182@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))
  (not (= diz@89@07 $Ref.null))))
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 5
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4631
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      230
;  :arith-conflicts         71
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         77
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2337
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              486
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239523)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4631
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      230
;  :arith-conflicts         71
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         77
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2338
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              487
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239603)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4631
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      230
;  :arith-conflicts         71
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         77
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2338
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              488
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239618)
; [eval] -1
(push) ; 5
; [then-branch: 28 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 | live]
; [else-branch: 28 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1 | live]
(push) ; 6
; [then-branch: 28 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      1)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | First:(Second:(Second:(Second:($t@174@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[2] != -2
; [eval] diz.LFSR_m.Main_event_state[2]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4632
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      231
;  :arith-conflicts         72
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         78
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2340
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              489
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239841)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4632
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      231
;  :arith-conflicts         72
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         78
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2341
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              490
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239921)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4632
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      231
;  :arith-conflicts         72
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         78
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    268
;  :datatype-constructor-ax 1156
;  :datatype-occurs-check   310
;  :datatype-splits         1001
;  :decisions               1122
;  :del-clause              283
;  :final-checks            77
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2341
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              491
;  :propagations            204
;  :quant-instantiations    86
;  :rlimit-count            239936)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
        2)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4807
;  :arith-add-rows          22
;  :arith-assert-diseq      84
;  :arith-assert-lower      263
;  :arith-assert-upper      231
;  :arith-conflicts         72
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         78
;  :arith-pivots            78
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    270
;  :datatype-constructor-ax 1213
;  :datatype-occurs-check   321
;  :datatype-splits         1056
;  :decisions               1177
;  :del-clause              283
;  :final-checks            80
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2397
;  :mk-clause               336
;  :num-allocs              6111461
;  :num-checks              492
;  :propagations            206
;  :quant-instantiations    86
;  :rlimit-count            241398)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
          2)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4984
;  :arith-add-rows          22
;  :arith-assert-diseq      86
;  :arith-assert-lower      270
;  :arith-assert-upper      234
;  :arith-conflicts         72
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    272
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2467
;  :mk-clause               347
;  :num-allocs              6111461
;  :num-checks              493
;  :propagations            213
;  :quant-instantiations    88
;  :rlimit-count            243003
;  :time                    0.00)
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2) | live]
; [else-branch: 29 | First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2 | live]
(push) ; 5
; [then-branch: 29 | !(First:(Second:(Second:(Second:($t@174@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@174@07))))))[2] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
          2)
        (- 0 2))))))
(declare-const __flatten_77__117@216@07 $Ref)
(declare-const __flatten_76__116@217@07 $Ref)
(declare-const __flatten_79__119@218@07 $Ref)
(declare-const __flatten_78__118@219@07 $Ref)
(declare-const __flatten_81__121@220@07 $Ref)
(declare-const __flatten_80__120@221@07 $Ref)
(declare-const __flatten_128__165@222@07 $Ref)
(declare-const __flatten_130__167@223@07 $Ref)
(declare-const __flatten_129__166@224@07 Seq<Int>)
(declare-const __flatten_131__168@225@07 $Ref)
(declare-const __flatten_133__170@226@07 $Ref)
(declare-const __flatten_132__169@227@07 Seq<Int>)
(declare-const __flatten_83__123@228@07 $Ref)
(declare-const __flatten_82__122@229@07 $Ref)
(declare-const __flatten_94__134@230@07 $Ref)
(declare-const __flatten_93__133@231@07 $Ref)
(declare-const __flatten_85__125@232@07 $Ref)
(declare-const __flatten_84__124@233@07 $Ref)
(declare-const __flatten_87__127@234@07 $Ref)
(declare-const __flatten_86__126@235@07 $Ref)
(declare-const __flatten_90__130@236@07 $Ref)
(declare-const __flatten_89__129@237@07 $Ref)
(declare-const __flatten_91__131@238@07 $Ref)
(declare-const __flatten_92__132@239@07 Int)
(declare-const __flatten_88__128@240@07 Int)
(declare-const __flatten_97__137@241@07 $Ref)
(declare-const __flatten_96__136@242@07 $Ref)
(declare-const __flatten_98__138@243@07 $Ref)
(declare-const __flatten_99__139@244@07 Int)
(declare-const __flatten_95__135@245@07 Int)
(declare-const __flatten_101__141@246@07 $Ref)
(declare-const __flatten_102__142@247@07 Int)
(declare-const __flatten_100__140@248@07 Int)
(declare-const __flatten_104__144@249@07 $Ref)
(declare-const __flatten_105__145@250@07 Int)
(declare-const __flatten_103__143@251@07 Int)
(declare-const __flatten_107__147@252@07 $Ref)
(declare-const __flatten_108__148@253@07 $Ref)
(declare-const __flatten_109__149@254@07 Int)
(declare-const __flatten_106__146@255@07 Int)
(declare-const __flatten_112__151@256@07 $Ref)
(declare-const __flatten_113__152@257@07 $Ref)
(declare-const __flatten_114__153@258@07 Int)
(declare-const __flatten_111__150@259@07 Int)
(declare-const __flatten_117__155@260@07 $Ref)
(declare-const __flatten_118__156@261@07 $Ref)
(declare-const __flatten_119__157@262@07 Int)
(declare-const __flatten_116__154@263@07 Int)
(declare-const __flatten_122__159@264@07 $Ref)
(declare-const __flatten_121__158@265@07 $Ref)
(declare-const __flatten_124__161@266@07 $Ref)
(declare-const __flatten_123__160@267@07 $Ref)
(declare-const __flatten_126__163@268@07 $Ref)
(declare-const __flatten_127__164@269@07 Int)
(declare-const __flatten_125__162@270@07 Int)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@271@07 $Snap)
(assert (= $t@271@07 ($Snap.combine ($Snap.first $t@271@07) ($Snap.second $t@271@07))))
(declare-const $k@272@07 $Perm)
(assert ($Perm.isReadVar $k@272@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@272@07 $Perm.No) (< $Perm.No $k@272@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4991
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      272
;  :arith-assert-upper      235
;  :arith-conflicts         72
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    273
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2474
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              494
;  :propagations            214
;  :quant-instantiations    88
;  :rlimit-count            243499)
(assert (<= $Perm.No $k@272@07))
(assert (<= $k@272@07 $Perm.Write))
(assert (implies (< $Perm.No $k@272@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@271@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@271@07))
    ($Snap.second ($Snap.second $t@271@07)))))
(assert (= ($Snap.first ($Snap.second $t@271@07)) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4997
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      272
;  :arith-assert-upper      236
;  :arith-conflicts         72
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2477
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              495
;  :propagations            214
;  :quant-instantiations    88
;  :rlimit-count            243742)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@271@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@271@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5003
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      272
;  :arith-assert-upper      236
;  :arith-conflicts         72
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2480
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              496
;  :propagations            214
;  :quant-instantiations    89
;  :rlimit-count            244014)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@271@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5008
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      272
;  :arith-assert-upper      236
;  :arith-conflicts         72
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    276
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2481
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              497
;  :propagations            214
;  :quant-instantiations    89
;  :rlimit-count            244191)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5014
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      272
;  :arith-assert-upper      236
;  :arith-conflicts         72
;  :arith-eq-adapter        121
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    277
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2483
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              498
;  :propagations            214
;  :quant-instantiations    89
;  :rlimit-count            244410)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5021
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      274
;  :arith-assert-upper      237
;  :arith-conflicts         72
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    278
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2489
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              499
;  :propagations            214
;  :quant-instantiations    91
;  :rlimit-count            244739)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5027
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      274
;  :arith-assert-upper      237
;  :arith-conflicts         72
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2491
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              500
;  :propagations            214
;  :quant-instantiations    91
;  :rlimit-count            244978)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  $Snap.unit))
; [eval] (forall i__171: Int :: { diz.LFSR_m.Main_process_state[i__171] } 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|)
(declare-const i__171@273@07 Int)
(push) ; 7
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__171
(push) ; 8
; [then-branch: 30 | 0 <= i__171@273@07 | live]
; [else-branch: 30 | !(0 <= i__171@273@07) | live]
(push) ; 9
; [then-branch: 30 | 0 <= i__171@273@07]
(assert (<= 0 i__171@273@07))
; [eval] i__171 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      277
;  :arith-assert-upper      238
;  :arith-conflicts         72
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2499
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              501
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245417)
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(0 <= i__171@273@07)]
(assert (not (<= 0 i__171@273@07)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 31 | i__171@273@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i__171@273@07 | live]
; [else-branch: 31 | !(i__171@273@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i__171@273@07) | live]
(push) ; 9
; [then-branch: 31 | i__171@273@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i__171@273@07]
(assert (and
  (<
    i__171@273@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  (<= 0 i__171@273@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1
; [eval] diz.LFSR_m.Main_process_state[i__171]
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      278
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2501
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              502
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245574)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__171@273@07 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      278
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2501
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              503
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245583)
; [eval] -1
(push) ; 10
; [then-branch: 32 | First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07] == -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07] != -1 | live]
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i__171@273@07)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 32 | First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
      i__171@273@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171]
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      278
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2502
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              504
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245797)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__171@273@07 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      87
;  :arith-assert-lower      278
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2502
;  :mk-clause               349
;  :num-allocs              6111461
;  :num-checks              505
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245806)
(push) ; 12
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07] | live]
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07]) | live]
(push) ; 13
; [then-branch: 33 | 0 <= First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i__171@273@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2505
;  :mk-clause               350
;  :num-allocs              6111461
;  :num-checks              506
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245969)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__171@273@07 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2505
;  :mk-clause               350
;  :num-allocs              6111461
;  :num-checks              507
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            245978)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5035
;  :arith-add-rows          22
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    280
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              294
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2505
;  :mk-clause               350
;  :num-allocs              6111461
;  :num-checks              508
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            246026)
(pop) ; 13
(push) ; 13
; [else-branch: 33 | !(0 <= First:(Second:(Second:(Second:($t@271@07))))[i__171@273@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
      i__171@273@07))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 31 | !(i__171@273@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i__171@273@07)]
(assert (not
  (and
    (<
      i__171@273@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    (<= 0 i__171@273@07))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__171@273@07 Int)) (!
  (implies
    (and
      (<
        i__171@273@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
      (<= 0 i__171@273@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
          i__171@273@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i__171@273@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i__171@273@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i__171@273@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5040
;  :arith-add-rows          22
;  :arith-assert-diseq      88
;  :arith-assert-lower      281
;  :arith-assert-upper      239
;  :arith-conflicts         72
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    281
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2507
;  :mk-clause               350
;  :num-allocs              6111461
;  :num-checks              509
;  :propagations            214
;  :quant-instantiations    93
;  :rlimit-count            246651)
(declare-const $k@274@07 $Perm)
(assert ($Perm.isReadVar $k@274@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@274@07 $Perm.No) (< $Perm.No $k@274@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5040
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      240
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    281
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2511
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              510
;  :propagations            215
;  :quant-instantiations    93
;  :rlimit-count            246850)
(assert (<= $Perm.No $k@274@07))
(assert (<= $k@274@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@274@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5046
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    282
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2514
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              511
;  :propagations            215
;  :quant-instantiations    93
;  :rlimit-count            247173)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5046
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    282
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2514
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              512
;  :propagations            215
;  :quant-instantiations    93
;  :rlimit-count            247221)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5052
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2517
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              513
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            247577)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5052
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2517
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              514
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            247625)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5057
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2518
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              515
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            247882)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5057
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2518
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              516
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            247930)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5062
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    285
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2519
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              517
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248197)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5062
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    285
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2519
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              518
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248245)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5067
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    286
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2520
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              519
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248522)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5067
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    286
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2520
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              520
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248570)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5072
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2521
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              521
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248857)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5072
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    287
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2521
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              522
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            248905)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5077
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2522
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              523
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249202)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5077
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    288
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2522
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              524
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249250)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5082
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2523
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              525
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249557)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5082
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2523
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              526
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249605)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5087
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    290
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2524
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              527
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249922)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5087
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    290
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2524
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              528
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            249970)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5092
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2525
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              529
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            250297)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5092
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2525
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              530
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            250345)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5097
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2526
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              531
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            250682)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5097
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    292
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2526
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              532
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            250730)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5102
;  :arith-add-rows          22
;  :arith-assert-diseq      89
;  :arith-assert-lower      283
;  :arith-assert-upper      241
;  :arith-conflicts         72
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    293
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2527
;  :mk-clause               352
;  :num-allocs              6111461
;  :num-checks              533
;  :propagations            215
;  :quant-instantiations    94
;  :rlimit-count            251077)
(declare-const $k@275@07 $Perm)
(assert ($Perm.isReadVar $k@275@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@275@07 $Perm.No) (< $Perm.No $k@275@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5102
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      242
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    293
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2531
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              534
;  :propagations            216
;  :quant-instantiations    94
;  :rlimit-count            251275)
(assert (<= $Perm.No $k@275@07))
(assert (<= $k@275@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@275@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2534
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              535
;  :propagations            216
;  :quant-instantiations    94
;  :rlimit-count            251718)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5108
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2534
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              536
;  :propagations            216
;  :quant-instantiations    94
;  :rlimit-count            251766)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5114
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2537
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              537
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            252260)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5114
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2537
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              538
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            252308)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5119
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2538
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              539
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            252685)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5119
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2538
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              540
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            252733)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    297
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2539
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              541
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            253120)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5124
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    297
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2539
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              542
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            253168)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    298
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2540
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              543
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            253565)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5129
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    298
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2540
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              544
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            253613)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5134
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2541
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              545
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            254020)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5134
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2541
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              546
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            254068)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5139
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    300
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2542
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              547
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            254485)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5139
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    300
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2542
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              548
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            254533)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5144
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2543
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              549
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            254960)
(push) ; 7
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5144
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2543
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              550
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            255008)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5149
;  :arith-add-rows          22
;  :arith-assert-diseq      90
;  :arith-assert-lower      285
;  :arith-assert-upper      243
;  :arith-conflicts         72
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    302
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2544
;  :mk-clause               354
;  :num-allocs              6111461
;  :num-checks              551
;  :propagations            216
;  :quant-instantiations    95
;  :rlimit-count            255445)
(declare-const $k@276@07 $Perm)
(assert ($Perm.isReadVar $k@276@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@276@07 $Perm.No) (< $Perm.No $k@276@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5149
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      244
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    302
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2548
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              552
;  :propagations            217
;  :quant-instantiations    95
;  :rlimit-count            255644)
(assert (<= $Perm.No $k@276@07))
(assert (<= $k@276@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@276@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5155
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2551
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              553
;  :propagations            217
;  :quant-instantiations    95
;  :rlimit-count            256177)
(push) ; 7
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5155
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2551
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              554
;  :propagations            217
;  :quant-instantiations    95
;  :rlimit-count            256225)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5161
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2554
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              555
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            256803)
(push) ; 7
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5161
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2554
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              556
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            256851)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5166
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2555
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              557
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            257318)
(push) ; 7
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5166
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2555
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              558
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            257366)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5171
;  :arith-add-rows          22
;  :arith-assert-diseq      91
;  :arith-assert-lower      287
;  :arith-assert-upper      245
;  :arith-conflicts         72
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2556
;  :mk-clause               356
;  :num-allocs              6111461
;  :num-checks              559
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            257843)
(declare-const $k@277@07 $Perm)
(assert ($Perm.isReadVar $k@277@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@277@07 $Perm.No) (< $Perm.No $k@277@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5171
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      246
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2560
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              560
;  :propagations            218
;  :quant-instantiations    96
;  :rlimit-count            258042)
(assert (<= $Perm.No $k@277@07))
(assert (<= $k@277@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@277@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5177
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2563
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              561
;  :propagations            218
;  :quant-instantiations    96
;  :rlimit-count            258615)
(push) ; 7
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5177
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2563
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              562
;  :propagations            218
;  :quant-instantiations    96
;  :rlimit-count            258663)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5183
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    308
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2566
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              563
;  :propagations            218
;  :quant-instantiations    97
;  :rlimit-count            259271)
(push) ; 7
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5183
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    308
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2566
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              564
;  :propagations            218
;  :quant-instantiations    97
;  :rlimit-count            259319)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5188
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2567
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              565
;  :propagations            218
;  :quant-instantiations    97
;  :rlimit-count            259826)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5188
;  :arith-add-rows          22
;  :arith-assert-diseq      92
;  :arith-assert-lower      289
;  :arith-assert-upper      247
;  :arith-conflicts         72
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2567
;  :mk-clause               358
;  :num-allocs              6111461
;  :num-checks              566
;  :propagations            218
;  :quant-instantiations    97
;  :rlimit-count            259874)
(declare-const $k@278@07 $Perm)
(assert ($Perm.isReadVar $k@278@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@278@07 $Perm.No) (< $Perm.No $k@278@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5188
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      248
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2571
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              567
;  :propagations            219
;  :quant-instantiations    97
;  :rlimit-count            260073)
(assert (<= $Perm.No $k@278@07))
(assert (<= $k@278@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@278@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5194
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2574
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              568
;  :propagations            219
;  :quant-instantiations    97
;  :rlimit-count            260676)
(push) ; 7
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5194
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2574
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              569
;  :propagations            219
;  :quant-instantiations    97
;  :rlimit-count            260724)
(push) ; 7
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5194
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2574
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              570
;  :propagations            219
;  :quant-instantiations    97
;  :rlimit-count            260772)
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5194
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2574
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              571
;  :propagations            219
;  :quant-instantiations    97
;  :rlimit-count            260820)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 7
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5199
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2577
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              572
;  :propagations            219
;  :quant-instantiations    98
;  :rlimit-count            261404)
(push) ; 7
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5199
;  :arith-add-rows          22
;  :arith-assert-diseq      93
;  :arith-assert-lower      291
;  :arith-assert-upper      249
;  :arith-conflicts         72
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              295
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2577
;  :mk-clause               360
;  :num-allocs              6111461
;  :num-checks              573
;  :propagations            219
;  :quant-instantiations    98
;  :rlimit-count            261452)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  diz@89@07))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@279@07 $Perm)
(assert ($Perm.isReadVar $k@279@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@279@07 $Perm.No) (< $Perm.No $k@279@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5202
;  :arith-add-rows          22
;  :arith-assert-diseq      94
;  :arith-assert-lower      293
;  :arith-assert-upper      250
;  :arith-conflicts         72
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              307
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2582
;  :mk-clause               362
;  :num-allocs              6111461
;  :num-checks              574
;  :propagations            220
;  :quant-instantiations    98
;  :rlimit-count            262019)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ $k@175@07 (- $k@92@07 $k@182@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          22
;  :arith-assert-diseq      94
;  :arith-assert-lower      293
;  :arith-assert-upper      251
;  :arith-conflicts         73
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         79
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2584
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              575
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262099)
(assert (< $k@279@07 (+ $k@175@07 (- $k@92@07 $k@182@07))))
(assert (<= $Perm.No (- (+ $k@175@07 (- $k@92@07 $k@182@07)) $k@279@07)))
(assert (<= (- (+ $k@175@07 (- $k@92@07 $k@182@07)) $k@279@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@175@07 (- $k@92@07 $k@182@07)) $k@279@07))
  (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      253
;  :arith-conflicts         74
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         80
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2588
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              576
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262368)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@215@07 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      253
;  :arith-conflicts         74
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         80
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2588
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              577
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262386)
(assert (not (= $t@215@07 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      254
;  :arith-conflicts         75
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         81
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2589
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              578
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262487)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      254
;  :arith-conflicts         75
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         81
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2590
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              579
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262567)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      255
;  :arith-conflicts         76
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         82
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2591
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              580
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262648)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      255
;  :arith-conflicts         76
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         82
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2592
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              581
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262728)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      256
;  :arith-conflicts         77
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         83
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2593
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              582
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262809)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      256
;  :arith-conflicts         77
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         83
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2594
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              583
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262889)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      257
;  :arith-conflicts         78
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         84
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2595
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              584
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            262970)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      257
;  :arith-conflicts         78
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         84
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2596
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              585
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263050)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      258
;  :arith-conflicts         79
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         85
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2597
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              586
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263131)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      295
;  :arith-assert-upper      258
;  :arith-conflicts         79
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         85
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2598
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              587
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263211)
; [eval] (forall i__171: Int :: { diz.LFSR_m.Main_process_state[i__171] } 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|)
(declare-const i__171@280@07 Int)
(push) ; 7
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__171
(push) ; 8
; [then-branch: 34 | 0 <= i__171@280@07 | live]
; [else-branch: 34 | !(0 <= i__171@280@07) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__171@280@07]
(assert (<= 0 i__171@280@07))
; [eval] i__171 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      296
;  :arith-assert-upper      259
;  :arith-conflicts         80
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         86
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2600
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              588
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263344)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      296
;  :arith-assert-upper      259
;  :arith-conflicts         80
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         86
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2601
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              589
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263424)
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__171@280@07)]
(assert (not (<= 0 i__171@280@07)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__171@280@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__171@280@07 | live]
; [else-branch: 35 | !(i__171@280@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__171@280@07) | live]
(push) ; 9
; [then-branch: 35 | i__171@280@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__171@280@07]
(assert (and
  (<
    i__171@280@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
  (<= 0 i__171@280@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1
; [eval] diz.LFSR_m.Main_process_state[i__171]
(push) ; 10
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      297
;  :arith-assert-upper      261
;  :arith-conflicts         81
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         87
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2604
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              590
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263614)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      297
;  :arith-assert-upper      261
;  :arith-conflicts         81
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         87
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2605
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              591
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263694)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__171@280@07 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      94
;  :arith-assert-lower      297
;  :arith-assert-upper      261
;  :arith-conflicts         81
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         87
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2605
;  :mk-clause               364
;  :num-allocs              6111461
;  :num-checks              592
;  :propagations            221
;  :quant-instantiations    98
;  :rlimit-count            263703)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__171@280@07)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i__171@280@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171]
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      263
;  :arith-conflicts         82
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         88
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2612
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              593
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264007)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      263
;  :arith-conflicts         82
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         88
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2613
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              594
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264087)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__171@280@07 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      263
;  :arith-conflicts         82
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         88
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2613
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              595
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264096)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__171@280@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      264
;  :arith-conflicts         83
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         89
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2614
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              596
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264282)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      264
;  :arith-conflicts         83
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         89
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2615
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              597
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264362)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__171@280@07 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      264
;  :arith-conflicts         83
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         89
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2615
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              598
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264371)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      265
;  :arith-conflicts         84
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         90
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2616
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              599
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264452)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      300
;  :arith-assert-upper      265
;  :arith-conflicts         84
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         90
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              309
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2617
;  :mk-clause               368
;  :num-allocs              6111461
;  :num-checks              600
;  :propagations            223
;  :quant-instantiations    99
;  :rlimit-count            264532)
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@174@07))))[i__171@280@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
      i__171@280@07))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__171@280@07 < |First:(Second:(Second:(Second:($t@174@07))))| && 0 <= i__171@280@07)]
(assert (not
  (and
    (<
      i__171@280@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
    (<= 0 i__171@280@07))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__171@280@07 Int)) (!
  (implies
    (and
      (<
        i__171@280@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i__171@280@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i__171@280@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__171@280@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__171@280@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__171@280@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      97
;  :arith-assert-lower      301
;  :arith-assert-upper      266
;  :arith-conflicts         84
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         90
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2625
;  :mk-clause               382
;  :num-allocs              6111461
;  :num-checks              601
;  :propagations            225
;  :quant-instantiations    100
;  :rlimit-count            264978)
(assert (forall ((i__171@280@07 Int)) (!
  (implies
    (and
      (<
        i__171@280@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))
      (<= 0 i__171@280@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
          i__171@280@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__171@280@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
            i__171@280@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))
    i__171@280@07))
  :qid |prog.l<no position>|)))
(declare-const $k@281@07 $Perm)
(assert ($Perm.isReadVar $k@281@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      98
;  :arith-assert-lower      303
;  :arith-assert-upper      268
;  :arith-conflicts         85
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         91
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2631
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              602
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            265570)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@281@07 $Perm.No) (< $Perm.No $k@281@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      98
;  :arith-assert-lower      303
;  :arith-assert-upper      268
;  :arith-conflicts         85
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         91
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2631
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              603
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            265620)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      98
;  :arith-assert-lower      303
;  :arith-assert-upper      268
;  :arith-conflicts         85
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         91
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2631
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              604
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            265631)
(push) ; 7
(assert (not (not (= (- $k@161@07 $k@184@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          24
;  :arith-assert-diseq      98
;  :arith-assert-lower      303
;  :arith-assert-upper      268
;  :arith-conflicts         85
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         91
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2632
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              605
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            265699)
(assert (< $k@281@07 (- $k@161@07 $k@184@07)))
(assert (<= $Perm.No (- (- $k@161@07 $k@184@07) $k@281@07)))
(assert (<= (- (- $k@161@07 $k@184@07) $k@281@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@161@07 $k@184@07) $k@281@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      270
;  :arith-conflicts         86
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         92
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2636
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              606
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            265992)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      270
;  :arith-conflicts         86
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         92
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2636
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              607
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            266003)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      270
;  :arith-conflicts         86
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         92
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2636
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              608
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            266022)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2637
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              609
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            266103)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2637
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              610
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            266114)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5203
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1270
;  :datatype-occurs-check   332
;  :datatype-splits         1111
;  :decisions               1233
;  :del-clause              327
;  :final-checks            83
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2637
;  :mk-clause               384
;  :num-allocs              6111461
;  :num-checks              611
;  :propagations            226
;  :quant-instantiations    100
;  :rlimit-count            266133)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5439
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    313
;  :datatype-constructor-ax 1354
;  :datatype-occurs-check   343
;  :datatype-splits         1168
;  :decisions               1314
;  :del-clause              328
;  :final-checks            86
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2697
;  :mk-clause               385
;  :num-allocs              6111461
;  :num-checks              612
;  :propagations            228
;  :quant-instantiations    100
;  :rlimit-count            268003
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5785
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1468
;  :datatype-occurs-check   365
;  :datatype-splits         1278
;  :decisions               1424
;  :del-clause              332
;  :final-checks            92
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2805
;  :mk-clause               385
;  :num-allocs              6111461
;  :num-checks              615
;  :propagations            232
;  :quant-instantiations    100
;  :rlimit-count            270617)
(declare-const $t@282@07 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6021
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2865
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              616
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            272487
;  :time                    0.00)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6021
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2866
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              617
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            272567)
(declare-const $t@283@07 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6021
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2867
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              618
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            272647)
(declare-const $t@284@07 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6021
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2868
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              619
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            272727)
(declare-const $t@285@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@161@07 $k@184@07) $k@281@07))
    (=
      $t@282@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))
  (implies
    (< $Perm.No $k@177@07)
    (=
      $t@282@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@180@07)
    (=
      $t@283@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@165@07 $k@187@07))
    (=
      $t@283@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@179@07)
    (=
      $t@284@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))
    (= $t@284@07 $t@164@07))))
(assert (and
  (implies
    (< $Perm.No $k@178@07)
    (=
      $t@285@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@162@07 $k@185@07))
    (=
      $t@285@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6034
;  :arith-add-rows          26
;  :arith-assert-diseq      98
;  :arith-assert-lower      305
;  :arith-assert-upper      271
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2875
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              620
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            274095)
(declare-const $t@286@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@166@07 $k@188@07))
    (=
      $t@286@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@181@07)
    (=
      $t@286@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@178@07 (- $k@162@07 $k@185@07))))
(assert (<= (+ $k@178@07 (- $k@162@07 $k@185@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@178@07 (- $k@162@07 $k@185@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07))))
(assert (<= (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@180@07 (- $k@165@07 $k@187@07))))
(assert (<= (+ $k@180@07 (- $k@165@07 $k@187@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@180@07 (- $k@165@07 $k@187@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@161@07 $k@184@07) $k@281@07) $k@177@07)))
(assert (<= (+ (- (- $k@161@07 $k@184@07) $k@281@07) $k@177@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@161@07 $k@184@07) $k@281@07) $k@177@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- $k@166@07 $k@188@07) $k@181@07)))
(assert (<= (+ (- $k@166@07 $k@188@07) $k@181@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@166@07 $k@188@07) $k@181@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
      $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      276
;  :arith-conflicts         87
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         93
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2887
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              621
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            274972)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      277
;  :arith-conflicts         88
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         94
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2888
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              622
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275053)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      277
;  :arith-conflicts         88
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         94
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2888
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              623
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275064)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      277
;  :arith-conflicts         88
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         94
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2888
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              624
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275083)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      277
;  :arith-conflicts         88
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         94
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2889
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              625
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275243)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      278
;  :arith-conflicts         89
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         95
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2890
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              626
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275324)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      278
;  :arith-conflicts         89
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         95
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2890
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              627
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275335)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      278
;  :arith-conflicts         89
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         95
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2890
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              628
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275354)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      278
;  :arith-conflicts         89
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         95
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2891
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              629
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275514)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      279
;  :arith-conflicts         90
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         96
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2892
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              630
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275595)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      279
;  :arith-conflicts         90
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         96
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2892
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              631
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275606)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      279
;  :arith-conflicts         90
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         96
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2892
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              632
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275625)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      279
;  :arith-conflicts         90
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         96
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2893
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              633
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275785)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      280
;  :arith-conflicts         91
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         97
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2894
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              634
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275866)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      280
;  :arith-conflicts         91
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         97
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2894
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              635
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275877)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      280
;  :arith-conflicts         91
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         97
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2894
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              636
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            275896)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      280
;  :arith-conflicts         91
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         97
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2895
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              637
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276056)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      281
;  :arith-conflicts         92
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         98
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2896
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              638
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276137)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      281
;  :arith-conflicts         92
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         98
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2896
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              639
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276148)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      281
;  :arith-conflicts         92
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         98
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2896
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              640
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276167)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      281
;  :arith-conflicts         92
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         98
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2897
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              641
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276327)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      282
;  :arith-conflicts         93
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         99
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2898
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              642
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276408)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      282
;  :arith-conflicts         93
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         99
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2898
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              643
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276419)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      282
;  :arith-conflicts         93
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         99
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2898
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              644
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276438)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      282
;  :arith-conflicts         93
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         99
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2899
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              645
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276598)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      283
;  :arith-conflicts         94
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         100
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2900
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              646
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276679)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      283
;  :arith-conflicts         94
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         100
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2900
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              647
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276690)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      283
;  :arith-conflicts         94
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         100
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2900
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              648
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276709)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      283
;  :arith-conflicts         94
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         100
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2901
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              649
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276869)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      284
;  :arith-conflicts         95
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         101
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2902
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              650
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276950)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      284
;  :arith-conflicts         95
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         101
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2902
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              651
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276961)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      284
;  :arith-conflicts         95
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         101
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2902
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              652
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            276980)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      284
;  :arith-conflicts         95
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         101
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2903
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              653
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            277140)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      285
;  :arith-conflicts         96
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2904
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              654
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            277221)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      285
;  :arith-conflicts         96
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2904
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              655
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            277232)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      285
;  :arith-conflicts         96
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2904
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              656
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            277251)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      98
;  :arith-assert-lower      310
;  :arith-assert-upper      285
;  :arith-conflicts         96
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         102
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2905
;  :mk-clause               386
;  :num-allocs              6111461
;  :num-checks              657
;  :propagations            234
;  :quant-instantiations    100
;  :rlimit-count            277411)
(declare-const $k@287@07 $Perm)
(assert ($Perm.isReadVar $k@287@07 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      99
;  :arith-assert-lower      312
;  :arith-assert-upper      287
;  :arith-conflicts         97
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         103
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2910
;  :mk-clause               388
;  :num-allocs              6111461
;  :num-checks              658
;  :propagations            235
;  :quant-instantiations    100
;  :rlimit-count            277641)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@287@07 $Perm.No) (< $Perm.No $k@287@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      99
;  :arith-assert-lower      312
;  :arith-assert-upper      287
;  :arith-conflicts         97
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         103
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2910
;  :mk-clause               388
;  :num-allocs              6111461
;  :num-checks              659
;  :propagations            235
;  :quant-instantiations    100
;  :rlimit-count            277691)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6035
;  :arith-add-rows          30
;  :arith-assert-diseq      99
;  :arith-assert-lower      312
;  :arith-assert-upper      287
;  :arith-conflicts         97
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         103
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              333
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2911
;  :mk-clause               388
;  :num-allocs              6111461
;  :num-checks              660
;  :propagations            235
;  :quant-instantiations    100
;  :rlimit-count            277771)
(push) ; 7
(assert (not (not (= (+ $k@178@07 (- $k@162@07 $k@185@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          30
;  :arith-assert-diseq      99
;  :arith-assert-lower      312
;  :arith-assert-upper      288
;  :arith-conflicts         98
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         103
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2913
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              661
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            277855)
(assert (< $k@287@07 (+ $k@178@07 (- $k@162@07 $k@185@07))))
(assert (<= $Perm.No (- (+ $k@178@07 (- $k@162@07 $k@185@07)) $k@287@07)))
(assert (<= (- (+ $k@178@07 (- $k@162@07 $k@185@07)) $k@287@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@178@07 (- $k@162@07 $k@185@07)) $k@287@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      290
;  :arith-conflicts         99
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         104
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2917
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              662
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278124)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      290
;  :arith-conflicts         99
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         104
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2917
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              663
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278135)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      290
;  :arith-conflicts         99
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         104
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2917
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              664
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278154)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      291
;  :arith-conflicts         100
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         105
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2918
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              665
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278235)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      291
;  :arith-conflicts         100
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         105
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2918
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              666
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278246)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      291
;  :arith-conflicts         100
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         105
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2918
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              667
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278265)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      291
;  :arith-conflicts         100
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         105
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2919
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              668
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278545)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      292
;  :arith-conflicts         101
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         106
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2920
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              669
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278626)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      292
;  :arith-conflicts         101
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         106
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2920
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              670
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278637)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      292
;  :arith-conflicts         101
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         106
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2920
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              671
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278656)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      292
;  :arith-conflicts         101
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         106
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2921
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              672
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            278936)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      293
;  :arith-conflicts         102
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         107
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2922
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              673
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279017)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      293
;  :arith-conflicts         102
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         107
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2922
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              674
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279028)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      293
;  :arith-conflicts         102
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         107
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2922
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              675
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279047)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      293
;  :arith-conflicts         102
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         107
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2923
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              676
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279327)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      294
;  :arith-conflicts         103
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         108
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2924
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              677
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279408)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      294
;  :arith-conflicts         103
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         108
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2924
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              678
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279419)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      294
;  :arith-conflicts         103
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         108
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2924
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              679
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279438)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      294
;  :arith-conflicts         103
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         108
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2925
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              680
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279718)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      295
;  :arith-conflicts         104
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         109
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2926
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              681
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279799)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      295
;  :arith-conflicts         104
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         109
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2926
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              682
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279810)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      295
;  :arith-conflicts         104
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         109
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2926
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              683
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            279829)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      295
;  :arith-conflicts         104
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         109
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2927
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              684
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280109)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      296
;  :arith-conflicts         105
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         110
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2928
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              685
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280190)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      296
;  :arith-conflicts         105
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         110
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2928
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              686
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280201)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      296
;  :arith-conflicts         105
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         110
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2928
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              687
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280220)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      296
;  :arith-conflicts         105
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         110
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2929
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              688
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280500)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      297
;  :arith-conflicts         106
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         111
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2930
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              689
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280581)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      297
;  :arith-conflicts         106
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         111
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2930
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              690
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280592)
(push) ; 7
(assert (not (< $Perm.No (- $k@162@07 $k@185@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      297
;  :arith-conflicts         106
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         111
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2930
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              691
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280611)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      99
;  :arith-assert-lower      314
;  :arith-assert-upper      297
;  :arith-conflicts         106
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         111
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2931
;  :mk-clause               390
;  :num-allocs              6111461
;  :num-checks              692
;  :propagations            236
;  :quant-instantiations    100
;  :rlimit-count            280891)
(declare-const $k@288@07 $Perm)
(assert ($Perm.isReadVar $k@288@07 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      100
;  :arith-assert-lower      316
;  :arith-assert-upper      299
;  :arith-conflicts         107
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         112
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2936
;  :mk-clause               392
;  :num-allocs              6111461
;  :num-checks              693
;  :propagations            237
;  :quant-instantiations    100
;  :rlimit-count            281121)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@288@07 $Perm.No) (< $Perm.No $k@288@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      100
;  :arith-assert-lower      316
;  :arith-assert-upper      299
;  :arith-conflicts         107
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         112
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2936
;  :mk-clause               392
;  :num-allocs              6111461
;  :num-checks              694
;  :propagations            237
;  :quant-instantiations    100
;  :rlimit-count            281171)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6036
;  :arith-add-rows          32
;  :arith-assert-diseq      100
;  :arith-assert-lower      316
;  :arith-assert-upper      299
;  :arith-conflicts         107
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         112
;  :arith-pivots            83
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              335
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2937
;  :mk-clause               392
;  :num-allocs              6111461
;  :num-checks              695
;  :propagations            237
;  :quant-instantiations    100
;  :rlimit-count            281251)
(push) ; 7
(assert (not (not (= (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          33
;  :arith-assert-diseq      100
;  :arith-assert-lower      316
;  :arith-assert-upper      300
;  :arith-conflicts         108
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         112
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2939
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              696
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281366)
(assert (< $k@288@07 (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07))))
(assert (<= $Perm.No (- (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)) $k@288@07)))
(assert (<= (- (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)) $k@288@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@179@07 (- (+ $k@93@07 $k@163@07) $k@186@07)) $k@288@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      302
;  :arith-conflicts         109
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         113
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2943
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              697
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281638)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      302
;  :arith-conflicts         109
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         113
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2943
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              698
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281649)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      302
;  :arith-conflicts         109
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         113
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2943
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              699
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281670)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      303
;  :arith-conflicts         110
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         114
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2944
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              700
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281751)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      303
;  :arith-conflicts         110
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         114
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2944
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              701
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281762)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      303
;  :arith-conflicts         110
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         114
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2944
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              702
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281783)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  $t@164@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      303
;  :arith-conflicts         110
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         114
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2944
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              703
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281794)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      304
;  :arith-conflicts         111
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         115
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2945
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              704
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281875)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      304
;  :arith-conflicts         111
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         115
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2945
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              705
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281886)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      304
;  :arith-conflicts         111
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         115
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2945
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              706
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281907)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))
  $t@164@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      100
;  :arith-assert-lower      318
;  :arith-assert-upper      304
;  :arith-conflicts         111
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         115
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2945
;  :mk-clause               394
;  :num-allocs              6111461
;  :num-checks              707
;  :propagations            238
;  :quant-instantiations    100
;  :rlimit-count            281918)
(declare-const $k@289@07 $Perm)
(assert ($Perm.isReadVar $k@289@07 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      101
;  :arith-assert-lower      320
;  :arith-assert-upper      306
;  :arith-conflicts         112
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         116
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2950
;  :mk-clause               396
;  :num-allocs              6111461
;  :num-checks              708
;  :propagations            239
;  :quant-instantiations    100
;  :rlimit-count            282147)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@289@07 $Perm.No) (< $Perm.No $k@289@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      101
;  :arith-assert-lower      320
;  :arith-assert-upper      306
;  :arith-conflicts         112
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         116
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2950
;  :mk-clause               396
;  :num-allocs              6111461
;  :num-checks              709
;  :propagations            239
;  :quant-instantiations    100
;  :rlimit-count            282197)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6037
;  :arith-add-rows          34
;  :arith-assert-diseq      101
;  :arith-assert-lower      320
;  :arith-assert-upper      306
;  :arith-conflicts         112
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         116
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              337
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2951
;  :mk-clause               396
;  :num-allocs              6111461
;  :num-checks              710
;  :propagations            239
;  :quant-instantiations    100
;  :rlimit-count            282277)
(push) ; 7
(assert (not (not (= (+ $k@180@07 (- $k@165@07 $k@187@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          34
;  :arith-assert-diseq      101
;  :arith-assert-lower      320
;  :arith-assert-upper      307
;  :arith-conflicts         113
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         116
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2953
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              711
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282361)
(assert (< $k@289@07 (+ $k@180@07 (- $k@165@07 $k@187@07))))
(assert (<= $Perm.No (- (+ $k@180@07 (- $k@165@07 $k@187@07)) $k@289@07)))
(assert (<= (- (+ $k@180@07 (- $k@165@07 $k@187@07)) $k@289@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@180@07 (- $k@165@07 $k@187@07)) $k@289@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@174@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      309
;  :arith-conflicts         114
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         117
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2957
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              712
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282630)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      309
;  :arith-conflicts         114
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         117
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2957
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              713
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282641)
(push) ; 7
(assert (not (< $Perm.No (- $k@165@07 $k@187@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      309
;  :arith-conflicts         114
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         117
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2957
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              714
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282660)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      310
;  :arith-conflicts         115
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         118
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2958
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              715
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282741)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      310
;  :arith-conflicts         115
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         118
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2958
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              716
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282752)
(push) ; 7
(assert (not (< $Perm.No (- $k@165@07 $k@187@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      310
;  :arith-conflicts         115
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         118
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2958
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              717
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            282771)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@174@07)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      101
;  :arith-assert-lower      322
;  :arith-assert-upper      310
;  :arith-conflicts         115
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         118
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2959
;  :mk-clause               398
;  :num-allocs              6111461
;  :num-checks              718
;  :propagations            240
;  :quant-instantiations    100
;  :rlimit-count            283181)
(declare-const $k@290@07 $Perm)
(assert ($Perm.isReadVar $k@290@07 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      324
;  :arith-assert-upper      312
;  :arith-conflicts         116
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         119
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2964
;  :mk-clause               400
;  :num-allocs              6111461
;  :num-checks              719
;  :propagations            241
;  :quant-instantiations    100
;  :rlimit-count            283410)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      324
;  :arith-assert-upper      312
;  :arith-conflicts         116
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         119
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2964
;  :mk-clause               400
;  :num-allocs              6111461
;  :num-checks              720
;  :propagations            241
;  :quant-instantiations    100
;  :rlimit-count            283421)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      324
;  :arith-assert-upper      312
;  :arith-conflicts         116
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         119
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2964
;  :mk-clause               400
;  :num-allocs              6111461
;  :num-checks              721
;  :propagations            241
;  :quant-instantiations    100
;  :rlimit-count            283440)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@290@07 $Perm.No) (< $Perm.No $k@290@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6038
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      324
;  :arith-assert-upper      312
;  :arith-conflicts         116
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         119
;  :arith-pivots            86
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              339
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2964
;  :mk-clause               400
;  :num-allocs              6111461
;  :num-checks              722
;  :propagations            241
;  :quant-instantiations    100
;  :rlimit-count            283490)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (- $k@166@07 $k@188@07) $k@181@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          36
;  :arith-assert-diseq      102
;  :arith-assert-lower      324
;  :arith-assert-upper      313
;  :arith-conflicts         117
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         119
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2966
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              723
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283574)
(assert (< $k@290@07 (+ (- $k@166@07 $k@188@07) $k@181@07)))
(assert (<= $Perm.No (- (+ (- $k@166@07 $k@188@07) $k@181@07) $k@290@07)))
(assert (<= (- (+ (- $k@166@07 $k@188@07) $k@181@07) $k@290@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@166@07 $k@188@07) $k@181@07) $k@290@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      315
;  :arith-conflicts         118
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         120
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2970
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              724
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283849)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      315
;  :arith-conflicts         118
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         120
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2970
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              725
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283860)
(push) ; 7
(assert (not (< $Perm.No (- $k@161@07 $k@184@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      315
;  :arith-conflicts         118
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         120
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2970
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              726
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283879)
(push) ; 7
(assert (not (< $Perm.No (- $k@166@07 $k@188@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      315
;  :arith-conflicts         118
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         120
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2970
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              727
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283898)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      316
;  :arith-conflicts         119
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         121
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2971
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              728
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283979)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))
  $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      316
;  :arith-conflicts         119
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         121
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2971
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              729
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            283998)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@159@07))))))))))))))))))))))))))))))))))))))
  $t@215@07))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@175@07 (- $k@92@07 $k@182@07)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      317
;  :arith-conflicts         120
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2972
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              730
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            284097)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@91@07))) $t@215@07)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      317
;  :arith-conflicts         120
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2972
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              731
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            284108)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@93@07 $k@163@07) $k@186@07))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6039
;  :arith-add-rows          38
;  :arith-assert-diseq      102
;  :arith-assert-lower      326
;  :arith-assert-upper      317
;  :arith-conflicts         120
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1552
;  :datatype-occurs-check   376
;  :datatype-splits         1335
;  :decisions               1505
;  :del-clause              341
;  :final-checks            95
;  :max-generation          2
;  :max-memory              5.01
;  :memory                  4.92
;  :mk-bool-var             2972
;  :mk-clause               402
;  :num-allocs              6111461
;  :num-checks              732
;  :propagations            242
;  :quant-instantiations    100
;  :rlimit-count            284129)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@272@07 $Perm.Write))
(assert ($Perm.isReadVar $k@274@07 $Perm.Write))
(assert ($Perm.isReadVar $k@275@07 $Perm.Write))
(assert ($Perm.isReadVar $k@276@07 $Perm.Write))
(assert ($Perm.isReadVar $k@277@07 $Perm.Write))
(assert ($Perm.isReadVar $k@278@07 $Perm.Write))
(assert (= $t@271@07 ($Snap.combine ($Snap.first $t@271@07) ($Snap.second $t@271@07))))
(assert (<= $Perm.No $k@272@07))
(assert (<= $k@272@07 $Perm.Write))
(assert (implies (< $Perm.No $k@272@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@271@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@271@07))
    ($Snap.second ($Snap.second $t@271@07)))))
(assert (= ($Snap.first ($Snap.second $t@271@07)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@271@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@271@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@271@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  $Snap.unit))
(assert (forall ((i__171@273@07 Int)) (!
  (implies
    (and
      (<
        i__171@273@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
      (<= 0 i__171@273@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
          i__171@273@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i__171@273@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i__171@273@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i__171@273@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
(assert (<= $Perm.No $k@274@07))
(assert (<= $k@274@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@274@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
(assert (<= $Perm.No $k@275@07))
(assert (<= $k@275@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@275@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@276@07))
(assert (<= $k@276@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@276@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@277@07))
(assert (<= $k@277@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@277@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@278@07))
(assert (<= $k@278@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@278@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))
  diz@89@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7199
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   415
;  :datatype-splits         1578
;  :decisions               1793
;  :del-clause              355
;  :final-checks            104
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3315
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              735
;  :propagations            256
;  :quant-instantiations    110
;  :rlimit-count            295854
;  :time                    0.00)
; [then-branch: 38 | True | live]
; [else-branch: 38 | False | dead]
(push) ; 8
; [then-branch: 38 | True]
; [exec]
; __flatten_77__117 := diz.LFSR_m
(push) ; 9
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7199
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   415
;  :datatype-splits         1578
;  :decisions               1793
;  :del-clause              355
;  :final-checks            104
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3315
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              736
;  :propagations            256
;  :quant-instantiations    110
;  :rlimit-count            295907)
(declare-const __flatten_77__117@291@07 $Ref)
(assert (= __flatten_77__117@291@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_76__116 := __flatten_77__117.Main_rn
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_77__117@291@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7200
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   415
;  :datatype-splits         1578
;  :decisions               1793
;  :del-clause              355
;  :final-checks            104
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3316
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              737
;  :propagations            256
;  :quant-instantiations    110
;  :rlimit-count            295975)
(push) ; 9
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7200
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   415
;  :datatype-splits         1578
;  :decisions               1793
;  :del-clause              355
;  :final-checks            104
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3316
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              738
;  :propagations            256
;  :quant-instantiations    110
;  :rlimit-count            296023)
(declare-const __flatten_76__116@292@07 $Ref)
(assert (=
  __flatten_76__116@292@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [eval] !__flatten_76__116.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_76__116@292@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7201
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1849
;  :datatype-occurs-check   415
;  :datatype-splits         1578
;  :decisions               1793
;  :del-clause              355
;  :final-checks            104
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3317
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              739
;  :propagations            256
;  :quant-instantiations    110
;  :rlimit-count            296171)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7475
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1932
;  :datatype-occurs-check   428
;  :datatype-splits         1659
;  :decisions               1873
;  :del-clause              355
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3400
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              740
;  :propagations            259
;  :quant-instantiations    112
;  :rlimit-count            298159
;  :time                    0.00)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7749
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3483
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              741
;  :propagations            262
;  :quant-instantiations    114
;  :rlimit-count            300121
;  :time                    0.00)
; [then-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07))))))))))))) | live]
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))) | live]
(push) ; 9
; [then-branch: 39 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
; [exec]
; __flatten_79__119 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7753
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3486
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              742
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300376)
(declare-const __flatten_79__119@293@07 $Ref)
(assert (= __flatten_79__119@293@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_78__118 := __flatten_79__119.Main_rn
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_79__119@293@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7754
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3487
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              743
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300424)
(push) ; 10
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7754
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3487
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              744
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300472)
(declare-const __flatten_78__118@294@07 $Ref)
(assert (=
  __flatten_78__118@294@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [exec]
; __flatten_78__118.Rng_LFSR_reg := 1
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_78__118@294@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7755
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3488
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              745
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300520)
(assert (not (= __flatten_78__118@294@07 $Ref.null)))
; [exec]
; __flatten_128__165 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7756
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               594
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3489
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              746
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300624)
(declare-const __flatten_128__165@295@07 $Ref)
(assert (= __flatten_128__165@295@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_130__167 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7757
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3490
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              747
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300709)
(declare-const __flatten_130__167@296@07 $Ref)
(assert (= __flatten_130__167@296@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_129__166 := __flatten_130__167.Main_process_state[1 := 3]
; [eval] __flatten_130__167.Main_process_state[1 := 3]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_130__167@296@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7758
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3491
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              748
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300757)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7758
;  :arith-add-rows          38
;  :arith-assert-diseq      108
;  :arith-assert-lower      342
;  :arith-assert-upper      331
;  :arith-conflicts         120
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         122
;  :arith-pivots            88
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3491
;  :mk-clause               417
;  :num-allocs              6361074
;  :num-checks              749
;  :propagations            262
;  :quant-instantiations    116
;  :rlimit-count            300772)
(declare-const __flatten_129__166@297@07 Seq<Int>)
(assert (Seq_equal
  __flatten_129__166@297@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    1
    3)))
; [exec]
; __flatten_128__165.Main_process_state := __flatten_129__166
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_128__165@295@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7768
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      346
;  :arith-assert-upper      333
;  :arith-conflicts         120
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3514
;  :mk-clause               436
;  :num-allocs              6361074
;  :num-checks              750
;  :propagations            271
;  :quant-instantiations    121
;  :rlimit-count            301253)
(assert (not (= __flatten_128__165@295@07 $Ref.null)))
; [exec]
; __flatten_131__168 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7769
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      346
;  :arith-assert-upper      333
;  :arith-conflicts         120
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3515
;  :mk-clause               436
;  :num-allocs              6361074
;  :num-checks              751
;  :propagations            271
;  :quant-instantiations    121
;  :rlimit-count            301357)
(declare-const __flatten_131__168@298@07 $Ref)
(assert (= __flatten_131__168@298@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_133__170 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7770
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      346
;  :arith-assert-upper      333
;  :arith-conflicts         120
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3516
;  :mk-clause               436
;  :num-allocs              6361074
;  :num-checks              752
;  :propagations            271
;  :quant-instantiations    121
;  :rlimit-count            301442)
(declare-const __flatten_133__170@299@07 $Ref)
(assert (= __flatten_133__170@299@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_132__169 := __flatten_133__170.Main_event_state[3 := 5]
; [eval] __flatten_133__170.Main_event_state[3 := 5]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_133__170@299@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7771
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      346
;  :arith-assert-upper      333
;  :arith-conflicts         120
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3517
;  :mk-clause               436
;  :num-allocs              6361074
;  :num-checks              753
;  :propagations            271
;  :quant-instantiations    121
;  :rlimit-count            301490)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7771
;  :arith-add-rows          41
;  :arith-assert-diseq      109
;  :arith-assert-lower      346
;  :arith-assert-upper      333
;  :arith-conflicts         120
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         124
;  :arith-pivots            90
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3517
;  :mk-clause               436
;  :num-allocs              6361074
;  :num-checks              754
;  :propagations            271
;  :quant-instantiations    121
;  :rlimit-count            301505)
(declare-const __flatten_132__169@300@07 Seq<Int>)
(assert (Seq_equal
  __flatten_132__169@300@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    3
    5)))
; [exec]
; __flatten_131__168.Main_event_state := __flatten_132__169
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_131__168@298@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7781
;  :arith-add-rows          44
;  :arith-assert-diseq      110
;  :arith-assert-lower      350
;  :arith-assert-upper      335
;  :arith-conflicts         120
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3540
;  :mk-clause               455
;  :num-allocs              6361074
;  :num-checks              755
;  :propagations            280
;  :quant-instantiations    126
;  :rlimit-count            302007)
(assert (not (= __flatten_131__168@298@07 $Ref.null)))
(push) ; 10
; Loop head block: Check well-definedness of invariant
(declare-const $t@301@07 $Snap)
(assert (= $t@301@07 ($Snap.combine ($Snap.first $t@301@07) ($Snap.second $t@301@07))))
(declare-const $k@302@07 $Perm)
(assert ($Perm.isReadVar $k@302@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@302@07 $Perm.No) (< $Perm.No $k@302@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7786
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      352
;  :arith-assert-upper      336
;  :arith-conflicts         120
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               598
;  :datatype-accessor-ax    373
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3545
;  :mk-clause               457
;  :num-allocs              6361074
;  :num-checks              756
;  :propagations            281
;  :quant-instantiations    126
;  :rlimit-count            302318)
(assert (<= $Perm.No $k@302@07))
(assert (<= $k@302@07 $Perm.Write))
(assert (implies (< $Perm.No $k@302@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@301@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@301@07))
    ($Snap.second ($Snap.second $t@301@07)))))
(assert (= ($Snap.first ($Snap.second $t@301@07)) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7792
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      352
;  :arith-assert-upper      337
;  :arith-conflicts         120
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    374
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3548
;  :mk-clause               457
;  :num-allocs              6361074
;  :num-checks              757
;  :propagations            281
;  :quant-instantiations    126
;  :rlimit-count            302561)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@301@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@301@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7798
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      352
;  :arith-assert-upper      337
;  :arith-conflicts         120
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               600
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3551
;  :mk-clause               457
;  :num-allocs              6361074
;  :num-checks              758
;  :propagations            281
;  :quant-instantiations    127
;  :rlimit-count            302833)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@301@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7803
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      352
;  :arith-assert-upper      337
;  :arith-conflicts         120
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    376
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3552
;  :mk-clause               457
;  :num-allocs              6361074
;  :num-checks              759
;  :propagations            281
;  :quant-instantiations    127
;  :rlimit-count            303010)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7809
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      352
;  :arith-assert-upper      337
;  :arith-conflicts         120
;  :arith-eq-adapter        158
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               602
;  :datatype-accessor-ax    377
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.02
;  :memory                  5.02
;  :mk-bool-var             3554
;  :mk-clause               457
;  :num-allocs              6361074
;  :num-checks              760
;  :propagations            281
;  :quant-instantiations    127
;  :rlimit-count            303229)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7816
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      354
;  :arith-assert-upper      338
;  :arith-conflicts         120
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3560
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              761
;  :propagations            281
;  :quant-instantiations    129
;  :rlimit-count            303559)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7822
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      354
;  :arith-assert-upper      338
;  :arith-conflicts         120
;  :arith-eq-adapter        159
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               604
;  :datatype-accessor-ax    379
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3562
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              762
;  :propagations            281
;  :quant-instantiations    129
;  :rlimit-count            303798)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  $Snap.unit))
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@303@07 Int)
(push) ; 11
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 12
; [then-branch: 40 | 0 <= i__172@303@07 | live]
; [else-branch: 40 | !(0 <= i__172@303@07) | live]
(push) ; 13
; [then-branch: 40 | 0 <= i__172@303@07]
(assert (<= 0 i__172@303@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 14
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      357
;  :arith-assert-upper      339
;  :arith-conflicts         120
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               605
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3570
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              763
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304238)
(pop) ; 13
(push) ; 13
; [else-branch: 40 | !(0 <= i__172@303@07)]
(assert (not (<= 0 i__172@303@07)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 41 | i__172@303@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__172@303@07 | live]
; [else-branch: 41 | !(i__172@303@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__172@303@07) | live]
(push) ; 13
; [then-branch: 41 | i__172@303@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__172@303@07]
(assert (and
  (<
    i__172@303@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  (<= 0 i__172@303@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 14
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3572
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              764
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304395)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__172@303@07 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3572
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              765
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304404)
; [eval] -1
(push) ; 14
; [then-branch: 42 | First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07] == -1 | live]
; [else-branch: 42 | First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07] != -1 | live]
(push) ; 15
; [then-branch: 42 | First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__172@303@07)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 42 | First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i__172@303@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3573
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              766
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304618)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__172@303@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      111
;  :arith-assert-lower      358
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3573
;  :mk-clause               457
;  :num-allocs              6877576
;  :num-checks              767
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304627)
(push) ; 16
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07] | live]
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07]) | live]
(push) ; 17
; [then-branch: 43 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__172@303@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      112
;  :arith-assert-lower      361
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3576
;  :mk-clause               458
;  :num-allocs              6877576
;  :num-checks              768
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304789)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@303@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      112
;  :arith-assert-lower      361
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3576
;  :mk-clause               458
;  :num-allocs              6877576
;  :num-checks              769
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304798)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7830
;  :arith-add-rows          44
;  :arith-assert-diseq      112
;  :arith-assert-lower      361
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    380
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              355
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3576
;  :mk-clause               458
;  :num-allocs              6877576
;  :num-checks              770
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            304846)
(pop) ; 17
(push) ; 17
; [else-branch: 43 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i__172@303@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i__172@303@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 41 | !(i__172@303@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__172@303@07)]
(assert (not
  (and
    (<
      i__172@303@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
    (<= 0 i__172@303@07))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__172@303@07 Int)) (!
  (implies
    (and
      (<
        i__172@303@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i__172@303@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i__172@303@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__172@303@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__172@303@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__172@303@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7835
;  :arith-add-rows          44
;  :arith-assert-diseq      112
;  :arith-assert-lower      361
;  :arith-assert-upper      340
;  :arith-conflicts         120
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3578
;  :mk-clause               458
;  :num-allocs              6877576
;  :num-checks              771
;  :propagations            281
;  :quant-instantiations    131
;  :rlimit-count            305471)
(declare-const $k@304@07 $Perm)
(assert ($Perm.isReadVar $k@304@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@304@07 $Perm.No) (< $Perm.No $k@304@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7835
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      341
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               611
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3582
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              772
;  :propagations            282
;  :quant-instantiations    131
;  :rlimit-count            305669)
(assert (<= $Perm.No $k@304@07))
(assert (<= $k@304@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@304@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7841
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3585
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              773
;  :propagations            282
;  :quant-instantiations    131
;  :rlimit-count            305992)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7841
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               613
;  :datatype-accessor-ax    382
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3585
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              774
;  :propagations            282
;  :quant-instantiations    131
;  :rlimit-count            306040)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3588
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              775
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            306396)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7847
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               615
;  :datatype-accessor-ax    383
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3588
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              776
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            306444)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7852
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3589
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              777
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            306701)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7852
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3589
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              778
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            306749)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7857
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3590
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              779
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307016)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7857
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               619
;  :datatype-accessor-ax    385
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3590
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              780
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307064)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7862
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3591
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              781
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307341)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7862
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               621
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3591
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              782
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307389)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7867
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3592
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              783
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307676)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7867
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3592
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              784
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            307724)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7872
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3593
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              785
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308021)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7872
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    388
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3593
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              786
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308069)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7877
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               626
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3594
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              787
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308376)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7877
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               627
;  :datatype-accessor-ax    389
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3594
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              788
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308424)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7882
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    390
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3595
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              789
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308741)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7882
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    390
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3595
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              790
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            308789)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7887
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               630
;  :datatype-accessor-ax    391
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3596
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              791
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            309116)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7887
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    391
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3596
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              792
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            309164)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7892
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    392
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3597
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              793
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            309501)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7892
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               633
;  :datatype-accessor-ax    392
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3597
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              794
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            309549)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7897
;  :arith-add-rows          44
;  :arith-assert-diseq      113
;  :arith-assert-lower      363
;  :arith-assert-upper      342
;  :arith-conflicts         120
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               634
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3598
;  :mk-clause               460
;  :num-allocs              6877576
;  :num-checks              795
;  :propagations            282
;  :quant-instantiations    132
;  :rlimit-count            309896)
(declare-const $k@305@07 $Perm)
(assert ($Perm.isReadVar $k@305@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@305@07 $Perm.No) (< $Perm.No $k@305@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7897
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      343
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               635
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3602
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              796
;  :propagations            283
;  :quant-instantiations    132
;  :rlimit-count            310094)
(assert (<= $Perm.No $k@305@07))
(assert (<= $k@305@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@305@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7903
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               636
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3605
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              797
;  :propagations            283
;  :quant-instantiations    132
;  :rlimit-count            310537)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7903
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3605
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              798
;  :propagations            283
;  :quant-instantiations    132
;  :rlimit-count            310585)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7909
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3608
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              799
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311079)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7909
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3608
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              800
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311127)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7914
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               640
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3609
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              801
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311504)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7914
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               641
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3609
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              802
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311552)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7919
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    397
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3610
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              803
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311939)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7919
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    397
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3610
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              804
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            311987)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7924
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3611
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              805
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            312384)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7924
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3611
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              806
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            312432)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7929
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3612
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              807
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            312839)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7929
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3612
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              808
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            312887)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7934
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    400
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3613
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              809
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            313304)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7934
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    400
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3613
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              810
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            313352)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7939
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               650
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3614
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              811
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            313779)
(push) ; 11
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7939
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3614
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              812
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            313827)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7944
;  :arith-add-rows          44
;  :arith-assert-diseq      114
;  :arith-assert-lower      365
;  :arith-assert-upper      344
;  :arith-conflicts         120
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               652
;  :datatype-accessor-ax    402
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3615
;  :mk-clause               462
;  :num-allocs              6877576
;  :num-checks              813
;  :propagations            283
;  :quant-instantiations    133
;  :rlimit-count            314264)
(declare-const $k@306@07 $Perm)
(assert ($Perm.isReadVar $k@306@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@306@07 $Perm.No) (< $Perm.No $k@306@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7944
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      345
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    402
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3619
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              814
;  :propagations            284
;  :quant-instantiations    133
;  :rlimit-count            314462)
(assert (<= $Perm.No $k@306@07))
(assert (<= $k@306@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@306@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7950
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3622
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              815
;  :propagations            284
;  :quant-instantiations    133
;  :rlimit-count            314995)
(push) ; 11
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7950
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3622
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              816
;  :propagations            284
;  :quant-instantiations    133
;  :rlimit-count            315043)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7956
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3625
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              817
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            315621)
(push) ; 11
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7956
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               657
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3625
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              818
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            315669)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7961
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3626
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              819
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            316136)
(push) ; 11
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7961
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3626
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              820
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            316184)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7966
;  :arith-add-rows          44
;  :arith-assert-diseq      115
;  :arith-assert-lower      367
;  :arith-assert-upper      346
;  :arith-conflicts         120
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    406
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3627
;  :mk-clause               464
;  :num-allocs              6877576
;  :num-checks              821
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            316661)
(declare-const $k@307@07 $Perm)
(assert ($Perm.isReadVar $k@307@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@307@07 $Perm.No) (< $Perm.No $k@307@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7966
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      347
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               661
;  :datatype-accessor-ax    406
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3631
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              822
;  :propagations            285
;  :quant-instantiations    134
;  :rlimit-count            316860)
(assert (<= $Perm.No $k@307@07))
(assert (<= $k@307@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@307@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7972
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3634
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              823
;  :propagations            285
;  :quant-instantiations    134
;  :rlimit-count            317433)
(push) ; 11
(assert (not (< $Perm.No $k@307@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7972
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               663
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3634
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              824
;  :propagations            285
;  :quant-instantiations    134
;  :rlimit-count            317481)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7978
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    408
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3637
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              825
;  :propagations            285
;  :quant-instantiations    135
;  :rlimit-count            318089)
(push) ; 11
(assert (not (< $Perm.No $k@307@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7978
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               665
;  :datatype-accessor-ax    408
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3637
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              826
;  :propagations            285
;  :quant-instantiations    135
;  :rlimit-count            318137)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7983
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               666
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3638
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              827
;  :propagations            285
;  :quant-instantiations    135
;  :rlimit-count            318644)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7983
;  :arith-add-rows          44
;  :arith-assert-diseq      116
;  :arith-assert-lower      369
;  :arith-assert-upper      348
;  :arith-conflicts         120
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               667
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3638
;  :mk-clause               466
;  :num-allocs              6877576
;  :num-checks              828
;  :propagations            285
;  :quant-instantiations    135
;  :rlimit-count            318692)
(declare-const $k@308@07 $Perm)
(assert ($Perm.isReadVar $k@308@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@308@07 $Perm.No) (< $Perm.No $k@308@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7983
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      349
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.19
;  :mk-bool-var             3642
;  :mk-clause               468
;  :num-allocs              6877576
;  :num-checks              829
;  :propagations            286
;  :quant-instantiations    135
;  :rlimit-count            318891)
(assert (<= $Perm.No $k@308@07))
(assert (<= $k@308@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@308@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7989
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3645
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              830
;  :propagations            286
;  :quant-instantiations    135
;  :rlimit-count            319494)
(push) ; 11
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7989
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3645
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              831
;  :propagations            286
;  :quant-instantiations    135
;  :rlimit-count            319542)
(push) ; 11
(assert (not (< $Perm.No $k@308@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7989
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3645
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              832
;  :propagations            286
;  :quant-instantiations    135
;  :rlimit-count            319590)
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7989
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3645
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              833
;  :propagations            286
;  :quant-instantiations    135
;  :rlimit-count            319638)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 11
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7994
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               673
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3648
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              834
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320222)
(push) ; 11
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7994
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3648
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              835
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320270)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  diz@89@07))
; Loop head block: Check well-definedness of edge conditions
(push) ; 11
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 12
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7997
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3649
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              836
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320676)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7997
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3649
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              837
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320691)
; [eval] -1
(push) ; 12
; [then-branch: 44 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1 | live]
(push) ; 13
; [then-branch: 44 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      1)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 44 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7998
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3650
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              838
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320886)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7998
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3650
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              839
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320901)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7998
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3650
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              840
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320954)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7998
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3650
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              841
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            320969)
; [eval] -1
(push) ; 12
; [then-branch: 45 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 | live]
; [else-branch: 45 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1 | live]
(push) ; 13
; [then-branch: 45 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      1)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 45 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3651
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              842
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            321160)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      117
;  :arith-assert-lower      371
;  :arith-assert-upper      350
;  :arith-conflicts         120
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              356
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3651
;  :mk-clause               468
;  :num-allocs              7146385
;  :num-checks              843
;  :propagations            286
;  :quant-instantiations    136
;  :rlimit-count            321175)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
(push) ; 10
; Loop head block: Establish invariant
(declare-const $k@309@07 $Perm)
(assert ($Perm.isReadVar $k@309@07 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@309@07 $Perm.No) (< $Perm.No $k@309@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      373
;  :arith-assert-upper      351
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3655
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              844
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321379)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@272@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      373
;  :arith-assert-upper      351
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3655
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              845
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321390)
(assert (< $k@309@07 $k@272@07))
(assert (<= $Perm.No (- $k@272@07 $k@309@07)))
(assert (<= (- $k@272@07 $k@309@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@272@07 $k@309@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      375
;  :arith-assert-upper      352
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3658
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              846
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321604)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      375
;  :arith-assert-upper      352
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               681
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3658
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              847
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321652)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      375
;  :arith-assert-upper      352
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               682
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3658
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              848
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321700)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      375
;  :arith-assert-upper      352
;  :arith-conflicts         120
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3658
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              849
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321748)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_129__166@297@07) 3)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7999
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      375
;  :arith-assert-upper      352
;  :arith-conflicts         120
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3661
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              850
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321822)
(assert (= (Seq_length __flatten_129__166@297@07) 3))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8000
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      353
;  :arith-conflicts         120
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               685
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3664
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              851
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321921)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8000
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      353
;  :arith-conflicts         120
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3664
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              852
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            321969)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_132__169@300@07) 6)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8000
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      376
;  :arith-assert-upper      353
;  :arith-conflicts         120
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               687
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3667
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              853
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            322043)
(assert (= (Seq_length __flatten_132__169@300@07) 6))
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@310@07 Int)
(push) ; 11
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 12
; [then-branch: 46 | 0 <= i__172@310@07 | live]
; [else-branch: 46 | !(0 <= i__172@310@07) | live]
(push) ; 13
; [then-branch: 46 | 0 <= i__172@310@07]
(assert (<= 0 i__172@310@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8001
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      378
;  :arith-assert-upper      354
;  :arith-conflicts         120
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3671
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              854
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            322194)
(pop) ; 13
(push) ; 13
; [else-branch: 46 | !(0 <= i__172@310@07)]
(assert (not (<= 0 i__172@310@07)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 47 | i__172@310@07 < |__flatten_129__166@297@07| && 0 <= i__172@310@07 | live]
; [else-branch: 47 | !(i__172@310@07 < |__flatten_129__166@297@07| && 0 <= i__172@310@07) | live]
(push) ; 13
; [then-branch: 47 | i__172@310@07 < |__flatten_129__166@297@07| && 0 <= i__172@310@07]
(assert (and
  (< i__172@310@07 (Seq_length __flatten_129__166@297@07))
  (<= 0 i__172@310@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 14
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8001
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      379
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3673
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              855
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            322351
;  :time                    0.00)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__172@310@07 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8001
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      379
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3673
;  :mk-clause               470
;  :num-allocs              7146385
;  :num-checks              856
;  :propagations            287
;  :quant-instantiations    136
;  :rlimit-count            322360)
; [eval] -1
(push) ; 14
; [then-branch: 48 | __flatten_129__166@297@07[i__172@310@07] == -1 | live]
; [else-branch: 48 | __flatten_129__166@297@07[i__172@310@07] != -1 | live]
(push) ; 15
; [then-branch: 48 | __flatten_129__166@297@07[i__172@310@07] == -1]
(assert (= (Seq_index __flatten_129__166@297@07 i__172@310@07) (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 48 | __flatten_129__166@297@07[i__172@310@07] != -1]
(assert (not (= (Seq_index __flatten_129__166@297@07 i__172@310@07) (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8002
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      379
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3681
;  :mk-clause               480
;  :num-allocs              7146385
;  :num-checks              857
;  :propagations            287
;  :quant-instantiations    137
;  :rlimit-count            322562)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__172@310@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8002
;  :arith-add-rows          44
;  :arith-assert-diseq      118
;  :arith-assert-lower      379
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3681
;  :mk-clause               480
;  :num-allocs              7146385
;  :num-checks              858
;  :propagations            287
;  :quant-instantiations    137
;  :rlimit-count            322571)
(push) ; 16
; [then-branch: 49 | 0 <= __flatten_129__166@297@07[i__172@310@07] | live]
; [else-branch: 49 | !(0 <= __flatten_129__166@297@07[i__172@310@07]) | live]
(push) ; 17
; [then-branch: 49 | 0 <= __flatten_129__166@297@07[i__172@310@07]]
(assert (<= 0 (Seq_index __flatten_129__166@297@07 i__172@310@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8002
;  :arith-add-rows          44
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3684
;  :mk-clause               481
;  :num-allocs              7146385
;  :num-checks              859
;  :propagations            287
;  :quant-instantiations    137
;  :rlimit-count            322684)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@310@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8002
;  :arith-add-rows          44
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3684
;  :mk-clause               481
;  :num-allocs              7146385
;  :num-checks              860
;  :propagations            287
;  :quant-instantiations    137
;  :rlimit-count            322693)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8002
;  :arith-add-rows          44
;  :arith-assert-diseq      119
;  :arith-assert-lower      382
;  :arith-assert-upper      355
;  :arith-conflicts         120
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         126
;  :arith-pivots            93
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2015
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1953
;  :del-clause              368
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3684
;  :mk-clause               481
;  :num-allocs              7146385
;  :num-checks              861
;  :propagations            287
;  :quant-instantiations    137
;  :rlimit-count            322741)
(pop) ; 17
(push) ; 17
; [else-branch: 49 | !(0 <= __flatten_129__166@297@07[i__172@310@07])]
(assert (not (<= 0 (Seq_index __flatten_129__166@297@07 i__172@310@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 47 | !(i__172@310@07 < |__flatten_129__166@297@07| && 0 <= i__172@310@07)]
(assert (not
  (and
    (< i__172@310@07 (Seq_length __flatten_129__166@297@07))
    (<= 0 i__172@310@07))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 11
(assert (not (forall ((i__172@310@07 Int)) (!
  (implies
    (and
      (< i__172@310@07 (Seq_length __flatten_129__166@297@07))
      (<= 0 i__172@310@07))
    (or
      (= (Seq_index __flatten_129__166@297@07 i__172@310@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_129__166@297@07 i__172@310@07)
          (Seq_length __flatten_132__169@300@07))
        (<= 0 (Seq_index __flatten_129__166@297@07 i__172@310@07)))))
  :pattern ((Seq_index __flatten_129__166@297@07 i__172@310@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      124
;  :arith-assert-lower      392
;  :arith-assert-upper      364
;  :arith-conflicts         122
;  :arith-eq-adapter        181
;  :arith-fixed-eqs         128
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3722
;  :mk-clause               514
;  :num-allocs              7146385
;  :num-checks              862
;  :propagations            313
;  :quant-instantiations    140
;  :rlimit-count            323360)
(assert (forall ((i__172@310@07 Int)) (!
  (implies
    (and
      (< i__172@310@07 (Seq_length __flatten_129__166@297@07))
      (<= 0 i__172@310@07))
    (or
      (= (Seq_index __flatten_129__166@297@07 i__172@310@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_129__166@297@07 i__172@310@07)
          (Seq_length __flatten_132__169@300@07))
        (<= 0 (Seq_index __flatten_129__166@297@07 i__172@310@07)))))
  :pattern ((Seq_index __flatten_129__166@297@07 i__172@310@07))
  :qid |prog.l<no position>|)))
(declare-const $k@311@07 $Perm)
(assert ($Perm.isReadVar $k@311@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      394
;  :arith-assert-upper      365
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               699
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3727
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              863
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            323828)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@311@07 $Perm.No) (< $Perm.No $k@311@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      394
;  :arith-assert-upper      365
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3727
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              864
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            323878)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@274@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      394
;  :arith-assert-upper      365
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3727
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              865
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            323889)
(assert (< $k@311@07 $k@274@07))
(assert (<= $Perm.No (- $k@274@07 $k@311@07)))
(assert (<= (- $k@274@07 $k@311@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@274@07 $k@311@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              866
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324103)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              867
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324151)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               703
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              868
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324199)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              869
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324247)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              870
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324295)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              871
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324343)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               707
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              872
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324391)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               708
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              873
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324439)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              874
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324487)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              875
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324535)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              876
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324583)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              877
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324631)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              878
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324679)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              879
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324727)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               715
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              880
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324775)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              881
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324823)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               717
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              882
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324871)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              883
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324919)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              884
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            324967)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               720
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              885
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            325015)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               721
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              886
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            325063
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      125
;  :arith-assert-lower      396
;  :arith-assert-upper      366
;  :arith-conflicts         122
;  :arith-eq-adapter        182
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               722
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3730
;  :mk-clause               516
;  :num-allocs              7146385
;  :num-checks              887
;  :propagations            314
;  :quant-instantiations    140
;  :rlimit-count            325111)
(declare-const $k@312@07 $Perm)
(assert ($Perm.isReadVar $k@312@07 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      367
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               723
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3734
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              888
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325307)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@312@07 $Perm.No) (< $Perm.No $k@312@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      367
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3734
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              889
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325357)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@275@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      398
;  :arith-assert-upper      367
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            96
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3734
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              890
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325368)
(assert (< $k@312@07 $k@275@07))
(assert (<= $Perm.No (- $k@275@07 $k@312@07)))
(assert (<= (- $k@275@07 $k@312@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@275@07 $k@312@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               725
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              891
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325582)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              892
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325630)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              893
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325678)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              894
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325726)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              895
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325774)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               730
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              896
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325822)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              897
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325870)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              898
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325918)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               733
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              899
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            325966)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              900
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326014)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              901
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326062)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               736
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              902
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326110)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              903
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326158)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               738
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              904
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326206)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              905
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326254)
(push) ; 11
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      126
;  :arith-assert-lower      400
;  :arith-assert-upper      368
;  :arith-conflicts         122
;  :arith-eq-adapter        183
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               740
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3737
;  :mk-clause               518
;  :num-allocs              7146385
;  :num-checks              906
;  :propagations            315
;  :quant-instantiations    140
;  :rlimit-count            326302)
(declare-const $k@313@07 $Perm)
(assert ($Perm.isReadVar $k@313@07 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      402
;  :arith-assert-upper      369
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3741
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              907
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326498)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@313@07 $Perm.No) (< $Perm.No $k@313@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      402
;  :arith-assert-upper      369
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3741
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              908
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326548)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@276@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      402
;  :arith-assert-upper      369
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            97
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3741
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              909
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326559)
(assert (< $k@313@07 $k@276@07))
(assert (<= $Perm.No (- $k@276@07 $k@313@07)))
(assert (<= (- $k@276@07 $k@313@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@276@07 $k@313@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              910
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326779)
(push) ; 11
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               744
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              911
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326827)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              912
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326875)
(push) ; 11
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              913
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326923)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              914
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            326971)
(push) ; 11
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      127
;  :arith-assert-lower      404
;  :arith-assert-upper      370
;  :arith-conflicts         122
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               748
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3744
;  :mk-clause               520
;  :num-allocs              7146385
;  :num-checks              915
;  :propagations            316
;  :quant-instantiations    140
;  :rlimit-count            327019)
(declare-const $k@314@07 $Perm)
(assert ($Perm.isReadVar $k@314@07 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      371
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               749
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3748
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              916
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327215)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@314@07 $Perm.No) (< $Perm.No $k@314@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      371
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               750
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3748
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              917
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327265)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@277@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      406
;  :arith-assert-upper      371
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            99
;  :binary-propagations     22
;  :conflicts               750
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3748
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              918
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327276)
(assert (< $k@314@07 $k@277@07))
(assert (<= $Perm.No (- $k@277@07 $k@314@07)))
(assert (<= (- $k@277@07 $k@314@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@277@07 $k@314@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      408
;  :arith-assert-upper      372
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               751
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3751
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              919
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327496
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      408
;  :arith-assert-upper      372
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               752
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3751
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              920
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327544)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      408
;  :arith-assert-upper      372
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               753
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3751
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              921
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327592)
(push) ; 11
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      128
;  :arith-assert-lower      408
;  :arith-assert-upper      372
;  :arith-conflicts         122
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               754
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3751
;  :mk-clause               522
;  :num-allocs              7146385
;  :num-checks              922
;  :propagations            317
;  :quant-instantiations    140
;  :rlimit-count            327640)
(declare-const $k@315@07 $Perm)
(assert ($Perm.isReadVar $k@315@07 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      410
;  :arith-assert-upper      373
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               755
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3755
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              923
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            327836)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      410
;  :arith-assert-upper      373
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3755
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              924
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            327884)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@315@07 $Perm.No) (< $Perm.No $k@315@07))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      410
;  :arith-assert-upper      373
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3755
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              925
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            327934)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@278@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      410
;  :arith-assert-upper      373
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            101
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3755
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              926
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            327945)
(assert (< $k@315@07 $k@278@07))
(assert (<= $Perm.No (- $k@278@07 $k@315@07)))
(assert (<= (- $k@278@07 $k@315@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@278@07 $k@315@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               758
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              927
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328165)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               759
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              928
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328213)
(push) ; 11
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               760
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              929
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328261)
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               761
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              930
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328309)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              931
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328357)
(push) ; 11
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8022
;  :arith-add-rows          44
;  :arith-assert-diseq      129
;  :arith-assert-lower      412
;  :arith-assert-upper      374
;  :arith-conflicts         122
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               763
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2017
;  :datatype-occurs-check   441
;  :datatype-splits         1740
;  :decisions               1958
;  :del-clause              412
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.34
;  :memory                  5.28
;  :mk-bool-var             3758
;  :mk-clause               524
;  :num-allocs              7146385
;  :num-checks              932
;  :propagations            318
;  :quant-instantiations    140
;  :rlimit-count            328405)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert ($Perm.isReadVar $k@302@07 $Perm.Write))
(assert ($Perm.isReadVar $k@304@07 $Perm.Write))
(assert ($Perm.isReadVar $k@305@07 $Perm.Write))
(assert ($Perm.isReadVar $k@306@07 $Perm.Write))
(assert ($Perm.isReadVar $k@307@07 $Perm.Write))
(assert ($Perm.isReadVar $k@308@07 $Perm.Write))
(assert (= $t@301@07 ($Snap.combine ($Snap.first $t@301@07) ($Snap.second $t@301@07))))
(assert (<= $Perm.No $k@302@07))
(assert (<= $k@302@07 $Perm.Write))
(assert (implies (< $Perm.No $k@302@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@301@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@301@07))
    ($Snap.second ($Snap.second $t@301@07)))))
(assert (= ($Snap.first ($Snap.second $t@301@07)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@301@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@301@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@301@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  $Snap.unit))
(assert (forall ((i__172@303@07 Int)) (!
  (implies
    (and
      (<
        i__172@303@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i__172@303@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i__172@303@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__172@303@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__172@303@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__172@303@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
(assert (<= $Perm.No $k@304@07))
(assert (<= $k@304@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@304@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
(assert (<= $Perm.No $k@305@07))
(assert (<= $k@305@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@305@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@306@07))
(assert (<= $k@306@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@306@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@307@07))
(assert (<= $k@307@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@307@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@308@07))
(assert (<= $k@308@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@308@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  diz@89@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 12
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9222
;  :arith-add-rows          44
;  :arith-assert-diseq      135
;  :arith-assert-lower      428
;  :arith-assert-upper      388
;  :arith-conflicts         122
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 2315
;  :datatype-occurs-check   471
;  :datatype-splits         1960
;  :decisions               2248
;  :del-clause              426
;  :final-checks            116
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4079
;  :mk-clause               539
;  :num-allocs              7710764
;  :num-checks              935
;  :propagations            331
;  :quant-instantiations    150
;  :rlimit-count            339845)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9222
;  :arith-add-rows          44
;  :arith-assert-diseq      135
;  :arith-assert-lower      428
;  :arith-assert-upper      388
;  :arith-conflicts         122
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 2315
;  :datatype-occurs-check   471
;  :datatype-splits         1960
;  :decisions               2248
;  :del-clause              426
;  :final-checks            116
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4079
;  :mk-clause               539
;  :num-allocs              7710764
;  :num-checks              936
;  :propagations            331
;  :quant-instantiations    150
;  :rlimit-count            339860)
; [eval] -1
(push) ; 12
; [then-branch: 50 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1 | live]
(push) ; 13
; [then-branch: 50 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      1)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 50 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9223
;  :arith-add-rows          44
;  :arith-assert-diseq      135
;  :arith-assert-lower      428
;  :arith-assert-upper      388
;  :arith-conflicts         122
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 2315
;  :datatype-occurs-check   471
;  :datatype-splits         1960
;  :decisions               2248
;  :del-clause              426
;  :final-checks            116
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4080
;  :mk-clause               539
;  :num-allocs              7710764
;  :num-checks              937
;  :propagations            331
;  :quant-instantiations    150
;  :rlimit-count            340051)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9223
;  :arith-add-rows          44
;  :arith-assert-diseq      135
;  :arith-assert-lower      428
;  :arith-assert-upper      388
;  :arith-conflicts         122
;  :arith-eq-adapter        194
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    455
;  :datatype-constructor-ax 2315
;  :datatype-occurs-check   471
;  :datatype-splits         1960
;  :decisions               2248
;  :del-clause              426
;  :final-checks            116
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4080
;  :mk-clause               539
;  :num-allocs              7710764
;  :num-checks              938
;  :propagations            331
;  :quant-instantiations    150
;  :rlimit-count            340066)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9789
;  :arith-add-rows          44
;  :arith-assert-diseq      136
;  :arith-assert-lower      431
;  :arith-assert-upper      389
;  :arith-conflicts         122
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    461
;  :datatype-constructor-ax 2481
;  :datatype-occurs-check   492
;  :datatype-splits         2074
;  :decisions               2409
;  :del-clause              433
;  :final-checks            120
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4210
;  :mk-clause               546
;  :num-allocs              7710764
;  :num-checks              939
;  :propagations            337
;  :quant-instantiations    151
;  :rlimit-count            343409
;  :time                    0.00)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      136
;  :arith-assert-lower      431
;  :arith-assert-upper      389
;  :arith-conflicts         122
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4321
;  :mk-clause               546
;  :num-allocs              7710764
;  :num-checks              940
;  :propagations            341
;  :quant-instantiations    151
;  :rlimit-count            345902
;  :time                    0.00)
; [then-branch: 51 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2 | live]
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2) | live]
(push) ; 12
; [then-branch: 51 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
        3)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      136
;  :arith-assert-lower      431
;  :arith-assert-upper      389
;  :arith-conflicts         122
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4323
;  :mk-clause               547
;  :num-allocs              7710764
;  :num-checks              941
;  :propagations            341
;  :quant-instantiations    151
;  :rlimit-count            346180)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      136
;  :arith-assert-lower      431
;  :arith-assert-upper      389
;  :arith-conflicts         122
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4323
;  :mk-clause               547
;  :num-allocs              7710764
;  :num-checks              942
;  :propagations            341
;  :quant-instantiations    151
;  :rlimit-count            346228)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@316@07 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 52 | 0 <= i@316@07 | live]
; [else-branch: 52 | !(0 <= i@316@07) | live]
(push) ; 15
; [then-branch: 52 | 0 <= i@316@07]
(assert (<= 0 i@316@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 52 | !(0 <= i@316@07)]
(assert (not (<= 0 i@316@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 53 | i@316@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i@316@07 | live]
; [else-branch: 53 | !(i@316@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i@316@07) | live]
(push) ; 15
; [then-branch: 53 | i@316@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i@316@07]
(assert (and
  (<
    i@316@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  (<= 0 i@316@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@316@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      136
;  :arith-assert-lower      432
;  :arith-assert-upper      390
;  :arith-conflicts         122
;  :arith-eq-adapter        195
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4325
;  :mk-clause               547
;  :num-allocs              7710764
;  :num-checks              943
;  :propagations            341
;  :quant-instantiations    151
;  :rlimit-count            346364)
; [eval] -1
(push) ; 16
; [then-branch: 54 | First:(Second:(Second:(Second:($t@301@07))))[i@316@07] == -1 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:($t@301@07))))[i@316@07] != -1 | live]
(push) ; 17
; [then-branch: 54 | First:(Second:(Second:(Second:($t@301@07))))[i@316@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i@316@07)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 54 | First:(Second:(Second:(Second:($t@301@07))))[i@316@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i@316@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@316@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      137
;  :arith-assert-lower      435
;  :arith-assert-upper      391
;  :arith-conflicts         122
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4331
;  :mk-clause               551
;  :num-allocs              7710764
;  :num-checks              944
;  :propagations            343
;  :quant-instantiations    152
;  :rlimit-count            346596)
(push) ; 18
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i@316@07] | live]
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i@316@07]) | live]
(push) ; 19
; [then-branch: 55 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i@316@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i@316@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@316@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      137
;  :arith-assert-lower      435
;  :arith-assert-upper      391
;  :arith-conflicts         122
;  :arith-eq-adapter        196
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              433
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4331
;  :mk-clause               551
;  :num-allocs              7710764
;  :num-checks              945
;  :propagations            343
;  :quant-instantiations    152
;  :rlimit-count            346710)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 55 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i@316@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i@316@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 53 | !(i@316@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i@316@07)]
(assert (not
  (and
    (<
      i@316@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
    (<= 0 i@316@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 13
(assert (not (forall ((i@316@07 Int)) (!
  (implies
    (and
      (<
        i@316@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i@316@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i@316@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i@316@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i@316@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i@316@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      139
;  :arith-assert-lower      436
;  :arith-assert-upper      392
;  :arith-conflicts         122
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               771
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4339
;  :mk-clause               565
;  :num-allocs              7710764
;  :num-checks              946
;  :propagations            345
;  :quant-instantiations    153
;  :rlimit-count            347156)
(assert (forall ((i@316@07 Int)) (!
  (implies
    (and
      (<
        i@316@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i@316@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i@316@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i@316@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i@316@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i@316@07))
  :qid |prog.l<no position>|)))
(declare-const $k@317@07 $Perm)
(assert ($Perm.isReadVar $k@317@07 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@317@07 $Perm.No) (< $Perm.No $k@317@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      438
;  :arith-assert-upper      393
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4344
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              947
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            347716)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@304@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      438
;  :arith-assert-upper      393
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4344
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              948
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            347727)
(assert (< $k@317@07 $k@304@07))
(assert (<= $Perm.No (- $k@304@07 $k@317@07)))
(assert (<= (- $k@304@07 $k@317@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@304@07 $k@317@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               773
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              949
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            347947)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               774
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              950
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            347995)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               775
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              951
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348043)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               776
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              952
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348091)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              953
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348139)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              954
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348187)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               779
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              955
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348235)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              956
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348283)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              957
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348331)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              958
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348379)
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      140
;  :arith-assert-lower      440
;  :arith-assert-upper      394
;  :arith-conflicts         122
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               783
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4347
;  :mk-clause               567
;  :num-allocs              7710764
;  :num-checks              959
;  :propagations            346
;  :quant-instantiations    153
;  :rlimit-count            348427)
(declare-const $k@318@07 $Perm)
(assert ($Perm.isReadVar $k@318@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@318@07 $Perm.No) (< $Perm.No $k@318@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      442
;  :arith-assert-upper      395
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               784
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4351
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              960
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348626)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@305@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      442
;  :arith-assert-upper      395
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               784
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4351
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              961
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348637)
(assert (< $k@318@07 $k@305@07))
(assert (<= $Perm.No (- $k@305@07 $k@318@07)))
(assert (<= (- $k@305@07 $k@318@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@305@07 $k@318@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               785
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              962
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348851)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               786
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              963
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348899)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               787
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              964
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348947)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               788
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              965
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            348995)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               789
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              966
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            349043)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               790
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              967
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            349091)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               791
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              968
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            349139)
(push) ; 13
(assert (not (< $Perm.No $k@305@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      141
;  :arith-assert-lower      444
;  :arith-assert-upper      396
;  :arith-conflicts         122
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4354
;  :mk-clause               569
;  :num-allocs              7710764
;  :num-checks              969
;  :propagations            347
;  :quant-instantiations    153
;  :rlimit-count            349187)
(declare-const $k@319@07 $Perm)
(assert ($Perm.isReadVar $k@319@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@319@07 $Perm.No) (< $Perm.No $k@319@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      446
;  :arith-assert-upper      397
;  :arith-conflicts         122
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4358
;  :mk-clause               571
;  :num-allocs              7710764
;  :num-checks              970
;  :propagations            348
;  :quant-instantiations    153
;  :rlimit-count            349386)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@306@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      446
;  :arith-assert-upper      397
;  :arith-conflicts         122
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         128
;  :arith-pivots            106
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4358
;  :mk-clause               571
;  :num-allocs              7710764
;  :num-checks              971
;  :propagations            348
;  :quant-instantiations    153
;  :rlimit-count            349397)
(assert (< $k@319@07 $k@306@07))
(assert (<= $Perm.No (- $k@306@07 $k@319@07)))
(assert (<= (- $k@306@07 $k@319@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@306@07 $k@319@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      448
;  :arith-assert-upper      398
;  :arith-conflicts         122
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         128
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               794
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4361
;  :mk-clause               571
;  :num-allocs              7710764
;  :num-checks              972
;  :propagations            348
;  :quant-instantiations    153
;  :rlimit-count            349611)
(push) ; 13
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      448
;  :arith-assert-upper      398
;  :arith-conflicts         122
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         128
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               795
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4361
;  :mk-clause               571
;  :num-allocs              7710764
;  :num-checks              973
;  :propagations            348
;  :quant-instantiations    153
;  :rlimit-count            349659)
(push) ; 13
(assert (not (< $Perm.No $k@306@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      142
;  :arith-assert-lower      448
;  :arith-assert-upper      398
;  :arith-conflicts         122
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         128
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               796
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4361
;  :mk-clause               571
;  :num-allocs              7710764
;  :num-checks              974
;  :propagations            348
;  :quant-instantiations    153
;  :rlimit-count            349707)
(declare-const $k@320@07 $Perm)
(assert ($Perm.isReadVar $k@320@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@320@07 $Perm.No) (< $Perm.No $k@320@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      143
;  :arith-assert-lower      450
;  :arith-assert-upper      399
;  :arith-conflicts         122
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         128
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4365
;  :mk-clause               573
;  :num-allocs              7710764
;  :num-checks              975
;  :propagations            349
;  :quant-instantiations    153
;  :rlimit-count            349906)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@307@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      143
;  :arith-assert-lower      450
;  :arith-assert-upper      399
;  :arith-conflicts         122
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         128
;  :arith-pivots            107
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4365
;  :mk-clause               573
;  :num-allocs              7710764
;  :num-checks              976
;  :propagations            349
;  :quant-instantiations    153
;  :rlimit-count            349917)
(assert (< $k@320@07 $k@307@07))
(assert (<= $Perm.No (- $k@307@07 $k@320@07)))
(assert (<= (- $k@307@07 $k@320@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@307@07 $k@320@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@307@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      143
;  :arith-assert-lower      452
;  :arith-assert-upper      400
;  :arith-conflicts         122
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         128
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4368
;  :mk-clause               573
;  :num-allocs              7710764
;  :num-checks              977
;  :propagations            349
;  :quant-instantiations    153
;  :rlimit-count            350131)
(push) ; 13
(assert (not (< $Perm.No $k@307@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      143
;  :arith-assert-lower      452
;  :arith-assert-upper      400
;  :arith-conflicts         122
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         128
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               799
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4368
;  :mk-clause               573
;  :num-allocs              7710764
;  :num-checks              978
;  :propagations            349
;  :quant-instantiations    153
;  :rlimit-count            350179)
(declare-const $k@321@07 $Perm)
(assert ($Perm.isReadVar $k@321@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      454
;  :arith-assert-upper      401
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               800
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4372
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              979
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            350375)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@321@07 $Perm.No) (< $Perm.No $k@321@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      454
;  :arith-assert-upper      401
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4372
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              980
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            350425)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@308@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      454
;  :arith-assert-upper      401
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4372
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              981
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            350436)
(assert (< $k@321@07 $k@308@07))
(assert (<= $Perm.No (- $k@308@07 $k@321@07)))
(assert (<= (- $k@308@07 $k@321@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@308@07 $k@321@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No $k@304@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      402
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4375
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              982
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            350656)
(push) ; 13
(assert (not (< $Perm.No $k@308@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10170
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      402
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    465
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4375
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              983
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            350704)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) __globals@90@07))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10244
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      402
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               804
;  :datatype-accessor-ax    502
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4376
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              984
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            352259)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10244
;  :arith-add-rows          44
;  :arith-assert-diseq      144
;  :arith-assert-lower      456
;  :arith-assert-upper      402
;  :arith-conflicts         122
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               805
;  :datatype-accessor-ax    502
;  :datatype-constructor-ax 2593
;  :datatype-occurs-check   507
;  :datatype-splits         2184
;  :decisions               2517
;  :del-clause              451
;  :final-checks            123
;  :max-generation          2
;  :max-memory              5.49
;  :memory                  5.49
;  :mk-bool-var             4376
;  :mk-clause               575
;  :num-allocs              7710764
;  :num-checks              985
;  :propagations            350
;  :quant-instantiations    153
;  :rlimit-count            352307)
(declare-const $t@322@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10843
;  :arith-add-rows          44
;  :arith-assert-diseq      145
;  :arith-assert-lower      459
;  :arith-assert-upper      403
;  :arith-conflicts         122
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              465
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4504
;  :mk-clause               581
;  :num-allocs              8006188
;  :num-checks              987
;  :propagations            356
;  :quant-instantiations    155
;  :rlimit-count            355532)
(assert (= $t@322@07 ($Snap.combine ($Snap.first $t@322@07) ($Snap.second $t@322@07))))
(assert (= ($Snap.first $t@322@07) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@322@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@07))
    ($Snap.second ($Snap.second $t@322@07)))))
(assert (= ($Snap.first ($Snap.second $t@322@07)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@322@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@322@07))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@323@07 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 56 | 0 <= i@323@07 | live]
; [else-branch: 56 | !(0 <= i@323@07) | live]
(push) ; 15
; [then-branch: 56 | 0 <= i@323@07]
(assert (<= 0 i@323@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 56 | !(0 <= i@323@07)]
(assert (not (<= 0 i@323@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 57 | i@323@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i@323@07 | live]
; [else-branch: 57 | !(i@323@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i@323@07) | live]
(push) ; 15
; [then-branch: 57 | i@323@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i@323@07]
(assert (and
  (<
    i@323@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
  (<= 0 i@323@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@323@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10893
;  :arith-add-rows          44
;  :arith-assert-diseq      145
;  :arith-assert-lower      464
;  :arith-assert-upper      406
;  :arith-conflicts         122
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              465
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4530
;  :mk-clause               581
;  :num-allocs              8006188
;  :num-checks              988
;  :propagations            356
;  :quant-instantiations    159
;  :rlimit-count            356835)
; [eval] -1
(push) ; 16
; [then-branch: 58 | First:(Second:(Second:(Second:($t@322@07))))[i@323@07] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@322@07))))[i@323@07] != -1 | live]
(push) ; 17
; [then-branch: 58 | First:(Second:(Second:(Second:($t@322@07))))[i@323@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i@323@07)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 58 | First:(Second:(Second:(Second:($t@322@07))))[i@323@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
      i@323@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@323@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10893
;  :arith-add-rows          44
;  :arith-assert-diseq      145
;  :arith-assert-lower      464
;  :arith-assert-upper      406
;  :arith-conflicts         122
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              465
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4531
;  :mk-clause               581
;  :num-allocs              8006188
;  :num-checks              989
;  :propagations            356
;  :quant-instantiations    159
;  :rlimit-count            357010)
(push) ; 18
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@322@07))))[i@323@07] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@322@07))))[i@323@07]) | live]
(push) ; 19
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@322@07))))[i@323@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i@323@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@323@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10893
;  :arith-add-rows          44
;  :arith-assert-diseq      146
;  :arith-assert-lower      467
;  :arith-assert-upper      406
;  :arith-conflicts         122
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    516
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              465
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4534
;  :mk-clause               582
;  :num-allocs              8006188
;  :num-checks              990
;  :propagations            356
;  :quant-instantiations    159
;  :rlimit-count            357133)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@322@07))))[i@323@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
      i@323@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 57 | !(i@323@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i@323@07)]
(assert (not
  (and
    (<
      i@323@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
    (<= 0 i@323@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@323@07 Int)) (!
  (implies
    (and
      (<
        i@323@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
      (<= 0 i@323@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
          i@323@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i@323@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i@323@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i@323@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))
(declare-const $k@324@07 $Perm)
(assert ($Perm.isReadVar $k@324@07 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@324@07 $Perm.No) (< $Perm.No $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10898
;  :arith-add-rows          44
;  :arith-assert-diseq      147
;  :arith-assert-lower      469
;  :arith-assert-upper      407
;  :arith-conflicts         122
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         128
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               809
;  :datatype-accessor-ax    517
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4540
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              991
;  :propagations            357
;  :quant-instantiations    159
;  :rlimit-count            357902)
(declare-const $t@325@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@304@07 $k@317@07))
    (=
      $t@325@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))
  (implies
    (< $Perm.No $k@324@07)
    (=
      $t@325@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))
(assert (<= $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07)))
(assert (<= (+ (- $k@304@07 $k@317@07) $k@324@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10908
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      409
;  :arith-conflicts         123
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         129
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               810
;  :datatype-accessor-ax    518
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4548
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              992
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            358582)
(assert (not (= $t@325@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10914
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      410
;  :arith-conflicts         124
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         130
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               811
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4551
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              993
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            358904)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10919
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      411
;  :arith-conflicts         125
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         131
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               812
;  :datatype-accessor-ax    520
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4553
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              994
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            359191)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10924
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      412
;  :arith-conflicts         126
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         132
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               813
;  :datatype-accessor-ax    521
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4555
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              995
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            359488)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10929
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      413
;  :arith-conflicts         127
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         133
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               814
;  :datatype-accessor-ax    522
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4557
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              996
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            359795)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10934
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      414
;  :arith-conflicts         128
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         134
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4559
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              997
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            360112)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10939
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      415
;  :arith-conflicts         129
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         135
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    524
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4561
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              998
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            360439)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10944
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      416
;  :arith-conflicts         130
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         136
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               817
;  :datatype-accessor-ax    525
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4563
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              999
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            360776)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10949
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      417
;  :arith-conflicts         131
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         137
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               818
;  :datatype-accessor-ax    526
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4565
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              1000
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            361123)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10954
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      418
;  :arith-conflicts         132
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         138
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4567
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              1001
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            361480)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10959
;  :arith-add-rows          45
;  :arith-assert-diseq      147
;  :arith-assert-lower      470
;  :arith-assert-upper      419
;  :arith-conflicts         133
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         139
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               820
;  :datatype-accessor-ax    528
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4569
;  :mk-clause               584
;  :num-allocs              8006188
;  :num-checks              1002
;  :propagations            357
;  :quant-instantiations    160
;  :rlimit-count            361847)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))
(declare-const $k@326@07 $Perm)
(assert ($Perm.isReadVar $k@326@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@326@07 $Perm.No) (< $Perm.No $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10964
;  :arith-add-rows          45
;  :arith-assert-diseq      148
;  :arith-assert-lower      472
;  :arith-assert-upper      420
;  :arith-conflicts         133
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         139
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4574
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1003
;  :propagations            358
;  :quant-instantiations    160
;  :rlimit-count            362337)
(declare-const $t@327@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@305@07 $k@318@07))
    (=
      $t@327@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@326@07)
    (=
      $t@327@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07)))
(assert (<= (+ (- $k@305@07 $k@318@07) $k@326@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10974
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      422
;  :arith-conflicts         134
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         140
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    530
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4582
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1004
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            363281)
(assert (not (= $t@327@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10980
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      423
;  :arith-conflicts         135
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         141
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               823
;  :datatype-accessor-ax    531
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4585
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1005
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            363725)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10985
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      424
;  :arith-conflicts         136
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         142
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    532
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4587
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1006
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            364134)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10990
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      425
;  :arith-conflicts         137
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         143
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    533
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4589
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1007
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            364553)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10995
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      426
;  :arith-conflicts         138
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         144
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    534
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4591
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1008
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            364982)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11000
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      427
;  :arith-conflicts         139
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         145
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    535
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4593
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1009
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            365421)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11005
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      428
;  :arith-conflicts         140
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         146
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4595
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1010
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            365870)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11010
;  :arith-add-rows          46
;  :arith-assert-diseq      148
;  :arith-assert-lower      473
;  :arith-assert-upper      429
;  :arith-conflicts         141
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         147
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               829
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4597
;  :mk-clause               586
;  :num-allocs              8006188
;  :num-checks              1011
;  :propagations            358
;  :quant-instantiations    161
;  :rlimit-count            366329)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))
(declare-const $k@328@07 $Perm)
(assert ($Perm.isReadVar $k@328@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@328@07 $Perm.No) (< $Perm.No $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11015
;  :arith-add-rows          46
;  :arith-assert-diseq      149
;  :arith-assert-lower      475
;  :arith-assert-upper      430
;  :arith-conflicts         141
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         147
;  :arith-pivots            111
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    538
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4602
;  :mk-clause               588
;  :num-allocs              8006188
;  :num-checks              1012
;  :propagations            359
;  :quant-instantiations    161
;  :rlimit-count            366909)
(declare-const $t@329@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@306@07 $k@319@07))
    (=
      $t@329@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@328@07)
    (=
      $t@329@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07)))
(assert (<= (+ (- $k@306@07 $k@319@07) $k@328@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11025
;  :arith-add-rows          47
;  :arith-assert-diseq      149
;  :arith-assert-lower      476
;  :arith-assert-upper      432
;  :arith-conflicts         142
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         148
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               831
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4610
;  :mk-clause               588
;  :num-allocs              8006188
;  :num-checks              1013
;  :propagations            359
;  :quant-instantiations    162
;  :rlimit-count            367723)
(assert (not (= $t@329@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11030
;  :arith-add-rows          47
;  :arith-assert-diseq      149
;  :arith-assert-lower      476
;  :arith-assert-upper      433
;  :arith-conflicts         143
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         149
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    540
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4612
;  :mk-clause               588
;  :num-allocs              8006188
;  :num-checks              1014
;  :propagations            359
;  :quant-instantiations    162
;  :rlimit-count            368230)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11035
;  :arith-add-rows          47
;  :arith-assert-diseq      149
;  :arith-assert-lower      476
;  :arith-assert-upper      434
;  :arith-conflicts         144
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         150
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               833
;  :datatype-accessor-ax    541
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4614
;  :mk-clause               588
;  :num-allocs              8006188
;  :num-checks              1015
;  :propagations            359
;  :quant-instantiations    162
;  :rlimit-count            368729)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))))
(declare-const $k@330@07 $Perm)
(assert ($Perm.isReadVar $k@330@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@330@07 $Perm.No) (< $Perm.No $k@330@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11040
;  :arith-add-rows          47
;  :arith-assert-diseq      150
;  :arith-assert-lower      478
;  :arith-assert-upper      435
;  :arith-conflicts         144
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         150
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               834
;  :datatype-accessor-ax    542
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4619
;  :mk-clause               590
;  :num-allocs              8006188
;  :num-checks              1016
;  :propagations            360
;  :quant-instantiations    162
;  :rlimit-count            369350)
(declare-const $t@331@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@307@07 $k@320@07))
    (=
      $t@331@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@330@07)
    (=
      $t@331@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07)))
(assert (<= (+ (- $k@307@07 $k@320@07) $k@330@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11050
;  :arith-add-rows          48
;  :arith-assert-diseq      150
;  :arith-assert-lower      479
;  :arith-assert-upper      437
;  :arith-conflicts         145
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         151
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               835
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4627
;  :mk-clause               590
;  :num-allocs              8006188
;  :num-checks              1017
;  :propagations            360
;  :quant-instantiations    163
;  :rlimit-count            370532)
(assert (not (= $t@331@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11056
;  :arith-add-rows          48
;  :arith-assert-diseq      150
;  :arith-assert-lower      479
;  :arith-assert-upper      438
;  :arith-conflicts         146
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         152
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               836
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4630
;  :mk-clause               590
;  :num-allocs              8006188
;  :num-checks              1018
;  :propagations            360
;  :quant-instantiations    163
;  :rlimit-count            371104)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11061
;  :arith-add-rows          48
;  :arith-assert-diseq      150
;  :arith-assert-lower      479
;  :arith-assert-upper      439
;  :arith-conflicts         147
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         153
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4632
;  :mk-clause               590
;  :num-allocs              8006188
;  :num-checks              1019
;  :propagations            360
;  :quant-instantiations    163
;  :rlimit-count            371641)
(declare-const $k@332@07 $Perm)
(assert ($Perm.isReadVar $k@332@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@332@07 $Perm.No) (< $Perm.No $k@332@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11061
;  :arith-add-rows          48
;  :arith-assert-diseq      151
;  :arith-assert-lower      481
;  :arith-assert-upper      440
;  :arith-conflicts         147
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         153
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4636
;  :mk-clause               592
;  :num-allocs              8006188
;  :num-checks              1020
;  :propagations            361
;  :quant-instantiations    163
;  :rlimit-count            371839)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $t@325@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11061
;  :arith-add-rows          48
;  :arith-assert-diseq      151
;  :arith-assert-lower      481
;  :arith-assert-upper      440
;  :arith-conflicts         147
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         153
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4636
;  :mk-clause               592
;  :num-allocs              8006188
;  :num-checks              1021
;  :propagations            361
;  :quant-instantiations    163
;  :rlimit-count            371850)
(declare-const $t@333@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@308@07 $k@321@07))
    (=
      $t@333@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@332@07)
    (=
      $t@333@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@308@07 $k@321@07) $k@332@07)))
(assert (<= (+ (- $k@308@07 $k@321@07) $k@332@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@308@07 $k@321@07) $k@332@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11067
;  :arith-add-rows          49
;  :arith-assert-diseq      151
;  :arith-assert-lower      482
;  :arith-assert-upper      442
;  :arith-conflicts         148
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         154
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4643
;  :mk-clause               592
;  :num-allocs              8006188
;  :num-checks              1022
;  :propagations            361
;  :quant-instantiations    164
;  :rlimit-count            372625)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $t@325@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11067
;  :arith-add-rows          49
;  :arith-assert-diseq      151
;  :arith-assert-lower      482
;  :arith-assert-upper      442
;  :arith-conflicts         148
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         154
;  :arith-pivots            112
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4643
;  :mk-clause               592
;  :num-allocs              8006188
;  :num-checks              1023
;  :propagations            361
;  :quant-instantiations    164
;  :rlimit-count            372636)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@308@07 $k@321@07) $k@332@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11067
;  :arith-add-rows          49
;  :arith-assert-diseq      151
;  :arith-assert-lower      482
;  :arith-assert-upper      443
;  :arith-conflicts         149
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2759
;  :datatype-occurs-check   579
;  :datatype-splits         2298
;  :decisions               2678
;  :del-clause              466
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.59
;  :memory                  5.59
;  :mk-bool-var             4644
;  :mk-clause               592
;  :num-allocs              8006188
;  :num-checks              1024
;  :propagations            361
;  :quant-instantiations    164
;  :rlimit-count            372720)
(assert (= $t@333@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@322@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) __globals@90@07))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11989
;  :arith-add-rows          49
;  :arith-assert-diseq      152
;  :arith-assert-lower      485
;  :arith-assert-upper      444
;  :arith-conflicts         149
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    558
;  :datatype-constructor-ax 3014
;  :datatype-occurs-check   661
;  :datatype-splits         2444
;  :decisions               2921
;  :del-clause              480
;  :final-checks            131
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4808
;  :mk-clause               601
;  :num-allocs              8616673
;  :num-checks              1026
;  :propagations            371
;  :quant-instantiations    166
;  :rlimit-count            377291)
(declare-const $t@334@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@335@07 $Perm)
(assert ($Perm.isReadVar $k@335@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@335@07 $Perm.No) (< $Perm.No $k@335@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      490
;  :arith-assert-upper      446
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4948
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1028
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380471)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@302@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      490
;  :arith-assert-upper      446
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4948
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1029
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380482)
(assert (< $k@335@07 $k@302@07))
(assert (<= $Perm.No (- $k@302@07 $k@335@07)))
(assert (<= (- $k@302@07 $k@335@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@302@07 $k@335@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               848
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1030
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380690)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1031
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380738)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               850
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1032
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380786)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1033
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380834)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               852
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1034
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380882)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      492
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4951
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1035
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            380930)
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@336@07 Int)
(push) ; 13
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 14
; [then-branch: 60 | 0 <= i__172@336@07 | live]
; [else-branch: 60 | !(0 <= i__172@336@07) | live]
(push) ; 15
; [then-branch: 60 | 0 <= i__172@336@07]
(assert (<= 0 i__172@336@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      493
;  :arith-assert-upper      447
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               854
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4952
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1036
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            381030)
(pop) ; 15
(push) ; 15
; [else-branch: 60 | !(0 <= i__172@336@07)]
(assert (not (<= 0 i__172@336@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 61 | i__172@336@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i__172@336@07 | live]
; [else-branch: 61 | !(i__172@336@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i__172@336@07) | live]
(push) ; 15
; [then-branch: 61 | i__172@336@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i__172@336@07]
(assert (and
  (<
    i__172@336@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
  (<= 0 i__172@336@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 16
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      494
;  :arith-assert-upper      448
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4954
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1037
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            381187)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__172@336@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      154
;  :arith-assert-lower      494
;  :arith-assert-upper      448
;  :arith-conflicts         149
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4954
;  :mk-clause               607
;  :num-allocs              8616673
;  :num-checks              1038
;  :propagations            385
;  :quant-instantiations    168
;  :rlimit-count            381196)
; [eval] -1
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07] != -1 | live]
(push) ; 17
; [then-branch: 62 | First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i__172@336@07)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 62 | First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
      i__172@336@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      155
;  :arith-assert-lower      497
;  :arith-assert-upper      449
;  :arith-conflicts         149
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4960
;  :mk-clause               611
;  :num-allocs              8616673
;  :num-checks              1039
;  :propagations            387
;  :quant-instantiations    169
;  :rlimit-count            381467)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@336@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      155
;  :arith-assert-lower      497
;  :arith-assert-upper      449
;  :arith-conflicts         149
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4960
;  :mk-clause               611
;  :num-allocs              8616673
;  :num-checks              1040
;  :propagations            387
;  :quant-instantiations    169
;  :rlimit-count            381476)
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07]) | live]
(push) ; 19
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i__172@336@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      155
;  :arith-assert-lower      497
;  :arith-assert-upper      449
;  :arith-conflicts         149
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4960
;  :mk-clause               611
;  :num-allocs              8616673
;  :num-checks              1041
;  :propagations            387
;  :quant-instantiations    169
;  :rlimit-count            381629)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__172@336@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      155
;  :arith-assert-lower      497
;  :arith-assert-upper      449
;  :arith-conflicts         149
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4960
;  :mk-clause               611
;  :num-allocs              8616673
;  :num-checks              1042
;  :propagations            387
;  :quant-instantiations    169
;  :rlimit-count            381638)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      155
;  :arith-assert-lower      497
;  :arith-assert-upper      449
;  :arith-conflicts         149
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               858
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              484
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4960
;  :mk-clause               611
;  :num-allocs              8616673
;  :num-checks              1043
;  :propagations            387
;  :quant-instantiations    169
;  :rlimit-count            381686)
(pop) ; 19
(push) ; 19
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@322@07))))[i__172@336@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
      i__172@336@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 61 | !(i__172@336@07 < |First:(Second:(Second:(Second:($t@322@07))))| && 0 <= i__172@336@07)]
(assert (not
  (and
    (<
      i__172@336@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
    (<= 0 i__172@336@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__172@336@07 Int)) (!
  (implies
    (and
      (<
        i__172@336@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
      (<= 0 i__172@336@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
          i__172@336@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i__172@336@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i__172@336@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i__172@336@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      157
;  :arith-assert-lower      498
;  :arith-assert-upper      450
;  :arith-conflicts         149
;  :arith-eq-adapter        216
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               859
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              502
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4968
;  :mk-clause               625
;  :num-allocs              8616673
;  :num-checks              1044
;  :propagations            389
;  :quant-instantiations    170
;  :rlimit-count            382132)
(assert (forall ((i__172@336@07 Int)) (!
  (implies
    (and
      (<
        i__172@336@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))
      (<= 0 i__172@336@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
          i__172@336@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i__172@336@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
            i__172@336@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@07)))))
    i__172@336@07))
  :qid |prog.l<no position>|)))
(declare-const $k@337@07 $Perm)
(assert ($Perm.isReadVar $k@337@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      158
;  :arith-assert-lower      500
;  :arith-assert-upper      451
;  :arith-conflicts         149
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               860
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              502
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4973
;  :mk-clause               627
;  :num-allocs              8616673
;  :num-checks              1045
;  :propagations            390
;  :quant-instantiations    170
;  :rlimit-count            382691)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@337@07 $Perm.No) (< $Perm.No $k@337@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12534
;  :arith-add-rows          49
;  :arith-assert-diseq      158
;  :arith-assert-lower      500
;  :arith-assert-upper      451
;  :arith-conflicts         149
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              502
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4973
;  :mk-clause               627
;  :num-allocs              8616673
;  :num-checks              1046
;  :propagations            390
;  :quant-instantiations    170
;  :rlimit-count            382741)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@304@07 $k@317@07) $k@324@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          49
;  :arith-assert-diseq      158
;  :arith-assert-lower      500
;  :arith-assert-upper      452
;  :arith-conflicts         150
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               862
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4975
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1047
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            382819)
(assert (< $k@337@07 (+ (- $k@304@07 $k@317@07) $k@324@07)))
(assert (<= $Perm.No (- (+ (- $k@304@07 $k@317@07) $k@324@07) $k@337@07)))
(assert (<= (- (+ (- $k@304@07 $k@317@07) $k@324@07) $k@337@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@304@07 $k@317@07) $k@324@07) $k@337@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      453
;  :arith-conflicts         150
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         155
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               863
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4978
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1048
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383054)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      454
;  :arith-conflicts         151
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         156
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4979
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1049
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383132)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      454
;  :arith-conflicts         151
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         156
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               865
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4979
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1050
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383180)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      455
;  :arith-conflicts         152
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4980
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1051
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383258)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      455
;  :arith-conflicts         152
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         157
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4980
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1052
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383306)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      456
;  :arith-conflicts         153
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         158
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4981
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1053
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383384)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      456
;  :arith-conflicts         153
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         158
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               869
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4981
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1054
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383432)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      457
;  :arith-conflicts         154
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         159
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4982
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1055
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383510)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      457
;  :arith-conflicts         154
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         159
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               871
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4982
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1056
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383558)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      458
;  :arith-conflicts         155
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4983
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1057
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383636)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      458
;  :arith-conflicts         155
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         160
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               873
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4983
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1058
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383684)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      459
;  :arith-conflicts         156
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         161
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               874
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4984
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1059
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383762)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      459
;  :arith-conflicts         156
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         161
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4984
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1060
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383810)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      460
;  :arith-conflicts         157
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         162
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               876
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4985
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1061
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383888)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      460
;  :arith-conflicts         157
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         162
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               877
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4985
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1062
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            383936)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      461
;  :arith-conflicts         158
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         163
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4986
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1063
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384014)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      461
;  :arith-conflicts         158
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         163
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4986
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1064
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384062)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      462
;  :arith-conflicts         159
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         164
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4987
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1065
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384140)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      462
;  :arith-conflicts         159
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         164
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               881
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4987
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1066
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384188)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      463
;  :arith-conflicts         160
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         165
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               882
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4988
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1067
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384266)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      463
;  :arith-conflicts         160
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         165
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               883
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4988
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1068
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384314)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      158
;  :arith-assert-lower      502
;  :arith-assert-upper      464
;  :arith-conflicts         161
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         166
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               884
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4989
;  :mk-clause               629
;  :num-allocs              8616673
;  :num-checks              1069
;  :propagations            391
;  :quant-instantiations    170
;  :rlimit-count            384392)
(declare-const $k@338@07 $Perm)
(assert ($Perm.isReadVar $k@338@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      159
;  :arith-assert-lower      504
;  :arith-assert-upper      465
;  :arith-conflicts         161
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         166
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               885
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4993
;  :mk-clause               631
;  :num-allocs              8616673
;  :num-checks              1070
;  :propagations            392
;  :quant-instantiations    170
;  :rlimit-count            384588)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@338@07 $Perm.No) (< $Perm.No $k@338@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12535
;  :arith-add-rows          50
;  :arith-assert-diseq      159
;  :arith-assert-lower      504
;  :arith-assert-upper      465
;  :arith-conflicts         161
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         166
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               886
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              504
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4993
;  :mk-clause               631
;  :num-allocs              8616673
;  :num-checks              1071
;  :propagations            392
;  :quant-instantiations    170
;  :rlimit-count            384638)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@305@07 $k@318@07) $k@326@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          50
;  :arith-assert-diseq      159
;  :arith-assert-lower      504
;  :arith-assert-upper      466
;  :arith-conflicts         162
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         166
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               887
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4995
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1072
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            384718)
(assert (< $k@338@07 (+ (- $k@305@07 $k@318@07) $k@326@07)))
(assert (<= $Perm.No (- (+ (- $k@305@07 $k@318@07) $k@326@07) $k@338@07)))
(assert (<= (- (+ (- $k@305@07 $k@318@07) $k@326@07) $k@338@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@305@07 $k@318@07) $k@326@07) $k@338@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      467
;  :arith-conflicts         162
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         166
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               888
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4998
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1073
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            384954)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      468
;  :arith-conflicts         163
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         167
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               889
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4999
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1074
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385035)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      468
;  :arith-conflicts         163
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         167
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               890
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             4999
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1075
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385083)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      469
;  :arith-conflicts         164
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         168
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5000
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1076
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385164)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      469
;  :arith-conflicts         164
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         168
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               892
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5000
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1077
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385212)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      470
;  :arith-conflicts         165
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         169
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               893
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5001
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1078
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385293)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      470
;  :arith-conflicts         165
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         169
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5001
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1079
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385341)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      471
;  :arith-conflicts         166
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         170
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5002
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1080
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385422)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      471
;  :arith-conflicts         166
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         170
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               896
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5002
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1081
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385470)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      472
;  :arith-conflicts         167
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         171
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               897
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5003
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1082
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385551)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      472
;  :arith-conflicts         167
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         171
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               898
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5003
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1083
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385599)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      473
;  :arith-conflicts         168
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         172
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               899
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5004
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1084
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385680)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      473
;  :arith-conflicts         168
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         172
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               900
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5004
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1085
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385728)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      474
;  :arith-conflicts         169
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         173
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               901
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5005
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1086
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385809)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      474
;  :arith-conflicts         169
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         173
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               902
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5005
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1087
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385857)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@305@07 $k@318@07) $k@326@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      159
;  :arith-assert-lower      506
;  :arith-assert-upper      475
;  :arith-conflicts         170
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         174
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5006
;  :mk-clause               633
;  :num-allocs              8616673
;  :num-checks              1088
;  :propagations            393
;  :quant-instantiations    170
;  :rlimit-count            385938)
(declare-const $k@339@07 $Perm)
(assert ($Perm.isReadVar $k@339@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      160
;  :arith-assert-lower      508
;  :arith-assert-upper      476
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         174
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               904
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5010
;  :mk-clause               635
;  :num-allocs              8616673
;  :num-checks              1089
;  :propagations            394
;  :quant-instantiations    170
;  :rlimit-count            386135)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@339@07 $Perm.No) (< $Perm.No $k@339@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12536
;  :arith-add-rows          52
;  :arith-assert-diseq      160
;  :arith-assert-lower      508
;  :arith-assert-upper      476
;  :arith-conflicts         170
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         174
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              506
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5010
;  :mk-clause               635
;  :num-allocs              8616673
;  :num-checks              1090
;  :propagations            394
;  :quant-instantiations    170
;  :rlimit-count            386185)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@306@07 $k@319@07) $k@328@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          52
;  :arith-assert-diseq      160
;  :arith-assert-lower      508
;  :arith-assert-upper      477
;  :arith-conflicts         171
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         174
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               906
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5012
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1091
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386265)
(assert (< $k@339@07 (+ (- $k@306@07 $k@319@07) $k@328@07)))
(assert (<= $Perm.No (- (+ (- $k@306@07 $k@319@07) $k@328@07) $k@339@07)))
(assert (<= (- (+ (- $k@306@07 $k@319@07) $k@328@07) $k@339@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@306@07 $k@319@07) $k@328@07) $k@339@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      478
;  :arith-conflicts         171
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         174
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5015
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1092
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386501)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      479
;  :arith-conflicts         172
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         175
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               908
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5016
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1093
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386582)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      479
;  :arith-conflicts         172
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         175
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               909
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5016
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1094
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386630)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      480
;  :arith-conflicts         173
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         176
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               910
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5017
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1095
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386711)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      480
;  :arith-conflicts         173
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         176
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5017
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1096
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386759)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      160
;  :arith-assert-lower      510
;  :arith-assert-upper      481
;  :arith-conflicts         174
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         177
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5018
;  :mk-clause               637
;  :num-allocs              8616673
;  :num-checks              1097
;  :propagations            395
;  :quant-instantiations    170
;  :rlimit-count            386840)
(declare-const $k@340@07 $Perm)
(assert ($Perm.isReadVar $k@340@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      161
;  :arith-assert-lower      512
;  :arith-assert-upper      482
;  :arith-conflicts         174
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         177
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5022
;  :mk-clause               639
;  :num-allocs              8616673
;  :num-checks              1098
;  :propagations            396
;  :quant-instantiations    170
;  :rlimit-count            387036)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@340@07 $Perm.No) (< $Perm.No $k@340@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12537
;  :arith-add-rows          54
;  :arith-assert-diseq      161
;  :arith-assert-lower      512
;  :arith-assert-upper      482
;  :arith-conflicts         174
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         177
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               914
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              508
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5022
;  :mk-clause               639
;  :num-allocs              8616673
;  :num-checks              1099
;  :propagations            396
;  :quant-instantiations    170
;  :rlimit-count            387086)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@307@07 $k@320@07) $k@330@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          54
;  :arith-assert-diseq      161
;  :arith-assert-lower      512
;  :arith-assert-upper      483
;  :arith-conflicts         175
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         177
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5024
;  :mk-clause               641
;  :num-allocs              8616673
;  :num-checks              1100
;  :propagations            397
;  :quant-instantiations    170
;  :rlimit-count            387164)
(assert (< $k@340@07 (+ (- $k@307@07 $k@320@07) $k@330@07)))
(assert (<= $Perm.No (- (+ (- $k@307@07 $k@320@07) $k@330@07) $k@340@07)))
(assert (<= (- (+ (- $k@307@07 $k@320@07) $k@330@07) $k@340@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@307@07 $k@320@07) $k@330@07) $k@340@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      161
;  :arith-assert-lower      514
;  :arith-assert-upper      484
;  :arith-conflicts         175
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         177
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5027
;  :mk-clause               641
;  :num-allocs              8616673
;  :num-checks              1101
;  :propagations            397
;  :quant-instantiations    170
;  :rlimit-count            387406)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      161
;  :arith-assert-lower      514
;  :arith-assert-upper      485
;  :arith-conflicts         176
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         178
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               917
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5028
;  :mk-clause               641
;  :num-allocs              8616673
;  :num-checks              1102
;  :propagations            397
;  :quant-instantiations    170
;  :rlimit-count            387484)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      161
;  :arith-assert-lower      514
;  :arith-assert-upper      485
;  :arith-conflicts         176
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         178
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5028
;  :mk-clause               641
;  :num-allocs              8616673
;  :num-checks              1103
;  :propagations            397
;  :quant-instantiations    170
;  :rlimit-count            387532)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@307@07 $k@320@07) $k@330@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      161
;  :arith-assert-lower      514
;  :arith-assert-upper      486
;  :arith-conflicts         177
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         179
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               919
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5029
;  :mk-clause               641
;  :num-allocs              8616673
;  :num-checks              1104
;  :propagations            397
;  :quant-instantiations    170
;  :rlimit-count            387610)
(declare-const $k@341@07 $Perm)
(assert ($Perm.isReadVar $k@341@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      162
;  :arith-assert-lower      516
;  :arith-assert-upper      487
;  :arith-conflicts         177
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         179
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               920
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5033
;  :mk-clause               643
;  :num-allocs              8616673
;  :num-checks              1105
;  :propagations            398
;  :quant-instantiations    170
;  :rlimit-count            387806)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      162
;  :arith-assert-lower      516
;  :arith-assert-upper      488
;  :arith-conflicts         178
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         180
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               921
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5034
;  :mk-clause               643
;  :num-allocs              8616673
;  :num-checks              1106
;  :propagations            398
;  :quant-instantiations    170
;  :rlimit-count            387884)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@341@07 $Perm.No) (< $Perm.No $k@341@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      162
;  :arith-assert-lower      516
;  :arith-assert-upper      488
;  :arith-conflicts         178
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         180
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5034
;  :mk-clause               643
;  :num-allocs              8616673
;  :num-checks              1107
;  :propagations            398
;  :quant-instantiations    170
;  :rlimit-count            387934)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $t@325@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12538
;  :arith-add-rows          55
;  :arith-assert-diseq      162
;  :arith-assert-lower      516
;  :arith-assert-upper      488
;  :arith-conflicts         178
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         180
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              510
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5034
;  :mk-clause               643
;  :num-allocs              8616673
;  :num-checks              1108
;  :propagations            398
;  :quant-instantiations    170
;  :rlimit-count            387945)
(push) ; 13
(assert (not (not (= (+ (- $k@308@07 $k@321@07) $k@332@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          55
;  :arith-assert-diseq      162
;  :arith-assert-lower      516
;  :arith-assert-upper      489
;  :arith-conflicts         179
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         180
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               923
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5036
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1109
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388025)
(assert (< $k@341@07 (+ (- $k@308@07 $k@321@07) $k@332@07)))
(assert (<= $Perm.No (- (+ (- $k@308@07 $k@321@07) $k@332@07) $k@341@07)))
(assert (<= (- (+ (- $k@308@07 $k@321@07) $k@332@07) $k@341@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@308@07 $k@321@07) $k@332@07) $k@341@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      490
;  :arith-conflicts         179
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         180
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               924
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5039
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1110
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388261)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@304@07 $k@317@07) $k@324@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      491
;  :arith-conflicts         180
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         181
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5040
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1111
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388339)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  $t@325@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      491
;  :arith-conflicts         180
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         181
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5040
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1112
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388350)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@308@07 $k@321@07) $k@332@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      492
;  :arith-conflicts         181
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         182
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5041
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1113
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388431)
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      492
;  :arith-conflicts         181
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         182
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               927
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5041
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1114
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388479)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 13
(assert (not (< $Perm.No $k@302@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      492
;  :arith-conflicts         181
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         182
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5041
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1115
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388527)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@306@07 $k@319@07) $k@328@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5042
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1116
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388608)
(set-option :timeout 0)
(push) ; 13
(assert (not (= $t@329@07 diz@89@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12539
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            114
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 3162
;  :datatype-occurs-check   738
;  :datatype-splits         2590
;  :decisions               3059
;  :del-clause              512
;  :final-checks            134
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5042
;  :mk-clause               645
;  :num-allocs              8616673
;  :num-checks              1117
;  :propagations            399
;  :quant-instantiations    170
;  :rlimit-count            388619)
(assert (= $t@329@07 diz@89@07))
(pop) ; 12
(push) ; 12
; [else-branch: 51 | !(First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
          3)
        (- 0 2))))))
(pop) ; 12
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13006
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    574
;  :datatype-constructor-ax 3302
;  :datatype-occurs-check   754
;  :datatype-splits         2702
;  :decisions               3194
;  :del-clause              533
;  :final-checks            137
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5157
;  :mk-clause               646
;  :num-allocs              8616673
;  :num-checks              1118
;  :propagations            403
;  :quant-instantiations    170
;  :rlimit-count            391519
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13414
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    579
;  :datatype-constructor-ax 3442
;  :datatype-occurs-check   770
;  :datatype-splits         2814
;  :decisions               3329
;  :del-clause              534
;  :final-checks            140
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5272
;  :mk-clause               647
;  :num-allocs              8616673
;  :num-checks              1119
;  :propagations            407
;  :quant-instantiations    170
;  :rlimit-count            394197
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13822
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    584
;  :datatype-constructor-ax 3582
;  :datatype-occurs-check   786
;  :datatype-splits         2926
;  :decisions               3464
;  :del-clause              535
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5387
;  :mk-clause               648
;  :num-allocs              8616673
;  :num-checks              1120
;  :propagations            411
;  :quant-instantiations    170
;  :rlimit-count            396875
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14230
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               933
;  :datatype-accessor-ax    589
;  :datatype-constructor-ax 3722
;  :datatype-occurs-check   802
;  :datatype-splits         3038
;  :decisions               3599
;  :del-clause              536
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5502
;  :mk-clause               649
;  :num-allocs              8616673
;  :num-checks              1121
;  :propagations            415
;  :quant-instantiations    170
;  :rlimit-count            399553
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14638
;  :arith-add-rows          57
;  :arith-assert-diseq      162
;  :arith-assert-lower      518
;  :arith-assert-upper      493
;  :arith-conflicts         182
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         183
;  :arith-pivots            123
;  :binary-propagations     22
;  :conflicts               934
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5617
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1122
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402231
;  :time                    0.00)
(declare-const $t@342@07 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@302@07)
    (= $t@342@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))))
  (implies
    (< $Perm.No (- $k@272@07 $k@309@07))
    (= $t@342@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))))
(assert (<= $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07))))
(assert (<= (+ $k@302@07 (- $k@272@07 $k@309@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))
  (not (= diz@89@07 $Ref.null))))
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 12
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14643
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      495
;  :arith-conflicts         183
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         184
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5622
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1123
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402554)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14643
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      495
;  :arith-conflicts         183
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         184
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5623
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1124
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402634)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14643
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      495
;  :arith-conflicts         183
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         184
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5623
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1125
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402649)
; [eval] -1
(push) ; 12
; [then-branch: 64 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1 | live]
(push) ; 13
; [then-branch: 64 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      1)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 64 | First:(Second:(Second:(Second:($t@301@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      496
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5625
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1126
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402872)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      496
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5626
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1127
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402952)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14644
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      496
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    594
;  :datatype-constructor-ax 3862
;  :datatype-occurs-check   818
;  :datatype-splits         3150
;  :decisions               3734
;  :del-clause              537
;  :final-checks            149
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5626
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1128
;  :propagations            419
;  :quant-instantiations    170
;  :rlimit-count            402967)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15020
;  :arith-add-rows          58
;  :arith-assert-diseq      162
;  :arith-assert-lower      519
;  :arith-assert-upper      496
;  :arith-conflicts         184
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    598
;  :datatype-constructor-ax 3973
;  :datatype-occurs-check   833
;  :datatype-splits         3259
;  :decisions               3841
;  :del-clause              537
;  :final-checks            152
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5736
;  :mk-clause               650
;  :num-allocs              8616673
;  :num-checks              1129
;  :propagations            423
;  :quant-instantiations    170
;  :rlimit-count            405449
;  :time                    0.00)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15546
;  :arith-add-rows          58
;  :arith-assert-diseq      163
;  :arith-assert-lower      522
;  :arith-assert-upper      497
;  :arith-conflicts         184
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               940
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              544
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5865
;  :mk-clause               657
;  :num-allocs              8616673
;  :num-checks              1130
;  :propagations            429
;  :quant-instantiations    171
;  :rlimit-count            408710
;  :time                    0.00)
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2) | live]
; [else-branch: 65 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2 | live]
(push) ; 12
; [then-branch: 65 | !(First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
          3)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@343@07 $Perm)
(assert ($Perm.isReadVar $k@343@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@343@07 $Perm.No) (< $Perm.No $k@343@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15548
;  :arith-add-rows          58
;  :arith-assert-diseq      164
;  :arith-assert-lower      524
;  :arith-assert-upper      498
;  :arith-conflicts         184
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               941
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              544
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5871
;  :mk-clause               659
;  :num-allocs              8616673
;  :num-checks              1131
;  :propagations            430
;  :quant-instantiations    171
;  :rlimit-count            409105)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ $k@302@07 (- $k@272@07 $k@309@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15549
;  :arith-add-rows          58
;  :arith-assert-diseq      164
;  :arith-assert-lower      524
;  :arith-assert-upper      499
;  :arith-conflicts         185
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         185
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               942
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5873
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1132
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409185)
(assert (< $k@343@07 (+ $k@302@07 (- $k@272@07 $k@309@07))))
(assert (<= $Perm.No (- (+ $k@302@07 (- $k@272@07 $k@309@07)) $k@343@07)))
(assert (<= (- (+ $k@302@07 (- $k@272@07 $k@309@07)) $k@343@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@302@07 (- $k@272@07 $k@309@07)) $k@343@07))
  (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15549
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      501
;  :arith-conflicts         186
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         186
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               943
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5877
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1133
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409454)
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= $t@342@07 $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15550
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      501
;  :arith-conflicts         186
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         186
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               944
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5878
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1134
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409502)
(assert (not (= $t@342@07 $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      502
;  :arith-conflicts         187
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         187
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               945
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5880
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1135
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409639)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      502
;  :arith-conflicts         187
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         187
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               946
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5881
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1136
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409719)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         188
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         188
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5882
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1137
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409800)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         188
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         188
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               948
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5883
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1138
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409880)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      504
;  :arith-conflicts         189
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         189
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5884
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1139
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            409961)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      504
;  :arith-conflicts         189
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         189
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5885
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1140
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410041)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      505
;  :arith-conflicts         190
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5886
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1141
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410122)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      505
;  :arith-conflicts         190
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         190
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5887
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1142
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410202)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      506
;  :arith-conflicts         191
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         191
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5888
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1143
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410283)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      526
;  :arith-assert-upper      506
;  :arith-conflicts         191
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         191
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5889
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1144
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410363)
; [eval] (forall i__171: Int :: { diz.LFSR_m.Main_process_state[i__171] } 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|)
(declare-const i__171@344@07 Int)
(push) ; 13
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__171
(push) ; 14
; [then-branch: 66 | 0 <= i__171@344@07 | live]
; [else-branch: 66 | !(0 <= i__171@344@07) | live]
(push) ; 15
; [then-branch: 66 | 0 <= i__171@344@07]
(assert (<= 0 i__171@344@07))
; [eval] i__171 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      527
;  :arith-assert-upper      507
;  :arith-conflicts         192
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         192
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5891
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1145
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410497)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      527
;  :arith-assert-upper      507
;  :arith-conflicts         192
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         192
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               956
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5892
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1146
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410577)
(pop) ; 15
(push) ; 15
; [else-branch: 66 | !(0 <= i__171@344@07)]
(assert (not (<= 0 i__171@344@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 67 | i__171@344@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__171@344@07 | live]
; [else-branch: 67 | !(i__171@344@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__171@344@07) | live]
(push) ; 15
; [then-branch: 67 | i__171@344@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__171@344@07]
(assert (and
  (<
    i__171@344@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
  (<= 0 i__171@344@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1
; [eval] diz.LFSR_m.Main_process_state[i__171]
(push) ; 16
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      528
;  :arith-assert-upper      509
;  :arith-conflicts         193
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         193
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5895
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1147
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410767)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      528
;  :arith-assert-upper      509
;  :arith-conflicts         193
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         193
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5896
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1148
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410847)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__171@344@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      164
;  :arith-assert-lower      528
;  :arith-assert-upper      509
;  :arith-conflicts         193
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         193
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5896
;  :mk-clause               661
;  :num-allocs              8616673
;  :num-checks              1149
;  :propagations            431
;  :quant-instantiations    171
;  :rlimit-count            410856)
; [eval] -1
(push) ; 16
; [then-branch: 68 | First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07] == -1 | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07] != -1 | live]
(push) ; 17
; [then-branch: 68 | First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__171@344@07)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 68 | First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i__171@344@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171]
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      511
;  :arith-conflicts         194
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5903
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1150
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411160)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      511
;  :arith-conflicts         194
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5904
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1151
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411240)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__171@344@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      511
;  :arith-conflicts         194
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         194
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5904
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1152
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411249)
(push) ; 18
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07] | live]
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07]) | live]
(push) ; 19
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__171@344@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      512
;  :arith-conflicts         195
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         195
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5905
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1153
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411435)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      512
;  :arith-conflicts         195
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         195
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5906
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1154
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411515)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__171@344@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      512
;  :arith-conflicts         195
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         195
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5906
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1155
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411524)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      513
;  :arith-conflicts         196
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         196
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5907
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1156
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411605)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      165
;  :arith-assert-lower      531
;  :arith-assert-upper      513
;  :arith-conflicts         196
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         196
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               964
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              546
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5908
;  :mk-clause               665
;  :num-allocs              8616673
;  :num-checks              1157
;  :propagations            433
;  :quant-instantiations    172
;  :rlimit-count            411685)
(pop) ; 19
(push) ; 19
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@301@07))))[i__171@344@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
      i__171@344@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 67 | !(i__171@344@07 < |First:(Second:(Second:(Second:($t@301@07))))| && 0 <= i__171@344@07)]
(assert (not
  (and
    (<
      i__171@344@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
    (<= 0 i__171@344@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__171@344@07 Int)) (!
  (implies
    (and
      (<
        i__171@344@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i__171@344@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i__171@344@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__171@344@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__171@344@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__171@344@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      166
;  :arith-assert-lower      532
;  :arith-assert-upper      514
;  :arith-conflicts         196
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         196
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               965
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5916
;  :mk-clause               677
;  :num-allocs              8616673
;  :num-checks              1158
;  :propagations            435
;  :quant-instantiations    173
;  :rlimit-count            412131)
(assert (forall ((i__171@344@07 Int)) (!
  (implies
    (and
      (<
        i__171@344@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
      (<= 0 i__171@344@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
          i__171@344@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__171@344@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
            i__171@344@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
    i__171@344@07))
  :qid |prog.l<no position>|)))
(declare-const $k@345@07 $Perm)
(assert ($Perm.isReadVar $k@345@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      167
;  :arith-assert-lower      534
;  :arith-assert-upper      516
;  :arith-conflicts         197
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         197
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               966
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5922
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1159
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            412723)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@345@07 $Perm.No) (< $Perm.No $k@345@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      167
;  :arith-assert-lower      534
;  :arith-assert-upper      516
;  :arith-conflicts         197
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         197
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5922
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1160
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            412773)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      167
;  :arith-assert-lower      534
;  :arith-assert-upper      516
;  :arith-conflicts         197
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         197
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5922
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1161
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            412792)
(push) ; 13
(assert (not (not (= (- $k@274@07 $k@311@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          60
;  :arith-assert-diseq      167
;  :arith-assert-lower      534
;  :arith-assert-upper      516
;  :arith-conflicts         197
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         197
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               968
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5923
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1162
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            412860)
(assert (< $k@345@07 (- $k@274@07 $k@311@07)))
(assert (<= $Perm.No (- (- $k@274@07 $k@311@07) $k@345@07)))
(assert (<= (- (- $k@274@07 $k@311@07) $k@345@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@274@07 $k@311@07) $k@345@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      518
;  :arith-conflicts         198
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5927
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1163
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413153)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      518
;  :arith-conflicts         198
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5927
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1164
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413172)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      518
;  :arith-conflicts         198
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         198
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5927
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1165
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413191)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5928
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1166
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413272)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5928
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1167
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413291)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15551
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    604
;  :datatype-constructor-ax 4137
;  :datatype-occurs-check   854
;  :datatype-splits         3372
;  :decisions               4000
;  :del-clause              562
;  :final-checks            156
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             5928
;  :mk-clause               679
;  :num-allocs              8616673
;  :num-checks              1168
;  :propagations            436
;  :quant-instantiations    173
;  :rlimit-count            413310)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15978
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    609
;  :datatype-constructor-ax 4275
;  :datatype-occurs-check   870
;  :datatype-splits         3483
;  :decisions               4133
;  :del-clause              563
;  :final-checks            159
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6042
;  :mk-clause               680
;  :num-allocs              8616673
;  :num-checks              1169
;  :propagations            440
;  :quant-instantiations    173
;  :rlimit-count            416094
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16726
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    617
;  :datatype-constructor-ax 4497
;  :datatype-occurs-check   900
;  :datatype-splits         3701
;  :decisions               4347
;  :del-clause              567
;  :final-checks            165
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6258
;  :mk-clause               680
;  :num-allocs              8616673
;  :num-checks              1172
;  :propagations            448
;  :quant-instantiations    173
;  :rlimit-count            420751)
(declare-const $t@346@07 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17153
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6372
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1173
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            423535
;  :time                    0.00)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17153
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6373
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1174
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            423620)
(declare-const $t@347@07 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17153
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6374
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1175
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            423705)
(declare-const $t@348@07 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17153
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6375
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1176
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            423790)
(declare-const $t@349@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@274@07 $k@311@07) $k@345@07))
    (=
      $t@346@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
  (implies
    (< $Perm.No $k@304@07)
    (=
      $t@346@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@307@07)
    (=
      $t@347@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@277@07 $k@314@07))
    (=
      $t@347@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@306@07)
    (=
      $t@348@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@276@07 $k@313@07))
    (=
      $t@348@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@305@07)
    (=
      $t@349@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@275@07 $k@312@07))
    (=
      $t@349@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17166
;  :arith-add-rows          62
;  :arith-assert-diseq      167
;  :arith-assert-lower      536
;  :arith-assert-upper      519
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6382
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1177
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            425138)
(declare-const $t@350@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@278@07 $k@315@07))
    (=
      $t@350@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@308@07)
    (=
      $t@350@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@305@07 (- $k@275@07 $k@312@07))))
(assert (<= (+ $k@305@07 (- $k@275@07 $k@312@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@305@07 (- $k@275@07 $k@312@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@306@07 (- $k@276@07 $k@313@07))))
(assert (<= (+ $k@306@07 (- $k@276@07 $k@313@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@306@07 (- $k@276@07 $k@313@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@307@07 (- $k@277@07 $k@314@07))))
(assert (<= (+ $k@307@07 (- $k@277@07 $k@314@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@307@07 (- $k@277@07 $k@314@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@274@07 $k@311@07) $k@345@07) $k@304@07)))
(assert (<= (+ (- (- $k@274@07 $k@311@07) $k@345@07) $k@304@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@274@07 $k@311@07) $k@345@07) $k@304@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@278@07 $k@315@07) $k@308@07)))
(assert (<= (+ (- $k@278@07 $k@315@07) $k@308@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@278@07 $k@315@07) $k@308@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      524
;  :arith-conflicts         199
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         199
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6394
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1178
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426012)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      525
;  :arith-conflicts         200
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         200
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6395
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1179
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426093)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      525
;  :arith-conflicts         200
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         200
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6395
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1180
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426112)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      525
;  :arith-conflicts         200
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         200
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6395
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1181
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426131)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      525
;  :arith-conflicts         200
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         200
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               980
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6396
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1182
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426291)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      526
;  :arith-conflicts         201
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         201
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6397
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1183
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426372)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      526
;  :arith-conflicts         201
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         201
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6397
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1184
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426391)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      526
;  :arith-conflicts         201
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         201
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6397
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1185
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426410)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      526
;  :arith-conflicts         201
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         201
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6398
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1186
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426570)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      527
;  :arith-conflicts         202
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         202
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6399
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1187
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426651)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      527
;  :arith-conflicts         202
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         202
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6399
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1188
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426670)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      527
;  :arith-conflicts         202
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         202
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6399
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1189
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426689)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      527
;  :arith-conflicts         202
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         202
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6400
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1190
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426849)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      528
;  :arith-conflicts         203
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         203
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6401
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1191
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426930)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      528
;  :arith-conflicts         203
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         203
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6401
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1192
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426949)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      528
;  :arith-conflicts         203
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         203
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6401
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1193
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            426968)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      528
;  :arith-conflicts         203
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         203
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6402
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1194
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427128)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      529
;  :arith-conflicts         204
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         204
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6403
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1195
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427209)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      529
;  :arith-conflicts         204
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         204
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6403
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1196
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427228)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      529
;  :arith-conflicts         204
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         204
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6403
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1197
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427247)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      529
;  :arith-conflicts         204
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         204
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6404
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1198
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427407)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      530
;  :arith-conflicts         205
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         205
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6405
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1199
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427488)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      530
;  :arith-conflicts         205
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         205
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6405
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1200
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427507)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      530
;  :arith-conflicts         205
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         205
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6405
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1201
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427526)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      530
;  :arith-conflicts         205
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         205
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6406
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1202
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427686)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      531
;  :arith-conflicts         206
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         206
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6407
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1203
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427767)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      531
;  :arith-conflicts         206
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         206
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6407
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1204
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427786)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      531
;  :arith-conflicts         206
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         206
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6407
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1205
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427805)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      531
;  :arith-conflicts         206
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         206
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6408
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1206
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            427965)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      532
;  :arith-conflicts         207
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         207
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6409
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1207
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428046)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      532
;  :arith-conflicts         207
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         207
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6409
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1208
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428065)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      532
;  :arith-conflicts         207
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         207
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6409
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1209
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428084)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      532
;  :arith-conflicts         207
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         207
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6410
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1210
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428244)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      533
;  :arith-conflicts         208
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         208
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6411
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1211
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428325)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      533
;  :arith-conflicts         208
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         208
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6411
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1212
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428344)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      533
;  :arith-conflicts         208
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         208
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               995
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6411
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1213
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428363)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      533
;  :arith-conflicts         208
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         208
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6412
;  :mk-clause               681
;  :num-allocs              8616673
;  :num-checks              1214
;  :propagations            452
;  :quant-instantiations    173
;  :rlimit-count            428523)
(declare-const $k@351@07 $Perm)
(assert ($Perm.isReadVar $k@351@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      168
;  :arith-assert-lower      543
;  :arith-assert-upper      535
;  :arith-conflicts         209
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         209
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6417
;  :mk-clause               683
;  :num-allocs              8616673
;  :num-checks              1215
;  :propagations            453
;  :quant-instantiations    173
;  :rlimit-count            428753)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@351@07 $Perm.No) (< $Perm.No $k@351@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      168
;  :arith-assert-lower      543
;  :arith-assert-upper      535
;  :arith-conflicts         209
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         209
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6417
;  :mk-clause               683
;  :num-allocs              8616673
;  :num-checks              1216
;  :propagations            453
;  :quant-instantiations    173
;  :rlimit-count            428803)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17167
;  :arith-add-rows          67
;  :arith-assert-diseq      168
;  :arith-assert-lower      543
;  :arith-assert-upper      535
;  :arith-conflicts         209
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         209
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              568
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6418
;  :mk-clause               683
;  :num-allocs              8616673
;  :num-checks              1217
;  :propagations            453
;  :quant-instantiations    173
;  :rlimit-count            428883)
(push) ; 13
(assert (not (not (= (+ $k@305@07 (- $k@275@07 $k@312@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          67
;  :arith-assert-diseq      168
;  :arith-assert-lower      543
;  :arith-assert-upper      536
;  :arith-conflicts         210
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         209
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6420
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1218
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            428967)
(assert (< $k@351@07 (+ $k@305@07 (- $k@275@07 $k@312@07))))
(assert (<= $Perm.No (- (+ $k@305@07 (- $k@275@07 $k@312@07)) $k@351@07)))
(assert (<= (- (+ $k@305@07 (- $k@275@07 $k@312@07)) $k@351@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@305@07 (- $k@275@07 $k@312@07)) $k@351@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      538
;  :arith-conflicts         211
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         210
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6424
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1219
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429236)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      538
;  :arith-conflicts         211
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         210
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6424
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1220
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429255)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      538
;  :arith-conflicts         211
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         210
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6424
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1221
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429274)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      539
;  :arith-conflicts         212
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         211
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6425
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1222
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429355)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      539
;  :arith-conflicts         212
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         211
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6425
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1223
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429374)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      539
;  :arith-conflicts         212
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         211
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6425
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1224
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429393)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      539
;  :arith-conflicts         212
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         211
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6426
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1225
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429673)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      540
;  :arith-conflicts         213
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         212
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6427
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1226
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429754)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      540
;  :arith-conflicts         213
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         212
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6427
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1227
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429773)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      540
;  :arith-conflicts         213
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         212
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6427
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1228
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            429792)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      540
;  :arith-conflicts         213
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         212
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6428
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1229
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430072)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      541
;  :arith-conflicts         214
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         213
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6429
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1230
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430153)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      541
;  :arith-conflicts         214
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         213
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6429
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1231
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430172)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      541
;  :arith-conflicts         214
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         213
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6429
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1232
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430191)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      541
;  :arith-conflicts         214
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         213
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6430
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1233
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430471)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      542
;  :arith-conflicts         215
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         214
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6431
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1234
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430552)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      542
;  :arith-conflicts         215
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         214
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6431
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1235
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430571)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      542
;  :arith-conflicts         215
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         214
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6431
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1236
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430590)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      542
;  :arith-conflicts         215
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         214
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6432
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1237
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430870)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      543
;  :arith-conflicts         216
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         215
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6433
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1238
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430951)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      543
;  :arith-conflicts         216
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         215
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6433
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1239
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430970)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      543
;  :arith-conflicts         216
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         215
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6433
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1240
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            430989)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      543
;  :arith-conflicts         216
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         215
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1011
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6434
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1241
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431269)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      544
;  :arith-conflicts         217
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         216
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6435
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1242
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431350)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      544
;  :arith-conflicts         217
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         216
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6435
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1243
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431369)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      544
;  :arith-conflicts         217
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         216
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6435
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1244
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431388)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      544
;  :arith-conflicts         217
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         216
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1013
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6436
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1245
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431668)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      545
;  :arith-conflicts         218
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         217
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6437
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1246
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431749)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      545
;  :arith-conflicts         218
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         217
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6437
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1247
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431768)
(push) ; 13
(assert (not (< $Perm.No (- $k@275@07 $k@312@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      545
;  :arith-conflicts         218
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         217
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6437
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1248
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            431787)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      168
;  :arith-assert-lower      545
;  :arith-assert-upper      545
;  :arith-conflicts         218
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         217
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6438
;  :mk-clause               685
;  :num-allocs              8616673
;  :num-checks              1249
;  :propagations            454
;  :quant-instantiations    173
;  :rlimit-count            432067)
(declare-const $k@352@07 $Perm)
(assert ($Perm.isReadVar $k@352@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      169
;  :arith-assert-lower      547
;  :arith-assert-upper      547
;  :arith-conflicts         219
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         218
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6443
;  :mk-clause               687
;  :num-allocs              8616673
;  :num-checks              1250
;  :propagations            455
;  :quant-instantiations    173
;  :rlimit-count            432297)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@352@07 $Perm.No) (< $Perm.No $k@352@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      169
;  :arith-assert-lower      547
;  :arith-assert-upper      547
;  :arith-conflicts         219
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         218
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1017
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6443
;  :mk-clause               687
;  :num-allocs              8616673
;  :num-checks              1251
;  :propagations            455
;  :quant-instantiations    173
;  :rlimit-count            432347)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17168
;  :arith-add-rows          69
;  :arith-assert-diseq      169
;  :arith-assert-lower      547
;  :arith-assert-upper      547
;  :arith-conflicts         219
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         218
;  :arith-pivots            127
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              570
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6444
;  :mk-clause               687
;  :num-allocs              8616673
;  :num-checks              1252
;  :propagations            455
;  :quant-instantiations    173
;  :rlimit-count            432427)
(push) ; 13
(assert (not (not (= (+ $k@306@07 (- $k@276@07 $k@313@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          69
;  :arith-assert-diseq      169
;  :arith-assert-lower      547
;  :arith-assert-upper      548
;  :arith-conflicts         220
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         218
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6446
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1253
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432511)
(assert (< $k@352@07 (+ $k@306@07 (- $k@276@07 $k@313@07))))
(assert (<= $Perm.No (- (+ $k@306@07 (- $k@276@07 $k@313@07)) $k@352@07)))
(assert (<= (- (+ $k@306@07 (- $k@276@07 $k@313@07)) $k@352@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@306@07 (- $k@276@07 $k@313@07)) $k@352@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      550
;  :arith-conflicts         221
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         219
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6450
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1254
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432780)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      550
;  :arith-conflicts         221
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         219
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6450
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1255
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432799)
(push) ; 13
(assert (not (< $Perm.No (- $k@276@07 $k@313@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      550
;  :arith-conflicts         221
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         219
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6450
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1256
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432818)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      551
;  :arith-conflicts         222
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         220
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6451
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1257
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432899)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      551
;  :arith-conflicts         222
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         220
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6451
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1258
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432918)
(push) ; 13
(assert (not (< $Perm.No (- $k@276@07 $k@313@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      551
;  :arith-conflicts         222
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         220
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6451
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1259
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432937)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      551
;  :arith-conflicts         222
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         220
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6451
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1260
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            432948)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      552
;  :arith-conflicts         223
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         221
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6452
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1261
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            433029)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      552
;  :arith-conflicts         223
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         221
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6452
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1262
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            433048)
(push) ; 13
(assert (not (< $Perm.No (- $k@276@07 $k@313@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      552
;  :arith-conflicts         223
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         221
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6452
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1263
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            433067)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      169
;  :arith-assert-lower      549
;  :arith-assert-upper      552
;  :arith-conflicts         223
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         221
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6452
;  :mk-clause               689
;  :num-allocs              8616673
;  :num-checks              1264
;  :propagations            456
;  :quant-instantiations    173
;  :rlimit-count            433078)
(declare-const $k@353@07 $Perm)
(assert ($Perm.isReadVar $k@353@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      170
;  :arith-assert-lower      551
;  :arith-assert-upper      554
;  :arith-conflicts         224
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         222
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6457
;  :mk-clause               691
;  :num-allocs              8616673
;  :num-checks              1265
;  :propagations            457
;  :quant-instantiations    173
;  :rlimit-count            433308)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@353@07 $Perm.No) (< $Perm.No $k@353@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      170
;  :arith-assert-lower      551
;  :arith-assert-upper      554
;  :arith-conflicts         224
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         222
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1024
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6457
;  :mk-clause               691
;  :num-allocs              8616673
;  :num-checks              1266
;  :propagations            457
;  :quant-instantiations    173
;  :rlimit-count            433358)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17169
;  :arith-add-rows          71
;  :arith-assert-diseq      170
;  :arith-assert-lower      551
;  :arith-assert-upper      554
;  :arith-conflicts         224
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         222
;  :arith-pivots            128
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              572
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6458
;  :mk-clause               691
;  :num-allocs              8616673
;  :num-checks              1267
;  :propagations            457
;  :quant-instantiations    173
;  :rlimit-count            433438)
(push) ; 13
(assert (not (not (= (+ $k@307@07 (- $k@277@07 $k@314@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          71
;  :arith-assert-diseq      170
;  :arith-assert-lower      551
;  :arith-assert-upper      555
;  :arith-conflicts         225
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         222
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6460
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1268
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433522)
(assert (< $k@353@07 (+ $k@307@07 (- $k@277@07 $k@314@07))))
(assert (<= $Perm.No (- (+ $k@307@07 (- $k@277@07 $k@314@07)) $k@353@07)))
(assert (<= (- (+ $k@307@07 (- $k@277@07 $k@314@07)) $k@353@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@307@07 (- $k@277@07 $k@314@07)) $k@353@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@301@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      557
;  :arith-conflicts         226
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         223
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6464
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1269
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433791)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      557
;  :arith-conflicts         226
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         223
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6464
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1270
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433810)
(push) ; 13
(assert (not (< $Perm.No (- $k@277@07 $k@314@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      557
;  :arith-conflicts         226
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         223
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6464
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1271
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433829)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      558
;  :arith-conflicts         227
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         224
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6465
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1272
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433910)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      558
;  :arith-conflicts         227
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         224
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6465
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1273
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433929)
(push) ; 13
(assert (not (< $Perm.No (- $k@277@07 $k@314@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      558
;  :arith-conflicts         227
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         224
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6465
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1274
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            433948)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      170
;  :arith-assert-lower      553
;  :arith-assert-upper      558
;  :arith-conflicts         227
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         224
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1029
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6466
;  :mk-clause               693
;  :num-allocs              8616673
;  :num-checks              1275
;  :propagations            458
;  :quant-instantiations    173
;  :rlimit-count            434358)
(declare-const $k@354@07 $Perm)
(assert ($Perm.isReadVar $k@354@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      171
;  :arith-assert-lower      555
;  :arith-assert-upper      560
;  :arith-conflicts         228
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         225
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6471
;  :mk-clause               695
;  :num-allocs              8616673
;  :num-checks              1276
;  :propagations            459
;  :quant-instantiations    173
;  :rlimit-count            434587)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      171
;  :arith-assert-lower      555
;  :arith-assert-upper      560
;  :arith-conflicts         228
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         225
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6471
;  :mk-clause               695
;  :num-allocs              8616673
;  :num-checks              1277
;  :propagations            459
;  :quant-instantiations    173
;  :rlimit-count            434606)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      171
;  :arith-assert-lower      555
;  :arith-assert-upper      560
;  :arith-conflicts         228
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         225
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6471
;  :mk-clause               695
;  :num-allocs              8616673
;  :num-checks              1278
;  :propagations            459
;  :quant-instantiations    173
;  :rlimit-count            434625)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@354@07 $Perm.No) (< $Perm.No $k@354@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17170
;  :arith-add-rows          73
;  :arith-assert-diseq      171
;  :arith-assert-lower      555
;  :arith-assert-upper      560
;  :arith-conflicts         228
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         225
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               1031
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              574
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6471
;  :mk-clause               695
;  :num-allocs              8616673
;  :num-checks              1279
;  :propagations            459
;  :quant-instantiations    173
;  :rlimit-count            434675)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@278@07 $k@315@07) $k@308@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          73
;  :arith-assert-diseq      171
;  :arith-assert-lower      555
;  :arith-assert-upper      561
;  :arith-conflicts         229
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         225
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1032
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6473
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1280
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            434759)
(assert (< $k@354@07 (+ (- $k@278@07 $k@315@07) $k@308@07)))
(assert (<= $Perm.No (- (+ (- $k@278@07 $k@315@07) $k@308@07) $k@354@07)))
(assert (<= (- (+ (- $k@278@07 $k@315@07) $k@308@07) $k@354@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@278@07 $k@315@07) $k@308@07) $k@354@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      563
;  :arith-conflicts         230
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         226
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6477
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1281
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435028)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      563
;  :arith-conflicts         230
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         226
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6477
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1282
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435047)
(push) ; 13
(assert (not (< $Perm.No (- $k@274@07 $k@311@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      563
;  :arith-conflicts         230
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         226
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6477
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1283
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435066)
(push) ; 13
(assert (not (< $Perm.No (- $k@278@07 $k@315@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      563
;  :arith-conflicts         230
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         226
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6477
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1284
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435085)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      564
;  :arith-conflicts         231
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         227
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6478
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1285
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435166)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      564
;  :arith-conflicts         231
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         227
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6478
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1286
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435188)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $t@342@07))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@302@07 (- $k@272@07 $k@309@07)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6479
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1287
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435288)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@342@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6479
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1288
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435307)
(push) ; 13
(assert (not (< $Perm.No (- $k@276@07 $k@313@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          75
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            130
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              576
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6479
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1289
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435326)
(pop) ; 12
(push) ; 12
; [else-branch: 65 | First:(Second:(Second:(Second:($t@301@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@301@07))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@301@07)))))))
        3)
      (- 0 2)))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 39 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
(pop) ; 9
; [eval] !!__flatten_76__116.Rng_reset
; [eval] !__flatten_76__116.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_76__116@292@07)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17171
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    622
;  :datatype-constructor-ax 4635
;  :datatype-occurs-check   916
;  :datatype-splits         3812
;  :decisions               4480
;  :del-clause              635
;  :final-checks            168
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6479
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1290
;  :propagations            460
;  :quant-instantiations    173
;  :rlimit-count            435509)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17445
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4718
;  :datatype-occurs-check   929
;  :datatype-splits         3893
;  :decisions               4560
;  :del-clause              635
;  :final-checks            171
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6562
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1291
;  :propagations            463
;  :quant-instantiations    175
;  :rlimit-count            437469
;  :time                    0.00)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17719
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4801
;  :datatype-occurs-check   942
;  :datatype-splits         3974
;  :decisions               4640
;  :del-clause              635
;  :final-checks            174
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6645
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1292
;  :propagations            466
;  :quant-instantiations    177
;  :rlimit-count            439435
;  :time                    0.00)
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))) | live]
; [else-branch: 70 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07))))))))))))) | live]
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))
; [exec]
; __flatten_81__121 := diz.LFSR_m
(push) ; 10
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17723
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4801
;  :datatype-occurs-check   942
;  :datatype-splits         3974
;  :decisions               4640
;  :del-clause              635
;  :final-checks            174
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6648
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1293
;  :propagations            466
;  :quant-instantiations    179
;  :rlimit-count            439676)
(declare-const __flatten_81__121@355@07 $Ref)
(assert (= __flatten_81__121@355@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_80__120 := __flatten_81__121.Main_rn
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_81__121@355@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17724
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4801
;  :datatype-occurs-check   942
;  :datatype-splits         3974
;  :decisions               4640
;  :del-clause              635
;  :final-checks            174
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6649
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1294
;  :propagations            466
;  :quant-instantiations    179
;  :rlimit-count            439724)
(push) ; 10
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17724
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4801
;  :datatype-occurs-check   942
;  :datatype-splits         3974
;  :decisions               4640
;  :del-clause              635
;  :final-checks            174
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6649
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1295
;  :propagations            466
;  :quant-instantiations    179
;  :rlimit-count            439772)
(declare-const __flatten_80__120@356@07 $Ref)
(assert (=
  __flatten_80__120@356@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_80__120@356@07)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17725
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    628
;  :datatype-constructor-ax 4801
;  :datatype-occurs-check   942
;  :datatype-splits         3974
;  :decisions               4640
;  :del-clause              635
;  :final-checks            174
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6650
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1296
;  :propagations            466
;  :quant-instantiations    179
;  :rlimit-count            439828)
(push) ; 10
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17996
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    631
;  :datatype-constructor-ax 4883
;  :datatype-occurs-check   955
;  :datatype-splits         4054
;  :decisions               4719
;  :del-clause              635
;  :final-checks            177
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6731
;  :mk-clause               697
;  :num-allocs              8616673
;  :num-checks              1297
;  :propagations            469
;  :quant-instantiations    180
;  :rlimit-count            441781
;  :time                    0.00)
(push) ; 10
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18268
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1038
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4969
;  :datatype-occurs-check   969
;  :datatype-splits         4137
;  :decisions               4801
;  :del-clause              636
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6819
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1298
;  :propagations            472
;  :quant-instantiations    182
;  :rlimit-count            443791
;  :time                    0.00)
; [then-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07))))))))))))) | live]
; [else-branch: 71 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) | live]
(push) ; 10
; [then-branch: 71 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
; [exec]
; __flatten_83__123 := diz.LFSR_m
(push) ; 11
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18271
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4969
;  :datatype-occurs-check   969
;  :datatype-splits         4137
;  :decisions               4801
;  :del-clause              636
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6821
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1299
;  :propagations            472
;  :quant-instantiations    183
;  :rlimit-count            444024)
(declare-const __flatten_83__123@357@07 $Ref)
(assert (= __flatten_83__123@357@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_82__122 := __flatten_83__123.Main_rn
(push) ; 11
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_83__123@357@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18272
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4969
;  :datatype-occurs-check   969
;  :datatype-splits         4137
;  :decisions               4801
;  :del-clause              636
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6822
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1300
;  :propagations            472
;  :quant-instantiations    183
;  :rlimit-count            444080)
(push) ; 11
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18272
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4969
;  :datatype-occurs-check   969
;  :datatype-splits         4137
;  :decisions               4801
;  :del-clause              636
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6822
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1301
;  :propagations            472
;  :quant-instantiations    183
;  :rlimit-count            444128)
(declare-const __flatten_82__122@358@07 $Ref)
(assert (=
  __flatten_82__122@358@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [eval] __flatten_82__122.Rng_seed_i == 0
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_82__122@358@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18273
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    635
;  :datatype-constructor-ax 4969
;  :datatype-occurs-check   969
;  :datatype-splits         4137
;  :decisions               4801
;  :del-clause              636
;  :final-checks            180
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6823
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1302
;  :propagations            472
;  :quant-instantiations    183
;  :rlimit-count            444187)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18543
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    638
;  :datatype-constructor-ax 5051
;  :datatype-occurs-check   982
;  :datatype-splits         4217
;  :decisions               4880
;  :del-clause              636
;  :final-checks            183
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6904
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1303
;  :propagations            475
;  :quant-instantiations    184
;  :rlimit-count            446172
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18812
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6985
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1304
;  :propagations            478
;  :quant-instantiations    185
;  :rlimit-count            448155
;  :time                    0.00)
; [then-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) == 0 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) != 0 | live]
(push) ; 11
; [then-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) == 0]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
  0))
; [exec]
; __flatten_85__125 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18814
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6987
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1305
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448408)
(declare-const __flatten_85__125@359@07 $Ref)
(assert (= __flatten_85__125@359@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_84__124 := __flatten_85__125.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_85__125@359@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18815
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6988
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1306
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448467)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18815
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6988
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1307
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448515)
(declare-const __flatten_84__124@360@07 $Ref)
(assert (=
  __flatten_84__124@360@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [exec]
; __flatten_84__124.Rng_LFSR_reg := 0
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_84__124@360@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18816
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6989
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1308
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448577)
(assert (not (= __flatten_84__124@360@07 $Ref.null)))
; [exec]
; __flatten_128__165 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18817
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6990
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1309
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448681)
(declare-const __flatten_128__165@361@07 $Ref)
(assert (= __flatten_128__165@361@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_130__167 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18818
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6991
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1310
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448769)
(declare-const __flatten_130__167@362@07 $Ref)
(assert (= __flatten_130__167@362@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_129__166 := __flatten_130__167.Main_process_state[1 := 3]
; [eval] __flatten_130__167.Main_process_state[1 := 3]
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_130__167@362@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18819
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6992
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1311
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448828)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18819
;  :arith-add-rows          78
;  :arith-assert-diseq      171
;  :arith-assert-lower      557
;  :arith-assert-upper      565
;  :arith-conflicts         232
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         228
;  :arith-pivots            146
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             6992
;  :mk-clause               698
;  :num-allocs              8616673
;  :num-checks              1312
;  :propagations            478
;  :quant-instantiations    186
;  :rlimit-count            448843)
(declare-const __flatten_129__166@363@07 Seq<Int>)
(assert (Seq_equal
  __flatten_129__166@363@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    1
    3)))
; [exec]
; __flatten_128__165.Main_process_state := __flatten_129__166
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_128__165@361@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18830
;  :arith-add-rows          81
;  :arith-assert-diseq      172
;  :arith-assert-lower      561
;  :arith-assert-upper      567
;  :arith-conflicts         232
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         230
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7016
;  :mk-clause               717
;  :num-allocs              8616673
;  :num-checks              1313
;  :propagations            487
;  :quant-instantiations    191
;  :rlimit-count            449314)
(assert (not (= __flatten_128__165@361@07 $Ref.null)))
; [exec]
; __flatten_131__168 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18831
;  :arith-add-rows          81
;  :arith-assert-diseq      172
;  :arith-assert-lower      561
;  :arith-assert-upper      567
;  :arith-conflicts         232
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         230
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7017
;  :mk-clause               717
;  :num-allocs              8616673
;  :num-checks              1314
;  :propagations            487
;  :quant-instantiations    191
;  :rlimit-count            449418)
(declare-const __flatten_131__168@364@07 $Ref)
(assert (= __flatten_131__168@364@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_133__170 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18832
;  :arith-add-rows          81
;  :arith-assert-diseq      172
;  :arith-assert-lower      561
;  :arith-assert-upper      567
;  :arith-conflicts         232
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         230
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7018
;  :mk-clause               717
;  :num-allocs              8616673
;  :num-checks              1315
;  :propagations            487
;  :quant-instantiations    191
;  :rlimit-count            449506)
(declare-const __flatten_133__170@365@07 $Ref)
(assert (= __flatten_133__170@365@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_132__169 := __flatten_133__170.Main_event_state[3 := 5]
; [eval] __flatten_133__170.Main_event_state[3 := 5]
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_133__170@365@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18833
;  :arith-add-rows          81
;  :arith-assert-diseq      172
;  :arith-assert-lower      561
;  :arith-assert-upper      567
;  :arith-conflicts         232
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         230
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7019
;  :mk-clause               717
;  :num-allocs              8616673
;  :num-checks              1316
;  :propagations            487
;  :quant-instantiations    191
;  :rlimit-count            449565)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18833
;  :arith-add-rows          81
;  :arith-assert-diseq      172
;  :arith-assert-lower      561
;  :arith-assert-upper      567
;  :arith-conflicts         232
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         230
;  :arith-pivots            148
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7019
;  :mk-clause               717
;  :num-allocs              8616673
;  :num-checks              1317
;  :propagations            487
;  :quant-instantiations    191
;  :rlimit-count            449580)
(declare-const __flatten_132__169@366@07 Seq<Int>)
(assert (Seq_equal
  __flatten_132__169@366@07
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    3
    5)))
; [exec]
; __flatten_131__168.Main_event_state := __flatten_132__169
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_131__168@364@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18843
;  :arith-add-rows          84
;  :arith-assert-diseq      173
;  :arith-assert-lower      565
;  :arith-assert-upper      569
;  :arith-conflicts         232
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    641
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7042
;  :mk-clause               737
;  :num-allocs              8616673
;  :num-checks              1318
;  :propagations            496
;  :quant-instantiations    196
;  :rlimit-count            450075)
(assert (not (= __flatten_131__168@364@07 $Ref.null)))
(push) ; 12
; Loop head block: Check well-definedness of invariant
(declare-const $t@367@07 $Snap)
(assert (= $t@367@07 ($Snap.combine ($Snap.first $t@367@07) ($Snap.second $t@367@07))))
(declare-const $k@368@07 $Perm)
(assert ($Perm.isReadVar $k@368@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@368@07 $Perm.No) (< $Perm.No $k@368@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18848
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      567
;  :arith-assert-upper      570
;  :arith-conflicts         232
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    642
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7047
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1319
;  :propagations            497
;  :quant-instantiations    196
;  :rlimit-count            450386)
(assert (<= $Perm.No $k@368@07))
(assert (<= $k@368@07 $Perm.Write))
(assert (implies (< $Perm.No $k@368@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@367@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@367@07))
    ($Snap.second ($Snap.second $t@367@07)))))
(assert (= ($Snap.first ($Snap.second $t@367@07)) $Snap.unit))
; [eval] diz.LFSR_m != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18854
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      567
;  :arith-assert-upper      571
;  :arith-conflicts         232
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7050
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1320
;  :propagations            497
;  :quant-instantiations    196
;  :rlimit-count            450629)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@367@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@367@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18860
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      567
;  :arith-assert-upper      571
;  :arith-conflicts         232
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    644
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7053
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1321
;  :propagations            497
;  :quant-instantiations    197
;  :rlimit-count            450901)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@367@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18865
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      567
;  :arith-assert-upper      571
;  :arith-conflicts         232
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1050
;  :datatype-accessor-ax    645
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7054
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1322
;  :propagations            497
;  :quant-instantiations    197
;  :rlimit-count            451078)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18871
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      567
;  :arith-assert-upper      571
;  :arith-conflicts         232
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    646
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7056
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1323
;  :propagations            497
;  :quant-instantiations    197
;  :rlimit-count            451297)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18878
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      569
;  :arith-assert-upper      572
;  :arith-conflicts         232
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1052
;  :datatype-accessor-ax    647
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7062
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1324
;  :propagations            497
;  :quant-instantiations    199
;  :rlimit-count            451627)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  $Snap.unit))
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18884
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      569
;  :arith-assert-upper      572
;  :arith-conflicts         232
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1053
;  :datatype-accessor-ax    648
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7064
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1325
;  :propagations            497
;  :quant-instantiations    199
;  :rlimit-count            451866)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  $Snap.unit))
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@369@07 Int)
(push) ; 13
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 14
; [then-branch: 73 | 0 <= i__172@369@07 | live]
; [else-branch: 73 | !(0 <= i__172@369@07) | live]
(push) ; 15
; [then-branch: 73 | 0 <= i__172@369@07]
(assert (<= 0 i__172@369@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      572
;  :arith-assert-upper      573
;  :arith-conflicts         232
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1054
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7072
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1326
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452304)
(pop) ; 15
(push) ; 15
; [else-branch: 73 | !(0 <= i__172@369@07)]
(assert (not (<= 0 i__172@369@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 74 | i__172@369@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__172@369@07 | live]
; [else-branch: 74 | !(i__172@369@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__172@369@07) | live]
(push) ; 15
; [then-branch: 74 | i__172@369@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__172@369@07]
(assert (and
  (<
    i__172@369@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  (<= 0 i__172@369@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 16
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      573
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7074
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1327
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452461)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__172@369@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      573
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7074
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1328
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452470)
; [eval] -1
(push) ; 16
; [then-branch: 75 | First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07] == -1 | live]
; [else-branch: 75 | First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07] != -1 | live]
(push) ; 17
; [then-branch: 75 | First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__172@369@07)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 75 | First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i__172@369@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      573
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7075
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1329
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452684)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@369@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      174
;  :arith-assert-lower      573
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7075
;  :mk-clause               739
;  :num-allocs              8616673
;  :num-checks              1330
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452693)
(push) ; 18
; [then-branch: 76 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07] | live]
; [else-branch: 76 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07]) | live]
(push) ; 19
; [then-branch: 76 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__172@369@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      175
;  :arith-assert-lower      576
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7078
;  :mk-clause               740
;  :num-allocs              8616673
;  :num-checks              1331
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452855)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__172@369@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      175
;  :arith-assert-lower      576
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7078
;  :mk-clause               740
;  :num-allocs              8616673
;  :num-checks              1332
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452864)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18892
;  :arith-add-rows          84
;  :arith-assert-diseq      175
;  :arith-assert-lower      576
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              636
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7078
;  :mk-clause               740
;  :num-allocs              8616673
;  :num-checks              1333
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            452912)
(pop) ; 19
(push) ; 19
; [else-branch: 76 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i__172@369@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i__172@369@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 74 | !(i__172@369@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__172@369@07)]
(assert (not
  (and
    (<
      i__172@369@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
    (<= 0 i__172@369@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__172@369@07 Int)) (!
  (implies
    (and
      (<
        i__172@369@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i__172@369@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i__172@369@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__172@369@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__172@369@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__172@369@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18897
;  :arith-add-rows          84
;  :arith-assert-diseq      175
;  :arith-assert-lower      576
;  :arith-assert-upper      574
;  :arith-conflicts         232
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1059
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7080
;  :mk-clause               740
;  :num-allocs              8616673
;  :num-checks              1334
;  :propagations            497
;  :quant-instantiations    201
;  :rlimit-count            453537)
(declare-const $k@370@07 $Perm)
(assert ($Perm.isReadVar $k@370@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@370@07 $Perm.No) (< $Perm.No $k@370@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18897
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      575
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7084
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1335
;  :propagations            498
;  :quant-instantiations    201
;  :rlimit-count            453735)
(assert (<= $Perm.No $k@370@07))
(assert (<= $k@370@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@370@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18903
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1061
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7087
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1336
;  :propagations            498
;  :quant-instantiations    201
;  :rlimit-count            454058)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18903
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7087
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1337
;  :propagations            498
;  :quant-instantiations    201
;  :rlimit-count            454106)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18909
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7090
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1338
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            454462)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18909
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7090
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1339
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            454510)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18914
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    653
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7091
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1340
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            454767)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18914
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    653
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7091
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1341
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            454815)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18919
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7092
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1342
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455082)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18919
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7092
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1343
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18924
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7093
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1344
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455407)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18924
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7093
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1345
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455455)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18929
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7094
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1346
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455742)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18929
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1072
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7094
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1347
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            455790)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18934
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7095
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1348
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456087)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18934
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1074
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7095
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1349
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456135)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18939
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7096
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1350
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456442)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18939
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7096
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1351
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456490)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18944
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7097
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1352
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456807)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18944
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1078
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7097
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1353
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            456855)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18949
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    660
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7098
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1354
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            457182)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18949
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1080
;  :datatype-accessor-ax    660
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7098
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1355
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            457230)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18954
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    661
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7099
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1356
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            457567)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18954
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1082
;  :datatype-accessor-ax    661
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7099
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1357
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            457615)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18959
;  :arith-add-rows          84
;  :arith-assert-diseq      176
;  :arith-assert-lower      578
;  :arith-assert-upper      576
;  :arith-conflicts         232
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7100
;  :mk-clause               742
;  :num-allocs              8616673
;  :num-checks              1358
;  :propagations            498
;  :quant-instantiations    202
;  :rlimit-count            457962)
(declare-const $k@371@07 $Perm)
(assert ($Perm.isReadVar $k@371@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@371@07 $Perm.No) (< $Perm.No $k@371@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18959
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      577
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1084
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7104
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1359
;  :propagations            499
;  :quant-instantiations    202
;  :rlimit-count            458160)
(assert (<= $Perm.No $k@371@07))
(assert (<= $k@371@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@371@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18965
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    663
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7107
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1360
;  :propagations            499
;  :quant-instantiations    202
;  :rlimit-count            458603)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18965
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    663
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7107
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1361
;  :propagations            499
;  :quant-instantiations    202
;  :rlimit-count            458651)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18971
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7110
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1362
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            459145)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18971
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7110
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1363
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            459193)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18976
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7111
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1364
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            459570)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18976
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7111
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1365
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            459618)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18981
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7112
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1366
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460005)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18981
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7112
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1367
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460053)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18986
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7113
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1368
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460450)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18986
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1094
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7113
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1369
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460498)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18991
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7114
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1370
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460905)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18991
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1096
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7114
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1371
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            460953)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18996
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7115
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1372
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            461370)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18996
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1098
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7115
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1373
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            461418)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19001
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7116
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1374
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            461845)
(push) ; 13
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19001
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1100
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7116
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1375
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            461893)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19006
;  :arith-add-rows          84
;  :arith-assert-diseq      177
;  :arith-assert-lower      580
;  :arith-assert-upper      578
;  :arith-conflicts         232
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7117
;  :mk-clause               744
;  :num-allocs              8616673
;  :num-checks              1376
;  :propagations            499
;  :quant-instantiations    203
;  :rlimit-count            462330)
(declare-const $k@372@07 $Perm)
(assert ($Perm.isReadVar $k@372@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@372@07 $Perm.No) (< $Perm.No $k@372@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19006
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      579
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7121
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1377
;  :propagations            500
;  :quant-instantiations    203
;  :rlimit-count            462529)
(assert (<= $Perm.No $k@372@07))
(assert (<= $k@372@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@372@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19012
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7124
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1378
;  :propagations            500
;  :quant-instantiations    203
;  :rlimit-count            463062)
(push) ; 13
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19012
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7124
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1379
;  :propagations            500
;  :quant-instantiations    203
;  :rlimit-count            463110)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19018
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1105
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7127
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1380
;  :propagations            500
;  :quant-instantiations    204
;  :rlimit-count            463688)
(push) ; 13
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19018
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1106
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7127
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1381
;  :propagations            500
;  :quant-instantiations    204
;  :rlimit-count            463736)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19023
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1107
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7128
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1382
;  :propagations            500
;  :quant-instantiations    204
;  :rlimit-count            464203)
(push) ; 13
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19023
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1108
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7128
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1383
;  :propagations            500
;  :quant-instantiations    204
;  :rlimit-count            464251)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19028
;  :arith-add-rows          84
;  :arith-assert-diseq      178
;  :arith-assert-lower      582
;  :arith-assert-upper      580
;  :arith-conflicts         232
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1109
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7129
;  :mk-clause               746
;  :num-allocs              8616673
;  :num-checks              1384
;  :propagations            500
;  :quant-instantiations    204
;  :rlimit-count            464728)
(declare-const $k@373@07 $Perm)
(assert ($Perm.isReadVar $k@373@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@373@07 $Perm.No) (< $Perm.No $k@373@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19028
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      581
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7133
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1385
;  :propagations            501
;  :quant-instantiations    204
;  :rlimit-count            464927)
(assert (<= $Perm.No $k@373@07))
(assert (<= $k@373@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@373@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19034
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7136
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1386
;  :propagations            501
;  :quant-instantiations    204
;  :rlimit-count            465500)
(push) ; 13
(assert (not (< $Perm.No $k@373@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19034
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7136
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1387
;  :propagations            501
;  :quant-instantiations    204
;  :rlimit-count            465548)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19040
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7139
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1388
;  :propagations            501
;  :quant-instantiations    205
;  :rlimit-count            466156)
(push) ; 13
(assert (not (< $Perm.No $k@373@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19040
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7139
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1389
;  :propagations            501
;  :quant-instantiations    205
;  :rlimit-count            466204)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19045
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7140
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1390
;  :propagations            501
;  :quant-instantiations    205
;  :rlimit-count            466711)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19045
;  :arith-add-rows          84
;  :arith-assert-diseq      179
;  :arith-assert-lower      584
;  :arith-assert-upper      582
;  :arith-conflicts         232
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7140
;  :mk-clause               748
;  :num-allocs              8616673
;  :num-checks              1391
;  :propagations            501
;  :quant-instantiations    205
;  :rlimit-count            466759)
(declare-const $k@374@07 $Perm)
(assert ($Perm.isReadVar $k@374@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@374@07 $Perm.No) (< $Perm.No $k@374@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19045
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      583
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7144
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1392
;  :propagations            502
;  :quant-instantiations    205
;  :rlimit-count            466958)
(assert (<= $Perm.No $k@374@07))
(assert (<= $k@374@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@374@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19051
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7147
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1393
;  :propagations            502
;  :quant-instantiations    205
;  :rlimit-count            467561)
(push) ; 13
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19051
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7147
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1394
;  :propagations            502
;  :quant-instantiations    205
;  :rlimit-count            467609)
(push) ; 13
(assert (not (< $Perm.No $k@374@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19051
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7147
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1395
;  :propagations            502
;  :quant-instantiations    205
;  :rlimit-count            467657)
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19051
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7147
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1396
;  :propagations            502
;  :quant-instantiations    205
;  :rlimit-count            467705)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 13
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19056
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7150
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1397
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468289)
(push) ; 13
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19056
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7150
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1398
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468337)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  diz@89@07))
; Loop head block: Check well-definedness of edge conditions
(push) ; 13
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 14
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19059
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7151
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1399
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468743)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19059
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7151
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1400
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468758)
; [eval] -1
(push) ; 14
; [then-branch: 77 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 | live]
; [else-branch: 77 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1 | live]
(push) ; 15
; [then-branch: 77 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      1)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 77 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19060
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7152
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1401
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468953)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19060
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7152
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1402
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            468968)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19060
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7152
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1403
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            469021)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19060
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7152
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1404
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            469036)
; [eval] -1
(push) ; 14
; [then-branch: 78 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 | live]
; [else-branch: 78 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1 | live]
(push) ; 15
; [then-branch: 78 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      1)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 78 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7153
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1405
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            469227)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      180
;  :arith-assert-lower      586
;  :arith-assert-upper      584
;  :arith-conflicts         232
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              637
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7153
;  :mk-clause               750
;  :num-allocs              8616673
;  :num-checks              1406
;  :propagations            502
;  :quant-instantiations    206
;  :rlimit-count            469242)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
(push) ; 12
; Loop head block: Establish invariant
(declare-const $k@375@07 $Perm)
(assert ($Perm.isReadVar $k@375@07 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@375@07 $Perm.No) (< $Perm.No $k@375@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      588
;  :arith-assert-upper      585
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7157
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1407
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469445)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@272@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      588
;  :arith-assert-upper      585
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7157
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1408
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469456)
(assert (< $k@375@07 $k@272@07))
(assert (<= $Perm.No (- $k@272@07 $k@375@07)))
(assert (<= (- $k@272@07 $k@375@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@272@07 $k@375@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      590
;  :arith-assert-upper      586
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7160
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1409
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469676)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      590
;  :arith-assert-upper      586
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7160
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1410
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469724)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      590
;  :arith-assert-upper      586
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7160
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1411
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469772)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      590
;  :arith-assert-upper      586
;  :arith-conflicts         232
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7160
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1412
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469820)
(set-option :timeout 0)
(push) ; 13
(assert (not (= (Seq_length __flatten_129__166@363@07) 3)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19061
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      590
;  :arith-assert-upper      586
;  :arith-conflicts         232
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7163
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1413
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469894)
(assert (= (Seq_length __flatten_129__166@363@07) 3))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19062
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      591
;  :arith-assert-upper      587
;  :arith-conflicts         232
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7166
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1414
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            469993)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19062
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      591
;  :arith-assert-upper      587
;  :arith-conflicts         232
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7166
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1415
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            470041)
(set-option :timeout 0)
(push) ; 13
(assert (not (= (Seq_length __flatten_132__169@366@07) 6)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19062
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      591
;  :arith-assert-upper      587
;  :arith-conflicts         232
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7169
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1416
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            470115)
(assert (= (Seq_length __flatten_132__169@366@07) 6))
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@376@07 Int)
(push) ; 13
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 14
; [then-branch: 79 | 0 <= i__172@376@07 | live]
; [else-branch: 79 | !(0 <= i__172@376@07) | live]
(push) ; 15
; [then-branch: 79 | 0 <= i__172@376@07]
(assert (<= 0 i__172@376@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19063
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      593
;  :arith-assert-upper      588
;  :arith-conflicts         232
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1137
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7173
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1417
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            470266)
(pop) ; 15
(push) ; 15
; [else-branch: 79 | !(0 <= i__172@376@07)]
(assert (not (<= 0 i__172@376@07)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 80 | i__172@376@07 < |__flatten_129__166@363@07| && 0 <= i__172@376@07 | live]
; [else-branch: 80 | !(i__172@376@07 < |__flatten_129__166@363@07| && 0 <= i__172@376@07) | live]
(push) ; 15
; [then-branch: 80 | i__172@376@07 < |__flatten_129__166@363@07| && 0 <= i__172@376@07]
(assert (and
  (< i__172@376@07 (Seq_length __flatten_129__166@363@07))
  (<= 0 i__172@376@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 16
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19063
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      594
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7175
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1418
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            470423)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__172@376@07 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19063
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      594
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7175
;  :mk-clause               752
;  :num-allocs              8616673
;  :num-checks              1419
;  :propagations            503
;  :quant-instantiations    206
;  :rlimit-count            470432)
; [eval] -1
(push) ; 16
; [then-branch: 81 | __flatten_129__166@363@07[i__172@376@07] == -1 | live]
; [else-branch: 81 | __flatten_129__166@363@07[i__172@376@07] != -1 | live]
(push) ; 17
; [then-branch: 81 | __flatten_129__166@363@07[i__172@376@07] == -1]
(assert (= (Seq_index __flatten_129__166@363@07 i__172@376@07) (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 81 | __flatten_129__166@363@07[i__172@376@07] != -1]
(assert (not (= (Seq_index __flatten_129__166@363@07 i__172@376@07) (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19064
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      594
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7183
;  :mk-clause               762
;  :num-allocs              8616673
;  :num-checks              1420
;  :propagations            503
;  :quant-instantiations    207
;  :rlimit-count            470632)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@376@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19064
;  :arith-add-rows          84
;  :arith-assert-diseq      181
;  :arith-assert-lower      594
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7183
;  :mk-clause               762
;  :num-allocs              8616673
;  :num-checks              1421
;  :propagations            503
;  :quant-instantiations    207
;  :rlimit-count            470641)
(push) ; 18
; [then-branch: 82 | 0 <= __flatten_129__166@363@07[i__172@376@07] | live]
; [else-branch: 82 | !(0 <= __flatten_129__166@363@07[i__172@376@07]) | live]
(push) ; 19
; [then-branch: 82 | 0 <= __flatten_129__166@363@07[i__172@376@07]]
(assert (<= 0 (Seq_index __flatten_129__166@363@07 i__172@376@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19064
;  :arith-add-rows          84
;  :arith-assert-diseq      182
;  :arith-assert-lower      597
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7186
;  :mk-clause               763
;  :num-allocs              8616673
;  :num-checks              1422
;  :propagations            503
;  :quant-instantiations    207
;  :rlimit-count            470754)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__172@376@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19064
;  :arith-add-rows          84
;  :arith-assert-diseq      182
;  :arith-assert-lower      597
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7186
;  :mk-clause               763
;  :num-allocs              8616673
;  :num-checks              1423
;  :propagations            503
;  :quant-instantiations    207
;  :rlimit-count            470763)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19064
;  :arith-add-rows          84
;  :arith-assert-diseq      182
;  :arith-assert-lower      597
;  :arith-assert-upper      589
;  :arith-conflicts         232
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         232
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               1141
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5133
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4959
;  :del-clause              649
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7186
;  :mk-clause               763
;  :num-allocs              8616673
;  :num-checks              1424
;  :propagations            503
;  :quant-instantiations    207
;  :rlimit-count            470811)
(pop) ; 19
(push) ; 19
; [else-branch: 82 | !(0 <= __flatten_129__166@363@07[i__172@376@07])]
(assert (not (<= 0 (Seq_index __flatten_129__166@363@07 i__172@376@07))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 80 | !(i__172@376@07 < |__flatten_129__166@363@07| && 0 <= i__172@376@07)]
(assert (not
  (and
    (< i__172@376@07 (Seq_length __flatten_129__166@363@07))
    (<= 0 i__172@376@07))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__172@376@07 Int)) (!
  (implies
    (and
      (< i__172@376@07 (Seq_length __flatten_129__166@363@07))
      (<= 0 i__172@376@07))
    (or
      (= (Seq_index __flatten_129__166@363@07 i__172@376@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_129__166@363@07 i__172@376@07)
          (Seq_length __flatten_132__169@366@07))
        (<= 0 (Seq_index __flatten_129__166@363@07 i__172@376@07)))))
  :pattern ((Seq_index __flatten_129__166@363@07 i__172@376@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      187
;  :arith-assert-lower      607
;  :arith-assert-upper      598
;  :arith-conflicts         234
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7224
;  :mk-clause               796
;  :num-allocs              8616673
;  :num-checks              1425
;  :propagations            529
;  :quant-instantiations    210
;  :rlimit-count            471433
;  :time                    0.00)
(assert (forall ((i__172@376@07 Int)) (!
  (implies
    (and
      (< i__172@376@07 (Seq_length __flatten_129__166@363@07))
      (<= 0 i__172@376@07))
    (or
      (= (Seq_index __flatten_129__166@363@07 i__172@376@07) (- 0 1))
      (and
        (<
          (Seq_index __flatten_129__166@363@07 i__172@376@07)
          (Seq_length __flatten_132__169@366@07))
        (<= 0 (Seq_index __flatten_129__166@363@07 i__172@376@07)))))
  :pattern ((Seq_index __flatten_129__166@363@07 i__172@376@07))
  :qid |prog.l<no position>|)))
(declare-const $k@377@07 $Perm)
(assert ($Perm.isReadVar $k@377@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      609
;  :arith-assert-upper      599
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1148
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7229
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1426
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            471902)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@377@07 $Perm.No) (< $Perm.No $k@377@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      609
;  :arith-assert-upper      599
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7229
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1427
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            471952)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@274@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      609
;  :arith-assert-upper      599
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7229
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1428
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            471963)
(assert (< $k@377@07 $k@274@07))
(assert (<= $Perm.No (- $k@274@07 $k@377@07)))
(assert (<= (- $k@274@07 $k@377@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@274@07 $k@377@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1429
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472171)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1151
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1430
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472219)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1431
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472267)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1432
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472315)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1433
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472363)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1434
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472411)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1435
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472459)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1436
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472507)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1437
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472555)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1159
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1438
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472603)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1439
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472651)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1161
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1440
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472699)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1441
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472747)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1163
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1442
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472795)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1164
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1443
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472843)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1444
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472891)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1166
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1445
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472939)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1446
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            472987)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1168
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1447
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            473035)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1448
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            473083)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1449
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            473131)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      188
;  :arith-assert-lower      611
;  :arith-assert-upper      600
;  :arith-conflicts         234
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7232
;  :mk-clause               798
;  :num-allocs              8616673
;  :num-checks              1450
;  :propagations            530
;  :quant-instantiations    210
;  :rlimit-count            473179)
(declare-const $k@378@07 $Perm)
(assert ($Perm.isReadVar $k@378@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      613
;  :arith-assert-upper      601
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7236
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1451
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473375)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@378@07 $Perm.No) (< $Perm.No $k@378@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      613
;  :arith-assert-upper      601
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7236
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1452
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473425)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@275@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      613
;  :arith-assert-upper      601
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7236
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1453
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473436)
(assert (< $k@378@07 $k@275@07))
(assert (<= $Perm.No (- $k@275@07 $k@378@07)))
(assert (<= (- $k@275@07 $k@378@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@275@07 $k@378@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1454
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473650)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1455
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473698)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1176
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1456
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473746)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1457
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473794)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1458
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473842)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1179
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1459
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473890)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1460
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473938)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1461
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            473986)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1462
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474034)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1183
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1463
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474082)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1464
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474130)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1185
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1465
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474178)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1466
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474226)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1187
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1467
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474274)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1188
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1468
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474322)
(push) ; 13
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      189
;  :arith-assert-lower      615
;  :arith-assert-upper      602
;  :arith-conflicts         234
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1189
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7239
;  :mk-clause               800
;  :num-allocs              8616673
;  :num-checks              1469
;  :propagations            531
;  :quant-instantiations    210
;  :rlimit-count            474370)
(declare-const $k@379@07 $Perm)
(assert ($Perm.isReadVar $k@379@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      617
;  :arith-assert-upper      603
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1190
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7243
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1470
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474566)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@379@07 $Perm.No) (< $Perm.No $k@379@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      617
;  :arith-assert-upper      603
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7243
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1471
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474616)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@276@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      617
;  :arith-assert-upper      603
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            156
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7243
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1472
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474627)
(assert (< $k@379@07 $k@276@07))
(assert (<= $Perm.No (- $k@276@07 $k@379@07)))
(assert (<= (- $k@276@07 $k@379@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@276@07 $k@379@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1192
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1473
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474847)
(push) ; 13
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1193
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1474
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474895)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1194
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1475
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474943)
(push) ; 13
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1195
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1476
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            474991)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1477
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            475039)
(push) ; 13
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      190
;  :arith-assert-lower      619
;  :arith-assert-upper      604
;  :arith-conflicts         234
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1197
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7246
;  :mk-clause               802
;  :num-allocs              8616673
;  :num-checks              1478
;  :propagations            532
;  :quant-instantiations    210
;  :rlimit-count            475087)
(declare-const $k@380@07 $Perm)
(assert ($Perm.isReadVar $k@380@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      621
;  :arith-assert-upper      605
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1198
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7250
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1479
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475283)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@380@07 $Perm.No) (< $Perm.No $k@380@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      621
;  :arith-assert-upper      605
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7250
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1480
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475333)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@277@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      621
;  :arith-assert-upper      605
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            158
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7250
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1481
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475344)
(assert (< $k@380@07 $k@277@07))
(assert (<= $Perm.No (- $k@277@07 $k@380@07)))
(assert (<= (- $k@277@07 $k@380@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@277@07 $k@380@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      623
;  :arith-assert-upper      606
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7253
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1482
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475558)
(push) ; 13
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      623
;  :arith-assert-upper      606
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1201
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7253
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1483
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475606)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      623
;  :arith-assert-upper      606
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1202
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7253
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1484
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475654)
(push) ; 13
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      191
;  :arith-assert-lower      623
;  :arith-assert-upper      606
;  :arith-conflicts         234
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1203
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7253
;  :mk-clause               804
;  :num-allocs              8616673
;  :num-checks              1485
;  :propagations            533
;  :quant-instantiations    210
;  :rlimit-count            475702)
(declare-const $k@381@07 $Perm)
(assert ($Perm.isReadVar $k@381@07 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      625
;  :arith-assert-upper      607
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1204
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7257
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1486
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            475898)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      625
;  :arith-assert-upper      607
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7257
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1487
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            475946)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@381@07 $Perm.No) (< $Perm.No $k@381@07))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      625
;  :arith-assert-upper      607
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7257
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1488
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            475996)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@278@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      625
;  :arith-assert-upper      607
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7257
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1489
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476007)
(assert (< $k@381@07 $k@278@07))
(assert (<= $Perm.No (- $k@278@07 $k@381@07)))
(assert (<= (- $k@278@07 $k@381@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@278@07 $k@381@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1207
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1490
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476227)
(push) ; 13
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1491
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476275)
(push) ; 13
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1492
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476323)
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1493
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476371)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 13
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1494
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476419)
(push) ; 13
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19084
;  :arith-add-rows          84
;  :arith-assert-diseq      192
;  :arith-assert-lower      627
;  :arith-assert-upper      608
;  :arith-conflicts         234
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 5135
;  :datatype-occurs-check   995
;  :datatype-splits         4297
;  :decisions               4964
;  :del-clause              693
;  :final-checks            186
;  :max-generation          2
;  :max-memory              5.79
;  :memory                  5.79
;  :mk-bool-var             7260
;  :mk-clause               806
;  :num-allocs              8616673
;  :num-checks              1495
;  :propagations            534
;  :quant-instantiations    210
;  :rlimit-count            476467)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 13
(assert ($Perm.isReadVar $k@368@07 $Perm.Write))
(assert ($Perm.isReadVar $k@370@07 $Perm.Write))
(assert ($Perm.isReadVar $k@371@07 $Perm.Write))
(assert ($Perm.isReadVar $k@372@07 $Perm.Write))
(assert ($Perm.isReadVar $k@373@07 $Perm.Write))
(assert ($Perm.isReadVar $k@374@07 $Perm.Write))
(assert (= $t@367@07 ($Snap.combine ($Snap.first $t@367@07) ($Snap.second $t@367@07))))
(assert (<= $Perm.No $k@368@07))
(assert (<= $k@368@07 $Perm.Write))
(assert (implies (< $Perm.No $k@368@07) (not (= diz@89@07 $Ref.null))))
(assert (=
  ($Snap.second $t@367@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@367@07))
    ($Snap.second ($Snap.second $t@367@07)))))
(assert (= ($Snap.first ($Snap.second $t@367@07)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@367@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@367@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@367@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  $Snap.unit))
(assert (forall ((i__172@369@07 Int)) (!
  (implies
    (and
      (<
        i__172@369@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i__172@369@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i__172@369@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__172@369@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__172@369@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__172@369@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
(assert (<= $Perm.No $k@370@07))
(assert (<= $k@370@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@370@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
(assert (<= $Perm.No $k@371@07))
(assert (<= $k@371@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@371@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@372@07))
(assert (<= $k@372@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@372@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@373@07))
(assert (<= $k@373@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@373@07)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@374@07))
(assert (<= $k@374@07 $Perm.Write))
(assert (implies
  (< $Perm.No $k@374@07)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  diz@89@07))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 14
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20278
;  :arith-add-rows          84
;  :arith-assert-diseq      198
;  :arith-assert-lower      643
;  :arith-assert-upper      622
;  :arith-conflicts         234
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    724
;  :datatype-constructor-ax 5430
;  :datatype-occurs-check   1025
;  :datatype-splits         4515
;  :decisions               5251
;  :del-clause              707
;  :final-checks            192
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7579
;  :mk-clause               821
;  :num-allocs              9003305
;  :num-checks              1498
;  :propagations            547
;  :quant-instantiations    220
;  :rlimit-count            487892)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20278
;  :arith-add-rows          84
;  :arith-assert-diseq      198
;  :arith-assert-lower      643
;  :arith-assert-upper      622
;  :arith-conflicts         234
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    724
;  :datatype-constructor-ax 5430
;  :datatype-occurs-check   1025
;  :datatype-splits         4515
;  :decisions               5251
;  :del-clause              707
;  :final-checks            192
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7579
;  :mk-clause               821
;  :num-allocs              9003305
;  :num-checks              1499
;  :propagations            547
;  :quant-instantiations    220
;  :rlimit-count            487907)
; [eval] -1
(push) ; 14
; [then-branch: 83 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 | live]
; [else-branch: 83 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1 | live]
(push) ; 15
; [then-branch: 83 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      1)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 83 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20279
;  :arith-add-rows          84
;  :arith-assert-diseq      198
;  :arith-assert-lower      643
;  :arith-assert-upper      622
;  :arith-conflicts         234
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    724
;  :datatype-constructor-ax 5430
;  :datatype-occurs-check   1025
;  :datatype-splits         4515
;  :decisions               5251
;  :del-clause              707
;  :final-checks            192
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7580
;  :mk-clause               821
;  :num-allocs              9003305
;  :num-checks              1500
;  :propagations            547
;  :quant-instantiations    220
;  :rlimit-count            488098)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20279
;  :arith-add-rows          84
;  :arith-assert-diseq      198
;  :arith-assert-lower      643
;  :arith-assert-upper      622
;  :arith-conflicts         234
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    724
;  :datatype-constructor-ax 5430
;  :datatype-occurs-check   1025
;  :datatype-splits         4515
;  :decisions               5251
;  :del-clause              707
;  :final-checks            192
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7580
;  :mk-clause               821
;  :num-allocs              9003305
;  :num-checks              1501
;  :propagations            547
;  :quant-instantiations    220
;  :rlimit-count            488113)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 14
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20841
;  :arith-add-rows          84
;  :arith-assert-diseq      199
;  :arith-assert-lower      646
;  :arith-assert-upper      623
;  :arith-conflicts         234
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    730
;  :datatype-constructor-ax 5594
;  :datatype-occurs-check   1046
;  :datatype-splits         4628
;  :decisions               5410
;  :del-clause              714
;  :final-checks            196
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7709
;  :mk-clause               828
;  :num-allocs              9003305
;  :num-checks              1502
;  :propagations            553
;  :quant-instantiations    221
;  :rlimit-count            491438
;  :time                    0.00)
(push) ; 14
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      199
;  :arith-assert-lower      646
;  :arith-assert-upper      623
;  :arith-conflicts         234
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7819
;  :mk-clause               828
;  :num-allocs              9003305
;  :num-checks              1503
;  :propagations            557
;  :quant-instantiations    221
;  :rlimit-count            493929
;  :time                    0.00)
; [then-branch: 84 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2 | live]
; [else-branch: 84 | !(First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2) | live]
(push) ; 14
; [then-branch: 84 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
        3)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      199
;  :arith-assert-lower      646
;  :arith-assert-upper      623
;  :arith-conflicts         234
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1218
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7821
;  :mk-clause               829
;  :num-allocs              9003305
;  :num-checks              1504
;  :propagations            557
;  :quant-instantiations    221
;  :rlimit-count            494207)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      199
;  :arith-assert-lower      646
;  :arith-assert-upper      623
;  :arith-conflicts         234
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7821
;  :mk-clause               829
;  :num-allocs              9003305
;  :num-checks              1505
;  :propagations            557
;  :quant-instantiations    221
;  :rlimit-count            494255)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@382@07 Int)
(push) ; 15
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 16
; [then-branch: 85 | 0 <= i@382@07 | live]
; [else-branch: 85 | !(0 <= i@382@07) | live]
(push) ; 17
; [then-branch: 85 | 0 <= i@382@07]
(assert (<= 0 i@382@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 17
(push) ; 17
; [else-branch: 85 | !(0 <= i@382@07)]
(assert (not (<= 0 i@382@07)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 86 | i@382@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i@382@07 | live]
; [else-branch: 86 | !(i@382@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i@382@07) | live]
(push) ; 17
; [then-branch: 86 | i@382@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i@382@07]
(assert (and
  (<
    i@382@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  (<= 0 i@382@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@382@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      199
;  :arith-assert-lower      647
;  :arith-assert-upper      624
;  :arith-conflicts         234
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7823
;  :mk-clause               829
;  :num-allocs              9003305
;  :num-checks              1506
;  :propagations            557
;  :quant-instantiations    221
;  :rlimit-count            494391)
; [eval] -1
(push) ; 18
; [then-branch: 87 | First:(Second:(Second:(Second:($t@367@07))))[i@382@07] == -1 | live]
; [else-branch: 87 | First:(Second:(Second:(Second:($t@367@07))))[i@382@07] != -1 | live]
(push) ; 19
; [then-branch: 87 | First:(Second:(Second:(Second:($t@367@07))))[i@382@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i@382@07)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 87 | First:(Second:(Second:(Second:($t@367@07))))[i@382@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i@382@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@382@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      200
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         234
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7829
;  :mk-clause               833
;  :num-allocs              9003305
;  :num-checks              1507
;  :propagations            559
;  :quant-instantiations    222
;  :rlimit-count            494623)
(push) ; 20
; [then-branch: 88 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i@382@07] | live]
; [else-branch: 88 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i@382@07]) | live]
(push) ; 21
; [then-branch: 88 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i@382@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i@382@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 22
(assert (not (>= i@382@07 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      200
;  :arith-assert-lower      650
;  :arith-assert-upper      625
;  :arith-conflicts         234
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              714
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7829
;  :mk-clause               833
;  :num-allocs              9003305
;  :num-checks              1508
;  :propagations            559
;  :quant-instantiations    222
;  :rlimit-count            494737)
; [eval] |diz.Main_event_state|
(pop) ; 21
(push) ; 21
; [else-branch: 88 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i@382@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i@382@07))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 86 | !(i@382@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i@382@07)]
(assert (not
  (and
    (<
      i@382@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
    (<= 0 i@382@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 15
(assert (not (forall ((i@382@07 Int)) (!
  (implies
    (and
      (<
        i@382@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i@382@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i@382@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i@382@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i@382@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i@382@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      201
;  :arith-assert-lower      651
;  :arith-assert-upper      626
;  :arith-conflicts         234
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7837
;  :mk-clause               845
;  :num-allocs              9003305
;  :num-checks              1509
;  :propagations            561
;  :quant-instantiations    223
;  :rlimit-count            495183)
(assert (forall ((i@382@07 Int)) (!
  (implies
    (and
      (<
        i@382@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i@382@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i@382@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i@382@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i@382@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i@382@07))
  :qid |prog.l<no position>|)))
(declare-const $k@383@07 $Perm)
(assert ($Perm.isReadVar $k@383@07 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@383@07 $Perm.No) (< $Perm.No $k@383@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      653
;  :arith-assert-upper      627
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7842
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1510
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            495744)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@370@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      653
;  :arith-assert-upper      627
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            161
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7842
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1511
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            495755)
(assert (< $k@383@07 $k@370@07))
(assert (<= $Perm.No (- $k@370@07 $k@383@07)))
(assert (<= (- $k@370@07 $k@383@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@370@07 $k@383@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1512
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            495969)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1513
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496017)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1514
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496065)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1225
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1515
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496113)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1226
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1516
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496161)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1227
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1517
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496209)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1228
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1518
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496257)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1229
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1519
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496305)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1230
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1520
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496353)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1231
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1521
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496401)
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      202
;  :arith-assert-lower      655
;  :arith-assert-upper      628
;  :arith-conflicts         234
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1232
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7845
;  :mk-clause               847
;  :num-allocs              9003305
;  :num-checks              1522
;  :propagations            562
;  :quant-instantiations    223
;  :rlimit-count            496449)
(declare-const $k@384@07 $Perm)
(assert ($Perm.isReadVar $k@384@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@384@07 $Perm.No) (< $Perm.No $k@384@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      657
;  :arith-assert-upper      629
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7849
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1523
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            496647)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@371@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      657
;  :arith-assert-upper      629
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7849
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1524
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            496658)
(assert (< $k@384@07 $k@371@07))
(assert (<= $Perm.No (- $k@371@07 $k@384@07)))
(assert (<= (- $k@371@07 $k@384@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@371@07 $k@384@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1525
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            496878)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1235
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1526
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            496926)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1527
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            496974)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1237
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1528
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            497022)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1238
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1529
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            497070)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1239
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1530
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            497118)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1531
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            497166)
(push) ; 15
(assert (not (< $Perm.No $k@371@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      203
;  :arith-assert-lower      659
;  :arith-assert-upper      630
;  :arith-conflicts         234
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1241
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7852
;  :mk-clause               849
;  :num-allocs              9003305
;  :num-checks              1532
;  :propagations            563
;  :quant-instantiations    223
;  :rlimit-count            497214)
(declare-const $k@385@07 $Perm)
(assert ($Perm.isReadVar $k@385@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@385@07 $Perm.No) (< $Perm.No $k@385@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      204
;  :arith-assert-lower      661
;  :arith-assert-upper      631
;  :arith-conflicts         234
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7856
;  :mk-clause               851
;  :num-allocs              9003305
;  :num-checks              1533
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            497412)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@372@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      204
;  :arith-assert-lower      661
;  :arith-assert-upper      631
;  :arith-conflicts         234
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         234
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7856
;  :mk-clause               851
;  :num-allocs              9003305
;  :num-checks              1534
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            497423)
(assert (< $k@385@07 $k@372@07))
(assert (<= $Perm.No (- $k@372@07 $k@385@07)))
(assert (<= (- $k@372@07 $k@385@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@372@07 $k@385@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      204
;  :arith-assert-lower      663
;  :arith-assert-upper      632
;  :arith-conflicts         234
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         234
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7859
;  :mk-clause               851
;  :num-allocs              9003305
;  :num-checks              1535
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            497637)
(push) ; 15
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      204
;  :arith-assert-lower      663
;  :arith-assert-upper      632
;  :arith-conflicts         234
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         234
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7859
;  :mk-clause               851
;  :num-allocs              9003305
;  :num-checks              1536
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            497685)
(push) ; 15
(assert (not (< $Perm.No $k@372@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      204
;  :arith-assert-lower      663
;  :arith-assert-upper      632
;  :arith-conflicts         234
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         234
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1245
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7859
;  :mk-clause               851
;  :num-allocs              9003305
;  :num-checks              1537
;  :propagations            564
;  :quant-instantiations    223
;  :rlimit-count            497733)
(declare-const $k@386@07 $Perm)
(assert ($Perm.isReadVar $k@386@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@386@07 $Perm.No) (< $Perm.No $k@386@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      205
;  :arith-assert-lower      665
;  :arith-assert-upper      633
;  :arith-conflicts         234
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         234
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7863
;  :mk-clause               853
;  :num-allocs              9003305
;  :num-checks              1538
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            497931)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@373@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      205
;  :arith-assert-lower      665
;  :arith-assert-upper      633
;  :arith-conflicts         234
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         234
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7863
;  :mk-clause               853
;  :num-allocs              9003305
;  :num-checks              1539
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            497942)
(assert (< $k@386@07 $k@373@07))
(assert (<= $Perm.No (- $k@373@07 $k@386@07)))
(assert (<= (- $k@373@07 $k@386@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@373@07 $k@386@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No $k@373@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      205
;  :arith-assert-lower      667
;  :arith-assert-upper      634
;  :arith-conflicts         234
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         234
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               1247
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7866
;  :mk-clause               853
;  :num-allocs              9003305
;  :num-checks              1540
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            498156)
(push) ; 15
(assert (not (< $Perm.No $k@373@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      205
;  :arith-assert-lower      667
;  :arith-assert-upper      634
;  :arith-conflicts         234
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         234
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               1248
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7866
;  :mk-clause               853
;  :num-allocs              9003305
;  :num-checks              1541
;  :propagations            565
;  :quant-instantiations    223
;  :rlimit-count            498204)
(declare-const $k@387@07 $Perm)
(assert ($Perm.isReadVar $k@387@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      669
;  :arith-assert-upper      635
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               1249
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7870
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1542
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            498400)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@387@07 $Perm.No) (< $Perm.No $k@387@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      669
;  :arith-assert-upper      635
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7870
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1543
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            498450)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@374@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      669
;  :arith-assert-upper      635
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            166
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7870
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1544
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            498461)
(assert (< $k@387@07 $k@374@07))
(assert (<= $Perm.No (- $k@374@07 $k@387@07)))
(assert (<= (- $k@374@07 $k@387@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@374@07 $k@387@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 15
(assert (not (< $Perm.No $k@370@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      671
;  :arith-assert-upper      636
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7873
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1545
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            498675)
(push) ; 15
(assert (not (< $Perm.No $k@374@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21220
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      671
;  :arith-assert-upper      636
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    734
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7873
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1546
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            498723)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) __globals@90@07))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21294
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      671
;  :arith-assert-upper      636
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1253
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7874
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1547
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            500278)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21294
;  :arith-add-rows          84
;  :arith-assert-diseq      206
;  :arith-assert-lower      671
;  :arith-assert-upper      636
;  :arith-conflicts         234
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5705
;  :datatype-occurs-check   1061
;  :datatype-splits         4737
;  :decisions               5517
;  :del-clause              730
;  :final-checks            199
;  :max-generation          2
;  :max-memory              5.89
;  :memory                  5.89
;  :mk-bool-var             7874
;  :mk-clause               855
;  :num-allocs              9003305
;  :num-checks              1548
;  :propagations            566
;  :quant-instantiations    223
;  :rlimit-count            500326)
(declare-const $t@388@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21889
;  :arith-add-rows          84
;  :arith-assert-diseq      207
;  :arith-assert-lower      674
;  :arith-assert-upper      637
;  :arith-conflicts         234
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    777
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              744
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8001
;  :mk-clause               861
;  :num-allocs              9402569
;  :num-checks              1550
;  :propagations            572
;  :quant-instantiations    225
;  :rlimit-count            503533)
(assert (= $t@388@07 ($Snap.combine ($Snap.first $t@388@07) ($Snap.second $t@388@07))))
(assert (= ($Snap.first $t@388@07) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@388@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@388@07))
    ($Snap.second ($Snap.second $t@388@07)))))
(assert (= ($Snap.first ($Snap.second $t@388@07)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@388@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@388@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@388@07))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@388@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@389@07 Int)
(push) ; 15
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 16
; [then-branch: 89 | 0 <= i@389@07 | live]
; [else-branch: 89 | !(0 <= i@389@07) | live]
(push) ; 17
; [then-branch: 89 | 0 <= i@389@07]
(assert (<= 0 i@389@07))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 17
(push) ; 17
; [else-branch: 89 | !(0 <= i@389@07)]
(assert (not (<= 0 i@389@07)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 90 | i@389@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i@389@07 | live]
; [else-branch: 90 | !(i@389@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i@389@07) | live]
(push) ; 17
; [then-branch: 90 | i@389@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i@389@07]
(assert (and
  (<
    i@389@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
  (<= 0 i@389@07)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@389@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21939
;  :arith-add-rows          84
;  :arith-assert-diseq      207
;  :arith-assert-lower      679
;  :arith-assert-upper      640
;  :arith-conflicts         234
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              744
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8027
;  :mk-clause               861
;  :num-allocs              9402569
;  :num-checks              1551
;  :propagations            572
;  :quant-instantiations    229
;  :rlimit-count            504836)
; [eval] -1
(push) ; 18
; [then-branch: 91 | First:(Second:(Second:(Second:($t@388@07))))[i@389@07] == -1 | live]
; [else-branch: 91 | First:(Second:(Second:(Second:($t@388@07))))[i@389@07] != -1 | live]
(push) ; 19
; [then-branch: 91 | First:(Second:(Second:(Second:($t@388@07))))[i@389@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i@389@07)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 91 | First:(Second:(Second:(Second:($t@388@07))))[i@389@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
      i@389@07)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@389@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21939
;  :arith-add-rows          84
;  :arith-assert-diseq      207
;  :arith-assert-lower      679
;  :arith-assert-upper      640
;  :arith-conflicts         234
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              744
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8028
;  :mk-clause               861
;  :num-allocs              9402569
;  :num-checks              1552
;  :propagations            572
;  :quant-instantiations    229
;  :rlimit-count            505011)
(push) ; 20
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@388@07))))[i@389@07] | live]
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@388@07))))[i@389@07]) | live]
(push) ; 21
; [then-branch: 92 | 0 <= First:(Second:(Second:(Second:($t@388@07))))[i@389@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i@389@07)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 22
(assert (not (>= i@389@07 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21939
;  :arith-add-rows          84
;  :arith-assert-diseq      208
;  :arith-assert-lower      682
;  :arith-assert-upper      640
;  :arith-conflicts         234
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              744
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8031
;  :mk-clause               862
;  :num-allocs              9402569
;  :num-checks              1553
;  :propagations            572
;  :quant-instantiations    229
;  :rlimit-count            505134)
; [eval] |diz.Main_event_state|
(pop) ; 21
(push) ; 21
; [else-branch: 92 | !(0 <= First:(Second:(Second:(Second:($t@388@07))))[i@389@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
      i@389@07))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 90 | !(i@389@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i@389@07)]
(assert (not
  (and
    (<
      i@389@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
    (<= 0 i@389@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@389@07 Int)) (!
  (implies
    (and
      (<
        i@389@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
      (<= 0 i@389@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
          i@389@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i@389@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i@389@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i@389@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))
(declare-const $k@390@07 $Perm)
(assert ($Perm.isReadVar $k@390@07 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@390@07 $Perm.No) (< $Perm.No $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21944
;  :arith-add-rows          84
;  :arith-assert-diseq      209
;  :arith-assert-lower      684
;  :arith-assert-upper      641
;  :arith-conflicts         234
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         234
;  :arith-pivots            167
;  :binary-propagations     22
;  :conflicts               1258
;  :datatype-accessor-ax    786
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8037
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1554
;  :propagations            573
;  :quant-instantiations    229
;  :rlimit-count            505902)
(declare-const $t@391@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@370@07 $k@383@07))
    (=
      $t@391@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))
  (implies
    (< $Perm.No $k@390@07)
    (=
      $t@391@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))
(assert (<= $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07)))
(assert (<= (+ (- $k@370@07 $k@383@07) $k@390@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21954
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      643
;  :arith-conflicts         235
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         235
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    787
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8045
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1555
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            506588
;  :time                    0.00)
(assert (not (= $t@391@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21960
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      644
;  :arith-conflicts         236
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         236
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    788
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8048
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1556
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            506912)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21965
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      645
;  :arith-conflicts         237
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         237
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8050
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1557
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            507201)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21970
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      646
;  :arith-conflicts         238
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         238
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    790
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8052
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1558
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            507500)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21975
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      647
;  :arith-conflicts         239
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         239
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8054
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1559
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            507809)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21980
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      648
;  :arith-conflicts         240
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         240
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8056
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1560
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            508128)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21985
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      649
;  :arith-conflicts         241
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         241
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8058
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1561
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            508457)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21990
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      650
;  :arith-conflicts         242
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         242
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8060
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1562
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            508796)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21995
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      651
;  :arith-conflicts         243
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         243
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8062
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1563
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            509145)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22000
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      652
;  :arith-conflicts         244
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         244
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    796
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8064
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1564
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            509504)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22005
;  :arith-add-rows          85
;  :arith-assert-diseq      209
;  :arith-assert-lower      685
;  :arith-assert-upper      653
;  :arith-conflicts         245
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         245
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8066
;  :mk-clause               864
;  :num-allocs              9402569
;  :num-checks              1565
;  :propagations            573
;  :quant-instantiations    230
;  :rlimit-count            509873)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))
(declare-const $k@392@07 $Perm)
(assert ($Perm.isReadVar $k@392@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@392@07 $Perm.No) (< $Perm.No $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22010
;  :arith-add-rows          85
;  :arith-assert-diseq      210
;  :arith-assert-lower      687
;  :arith-assert-upper      654
;  :arith-conflicts         245
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         245
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    798
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8071
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1566
;  :propagations            574
;  :quant-instantiations    230
;  :rlimit-count            510363)
(declare-const $t@393@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@371@07 $k@384@07))
    (=
      $t@393@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@392@07)
    (=
      $t@393@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07)))
(assert (<= (+ (- $k@371@07 $k@384@07) $k@392@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22020
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      656
;  :arith-conflicts         246
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         246
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    799
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8079
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1567
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            511307)
(assert (not (= $t@393@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22026
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      657
;  :arith-conflicts         247
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         247
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8082
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1568
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            511751)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22031
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      658
;  :arith-conflicts         248
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         248
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8084
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1569
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            512160)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22036
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      659
;  :arith-conflicts         249
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         249
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8086
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1570
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            512579)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22041
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      660
;  :arith-conflicts         250
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         250
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1275
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8088
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1571
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            513008)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22046
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      661
;  :arith-conflicts         251
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         251
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    804
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8090
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1572
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            513447)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22051
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      662
;  :arith-conflicts         252
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         252
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8092
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1573
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            513896)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22056
;  :arith-add-rows          86
;  :arith-assert-diseq      210
;  :arith-assert-lower      688
;  :arith-assert-upper      663
;  :arith-conflicts         253
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         253
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8094
;  :mk-clause               866
;  :num-allocs              9402569
;  :num-checks              1574
;  :propagations            574
;  :quant-instantiations    231
;  :rlimit-count            514355)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))
(declare-const $k@394@07 $Perm)
(assert ($Perm.isReadVar $k@394@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@394@07 $Perm.No) (< $Perm.No $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22061
;  :arith-add-rows          86
;  :arith-assert-diseq      211
;  :arith-assert-lower      690
;  :arith-assert-upper      664
;  :arith-conflicts         253
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         253
;  :arith-pivots            169
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    807
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8099
;  :mk-clause               868
;  :num-allocs              9402569
;  :num-checks              1575
;  :propagations            575
;  :quant-instantiations    231
;  :rlimit-count            514935)
(declare-const $t@395@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@372@07 $k@385@07))
    (=
      $t@395@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@394@07)
    (=
      $t@395@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07)))
(assert (<= (+ (- $k@372@07 $k@385@07) $k@394@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22071
;  :arith-add-rows          87
;  :arith-assert-diseq      211
;  :arith-assert-lower      691
;  :arith-assert-upper      666
;  :arith-conflicts         254
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         254
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8107
;  :mk-clause               868
;  :num-allocs              9402569
;  :num-checks              1576
;  :propagations            575
;  :quant-instantiations    232
;  :rlimit-count            515749)
(assert (not (= $t@395@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22076
;  :arith-add-rows          87
;  :arith-assert-diseq      211
;  :arith-assert-lower      691
;  :arith-assert-upper      667
;  :arith-conflicts         255
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         255
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8109
;  :mk-clause               868
;  :num-allocs              9402569
;  :num-checks              1577
;  :propagations            575
;  :quant-instantiations    232
;  :rlimit-count            516256)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22081
;  :arith-add-rows          87
;  :arith-assert-diseq      211
;  :arith-assert-lower      691
;  :arith-assert-upper      668
;  :arith-conflicts         256
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         256
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8111
;  :mk-clause               868
;  :num-allocs              9402569
;  :num-checks              1578
;  :propagations            575
;  :quant-instantiations    232
;  :rlimit-count            516755)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))))
(declare-const $k@396@07 $Perm)
(assert ($Perm.isReadVar $k@396@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@396@07 $Perm.No) (< $Perm.No $k@396@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22086
;  :arith-add-rows          87
;  :arith-assert-diseq      212
;  :arith-assert-lower      693
;  :arith-assert-upper      669
;  :arith-conflicts         256
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         256
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8116
;  :mk-clause               870
;  :num-allocs              9402569
;  :num-checks              1579
;  :propagations            576
;  :quant-instantiations    232
;  :rlimit-count            517375)
(declare-const $t@397@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@373@07 $k@386@07))
    (=
      $t@397@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@396@07)
    (=
      $t@397@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07)))
(assert (<= (+ (- $k@373@07 $k@386@07) $k@396@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22096
;  :arith-add-rows          88
;  :arith-assert-diseq      212
;  :arith-assert-lower      694
;  :arith-assert-upper      671
;  :arith-conflicts         257
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         257
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1284
;  :datatype-accessor-ax    812
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8124
;  :mk-clause               870
;  :num-allocs              9402569
;  :num-checks              1580
;  :propagations            576
;  :quant-instantiations    233
;  :rlimit-count            518563)
(assert (not (= $t@397@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22102
;  :arith-add-rows          88
;  :arith-assert-diseq      212
;  :arith-assert-lower      694
;  :arith-assert-upper      672
;  :arith-conflicts         258
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         258
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    813
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8127
;  :mk-clause               870
;  :num-allocs              9402569
;  :num-checks              1581
;  :propagations            576
;  :quant-instantiations    233
;  :rlimit-count            519137)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))))))
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22107
;  :arith-add-rows          88
;  :arith-assert-diseq      212
;  :arith-assert-lower      694
;  :arith-assert-upper      673
;  :arith-conflicts         259
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         259
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1286
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8129
;  :mk-clause               870
;  :num-allocs              9402569
;  :num-checks              1582
;  :propagations            576
;  :quant-instantiations    233
;  :rlimit-count            519676)
(declare-const $k@398@07 $Perm)
(assert ($Perm.isReadVar $k@398@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@398@07 $Perm.No) (< $Perm.No $k@398@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22107
;  :arith-add-rows          88
;  :arith-assert-diseq      213
;  :arith-assert-lower      696
;  :arith-assert-upper      674
;  :arith-conflicts         259
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         259
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8133
;  :mk-clause               872
;  :num-allocs              9402569
;  :num-checks              1583
;  :propagations            577
;  :quant-instantiations    233
;  :rlimit-count            519874)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $t@391@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22107
;  :arith-add-rows          88
;  :arith-assert-diseq      213
;  :arith-assert-lower      696
;  :arith-assert-upper      674
;  :arith-conflicts         259
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         259
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8133
;  :mk-clause               872
;  :num-allocs              9402569
;  :num-checks              1584
;  :propagations            577
;  :quant-instantiations    233
;  :rlimit-count            519885)
(declare-const $t@399@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@374@07 $k@387@07))
    (=
      $t@399@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@398@07)
    (=
      $t@399@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@374@07 $k@387@07) $k@398@07)))
(assert (<= (+ (- $k@374@07 $k@387@07) $k@398@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@374@07 $k@387@07) $k@398@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22113
;  :arith-add-rows          89
;  :arith-assert-diseq      213
;  :arith-assert-lower      697
;  :arith-assert-upper      676
;  :arith-conflicts         260
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         260
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8140
;  :mk-clause               872
;  :num-allocs              9402569
;  :num-checks              1585
;  :propagations            577
;  :quant-instantiations    234
;  :rlimit-count            520662)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $t@391@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22113
;  :arith-add-rows          89
;  :arith-assert-diseq      213
;  :arith-assert-lower      697
;  :arith-assert-upper      676
;  :arith-conflicts         260
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         260
;  :arith-pivots            171
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8140
;  :mk-clause               872
;  :num-allocs              9402569
;  :num-checks              1586
;  :propagations            577
;  :quant-instantiations    234
;  :rlimit-count            520673)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@374@07 $k@387@07) $k@398@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22113
;  :arith-add-rows          89
;  :arith-assert-diseq      213
;  :arith-assert-lower      697
;  :arith-assert-upper      677
;  :arith-conflicts         261
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5869
;  :datatype-occurs-check   1133
;  :datatype-splits         4850
;  :decisions               5676
;  :del-clause              745
;  :final-checks            203
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8141
;  :mk-clause               872
;  :num-allocs              9402569
;  :num-checks              1587
;  :propagations            577
;  :quant-instantiations    234
;  :rlimit-count            520757)
(assert (= $t@399@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@388@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) __globals@90@07))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.LFSR_m, globals__108), write)
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23031
;  :arith-add-rows          89
;  :arith-assert-diseq      214
;  :arith-assert-lower      700
;  :arith-assert-upper      678
;  :arith-conflicts         261
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    827
;  :datatype-constructor-ax 6122
;  :datatype-occurs-check   1215
;  :datatype-splits         4995
;  :decisions               5917
;  :del-clause              759
;  :final-checks            207
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8304
;  :mk-clause               881
;  :num-allocs              9402569
;  :num-checks              1589
;  :propagations            587
;  :quant-instantiations    236
;  :rlimit-count            525310)
(declare-const $t@400@07 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@401@07 $Perm)
(assert ($Perm.isReadVar $k@401@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@401@07 $Perm.No) (< $Perm.No $k@401@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      705
;  :arith-assert-upper      680
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8443
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1591
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528484)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= $k@368@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      705
;  :arith-assert-upper      680
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8443
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1592
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528495)
(assert (< $k@401@07 $k@368@07))
(assert (<= $Perm.No (- $k@368@07 $k@401@07)))
(assert (<= (- $k@368@07 $k@401@07) $Perm.Write))
(assert (implies (< $Perm.No (- $k@368@07 $k@401@07)) (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1593
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528703)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1298
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1594
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528751)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1299
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1595
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528799)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1596
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528847)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1597
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528895)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      706
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1302
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8446
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1598
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            528943)
; [eval] (forall i__172: Int :: { diz.LFSR_m.Main_process_state[i__172] } 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|)
(declare-const i__172@402@07 Int)
(push) ; 15
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__172 && i__172 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__172
(push) ; 16
; [then-branch: 93 | 0 <= i__172@402@07 | live]
; [else-branch: 93 | !(0 <= i__172@402@07) | live]
(push) ; 17
; [then-branch: 93 | 0 <= i__172@402@07]
(assert (<= 0 i__172@402@07))
; [eval] i__172 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 18
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      707
;  :arith-assert-upper      682
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8447
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1599
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            529043)
(pop) ; 17
(push) ; 17
; [else-branch: 93 | !(0 <= i__172@402@07)]
(assert (not (<= 0 i__172@402@07)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 94 | i__172@402@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i__172@402@07 | live]
; [else-branch: 94 | !(i__172@402@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i__172@402@07) | live]
(push) ; 17
; [then-branch: 94 | i__172@402@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i__172@402@07]
(assert (and
  (<
    i__172@402@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
  (<= 0 i__172@402@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172] == -1
; [eval] diz.LFSR_m.Main_process_state[i__172]
(push) ; 18
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      708
;  :arith-assert-upper      683
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8449
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1600
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            529200)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__172@402@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      216
;  :arith-assert-lower      708
;  :arith-assert-upper      683
;  :arith-conflicts         261
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8449
;  :mk-clause               887
;  :num-allocs              9402569
;  :num-checks              1601
;  :propagations            601
;  :quant-instantiations    238
;  :rlimit-count            529209)
; [eval] -1
(push) ; 18
; [then-branch: 95 | First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07] == -1 | live]
; [else-branch: 95 | First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07] != -1 | live]
(push) ; 19
; [then-branch: 95 | First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i__172@402@07)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 95 | First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
      i__172@402@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172] && diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__172]
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      217
;  :arith-assert-lower      711
;  :arith-assert-upper      684
;  :arith-conflicts         261
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8455
;  :mk-clause               891
;  :num-allocs              9402569
;  :num-checks              1602
;  :propagations            603
;  :quant-instantiations    239
;  :rlimit-count            529480)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__172@402@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      217
;  :arith-assert-lower      711
;  :arith-assert-upper      684
;  :arith-conflicts         261
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8455
;  :mk-clause               891
;  :num-allocs              9402569
;  :num-checks              1603
;  :propagations            603
;  :quant-instantiations    239
;  :rlimit-count            529489)
(push) ; 20
; [then-branch: 96 | 0 <= First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07] | live]
; [else-branch: 96 | !(0 <= First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07]) | live]
(push) ; 21
; [then-branch: 96 | 0 <= First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i__172@402@07)))
; [eval] diz.LFSR_m.Main_process_state[i__172] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__172]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      217
;  :arith-assert-lower      711
;  :arith-assert-upper      684
;  :arith-conflicts         261
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8455
;  :mk-clause               891
;  :num-allocs              9402569
;  :num-checks              1604
;  :propagations            603
;  :quant-instantiations    239
;  :rlimit-count            529642)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i__172@402@07 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      217
;  :arith-assert-lower      711
;  :arith-assert-upper      684
;  :arith-conflicts         261
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8455
;  :mk-clause               891
;  :num-allocs              9402569
;  :num-checks              1605
;  :propagations            603
;  :quant-instantiations    239
;  :rlimit-count            529651)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      217
;  :arith-assert-lower      711
;  :arith-assert-upper      684
;  :arith-conflicts         261
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              763
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8455
;  :mk-clause               891
;  :num-allocs              9402569
;  :num-checks              1606
;  :propagations            603
;  :quant-instantiations    239
;  :rlimit-count            529699)
(pop) ; 21
(push) ; 21
; [else-branch: 96 | !(0 <= First:(Second:(Second:(Second:($t@388@07))))[i__172@402@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
      i__172@402@07))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 94 | !(i__172@402@07 < |First:(Second:(Second:(Second:($t@388@07))))| && 0 <= i__172@402@07)]
(assert (not
  (and
    (<
      i__172@402@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
    (<= 0 i__172@402@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 15
(assert (not (forall ((i__172@402@07 Int)) (!
  (implies
    (and
      (<
        i__172@402@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
      (<= 0 i__172@402@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
          i__172@402@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i__172@402@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i__172@402@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i__172@402@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      219
;  :arith-assert-lower      712
;  :arith-assert-upper      685
;  :arith-conflicts         261
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              781
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8463
;  :mk-clause               905
;  :num-allocs              9402569
;  :num-checks              1607
;  :propagations            605
;  :quant-instantiations    240
;  :rlimit-count            530145)
(assert (forall ((i__172@402@07 Int)) (!
  (implies
    (and
      (<
        i__172@402@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))
      (<= 0 i__172@402@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
          i__172@402@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i__172@402@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
            i__172@402@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@388@07)))))
    i__172@402@07))
  :qid |prog.l<no position>|)))
(declare-const $k@403@07 $Perm)
(assert ($Perm.isReadVar $k@403@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      220
;  :arith-assert-lower      714
;  :arith-assert-upper      686
;  :arith-conflicts         261
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              781
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8468
;  :mk-clause               907
;  :num-allocs              9402569
;  :num-checks              1608
;  :propagations            606
;  :quant-instantiations    240
;  :rlimit-count            530704)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@403@07 $Perm.No) (< $Perm.No $k@403@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          89
;  :arith-assert-diseq      220
;  :arith-assert-lower      714
;  :arith-assert-upper      686
;  :arith-conflicts         261
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1310
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              781
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8468
;  :mk-clause               907
;  :num-allocs              9402569
;  :num-checks              1609
;  :propagations            606
;  :quant-instantiations    240
;  :rlimit-count            530754)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@370@07 $k@383@07) $k@390@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          89
;  :arith-assert-diseq      220
;  :arith-assert-lower      714
;  :arith-assert-upper      687
;  :arith-conflicts         262
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8470
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1610
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            530834)
(assert (< $k@403@07 (+ (- $k@370@07 $k@383@07) $k@390@07)))
(assert (<= $Perm.No (- (+ (- $k@370@07 $k@383@07) $k@390@07) $k@403@07)))
(assert (<= (- (+ (- $k@370@07 $k@383@07) $k@390@07) $k@403@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@370@07 $k@383@07) $k@390@07) $k@403@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      688
;  :arith-conflicts         262
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         261
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8473
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1611
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531070)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      689
;  :arith-conflicts         263
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         262
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8474
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1612
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531151)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      689
;  :arith-conflicts         263
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         262
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1314
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8474
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1613
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531199)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      690
;  :arith-conflicts         264
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         263
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8475
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1614
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531280)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      690
;  :arith-conflicts         264
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         263
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1316
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8475
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1615
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531328)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      691
;  :arith-conflicts         265
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         264
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1317
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8476
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1616
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531409)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      691
;  :arith-conflicts         265
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         264
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8476
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1617
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531457)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      692
;  :arith-conflicts         266
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         265
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8477
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1618
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531538)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      692
;  :arith-conflicts         266
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         265
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8477
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1619
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531586)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      693
;  :arith-conflicts         267
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         266
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8478
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1620
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531667)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      693
;  :arith-conflicts         267
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         266
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8478
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1621
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531715)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      694
;  :arith-conflicts         268
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         267
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8479
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1622
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531796)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      694
;  :arith-conflicts         268
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         267
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1324
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8479
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1623
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531844)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      695
;  :arith-conflicts         269
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         268
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1325
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8480
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1624
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531925)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      695
;  :arith-conflicts         269
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         268
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8480
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1625
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            531973)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      696
;  :arith-conflicts         270
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         269
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8481
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1626
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532054)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      696
;  :arith-conflicts         270
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         269
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1328
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8481
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1627
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532102)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      697
;  :arith-conflicts         271
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         270
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8482
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1628
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532183)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      697
;  :arith-conflicts         271
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         270
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1330
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8482
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1629
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532231)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      698
;  :arith-conflicts         272
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         271
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8483
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1630
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532312)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      698
;  :arith-conflicts         272
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         271
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1332
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8483
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1631
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532360)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      220
;  :arith-assert-lower      716
;  :arith-assert-upper      699
;  :arith-conflicts         273
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         272
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1333
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8484
;  :mk-clause               909
;  :num-allocs              9402569
;  :num-checks              1632
;  :propagations            607
;  :quant-instantiations    240
;  :rlimit-count            532441)
(declare-const $k@404@07 $Perm)
(assert ($Perm.isReadVar $k@404@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      221
;  :arith-assert-lower      718
;  :arith-assert-upper      700
;  :arith-conflicts         273
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         272
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8488
;  :mk-clause               911
;  :num-allocs              9402569
;  :num-checks              1633
;  :propagations            608
;  :quant-instantiations    240
;  :rlimit-count            532637)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@404@07 $Perm.No) (< $Perm.No $k@404@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23575
;  :arith-add-rows          91
;  :arith-assert-diseq      221
;  :arith-assert-lower      718
;  :arith-assert-upper      700
;  :arith-conflicts         273
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         272
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              783
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8488
;  :mk-clause               911
;  :num-allocs              9402569
;  :num-checks              1634
;  :propagations            608
;  :quant-instantiations    240
;  :rlimit-count            532687)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@371@07 $k@384@07) $k@392@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          91
;  :arith-assert-diseq      221
;  :arith-assert-lower      718
;  :arith-assert-upper      701
;  :arith-conflicts         274
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         272
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1336
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8490
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1635
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            532767)
(assert (< $k@404@07 (+ (- $k@371@07 $k@384@07) $k@392@07)))
(assert (<= $Perm.No (- (+ (- $k@371@07 $k@384@07) $k@392@07) $k@404@07)))
(assert (<= (- (+ (- $k@371@07 $k@384@07) $k@392@07) $k@404@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@371@07 $k@384@07) $k@392@07) $k@404@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      702
;  :arith-conflicts         274
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         272
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8493
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1636
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533003)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      703
;  :arith-conflicts         275
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         273
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1338
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8494
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1637
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533084)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      703
;  :arith-conflicts         275
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         273
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8494
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1638
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533132)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      704
;  :arith-conflicts         276
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         274
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1340
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8495
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1639
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533213)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      704
;  :arith-conflicts         276
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         274
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8495
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1640
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533261)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      705
;  :arith-conflicts         277
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         275
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1342
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8496
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1641
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533342)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      705
;  :arith-conflicts         277
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         275
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1343
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8496
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1642
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533390)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      706
;  :arith-conflicts         278
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         276
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1344
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8497
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1643
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533471)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      706
;  :arith-conflicts         278
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         276
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1345
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8497
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1644
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533519)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      707
;  :arith-conflicts         279
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         277
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1346
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8498
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1645
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533600)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      707
;  :arith-conflicts         279
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         277
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1347
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8498
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1646
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533648)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      708
;  :arith-conflicts         280
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         278
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8499
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1647
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533729)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      708
;  :arith-conflicts         280
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         278
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8499
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1648
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533777)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      709
;  :arith-conflicts         281
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         279
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8500
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1649
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533858)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      709
;  :arith-conflicts         281
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         279
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8500
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1650
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533906)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@371@07 $k@384@07) $k@392@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      221
;  :arith-assert-lower      720
;  :arith-assert-upper      710
;  :arith-conflicts         282
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         280
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1352
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8501
;  :mk-clause               913
;  :num-allocs              9402569
;  :num-checks              1651
;  :propagations            609
;  :quant-instantiations    240
;  :rlimit-count            533987)
(declare-const $k@405@07 $Perm)
(assert ($Perm.isReadVar $k@405@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      222
;  :arith-assert-lower      722
;  :arith-assert-upper      711
;  :arith-conflicts         282
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         280
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1353
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8505
;  :mk-clause               915
;  :num-allocs              9402569
;  :num-checks              1652
;  :propagations            610
;  :quant-instantiations    240
;  :rlimit-count            534184)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@405@07 $Perm.No) (< $Perm.No $k@405@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23576
;  :arith-add-rows          93
;  :arith-assert-diseq      222
;  :arith-assert-lower      722
;  :arith-assert-upper      711
;  :arith-conflicts         282
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         280
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              785
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8505
;  :mk-clause               915
;  :num-allocs              9402569
;  :num-checks              1653
;  :propagations            610
;  :quant-instantiations    240
;  :rlimit-count            534234)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@372@07 $k@385@07) $k@394@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          93
;  :arith-assert-diseq      222
;  :arith-assert-lower      722
;  :arith-assert-upper      712
;  :arith-conflicts         283
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         280
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8507
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1654
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534314)
(assert (< $k@405@07 (+ (- $k@372@07 $k@385@07) $k@394@07)))
(assert (<= $Perm.No (- (+ (- $k@372@07 $k@385@07) $k@394@07) $k@405@07)))
(assert (<= (- (+ (- $k@372@07 $k@385@07) $k@394@07) $k@405@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@372@07 $k@385@07) $k@394@07) $k@405@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      713
;  :arith-conflicts         283
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         280
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1356
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8510
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1655
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534550)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      714
;  :arith-conflicts         284
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         281
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8511
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1656
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534631)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      714
;  :arith-conflicts         284
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         281
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1358
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8511
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1657
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534679)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      715
;  :arith-conflicts         285
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         282
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8512
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1658
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534760)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      715
;  :arith-conflicts         285
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         282
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8512
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1659
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534808)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      222
;  :arith-assert-lower      724
;  :arith-assert-upper      716
;  :arith-conflicts         286
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         283
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8513
;  :mk-clause               917
;  :num-allocs              9402569
;  :num-checks              1660
;  :propagations            611
;  :quant-instantiations    240
;  :rlimit-count            534889)
(declare-const $k@406@07 $Perm)
(assert ($Perm.isReadVar $k@406@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      223
;  :arith-assert-lower      726
;  :arith-assert-upper      717
;  :arith-conflicts         286
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         283
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1362
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8517
;  :mk-clause               919
;  :num-allocs              9402569
;  :num-checks              1661
;  :propagations            612
;  :quant-instantiations    240
;  :rlimit-count            535086)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@406@07 $Perm.No) (< $Perm.No $k@406@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23577
;  :arith-add-rows          95
;  :arith-assert-diseq      223
;  :arith-assert-lower      726
;  :arith-assert-upper      717
;  :arith-conflicts         286
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         283
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              787
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8517
;  :mk-clause               919
;  :num-allocs              9402569
;  :num-checks              1662
;  :propagations            612
;  :quant-instantiations    240
;  :rlimit-count            535136)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@373@07 $k@386@07) $k@396@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          95
;  :arith-assert-diseq      223
;  :arith-assert-lower      726
;  :arith-assert-upper      718
;  :arith-conflicts         287
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         283
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8519
;  :mk-clause               921
;  :num-allocs              9402569
;  :num-checks              1663
;  :propagations            613
;  :quant-instantiations    240
;  :rlimit-count            535216)
(assert (< $k@406@07 (+ (- $k@373@07 $k@386@07) $k@396@07)))
(assert (<= $Perm.No (- (+ (- $k@373@07 $k@386@07) $k@396@07) $k@406@07)))
(assert (<= (- (+ (- $k@373@07 $k@386@07) $k@396@07) $k@406@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@373@07 $k@386@07) $k@396@07) $k@406@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      223
;  :arith-assert-lower      728
;  :arith-assert-upper      719
;  :arith-conflicts         287
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         283
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8522
;  :mk-clause               921
;  :num-allocs              9402569
;  :num-checks              1664
;  :propagations            613
;  :quant-instantiations    240
;  :rlimit-count            535452)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      223
;  :arith-assert-lower      728
;  :arith-assert-upper      720
;  :arith-conflicts         288
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         284
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1366
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8523
;  :mk-clause               921
;  :num-allocs              9402569
;  :num-checks              1665
;  :propagations            613
;  :quant-instantiations    240
;  :rlimit-count            535533)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      223
;  :arith-assert-lower      728
;  :arith-assert-upper      720
;  :arith-conflicts         288
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         284
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8523
;  :mk-clause               921
;  :num-allocs              9402569
;  :num-checks              1666
;  :propagations            613
;  :quant-instantiations    240
;  :rlimit-count            535581)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@373@07 $k@386@07) $k@396@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      223
;  :arith-assert-lower      728
;  :arith-assert-upper      721
;  :arith-conflicts         289
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         285
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1368
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8524
;  :mk-clause               921
;  :num-allocs              9402569
;  :num-checks              1667
;  :propagations            613
;  :quant-instantiations    240
;  :rlimit-count            535662
;  :time                    0.00)
(declare-const $k@407@07 $Perm)
(assert ($Perm.isReadVar $k@407@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      730
;  :arith-assert-upper      722
;  :arith-conflicts         289
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         285
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8528
;  :mk-clause               923
;  :num-allocs              9402569
;  :num-checks              1668
;  :propagations            614
;  :quant-instantiations    240
;  :rlimit-count            535859)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      730
;  :arith-assert-upper      723
;  :arith-conflicts         290
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         286
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1370
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8529
;  :mk-clause               923
;  :num-allocs              9402569
;  :num-checks              1669
;  :propagations            614
;  :quant-instantiations    240
;  :rlimit-count            535940)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@407@07 $Perm.No) (< $Perm.No $k@407@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      730
;  :arith-assert-upper      723
;  :arith-conflicts         290
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         286
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8529
;  :mk-clause               923
;  :num-allocs              9402569
;  :num-checks              1670
;  :propagations            614
;  :quant-instantiations    240
;  :rlimit-count            535990)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $t@391@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23578
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      730
;  :arith-assert-upper      723
;  :arith-conflicts         290
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         286
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              789
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8529
;  :mk-clause               923
;  :num-allocs              9402569
;  :num-checks              1671
;  :propagations            614
;  :quant-instantiations    240
;  :rlimit-count            536001)
(push) ; 15
(assert (not (not (= (+ (- $k@374@07 $k@387@07) $k@398@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          97
;  :arith-assert-diseq      224
;  :arith-assert-lower      730
;  :arith-assert-upper      724
;  :arith-conflicts         291
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         286
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1372
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8531
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1672
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536081)
(assert (< $k@407@07 (+ (- $k@374@07 $k@387@07) $k@398@07)))
(assert (<= $Perm.No (- (+ (- $k@374@07 $k@387@07) $k@398@07) $k@407@07)))
(assert (<= (- (+ (- $k@374@07 $k@387@07) $k@398@07) $k@407@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@374@07 $k@387@07) $k@398@07) $k@407@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      725
;  :arith-conflicts         291
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         286
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8534
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1673
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536317)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@370@07 $k@383@07) $k@390@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      726
;  :arith-conflicts         292
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         287
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8535
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1674
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536398)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  $t@391@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      726
;  :arith-conflicts         292
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         287
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8535
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1675
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536409)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@374@07 $k@387@07) $k@398@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      727
;  :arith-conflicts         293
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         288
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8536
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1676
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536490)
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      727
;  :arith-conflicts         293
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         288
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1376
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8536
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1677
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536538)
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(push) ; 15
(assert (not (< $Perm.No $k@368@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      727
;  :arith-conflicts         293
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         288
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8536
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1678
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536586)
(push) ; 15
(assert (not (< $Perm.No (+ (- $k@372@07 $k@385@07) $k@394@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8537
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1679
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536667)
(set-option :timeout 0)
(push) ; 15
(assert (not (= $t@395@07 diz@89@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23579
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            172
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6269
;  :datatype-occurs-check   1292
;  :datatype-splits         5140
;  :decisions               6054
;  :del-clause              791
;  :final-checks            210
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8537
;  :mk-clause               925
;  :num-allocs              9402569
;  :num-checks              1680
;  :propagations            615
;  :quant-instantiations    240
;  :rlimit-count            536678)
(assert (= $t@395@07 diz@89@07))
(pop) ; 14
(push) ; 14
; [else-branch: 84 | !(First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
          3)
        (- 0 2))))))
(pop) ; 14
(set-option :timeout 10)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24042
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    843
;  :datatype-constructor-ax 6407
;  :datatype-occurs-check   1308
;  :datatype-splits         5251
;  :decisions               6187
;  :del-clause              812
;  :final-checks            213
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8651
;  :mk-clause               926
;  :num-allocs              9402569
;  :num-checks              1681
;  :propagations            619
;  :quant-instantiations    240
;  :rlimit-count            539575
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24448
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 6546
;  :datatype-occurs-check   1324
;  :datatype-splits         5362
;  :decisions               6321
;  :del-clause              813
;  :final-checks            216
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8765
;  :mk-clause               927
;  :num-allocs              9402569
;  :num-checks              1682
;  :propagations            623
;  :quant-instantiations    240
;  :rlimit-count            542260
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24854
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 6685
;  :datatype-occurs-check   1340
;  :datatype-splits         5473
;  :decisions               6455
;  :del-clause              814
;  :final-checks            219
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8879
;  :mk-clause               928
;  :num-allocs              9402569
;  :num-checks              1683
;  :propagations            627
;  :quant-instantiations    240
;  :rlimit-count            544945
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25260
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               1382
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 6824
;  :datatype-occurs-check   1356
;  :datatype-splits         5584
;  :decisions               6589
;  :del-clause              815
;  :final-checks            222
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             8993
;  :mk-clause               929
;  :num-allocs              9402569
;  :num-checks              1684
;  :propagations            631
;  :quant-instantiations    240
;  :rlimit-count            547630
;  :time                    0.00)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25666
;  :arith-add-rows          99
;  :arith-assert-diseq      224
;  :arith-assert-lower      732
;  :arith-assert-upper      728
;  :arith-conflicts         294
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         289
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9107
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1685
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            550315
;  :time                    0.00)
(declare-const $t@408@07 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@368@07)
    (= $t@408@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))))
  (implies
    (< $Perm.No (- $k@272@07 $k@375@07))
    (= $t@408@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))))
(assert (<= $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07))))
(assert (<= (+ $k@368@07 (- $k@272@07 $k@375@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))
  (not (= diz@89@07 $Ref.null))))
; [eval] !(diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2)
; [eval] diz.LFSR_m.Main_process_state[1] != -1 || diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_process_state[1] != -1
; [eval] diz.LFSR_m.Main_process_state[1]
(push) ; 14
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25671
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      730
;  :arith-conflicts         295
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         290
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1384
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9112
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1686
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            550656)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25671
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      730
;  :arith-conflicts         295
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         290
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9113
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1687
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            550736)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25671
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      730
;  :arith-conflicts         295
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         290
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9113
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1688
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            550751)
; [eval] -1
(push) ; 14
; [then-branch: 97 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 | live]
; [else-branch: 97 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1 | live]
(push) ; 15
; [then-branch: 97 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      1)
    (- 0 1))))
(pop) ; 15
(push) ; 15
; [else-branch: 97 | First:(Second:(Second:(Second:($t@367@07))))[1] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    1)
  (- 0 1)))
; [eval] diz.LFSR_m.Main_event_state[3] != -2
; [eval] diz.LFSR_m.Main_event_state[3]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25672
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      731
;  :arith-conflicts         296
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1386
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9115
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1689
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            550974)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25672
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      731
;  :arith-conflicts         296
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9116
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1690
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            551054)
(set-option :timeout 0)
(push) ; 16
(assert (not (<
  3
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25672
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      731
;  :arith-conflicts         296
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6963
;  :datatype-occurs-check   1372
;  :datatype-splits         5695
;  :decisions               6723
;  :del-clause              816
;  :final-checks            225
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9116
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1691
;  :propagations            635
;  :quant-instantiations    240
;  :rlimit-count            551069)
; [eval] -2
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 14
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
        3)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26046
;  :arith-add-rows          100
;  :arith-assert-diseq      224
;  :arith-assert-lower      733
;  :arith-assert-upper      731
;  :arith-conflicts         296
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 7073
;  :datatype-occurs-check   1387
;  :datatype-splits         5803
;  :decisions               6829
;  :del-clause              816
;  :final-checks            228
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9225
;  :mk-clause               930
;  :num-allocs              9402569
;  :num-checks              1692
;  :propagations            639
;  :quant-instantiations    240
;  :rlimit-count            553549
;  :time                    0.00)
(push) ; 14
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
          3)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26568
;  :arith-add-rows          100
;  :arith-assert-diseq      225
;  :arith-assert-lower      736
;  :arith-assert-upper      732
;  :arith-conflicts         296
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1389
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              823
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9353
;  :mk-clause               937
;  :num-allocs              9402569
;  :num-checks              1693
;  :propagations            645
;  :quant-instantiations    241
;  :rlimit-count            556792
;  :time                    0.00)
; [then-branch: 98 | !(First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2) | live]
; [else-branch: 98 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2 | live]
(push) ; 14
; [then-branch: 98 | !(First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          1)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
          3)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@409@07 $Perm)
(assert ($Perm.isReadVar $k@409@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@409@07 $Perm.No) (< $Perm.No $k@409@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26570
;  :arith-add-rows          100
;  :arith-assert-diseq      226
;  :arith-assert-lower      738
;  :arith-assert-upper      733
;  :arith-conflicts         296
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              823
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9359
;  :mk-clause               939
;  :num-allocs              9402569
;  :num-checks              1694
;  :propagations            646
;  :quant-instantiations    241
;  :rlimit-count            557187)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ $k@368@07 (- $k@272@07 $k@375@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          100
;  :arith-assert-diseq      226
;  :arith-assert-lower      738
;  :arith-assert-upper      734
;  :arith-conflicts         297
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         291
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1391
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9361
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1695
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557267)
(assert (< $k@409@07 (+ $k@368@07 (- $k@272@07 $k@375@07))))
(assert (<= $Perm.No (- (+ $k@368@07 (- $k@272@07 $k@375@07)) $k@409@07)))
(assert (<= (- (+ $k@368@07 (- $k@272@07 $k@375@07)) $k@409@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@368@07 (- $k@272@07 $k@375@07)) $k@409@07))
  (not (= diz@89@07 $Ref.null))))
; [eval] diz.LFSR_m != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      736
;  :arith-conflicts         298
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         292
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9365
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1696
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557536)
(set-option :timeout 0)
(push) ; 15
(assert (not (not (= $t@408@07 $Ref.null))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      736
;  :arith-conflicts         298
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         292
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9365
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1697
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557554)
(assert (not (= $t@408@07 $Ref.null)))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      737
;  :arith-conflicts         299
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         293
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1393
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9366
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1698
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557655)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      737
;  :arith-conflicts         299
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         293
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9367
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1699
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557735)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      738
;  :arith-conflicts         300
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         294
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9368
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1700
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557816)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      738
;  :arith-conflicts         300
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         294
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9369
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1701
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557896)
; [eval] |diz.LFSR_m.Main_process_state| == 3
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      739
;  :arith-conflicts         301
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         295
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1397
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9370
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1702
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            557977)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      739
;  :arith-conflicts         301
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         295
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9371
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1703
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558057)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      740
;  :arith-conflicts         302
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         296
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1399
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9372
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1704
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558138)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      740
;  :arith-conflicts         302
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         296
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9373
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1705
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558218)
; [eval] |diz.LFSR_m.Main_event_state| == 6
; [eval] |diz.LFSR_m.Main_event_state|
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      741
;  :arith-conflicts         303
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         297
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9374
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1706
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558299)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      740
;  :arith-assert-upper      741
;  :arith-conflicts         303
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         297
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9375
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1707
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558379)
; [eval] (forall i__171: Int :: { diz.LFSR_m.Main_process_state[i__171] } 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|)
(declare-const i__171@410@07 Int)
(push) ; 15
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state| ==> diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= i__171 && i__171 < |diz.LFSR_m.Main_process_state|
; [eval] 0 <= i__171
(push) ; 16
; [then-branch: 99 | 0 <= i__171@410@07 | live]
; [else-branch: 99 | !(0 <= i__171@410@07) | live]
(push) ; 17
; [then-branch: 99 | 0 <= i__171@410@07]
(assert (<= 0 i__171@410@07))
; [eval] i__171 < |diz.LFSR_m.Main_process_state|
; [eval] |diz.LFSR_m.Main_process_state|
(push) ; 18
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      741
;  :arith-assert-upper      742
;  :arith-conflicts         304
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         298
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9377
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1708
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558513)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      741
;  :arith-assert-upper      742
;  :arith-conflicts         304
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         298
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9378
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1709
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558593)
(pop) ; 17
(push) ; 17
; [else-branch: 99 | !(0 <= i__171@410@07)]
(assert (not (<= 0 i__171@410@07)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
; [then-branch: 100 | i__171@410@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__171@410@07 | live]
; [else-branch: 100 | !(i__171@410@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__171@410@07) | live]
(push) ; 17
; [then-branch: 100 | i__171@410@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__171@410@07]
(assert (and
  (<
    i__171@410@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
  (<= 0 i__171@410@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1 || 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171] == -1
; [eval] diz.LFSR_m.Main_process_state[i__171]
(push) ; 18
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      742
;  :arith-assert-upper      744
;  :arith-conflicts         305
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         299
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1405
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9381
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1710
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558783)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      742
;  :arith-assert-upper      744
;  :arith-conflicts         305
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         299
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9382
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1711
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558863)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__171@410@07 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      226
;  :arith-assert-lower      742
;  :arith-assert-upper      744
;  :arith-conflicts         305
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         299
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9382
;  :mk-clause               941
;  :num-allocs              9402569
;  :num-checks              1712
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            558872)
; [eval] -1
(push) ; 18
; [then-branch: 101 | First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07] == -1 | live]
; [else-branch: 101 | First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07] != -1 | live]
(push) ; 19
; [then-branch: 101 | First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__171@410@07)
  (- 0 1)))
(pop) ; 19
(push) ; 19
; [else-branch: 101 | First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i__171@410@07)
    (- 0 1))))
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171] && diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] 0 <= diz.LFSR_m.Main_process_state[i__171]
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      746
;  :arith-conflicts         306
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         300
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1407
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9389
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1713
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559176)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      746
;  :arith-conflicts         306
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         300
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1408
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9390
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1714
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559256)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__171@410@07 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      746
;  :arith-conflicts         306
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         300
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1408
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9390
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1715
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559265)
(push) ; 20
; [then-branch: 102 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07] | live]
; [else-branch: 102 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07]) | live]
(push) ; 21
; [then-branch: 102 | 0 <= First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__171@410@07)))
; [eval] diz.LFSR_m.Main_process_state[i__171] < |diz.LFSR_m.Main_event_state|
; [eval] diz.LFSR_m.Main_process_state[i__171]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 22
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      747
;  :arith-conflicts         307
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         301
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1409
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9391
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1716
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559451)
(push) ; 22
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      747
;  :arith-conflicts         307
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         301
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1410
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9392
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1717
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559531)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i__171@410@07 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      747
;  :arith-conflicts         307
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         301
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1410
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9392
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1718
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559540)
; [eval] |diz.LFSR_m.Main_event_state|
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      748
;  :arith-conflicts         308
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         302
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1411
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9393
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1719
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559621)
(push) ; 22
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      227
;  :arith-assert-lower      745
;  :arith-assert-upper      748
;  :arith-conflicts         308
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         302
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              825
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9394
;  :mk-clause               945
;  :num-allocs              9402569
;  :num-checks              1720
;  :propagations            649
;  :quant-instantiations    242
;  :rlimit-count            559701)
(pop) ; 21
(push) ; 21
; [else-branch: 102 | !(0 <= First:(Second:(Second:(Second:($t@367@07))))[i__171@410@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
      i__171@410@07))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 100 | !(i__171@410@07 < |First:(Second:(Second:(Second:($t@367@07))))| && 0 <= i__171@410@07)]
(assert (not
  (and
    (<
      i__171@410@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
    (<= 0 i__171@410@07))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 15
(assert (not (forall ((i__171@410@07 Int)) (!
  (implies
    (and
      (<
        i__171@410@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i__171@410@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i__171@410@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__171@410@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__171@410@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__171@410@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      228
;  :arith-assert-lower      746
;  :arith-assert-upper      749
;  :arith-conflicts         308
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         302
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9402
;  :mk-clause               957
;  :num-allocs              9402569
;  :num-checks              1721
;  :propagations            651
;  :quant-instantiations    243
;  :rlimit-count            560147)
(assert (forall ((i__171@410@07 Int)) (!
  (implies
    (and
      (<
        i__171@410@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
      (<= 0 i__171@410@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
          i__171@410@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__171@410@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
            i__171@410@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
    i__171@410@07))
  :qid |prog.l<no position>|)))
(declare-const $k@411@07 $Perm)
(assert ($Perm.isReadVar $k@411@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      748
;  :arith-assert-upper      751
;  :arith-conflicts         309
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         303
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9408
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1722
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            560740)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@411@07 $Perm.No) (< $Perm.No $k@411@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      748
;  :arith-assert-upper      751
;  :arith-conflicts         309
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         303
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9408
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1723
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            560790)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      748
;  :arith-assert-upper      751
;  :arith-conflicts         309
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         303
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9408
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1724
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            560809)
(push) ; 15
(assert (not (not (= (- $k@274@07 $k@377@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      748
;  :arith-assert-upper      751
;  :arith-conflicts         309
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         303
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9409
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1725
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            560877)
(assert (< $k@411@07 (- $k@274@07 $k@377@07)))
(assert (<= $Perm.No (- (- $k@274@07 $k@377@07) $k@411@07)))
(assert (<= (- (- $k@274@07 $k@377@07) $k@411@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@274@07 $k@377@07) $k@411@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      753
;  :arith-conflicts         310
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         304
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9413
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1726
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561142)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      753
;  :arith-conflicts         310
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         304
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9413
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1727
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561161)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      753
;  :arith-conflicts         310
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         304
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9413
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1728
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561180)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9414
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1729
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561261)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9414
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1730
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561280)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26571
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    873
;  :datatype-constructor-ax 7235
;  :datatype-occurs-check   1408
;  :datatype-splits         5915
;  :decisions               6986
;  :del-clause              841
;  :final-checks            232
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9414
;  :mk-clause               959
;  :num-allocs              9402569
;  :num-checks              1731
;  :propagations            652
;  :quant-instantiations    243
;  :rlimit-count            561299)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26994
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    878
;  :datatype-constructor-ax 7371
;  :datatype-occurs-check   1424
;  :datatype-splits         6025
;  :decisions               7117
;  :del-clause              842
;  :final-checks            235
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9527
;  :mk-clause               960
;  :num-allocs              9402569
;  :num-checks              1732
;  :propagations            656
;  :quant-instantiations    243
;  :rlimit-count            564077
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27738
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1420
;  :datatype-accessor-ax    886
;  :datatype-constructor-ax 7591
;  :datatype-occurs-check   1454
;  :datatype-splits         6241
;  :decisions               7329
;  :del-clause              846
;  :final-checks            241
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9741
;  :mk-clause               960
;  :num-allocs              9402569
;  :num-checks              1735
;  :propagations            664
;  :quant-instantiations    243
;  :rlimit-count            568732)
(declare-const $t@412@07 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28161
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1421
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9854
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1736
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            571510
;  :time                    0.00)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28161
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1422
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9855
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1737
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            571595)
(declare-const $t@413@07 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28161
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9856
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1738
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            571680)
(declare-const $t@414@07 $Ref)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28161
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9857
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1739
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            571765)
(declare-const $t@415@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@274@07 $k@377@07) $k@411@07))
    (=
      $t@412@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
  (implies
    (< $Perm.No $k@370@07)
    (=
      $t@412@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@373@07)
    (=
      $t@413@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@277@07 $k@380@07))
    (=
      $t@413@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@372@07)
    (=
      $t@414@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@276@07 $k@379@07))
    (=
      $t@414@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@371@07)
    (=
      $t@415@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@275@07 $k@378@07))
    (=
      $t@415@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28174
;  :arith-add-rows          102
;  :arith-assert-diseq      229
;  :arith-assert-lower      750
;  :arith-assert-upper      754
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9864
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1740
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            573116)
(declare-const $t@416@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@278@07 $k@381@07))
    (=
      $t@416@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@374@07)
    (=
      $t@416@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@371@07 (- $k@275@07 $k@378@07))))
(assert (<= (+ $k@371@07 (- $k@275@07 $k@378@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@371@07 (- $k@275@07 $k@378@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@372@07 (- $k@276@07 $k@379@07))))
(assert (<= (+ $k@372@07 (- $k@276@07 $k@379@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@372@07 (- $k@276@07 $k@379@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (<= $Perm.No (+ $k@373@07 (- $k@277@07 $k@380@07))))
(assert (<= (+ $k@373@07 (- $k@277@07 $k@380@07)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@373@07 (- $k@277@07 $k@380@07)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@274@07 $k@377@07) $k@411@07) $k@370@07)))
(assert (<= (+ (- (- $k@274@07 $k@377@07) $k@411@07) $k@370@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@274@07 $k@377@07) $k@411@07) $k@370@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@278@07 $k@381@07) $k@374@07)))
(assert (<= (+ (- $k@278@07 $k@381@07) $k@374@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@278@07 $k@381@07) $k@374@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      759
;  :arith-conflicts         311
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         305
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9876
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1741
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            573994)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      760
;  :arith-conflicts         312
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         306
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9877
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1742
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574075
;  :time                    0.00)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      760
;  :arith-conflicts         312
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         306
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9877
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1743
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574094)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      760
;  :arith-conflicts         312
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         306
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9877
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1744
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574113)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      760
;  :arith-conflicts         312
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         306
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1428
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9878
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1745
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574278)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      761
;  :arith-conflicts         313
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         307
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9879
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1746
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574359)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      761
;  :arith-conflicts         313
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         307
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9879
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1747
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574378)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      761
;  :arith-conflicts         313
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         307
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9879
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1748
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574397)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      761
;  :arith-conflicts         313
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         307
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9880
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1749
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574562)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      762
;  :arith-conflicts         314
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         308
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9881
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1750
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574643)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      762
;  :arith-conflicts         314
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         308
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9881
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1751
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574662)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      762
;  :arith-conflicts         314
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         308
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9881
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1752
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574681)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      762
;  :arith-conflicts         314
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         308
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1432
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9882
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1753
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574846)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      763
;  :arith-conflicts         315
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         309
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9883
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1754
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574927)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      763
;  :arith-conflicts         315
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         309
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9883
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1755
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574946)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      763
;  :arith-conflicts         315
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         309
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9883
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1756
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            574965)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      763
;  :arith-conflicts         315
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         309
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9884
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1757
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575130)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      764
;  :arith-conflicts         316
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         310
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9885
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1758
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575211)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      764
;  :arith-conflicts         316
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         310
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9885
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1759
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575230)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      764
;  :arith-conflicts         316
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         310
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9885
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1760
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575249)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      764
;  :arith-conflicts         316
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         310
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9886
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1761
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575414)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      765
;  :arith-conflicts         317
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         311
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9887
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1762
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575495)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      765
;  :arith-conflicts         317
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         311
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9887
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1763
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575514)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      765
;  :arith-conflicts         317
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         311
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9887
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1764
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575533)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      765
;  :arith-conflicts         317
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         311
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1438
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9888
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1765
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575698)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      766
;  :arith-conflicts         318
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         312
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9889
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1766
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575779)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      766
;  :arith-conflicts         318
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         312
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9889
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1767
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575798)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      766
;  :arith-conflicts         318
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         312
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9889
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1768
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575817)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      766
;  :arith-conflicts         318
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         312
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9890
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1769
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            575982)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      767
;  :arith-conflicts         319
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         313
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9891
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1770
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576063)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      767
;  :arith-conflicts         319
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         313
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9891
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1771
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576082)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      767
;  :arith-conflicts         319
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         313
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9891
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1772
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576101)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      767
;  :arith-conflicts         319
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         313
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9892
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1773
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576266)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      768
;  :arith-conflicts         320
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         314
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9893
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1774
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576347)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      768
;  :arith-conflicts         320
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         314
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9893
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1775
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576366)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      768
;  :arith-conflicts         320
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         314
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9893
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1776
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576385)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      229
;  :arith-assert-lower      755
;  :arith-assert-upper      768
;  :arith-conflicts         320
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         314
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9894
;  :mk-clause               961
;  :num-allocs              9402569
;  :num-checks              1777
;  :propagations            668
;  :quant-instantiations    243
;  :rlimit-count            576550)
(declare-const $k@417@07 $Perm)
(assert ($Perm.isReadVar $k@417@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      230
;  :arith-assert-lower      757
;  :arith-assert-upper      770
;  :arith-conflicts         321
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         315
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1445
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9899
;  :mk-clause               963
;  :num-allocs              9402569
;  :num-checks              1778
;  :propagations            669
;  :quant-instantiations    243
;  :rlimit-count            576779)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@417@07 $Perm.No) (< $Perm.No $k@417@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      230
;  :arith-assert-lower      757
;  :arith-assert-upper      770
;  :arith-conflicts         321
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         315
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9899
;  :mk-clause               963
;  :num-allocs              9402569
;  :num-checks              1779
;  :propagations            669
;  :quant-instantiations    243
;  :rlimit-count            576829)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28175
;  :arith-add-rows          106
;  :arith-assert-diseq      230
;  :arith-assert-lower      757
;  :arith-assert-upper      770
;  :arith-conflicts         321
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         315
;  :arith-pivots            183
;  :binary-propagations     22
;  :conflicts               1447
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              847
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9900
;  :mk-clause               963
;  :num-allocs              9402569
;  :num-checks              1780
;  :propagations            669
;  :quant-instantiations    243
;  :rlimit-count            576909)
(push) ; 15
(assert (not (not (= (+ $k@371@07 (- $k@275@07 $k@378@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          106
;  :arith-assert-diseq      230
;  :arith-assert-lower      757
;  :arith-assert-upper      771
;  :arith-conflicts         322
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         315
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1448
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9902
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1781
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            576993)
(assert (< $k@417@07 (+ $k@371@07 (- $k@275@07 $k@378@07))))
(assert (<= $Perm.No (- (+ $k@371@07 (- $k@275@07 $k@378@07)) $k@417@07)))
(assert (<= (- (+ $k@371@07 (- $k@275@07 $k@378@07)) $k@417@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@371@07 (- $k@275@07 $k@378@07)) $k@417@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_casr != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      773
;  :arith-conflicts         323
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         316
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9906
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1782
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577262)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      773
;  :arith-conflicts         323
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         316
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9906
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1783
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577281)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      773
;  :arith-conflicts         323
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         316
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9906
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1784
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577300)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      774
;  :arith-conflicts         324
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         317
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9907
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1785
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577381)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      774
;  :arith-conflicts         324
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         317
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9907
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1786
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577400)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      774
;  :arith-conflicts         324
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         317
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9907
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1787
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577419)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      774
;  :arith-conflicts         324
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         317
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1451
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9908
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1788
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577699)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      775
;  :arith-conflicts         325
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         318
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9909
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1789
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577780)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      775
;  :arith-conflicts         325
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         318
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9909
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1790
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577799)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      775
;  :arith-conflicts         325
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         318
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9909
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1791
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            577818)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      775
;  :arith-conflicts         325
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         318
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1453
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9910
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1792
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578098)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      776
;  :arith-conflicts         326
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         319
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9911
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1793
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578179)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      776
;  :arith-conflicts         326
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         319
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9911
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1794
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578198)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      776
;  :arith-conflicts         326
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         319
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9911
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1795
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578217)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      776
;  :arith-conflicts         326
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         319
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1455
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9912
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1796
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578497)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      777
;  :arith-conflicts         327
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         320
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9913
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1797
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578578)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      777
;  :arith-conflicts         327
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         320
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9913
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1798
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578597)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      777
;  :arith-conflicts         327
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         320
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9913
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1799
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578616)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      777
;  :arith-conflicts         327
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         320
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9914
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1800
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578896)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      778
;  :arith-conflicts         328
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         321
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9915
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1801
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578977)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      778
;  :arith-conflicts         328
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         321
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9915
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1802
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            578996)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      778
;  :arith-conflicts         328
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         321
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9915
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1803
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579015)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      778
;  :arith-conflicts         328
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         321
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1459
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9916
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1804
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579295)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      779
;  :arith-conflicts         329
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         322
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1460
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9917
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1805
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579376)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      779
;  :arith-conflicts         329
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         322
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1460
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9917
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1806
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579395)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      779
;  :arith-conflicts         329
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         322
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1460
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9917
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1807
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579414)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      779
;  :arith-conflicts         329
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         322
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1461
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9918
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1808
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579694)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      780
;  :arith-conflicts         330
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         323
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9919
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1809
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579775)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      780
;  :arith-conflicts         330
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         323
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9919
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1810
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579794)
(push) ; 15
(assert (not (< $Perm.No (- $k@275@07 $k@378@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      780
;  :arith-conflicts         330
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         323
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9919
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1811
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            579813)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      230
;  :arith-assert-lower      759
;  :arith-assert-upper      780
;  :arith-conflicts         330
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         323
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1463
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9920
;  :mk-clause               965
;  :num-allocs              9402569
;  :num-checks              1812
;  :propagations            670
;  :quant-instantiations    243
;  :rlimit-count            580093)
(declare-const $k@418@07 $Perm)
(assert ($Perm.isReadVar $k@418@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      231
;  :arith-assert-lower      761
;  :arith-assert-upper      782
;  :arith-conflicts         331
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         324
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1464
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9925
;  :mk-clause               967
;  :num-allocs              9402569
;  :num-checks              1813
;  :propagations            671
;  :quant-instantiations    243
;  :rlimit-count            580322)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@418@07 $Perm.No) (< $Perm.No $k@418@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      231
;  :arith-assert-lower      761
;  :arith-assert-upper      782
;  :arith-conflicts         331
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         324
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1465
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9925
;  :mk-clause               967
;  :num-allocs              9402569
;  :num-checks              1814
;  :propagations            671
;  :quant-instantiations    243
;  :rlimit-count            580372)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28176
;  :arith-add-rows          108
;  :arith-assert-diseq      231
;  :arith-assert-lower      761
;  :arith-assert-upper      782
;  :arith-conflicts         331
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         324
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               1466
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              849
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9926
;  :mk-clause               967
;  :num-allocs              9402569
;  :num-checks              1815
;  :propagations            671
;  :quant-instantiations    243
;  :rlimit-count            580452)
(push) ; 15
(assert (not (not (= (+ $k@372@07 (- $k@276@07 $k@379@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          108
;  :arith-assert-diseq      231
;  :arith-assert-lower      761
;  :arith-assert-upper      783
;  :arith-conflicts         332
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         324
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1467
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9928
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1816
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580536)
(assert (< $k@418@07 (+ $k@372@07 (- $k@276@07 $k@379@07))))
(assert (<= $Perm.No (- (+ $k@372@07 (- $k@276@07 $k@379@07)) $k@418@07)))
(assert (<= (- (+ $k@372@07 (- $k@276@07 $k@379@07)) $k@418@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@372@07 (- $k@276@07 $k@379@07)) $k@418@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_lfsr != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      785
;  :arith-conflicts         333
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         325
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9932
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1817
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580805)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      785
;  :arith-conflicts         333
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         325
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9932
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1818
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580824)
(push) ; 15
(assert (not (< $Perm.No (- $k@276@07 $k@379@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      785
;  :arith-conflicts         333
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         325
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9932
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1819
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580843)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      786
;  :arith-conflicts         334
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         326
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9933
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1820
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580924)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      786
;  :arith-conflicts         334
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         326
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9933
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1821
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580943)
(push) ; 15
(assert (not (< $Perm.No (- $k@276@07 $k@379@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      786
;  :arith-conflicts         334
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         326
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9933
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1822
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580962)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      786
;  :arith-conflicts         334
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         326
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9933
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1823
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            580973)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      787
;  :arith-conflicts         335
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         327
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9934
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1824
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            581054)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      787
;  :arith-conflicts         335
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         327
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9934
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1825
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            581073)
(push) ; 15
(assert (not (< $Perm.No (- $k@276@07 $k@379@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      787
;  :arith-conflicts         335
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         327
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9934
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1826
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            581092)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      231
;  :arith-assert-lower      763
;  :arith-assert-upper      787
;  :arith-conflicts         335
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         327
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9934
;  :mk-clause               969
;  :num-allocs              9402569
;  :num-checks              1827
;  :propagations            672
;  :quant-instantiations    243
;  :rlimit-count            581103)
(declare-const $k@419@07 $Perm)
(assert ($Perm.isReadVar $k@419@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      232
;  :arith-assert-lower      765
;  :arith-assert-upper      789
;  :arith-conflicts         336
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         328
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1471
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9939
;  :mk-clause               971
;  :num-allocs              9402569
;  :num-checks              1828
;  :propagations            673
;  :quant-instantiations    243
;  :rlimit-count            581332)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@419@07 $Perm.No) (< $Perm.No $k@419@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      232
;  :arith-assert-lower      765
;  :arith-assert-upper      789
;  :arith-conflicts         336
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         328
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1472
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9939
;  :mk-clause               971
;  :num-allocs              9402569
;  :num-checks              1829
;  :propagations            673
;  :quant-instantiations    243
;  :rlimit-count            581382)
(set-option :timeout 10)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28177
;  :arith-add-rows          110
;  :arith-assert-diseq      232
;  :arith-assert-lower      765
;  :arith-assert-upper      789
;  :arith-conflicts         336
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         328
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               1473
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              851
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9940
;  :mk-clause               971
;  :num-allocs              9402569
;  :num-checks              1830
;  :propagations            673
;  :quant-instantiations    243
;  :rlimit-count            581462)
(push) ; 15
(assert (not (not (= (+ $k@373@07 (- $k@277@07 $k@380@07)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          110
;  :arith-assert-diseq      232
;  :arith-assert-lower      765
;  :arith-assert-upper      790
;  :arith-conflicts         337
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         328
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1474
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9942
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1831
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581546)
(assert (< $k@419@07 (+ $k@373@07 (- $k@277@07 $k@380@07))))
(assert (<= $Perm.No (- (+ $k@373@07 (- $k@277@07 $k@380@07)) $k@419@07)))
(assert (<= (- (+ $k@373@07 (- $k@277@07 $k@380@07)) $k@419@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@373@07 (- $k@277@07 $k@380@07)) $k@419@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@367@07)) $Ref.null))))
; [eval] diz.LFSR_m.Main_rn_combinate != null
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      792
;  :arith-conflicts         338
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         329
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9946
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1832
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581815)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      792
;  :arith-conflicts         338
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         329
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9946
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1833
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581834)
(push) ; 15
(assert (not (< $Perm.No (- $k@277@07 $k@380@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      792
;  :arith-conflicts         338
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         329
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9946
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1834
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581853)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      793
;  :arith-conflicts         339
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         330
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1476
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9947
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1835
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581934)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      793
;  :arith-conflicts         339
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         330
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1476
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9947
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1836
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581953)
(push) ; 15
(assert (not (< $Perm.No (- $k@277@07 $k@380@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      793
;  :arith-conflicts         339
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         330
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1476
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9947
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1837
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            581972)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      232
;  :arith-assert-lower      767
;  :arith-assert-upper      793
;  :arith-conflicts         339
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         330
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1477
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9948
;  :mk-clause               973
;  :num-allocs              9402569
;  :num-checks              1838
;  :propagations            674
;  :quant-instantiations    243
;  :rlimit-count            582382)
(declare-const $k@420@07 $Perm)
(assert ($Perm.isReadVar $k@420@07 $Perm.Write))
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      233
;  :arith-assert-lower      769
;  :arith-assert-upper      795
;  :arith-conflicts         340
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         331
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1478
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9953
;  :mk-clause               975
;  :num-allocs              9402569
;  :num-checks              1839
;  :propagations            675
;  :quant-instantiations    243
;  :rlimit-count            582612)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      233
;  :arith-assert-lower      769
;  :arith-assert-upper      795
;  :arith-conflicts         340
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         331
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1478
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9953
;  :mk-clause               975
;  :num-allocs              9402569
;  :num-checks              1840
;  :propagations            675
;  :quant-instantiations    243
;  :rlimit-count            582631)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      233
;  :arith-assert-lower      769
;  :arith-assert-upper      795
;  :arith-conflicts         340
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         331
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1478
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9953
;  :mk-clause               975
;  :num-allocs              9402569
;  :num-checks              1841
;  :propagations            675
;  :quant-instantiations    243
;  :rlimit-count            582650)
(set-option :timeout 0)
(push) ; 15
(assert (not (or (= $k@420@07 $Perm.No) (< $Perm.No $k@420@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28178
;  :arith-add-rows          112
;  :arith-assert-diseq      233
;  :arith-assert-lower      769
;  :arith-assert-upper      795
;  :arith-conflicts         340
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         331
;  :arith-pivots            186
;  :binary-propagations     22
;  :conflicts               1479
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              853
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9953
;  :mk-clause               975
;  :num-allocs              9402569
;  :num-checks              1842
;  :propagations            675
;  :quant-instantiations    243
;  :rlimit-count            582700)
(set-option :timeout 10)
(push) ; 15
(assert (not (not (= (+ (- $k@278@07 $k@381@07) $k@374@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          112
;  :arith-assert-diseq      233
;  :arith-assert-lower      769
;  :arith-assert-upper      796
;  :arith-conflicts         341
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         331
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1480
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9955
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1843
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            582784)
(assert (< $k@420@07 (+ (- $k@278@07 $k@381@07) $k@374@07)))
(assert (<= $Perm.No (- (+ (- $k@278@07 $k@381@07) $k@374@07) $k@420@07)))
(assert (<= (- (+ (- $k@278@07 $k@381@07) $k@374@07) $k@420@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@278@07 $k@381@07) $k@374@07) $k@420@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.LFSR_m.Main_rn.Rng_m == diz.LFSR_m
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         342
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         332
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9959
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1844
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583053)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         342
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         332
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9959
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1845
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583072)
(push) ; 15
(assert (not (< $Perm.No (- $k@274@07 $k@377@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         342
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         332
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9959
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1846
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583091)
(push) ; 15
(assert (not (< $Perm.No (- $k@278@07 $k@381@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      798
;  :arith-conflicts         342
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         332
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9959
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1847
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583110)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      799
;  :arith-conflicts         343
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         333
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1482
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9960
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1848
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583191)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      799
;  :arith-conflicts         343
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         333
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1482
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9960
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1849
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583213)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
  $t@408@07))
; [eval] diz.LFSR_m.Main_rn_lfsr == diz
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ $k@368@07 (- $k@272@07 $k@375@07)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9961
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1850
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583313)
(push) ; 15
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@408@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9961
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1851
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583332)
(push) ; 15
(assert (not (< $Perm.No (- $k@276@07 $k@379@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          114
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              855
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9961
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1852
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583351)
(pop) ; 14
(push) ; 14
; [else-branch: 98 | First:(Second:(Second:(Second:($t@367@07))))[1] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@367@07))))))[3] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))
        1)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@367@07)))))))
        3)
      (- 0 2)))))
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 72 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    0)))
(pop) ; 11
; [eval] !(__flatten_82__122.Rng_seed_i == 0)
; [eval] __flatten_82__122.Rng_seed_i == 0
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  __flatten_82__122@358@07)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28179
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    891
;  :datatype-constructor-ax 7727
;  :datatype-occurs-check   1470
;  :datatype-splits         6351
;  :decisions               7460
;  :del-clause              915
;  :final-checks            244
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             9961
;  :mk-clause               977
;  :num-allocs              9402569
;  :num-checks              1853
;  :propagations            676
;  :quant-instantiations    243
;  :rlimit-count            583532)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
  0)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28448
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    894
;  :datatype-constructor-ax 7809
;  :datatype-occurs-check   1483
;  :datatype-splits         6431
;  :decisions               7539
;  :del-clause              915
;  :final-checks            247
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10042
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1854
;  :propagations            679
;  :quant-instantiations    244
;  :rlimit-count            585511
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28718
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10123
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1855
;  :propagations            682
;  :quant-instantiations    245
;  :rlimit-count            587476
;  :time                    0.00)
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) != 0 | live]
; [else-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) == 0 | live]
(push) ; 11
; [then-branch: 103 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@271@07)))))))))))))) != 0]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))
    0)))
; [exec]
; __flatten_87__127 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28719
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1484
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10125
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1856
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            587747)
(declare-const __flatten_87__127@421@07 $Ref)
(assert (= __flatten_87__127@421@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_86__126 := __flatten_87__127.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_87__127@421@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28720
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1484
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10126
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1857
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            587806)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28720
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1485
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10126
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1858
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            587854)
(declare-const __flatten_86__126@422@07 $Ref)
(assert (=
  __flatten_86__126@422@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [exec]
; __flatten_90__130 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28721
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10127
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1859
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            587942)
(declare-const __flatten_90__130@423@07 $Ref)
(assert (= __flatten_90__130@423@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_89__129 := __flatten_90__130.Main_rn
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_90__130@423@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28722
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10128
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1860
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            588001)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28722
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1487
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10128
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1861
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            588049)
(declare-const __flatten_89__129@424@07 $Ref)
(assert (=
  __flatten_89__129@424@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; [exec]
; __flatten_91__131 := diz.LFSR_m
(push) ; 12
(assert (not (< $Perm.No $k@272@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28723
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1488
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10129
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1862
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            588137)
(declare-const __flatten_91__131@425@07 $Ref)
(assert (= __flatten_91__131@425@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))))
; [exec]
; __flatten_92__132 := Rng_exp2__EncodedGlobalVariables_Integer(__flatten_91__131.Main_rn, globals__108, 32)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) __flatten_91__131@425@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1488
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10130
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1863
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            588196)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      233
;  :arith-assert-lower      771
;  :arith-assert-upper      800
;  :arith-conflicts         344
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1489
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10130
;  :mk-clause               977
;  :num-allocs              9857121
;  :num-checks              1864
;  :propagations            682
;  :quant-instantiations    246
;  :rlimit-count            588244)
; [eval] diz != null
(declare-const $k@426@07 $Perm)
(assert ($Perm.isReadVar $k@426@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@426@07 $Perm.No) (< $Perm.No $k@426@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      773
;  :arith-assert-upper      801
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1490
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10134
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1865
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588442)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@278@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      773
;  :arith-assert-upper      801
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            201
;  :binary-propagations     22
;  :conflicts               1490
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10134
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1866
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588453)
(assert (< $k@426@07 $k@278@07))
(assert (<= $Perm.No (- $k@278@07 $k@426@07)))
(assert (<= (- $k@278@07 $k@426@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@278@07 $k@426@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1491
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1867
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588667)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1491
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1868
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588685)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1492
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1869
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588753)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1492
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1870
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588775)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1871
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588823)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1872
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588845)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1494
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1873
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588893)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1494
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1874
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588915)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1495
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1875
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588963)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1495
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1876
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            588985)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1496
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1877
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589033)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      775
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1496
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10137
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1878
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589055)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@427@07 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 104 | 0 <= i@427@07 | live]
; [else-branch: 104 | !(0 <= i@427@07) | live]
(push) ; 14
; [then-branch: 104 | 0 <= i@427@07]
(assert (<= 0 i@427@07))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      776
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1497
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10138
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1879
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589155)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      776
;  :arith-assert-upper      802
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1497
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10138
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1880
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589177)
(pop) ; 14
(push) ; 14
; [else-branch: 104 | !(0 <= i@427@07)]
(assert (not (<= 0 i@427@07)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 105 | i@427@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i@427@07 | live]
; [else-branch: 105 | !(i@427@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i@427@07) | live]
(push) ; 14
; [then-branch: 105 | i@427@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i@427@07]
(assert (and
  (<
    i@427@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
  (<= 0 i@427@07)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 15
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      777
;  :arith-assert-upper      803
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1498
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10140
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1881
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589334)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      777
;  :arith-assert-upper      803
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1498
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10140
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1882
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589356)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@427@07 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      234
;  :arith-assert-lower      777
;  :arith-assert-upper      803
;  :arith-conflicts         344
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1498
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10140
;  :mk-clause               979
;  :num-allocs              9857121
;  :num-checks              1883
;  :propagations            683
;  :quant-instantiations    246
;  :rlimit-count            589365)
; [eval] -1
(push) ; 15
; [then-branch: 106 | First:(Second:(Second:(Second:($t@271@07))))[i@427@07] == -1 | live]
; [else-branch: 106 | First:(Second:(Second:(Second:($t@271@07))))[i@427@07] != -1 | live]
(push) ; 16
; [then-branch: 106 | First:(Second:(Second:(Second:($t@271@07))))[i@427@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i@427@07)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 106 | First:(Second:(Second:(Second:($t@271@07))))[i@427@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
      i@427@07)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 17
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1884
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589636)
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1885
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589658)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= i@427@07 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1886
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589667)
(push) ; 17
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@271@07))))[i@427@07] | live]
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@271@07))))[i@427@07]) | live]
(push) ; 18
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@271@07))))[i@427@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i@427@07)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1500
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1887
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589820)
(push) ; 19
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1500
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1888
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589842)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= i@427@07 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1500
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1889
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589851)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1501
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1890
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589899)
(push) ; 19
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      235
;  :arith-assert-lower      780
;  :arith-assert-upper      804
;  :arith-conflicts         344
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1501
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              915
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10146
;  :mk-clause               983
;  :num-allocs              9857121
;  :num-checks              1891
;  :propagations            685
;  :quant-instantiations    247
;  :rlimit-count            589921)
(pop) ; 18
(push) ; 18
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@271@07))))[i@427@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
      i@427@07))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 105 | !(i@427@07 < |First:(Second:(Second:(Second:($t@271@07))))| && 0 <= i@427@07)]
(assert (not
  (and
    (<
      i@427@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
    (<= 0 i@427@07))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 12
(assert (not (forall ((i@427@07 Int)) (!
  (implies
    (and
      (<
        i@427@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
      (<= 0 i@427@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
          i@427@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i@427@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i@427@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i@427@07))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      237
;  :arith-assert-lower      781
;  :arith-assert-upper      805
;  :arith-conflicts         344
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1502
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10154
;  :mk-clause               997
;  :num-allocs              9857121
;  :num-checks              1892
;  :propagations            687
;  :quant-instantiations    248
;  :rlimit-count            590367)
(assert (forall ((i@427@07 Int)) (!
  (implies
    (and
      (<
        i@427@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))
      (<= 0 i@427@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
          i@427@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i@427@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
            i@427@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))
    i@427@07))
  :qid |prog.l<no position>|)))
(declare-const $k@428@07 $Perm)
(assert ($Perm.isReadVar $k@428@07 $Perm.Write))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      783
;  :arith-assert-upper      806
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1503
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10159
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1893
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            590925)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@428@07 $Perm.No) (< $Perm.No $k@428@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      783
;  :arith-assert-upper      806
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10159
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1894
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            590975)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      783
;  :arith-assert-upper      806
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10159
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1895
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            590997)
(push) ; 12
(assert (not (not (= $k@274@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      783
;  :arith-assert-upper      806
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            202
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10159
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1896
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591008)
(assert (< $k@428@07 $k@274@07))
(assert (<= $Perm.No (- $k@274@07 $k@428@07)))
(assert (<= (- $k@274@07 $k@428@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@274@07 $k@428@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1897
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591222)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1898
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591244)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1506
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1899
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591292)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1507
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1900
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591340)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1507
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1901
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591362)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1508
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1902
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591410)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1509
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1903
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591458)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1509
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1904
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591480)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1510
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1905
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591528)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1511
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1906
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591576)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1511
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1907
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591598)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1512
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1908
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591646)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1513
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1909
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591694)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1513
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1910
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591716)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1514
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1911
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591764)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1515
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1912
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591812)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1515
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1913
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591834)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1516
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1914
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591882)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1517
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1915
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591930)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1517
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1916
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            591952)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1518
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1917
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592000)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1519
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1918
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592048)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1519
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1919
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592070)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1520
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1920
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592118)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1921
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592166)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1922
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592188)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1522
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1923
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592236)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1523
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1924
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592284)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1523
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1925
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592306)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1524
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1926
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592354)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1525
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1927
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592402)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1525
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1928
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592424)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      238
;  :arith-assert-lower      785
;  :arith-assert-upper      807
;  :arith-conflicts         344
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1526
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10162
;  :mk-clause               999
;  :num-allocs              9857121
;  :num-checks              1929
;  :propagations            688
;  :quant-instantiations    248
;  :rlimit-count            592472)
(declare-const $k@429@07 $Perm)
(assert ($Perm.isReadVar $k@429@07 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      787
;  :arith-assert-upper      808
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1527
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10166
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1930
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592668)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@429@07 $Perm.No) (< $Perm.No $k@429@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      787
;  :arith-assert-upper      808
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1528
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10166
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1931
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592718)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      787
;  :arith-assert-upper      808
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1528
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10166
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1932
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592740)
(push) ; 12
(assert (not (not (= $k@275@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      787
;  :arith-assert-upper      808
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            203
;  :binary-propagations     22
;  :conflicts               1528
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10166
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1933
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592751)
(assert (< $k@429@07 $k@275@07))
(assert (<= $Perm.No (- $k@275@07 $k@429@07)))
(assert (<= (- $k@275@07 $k@429@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@275@07 $k@429@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1529
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1934
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592965)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1529
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1935
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            592987)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1530
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1936
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593035)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1531
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1937
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593083)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1531
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1938
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593105)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1532
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1939
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593153)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1533
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1940
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593201)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1533
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1941
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593223)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1534
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1942
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593271)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1535
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1943
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593319)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1535
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1944
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593341)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1536
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1945
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593389)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1946
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593437)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1947
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593459)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1538
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1948
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593507)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1539
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1949
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593555)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1539
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1950
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593577)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1540
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1951
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593625)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1952
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593673)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1953
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593695)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1542
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1954
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593743)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1543
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1955
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593791)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1543
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1956
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593813)
(push) ; 12
(assert (not (< $Perm.No $k@275@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      239
;  :arith-assert-lower      789
;  :arith-assert-upper      809
;  :arith-conflicts         344
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1544
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10169
;  :mk-clause               1001
;  :num-allocs              9857121
;  :num-checks              1957
;  :propagations            689
;  :quant-instantiations    248
;  :rlimit-count            593861)
(declare-const $k@430@07 $Perm)
(assert ($Perm.isReadVar $k@430@07 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      791
;  :arith-assert-upper      810
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1545
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10173
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1958
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594058)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@430@07 $Perm.No) (< $Perm.No $k@430@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      791
;  :arith-assert-upper      810
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10173
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1959
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594108)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      791
;  :arith-assert-upper      810
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10173
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1960
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594130)
(push) ; 12
(assert (not (not (= $k@276@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      791
;  :arith-assert-upper      810
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10173
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1961
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594141)
(assert (< $k@430@07 $k@276@07))
(assert (<= $Perm.No (- $k@276@07 $k@430@07)))
(assert (<= (- $k@276@07 $k@430@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@276@07 $k@430@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1962
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594349)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1963
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594371)
(push) ; 12
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1548
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1964
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594419)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1549
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1965
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594467)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1549
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1966
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594489)
(push) ; 12
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1550
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1967
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594537)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1968
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594585)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1969
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594607)
(push) ; 12
(assert (not (< $Perm.No $k@276@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      240
;  :arith-assert-lower      793
;  :arith-assert-upper      811
;  :arith-conflicts         344
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1552
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10176
;  :mk-clause               1003
;  :num-allocs              9857121
;  :num-checks              1970
;  :propagations            690
;  :quant-instantiations    248
;  :rlimit-count            594655)
(declare-const $k@431@07 $Perm)
(assert ($Perm.isReadVar $k@431@07 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      795
;  :arith-assert-upper      812
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1553
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10180
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1971
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            594851)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@431@07 $Perm.No) (< $Perm.No $k@431@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      795
;  :arith-assert-upper      812
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10180
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1972
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            594901)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      795
;  :arith-assert-upper      812
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10180
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1973
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            594923)
(push) ; 12
(assert (not (not (= $k@277@07 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      795
;  :arith-assert-upper      812
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            204
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10180
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1974
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            594934)
(assert (< $k@431@07 $k@277@07))
(assert (<= $Perm.No (- $k@277@07 $k@431@07)))
(assert (<= (- $k@277@07 $k@431@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@277@07 $k@431@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1975
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595154)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1976
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595176)
(push) ; 12
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1556
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1977
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595224)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1978
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595272)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1979
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595294)
(push) ; 12
(assert (not (< $Perm.No $k@277@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      241
;  :arith-assert-lower      797
;  :arith-assert-upper      813
;  :arith-conflicts         344
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1558
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10183
;  :mk-clause               1005
;  :num-allocs              9857121
;  :num-checks              1980
;  :propagations            691
;  :quant-instantiations    248
;  :rlimit-count            595342)
(declare-const $k@432@07 $Perm)
(assert ($Perm.isReadVar $k@432@07 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      242
;  :arith-assert-lower      799
;  :arith-assert-upper      814
;  :arith-conflicts         344
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10187
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1981
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595539)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      242
;  :arith-assert-lower      799
;  :arith-assert-upper      814
;  :arith-conflicts         344
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10187
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1982
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595561)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      242
;  :arith-assert-lower      799
;  :arith-assert-upper      814
;  :arith-conflicts         344
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1560
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10187
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1983
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595609)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@432@07 $Perm.No) (< $Perm.No $k@432@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      242
;  :arith-assert-lower      799
;  :arith-assert-upper      814
;  :arith-conflicts         344
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10187
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1984
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595659)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (- $k@278@07 $k@426@07) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          116
;  :arith-assert-diseq      242
;  :arith-assert-lower      799
;  :arith-assert-upper      814
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            206
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10188
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1985
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595727)
(assert (< $k@432@07 (- $k@278@07 $k@426@07)))
(assert (<= $Perm.No (- (- $k@278@07 $k@426@07) $k@432@07)))
(assert (<= (- (- $k@278@07 $k@426@07) $k@432@07) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@278@07 $k@426@07) $k@432@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1986
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            595981)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1987
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596003)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1564
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1988
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596051)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1565
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1989
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596099)
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1566
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1990
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596147)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 12
(assert (not (< $Perm.No $k@278@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1567
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1991
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596195)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1567
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1992
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596217)
(push) ; 12
(assert (not (< $Perm.No $k@274@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28724
;  :arith-add-rows          118
;  :arith-assert-diseq      242
;  :arith-assert-lower      801
;  :arith-assert-upper      815
;  :arith-conflicts         344
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1568
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10191
;  :mk-clause               1007
;  :num-allocs              9857121
;  :num-checks              1993
;  :propagations            692
;  :quant-instantiations    248
;  :rlimit-count            596265)
(declare-const sys__result@433@07 Int)
(declare-const $t@434@07 $Snap)
(assert (= $t@434@07 ($Snap.combine ($Snap.first $t@434@07) ($Snap.second $t@434@07))))
(declare-const $k@435@07 $Perm)
(assert ($Perm.isReadVar $k@435@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@435@07 $Perm.No) (< $Perm.No $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28729
;  :arith-add-rows          118
;  :arith-assert-diseq      243
;  :arith-assert-lower      803
;  :arith-assert-upper      816
;  :arith-conflicts         344
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         334
;  :arith-pivots            207
;  :binary-propagations     22
;  :conflicts               1569
;  :datatype-accessor-ax    898
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10196
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1994
;  :propagations            693
;  :quant-instantiations    248
;  :rlimit-count            596551)
(declare-const $t@436@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@278@07 $k@426@07) $k@432@07))
    (=
      $t@436@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@435@07)
    (= $t@436@07 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@434@07))))))
(assert (<= $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07)))
(assert (<= (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@434@07)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@434@07))
    ($Snap.second ($Snap.second $t@434@07)))))
(assert (= ($Snap.first ($Snap.second $t@434@07)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28739
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      804
;  :arith-assert-upper      818
;  :arith-conflicts         345
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         335
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1570
;  :datatype-accessor-ax    899
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10204
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1995
;  :propagations            693
;  :quant-instantiations    249
;  :rlimit-count            597091)
(assert (not (= $t@436@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@434@07))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@434@07)))
    ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28745
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      804
;  :arith-assert-upper      819
;  :arith-conflicts         346
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         336
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1571
;  :datatype-accessor-ax    900
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10207
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1996
;  :propagations            693
;  :quant-instantiations    249
;  :rlimit-count            597351)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@434@07)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28750
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      804
;  :arith-assert-upper      820
;  :arith-conflicts         347
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         337
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1572
;  :datatype-accessor-ax    901
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10209
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1997
;  :propagations            693
;  :quant-instantiations    249
;  :rlimit-count            597576)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28756
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      804
;  :arith-assert-upper      821
;  :arith-conflicts         348
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         338
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1573
;  :datatype-accessor-ax    902
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10212
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1998
;  :propagations            693
;  :quant-instantiations    249
;  :rlimit-count            597843)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28763
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      806
;  :arith-assert-upper      823
;  :arith-conflicts         349
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         339
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1574
;  :datatype-accessor-ax    903
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10219
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              1999
;  :propagations            693
;  :quant-instantiations    251
;  :rlimit-count            598220)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28769
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      806
;  :arith-assert-upper      824
;  :arith-conflicts         350
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         340
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1575
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10222
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2000
;  :propagations            693
;  :quant-instantiations    251
;  :rlimit-count            598507)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@437@07 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 108 | 0 <= i@437@07 | live]
; [else-branch: 108 | !(0 <= i@437@07) | live]
(push) ; 14
; [then-branch: 108 | 0 <= i@437@07]
(assert (<= 0 i@437@07))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 15
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      809
;  :arith-assert-upper      826
;  :arith-conflicts         351
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         341
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1576
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10231
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2001
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            598994)
(pop) ; 14
(push) ; 14
; [else-branch: 108 | !(0 <= i@437@07)]
(assert (not (<= 0 i@437@07)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 109 | i@437@07 < |First:(Second:(Second:(Second:($t@434@07))))| && 0 <= i@437@07 | live]
; [else-branch: 109 | !(i@437@07 < |First:(Second:(Second:(Second:($t@434@07))))| && 0 <= i@437@07) | live]
(push) ; 14
; [then-branch: 109 | i@437@07 < |First:(Second:(Second:(Second:($t@434@07))))| && 0 <= i@437@07]
(assert (and
  (<
    i@437@07
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
  (<= 0 i@437@07)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 15
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      810
;  :arith-assert-upper      828
;  :arith-conflicts         352
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         342
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10234
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2002
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599199)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@437@07 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      810
;  :arith-assert-upper      828
;  :arith-conflicts         352
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         342
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10234
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2003
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599208)
; [eval] -1
(push) ; 15
; [then-branch: 110 | First:(Second:(Second:(Second:($t@434@07))))[i@437@07] == -1 | live]
; [else-branch: 110 | First:(Second:(Second:(Second:($t@434@07))))[i@437@07] != -1 | live]
(push) ; 16
; [then-branch: 110 | First:(Second:(Second:(Second:($t@434@07))))[i@437@07] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
    i@437@07)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 110 | First:(Second:(Second:(Second:($t@434@07))))[i@437@07] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
      i@437@07)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 17
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      810
;  :arith-assert-upper      829
;  :arith-conflicts         353
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         343
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1578
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10236
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2004
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599470)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= i@437@07 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      243
;  :arith-assert-lower      810
;  :arith-assert-upper      829
;  :arith-conflicts         353
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         343
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1578
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10236
;  :mk-clause               1009
;  :num-allocs              9857121
;  :num-checks              2005
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599479)
(push) ; 17
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@434@07))))[i@437@07] | live]
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@434@07))))[i@437@07]) | live]
(push) ; 18
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@434@07))))[i@437@07]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
    i@437@07)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      244
;  :arith-assert-lower      813
;  :arith-assert-upper      830
;  :arith-conflicts         354
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         344
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1579
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10240
;  :mk-clause               1010
;  :num-allocs              9857121
;  :num-checks              2006
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599689)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= i@437@07 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      244
;  :arith-assert-lower      813
;  :arith-assert-upper      830
;  :arith-conflicts         354
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         344
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1579
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10240
;  :mk-clause               1010
;  :num-allocs              9857121
;  :num-checks              2007
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599698)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 19
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28777
;  :arith-add-rows          119
;  :arith-assert-diseq      244
;  :arith-assert-lower      813
;  :arith-assert-upper      831
;  :arith-conflicts         355
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         345
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1580
;  :datatype-accessor-ax    905
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              933
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10241
;  :mk-clause               1010
;  :num-allocs              9857121
;  :num-checks              2008
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            599794)
(pop) ; 18
(push) ; 18
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@434@07))))[i@437@07])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
      i@437@07))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 109 | !(i@437@07 < |First:(Second:(Second:(Second:($t@434@07))))| && 0 <= i@437@07)]
(assert (not
  (and
    (<
      i@437@07
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
    (<= 0 i@437@07))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@437@07 Int)) (!
  (implies
    (and
      (<
        i@437@07
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))
      (<= 0 i@437@07))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
          i@437@07)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
            i@437@07)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
            i@437@07)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))
    i@437@07))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28782
;  :arith-add-rows          119
;  :arith-assert-diseq      244
;  :arith-assert-lower      813
;  :arith-assert-upper      832
;  :arith-conflicts         356
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         346
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1581
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10244
;  :mk-clause               1010
;  :num-allocs              9857121
;  :num-checks              2009
;  :propagations            693
;  :quant-instantiations    253
;  :rlimit-count            600467)
(declare-const $k@438@07 $Perm)
(assert ($Perm.isReadVar $k@438@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@438@07 $Perm.No) (< $Perm.No $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28782
;  :arith-add-rows          119
;  :arith-assert-diseq      245
;  :arith-assert-lower      815
;  :arith-assert-upper      833
;  :arith-conflicts         356
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         346
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1582
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10248
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2010
;  :propagations            694
;  :quant-instantiations    253
;  :rlimit-count            600666)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28782
;  :arith-add-rows          119
;  :arith-assert-diseq      245
;  :arith-assert-lower      815
;  :arith-assert-upper      833
;  :arith-conflicts         356
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         346
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1582
;  :datatype-accessor-ax    906
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10248
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2011
;  :propagations            694
;  :quant-instantiations    253
;  :rlimit-count            600685)
(declare-const $t@439@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@274@07 $k@428@07))
    (=
      $t@439@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
  (implies
    (< $Perm.No $k@438@07)
    (=
      $t@439@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))
(assert (<= $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07)))
(assert (<= (+ (- $k@274@07 $k@428@07) $k@438@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28792
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      835
;  :arith-conflicts         357
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         347
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10256
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2012
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601289)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28792
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      835
;  :arith-conflicts         357
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         347
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10256
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2013
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601308)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28792
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      836
;  :arith-conflicts         358
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         348
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1584
;  :datatype-accessor-ax    907
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10257
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2014
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601386)
(assert (not (= $t@439@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28798
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      837
;  :arith-conflicts         359
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         349
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1585
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10260
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2015
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601726)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28798
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      837
;  :arith-conflicts         359
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         349
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1585
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10260
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2016
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601745)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28798
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      838
;  :arith-conflicts         360
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         350
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1586
;  :datatype-accessor-ax    908
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10261
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2017
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            601823)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28803
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      839
;  :arith-conflicts         361
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         351
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1587
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10263
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2018
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602128)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28803
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      839
;  :arith-conflicts         361
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         351
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1587
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10263
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2019
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602147)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28803
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      840
;  :arith-conflicts         362
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         352
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1588
;  :datatype-accessor-ax    909
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10264
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2020
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602225)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28808
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      841
;  :arith-conflicts         363
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         353
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1589
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10266
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2021
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602540)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28808
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      841
;  :arith-conflicts         363
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         353
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1589
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10266
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2022
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602559)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28808
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      842
;  :arith-conflicts         364
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         354
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1590
;  :datatype-accessor-ax    910
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10267
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2023
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602637)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28813
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      843
;  :arith-conflicts         365
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         355
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1591
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10269
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2024
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602962)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28813
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      843
;  :arith-conflicts         365
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         355
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1591
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10269
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2025
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            602981)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28813
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      844
;  :arith-conflicts         366
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         356
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1592
;  :datatype-accessor-ax    911
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10270
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2026
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603059)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28818
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      845
;  :arith-conflicts         367
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         357
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10272
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2027
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603394)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28818
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      845
;  :arith-conflicts         367
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         357
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10272
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2028
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603413)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28818
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      846
;  :arith-conflicts         368
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         358
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1594
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10273
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2029
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603491)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28823
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      847
;  :arith-conflicts         369
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         359
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10275
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2030
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603836)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28823
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      847
;  :arith-conflicts         369
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         359
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10275
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2031
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603855)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28823
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      848
;  :arith-conflicts         370
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         360
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1596
;  :datatype-accessor-ax    913
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10276
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2032
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            603933)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28828
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      849
;  :arith-conflicts         371
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         361
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1597
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10278
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2033
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604288)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28828
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      849
;  :arith-conflicts         371
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         361
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1597
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10278
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2034
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604307)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28828
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      850
;  :arith-conflicts         372
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         362
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1598
;  :datatype-accessor-ax    914
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10279
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2035
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604385)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28833
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      851
;  :arith-conflicts         373
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         363
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1599
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10281
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2036
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604750)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28833
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      851
;  :arith-conflicts         373
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         363
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1599
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10281
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2037
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604769)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28833
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      852
;  :arith-conflicts         374
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         364
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1600
;  :datatype-accessor-ax    915
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10282
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2038
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            604847)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28838
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      853
;  :arith-conflicts         375
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         365
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1601
;  :datatype-accessor-ax    916
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10284
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2039
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605222)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28838
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      853
;  :arith-conflicts         375
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         365
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1601
;  :datatype-accessor-ax    916
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10284
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2040
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605241)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28838
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      854
;  :arith-conflicts         376
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         366
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1602
;  :datatype-accessor-ax    916
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10285
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2041
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605319)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28843
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      855
;  :arith-conflicts         377
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         367
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1603
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10287
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2042
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605704)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28843
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      855
;  :arith-conflicts         377
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         367
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1603
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10287
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2043
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605723)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28843
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      856
;  :arith-conflicts         378
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         368
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1604
;  :datatype-accessor-ax    917
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10288
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2044
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            605801)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28848
;  :arith-add-rows          120
;  :arith-assert-diseq      245
;  :arith-assert-lower      816
;  :arith-assert-upper      857
;  :arith-conflicts         379
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         369
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1605
;  :datatype-accessor-ax    918
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10290
;  :mk-clause               1012
;  :num-allocs              9857121
;  :num-checks              2045
;  :propagations            694
;  :quant-instantiations    254
;  :rlimit-count            606196)
(declare-const $k@440@07 $Perm)
(assert ($Perm.isReadVar $k@440@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@440@07 $Perm.No) (< $Perm.No $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28848
;  :arith-add-rows          120
;  :arith-assert-diseq      246
;  :arith-assert-lower      818
;  :arith-assert-upper      858
;  :arith-conflicts         379
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         369
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1606
;  :datatype-accessor-ax    918
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10294
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2046
;  :propagations            695
;  :quant-instantiations    254
;  :rlimit-count            606394)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28848
;  :arith-add-rows          120
;  :arith-assert-diseq      246
;  :arith-assert-lower      818
;  :arith-assert-upper      858
;  :arith-conflicts         379
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         369
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1606
;  :datatype-accessor-ax    918
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10294
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2047
;  :propagations            695
;  :quant-instantiations    254
;  :rlimit-count            606413)
(declare-const $t@441@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@275@07 $k@429@07))
    (=
      $t@441@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@440@07)
    (=
      $t@441@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07)))
(assert (<= (+ (- $k@275@07 $k@429@07) $k@440@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28858
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      860
;  :arith-conflicts         380
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         370
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1607
;  :datatype-accessor-ax    919
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10302
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2048
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            607369)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28858
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      860
;  :arith-conflicts         380
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         370
;  :arith-pivots            208
;  :binary-propagations     22
;  :conflicts               1607
;  :datatype-accessor-ax    919
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10302
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2049
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            607388)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28858
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      861
;  :arith-conflicts         381
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         371
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1608
;  :datatype-accessor-ax    919
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10303
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2050
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            607472)
(assert (not (= $t@441@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28864
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      862
;  :arith-conflicts         382
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         372
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1609
;  :datatype-accessor-ax    920
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10306
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2051
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            607932)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28864
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      862
;  :arith-conflicts         382
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         372
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1609
;  :datatype-accessor-ax    920
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10306
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2052
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            607951)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28864
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      863
;  :arith-conflicts         383
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         373
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1610
;  :datatype-accessor-ax    920
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10307
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2053
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            608031)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28869
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      864
;  :arith-conflicts         384
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         374
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1611
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10309
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2054
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            608456)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28869
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      864
;  :arith-conflicts         384
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         374
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1611
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10309
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2055
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            608475)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28869
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      865
;  :arith-conflicts         385
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         375
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1612
;  :datatype-accessor-ax    921
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10310
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2056
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            608555)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28874
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      866
;  :arith-conflicts         386
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         376
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1613
;  :datatype-accessor-ax    922
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10312
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2057
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            608990)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28874
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      866
;  :arith-conflicts         386
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         376
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1613
;  :datatype-accessor-ax    922
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10312
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2058
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            609009)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28874
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      867
;  :arith-conflicts         387
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         377
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1614
;  :datatype-accessor-ax    922
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10313
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2059
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            609089)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28879
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      868
;  :arith-conflicts         388
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         378
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1615
;  :datatype-accessor-ax    923
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10315
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2060
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            609534)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28879
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      868
;  :arith-conflicts         388
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         378
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1615
;  :datatype-accessor-ax    923
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10315
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2061
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            609553)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28879
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      869
;  :arith-conflicts         389
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         379
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1616
;  :datatype-accessor-ax    923
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10316
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2062
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            609633)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28884
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      870
;  :arith-conflicts         390
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         380
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1617
;  :datatype-accessor-ax    924
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10318
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2063
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610088)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28884
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      870
;  :arith-conflicts         390
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         380
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1617
;  :datatype-accessor-ax    924
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10318
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2064
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610107)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28884
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      871
;  :arith-conflicts         391
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         381
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1618
;  :datatype-accessor-ax    924
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10319
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2065
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610187)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28889
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      872
;  :arith-conflicts         392
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         382
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1619
;  :datatype-accessor-ax    925
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10321
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2066
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610652)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28889
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      872
;  :arith-conflicts         392
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         382
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1619
;  :datatype-accessor-ax    925
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10321
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2067
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610671)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28889
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      873
;  :arith-conflicts         393
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         383
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1620
;  :datatype-accessor-ax    925
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10322
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2068
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            610751)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28894
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      874
;  :arith-conflicts         394
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         384
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1621
;  :datatype-accessor-ax    926
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10324
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2069
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            611226)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28894
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      874
;  :arith-conflicts         394
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         384
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1621
;  :datatype-accessor-ax    926
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10324
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2070
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            611245)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@275@07 $k@429@07) $k@440@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28894
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      875
;  :arith-conflicts         395
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         385
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    926
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10325
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2071
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            611325)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28899
;  :arith-add-rows          121
;  :arith-assert-diseq      246
;  :arith-assert-lower      819
;  :arith-assert-upper      876
;  :arith-conflicts         396
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         386
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1623
;  :datatype-accessor-ax    927
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10327
;  :mk-clause               1014
;  :num-allocs              9857121
;  :num-checks              2072
;  :propagations            695
;  :quant-instantiations    255
;  :rlimit-count            611810)
(declare-const $k@442@07 $Perm)
(assert ($Perm.isReadVar $k@442@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@442@07 $Perm.No) (< $Perm.No $k@442@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28899
;  :arith-add-rows          121
;  :arith-assert-diseq      247
;  :arith-assert-lower      821
;  :arith-assert-upper      877
;  :arith-conflicts         396
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         386
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1624
;  :datatype-accessor-ax    927
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10331
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2073
;  :propagations            696
;  :quant-instantiations    255
;  :rlimit-count            612009)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28899
;  :arith-add-rows          121
;  :arith-assert-diseq      247
;  :arith-assert-lower      821
;  :arith-assert-upper      877
;  :arith-conflicts         396
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         386
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1624
;  :datatype-accessor-ax    927
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10331
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2074
;  :propagations            696
;  :quant-instantiations    255
;  :rlimit-count            612028)
(declare-const $t@443@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@276@07 $k@430@07))
    (=
      $t@443@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@442@07)
    (=
      $t@443@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@276@07 $k@430@07) $k@442@07)))
(assert (<= (+ (- $k@276@07 $k@430@07) $k@442@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@276@07 $k@430@07) $k@442@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28909
;  :arith-add-rows          121
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      879
;  :arith-conflicts         397
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         387
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1625
;  :datatype-accessor-ax    928
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10339
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2075
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            612853)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28909
;  :arith-add-rows          121
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      879
;  :arith-conflicts         397
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         387
;  :arith-pivots            209
;  :binary-propagations     22
;  :conflicts               1625
;  :datatype-accessor-ax    928
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10339
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2076
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            612872)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@276@07 $k@430@07) $k@442@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28909
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      880
;  :arith-conflicts         398
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         388
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1626
;  :datatype-accessor-ax    928
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10340
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2077
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            612979)
(assert (not (= $t@443@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28914
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      881
;  :arith-conflicts         399
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         389
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1627
;  :datatype-accessor-ax    929
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10342
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2078
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            613502)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28914
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      881
;  :arith-conflicts         399
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         389
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1627
;  :datatype-accessor-ax    929
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10342
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2079
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            613521)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@276@07 $k@430@07) $k@442@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28914
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      882
;  :arith-conflicts         400
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         390
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1628
;  :datatype-accessor-ax    929
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10343
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2080
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            613609)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28919
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      883
;  :arith-conflicts         401
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         391
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1629
;  :datatype-accessor-ax    930
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10345
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2081
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            614124)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28919
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      883
;  :arith-conflicts         401
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         391
;  :arith-pivots            212
;  :binary-propagations     22
;  :conflicts               1629
;  :datatype-accessor-ax    930
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10345
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2082
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            614143)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@276@07 $k@430@07) $k@442@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28919
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      884
;  :arith-conflicts         402
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         392
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1630
;  :datatype-accessor-ax    930
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10346
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2083
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            614231)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28924
;  :arith-add-rows          122
;  :arith-assert-diseq      247
;  :arith-assert-lower      822
;  :arith-assert-upper      885
;  :arith-conflicts         403
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         393
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1631
;  :datatype-accessor-ax    931
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10348
;  :mk-clause               1016
;  :num-allocs              9857121
;  :num-checks              2084
;  :propagations            696
;  :quant-instantiations    256
;  :rlimit-count            614756)
(declare-const $k@444@07 $Perm)
(assert ($Perm.isReadVar $k@444@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@444@07 $Perm.No) (< $Perm.No $k@444@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28924
;  :arith-add-rows          122
;  :arith-assert-diseq      248
;  :arith-assert-lower      824
;  :arith-assert-upper      886
;  :arith-conflicts         403
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         393
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1632
;  :datatype-accessor-ax    931
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10352
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2085
;  :propagations            697
;  :quant-instantiations    256
;  :rlimit-count            614955)
(set-option :timeout 10)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28924
;  :arith-add-rows          122
;  :arith-assert-diseq      248
;  :arith-assert-lower      824
;  :arith-assert-upper      886
;  :arith-conflicts         403
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         393
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1632
;  :datatype-accessor-ax    931
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10352
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2086
;  :propagations            697
;  :quant-instantiations    256
;  :rlimit-count            614974)
(declare-const $t@445@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@277@07 $k@431@07))
    (=
      $t@445@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@444@07)
    (=
      $t@445@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@277@07 $k@431@07) $k@444@07)))
(assert (<= (+ (- $k@277@07 $k@431@07) $k@444@07) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@277@07 $k@431@07) $k@444@07))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28934
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      888
;  :arith-conflicts         404
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         394
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1633
;  :datatype-accessor-ax    932
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10360
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2087
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616174)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28934
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      888
;  :arith-conflicts         404
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         394
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1633
;  :datatype-accessor-ax    932
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10360
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2088
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616193)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@277@07 $k@431@07) $k@444@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28934
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      889
;  :arith-conflicts         405
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         395
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1634
;  :datatype-accessor-ax    932
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10361
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2089
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616271)
(assert (not (= $t@445@07 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28940
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      890
;  :arith-conflicts         406
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         396
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1635
;  :datatype-accessor-ax    933
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10364
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2090
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616861)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28940
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      890
;  :arith-conflicts         406
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         396
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1635
;  :datatype-accessor-ax    933
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10364
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2091
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616880)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@277@07 $k@431@07) $k@444@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28940
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      891
;  :arith-conflicts         407
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         397
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1636
;  :datatype-accessor-ax    933
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10365
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2092
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            616958)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28945
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      892
;  :arith-conflicts         408
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         398
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1637
;  :datatype-accessor-ax    934
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10367
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2093
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            617513)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@436@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28945
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      892
;  :arith-conflicts         408
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         398
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1637
;  :datatype-accessor-ax    934
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10367
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2094
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            617532)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28945
;  :arith-add-rows          123
;  :arith-assert-diseq      248
;  :arith-assert-lower      825
;  :arith-assert-upper      893
;  :arith-conflicts         409
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         399
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1638
;  :datatype-accessor-ax    934
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10368
;  :mk-clause               1018
;  :num-allocs              9857121
;  :num-checks              2095
;  :propagations            697
;  :quant-instantiations    257
;  :rlimit-count            617610)
(declare-const $k@446@07 $Perm)
(assert ($Perm.isReadVar $k@446@07 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@446@07 $Perm.No) (< $Perm.No $k@446@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28945
;  :arith-add-rows          123
;  :arith-assert-diseq      249
;  :arith-assert-lower      827
;  :arith-assert-upper      894
;  :arith-conflicts         409
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         399
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1639
;  :datatype-accessor-ax    934
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10372
;  :mk-clause               1020
;  :num-allocs              9857121
;  :num-checks              2096
;  :propagations            698
;  :quant-instantiations    257
;  :rlimit-count            617808)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  $t@439@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28945
;  :arith-add-rows          123
;  :arith-assert-diseq      249
;  :arith-assert-lower      827
;  :arith-assert-upper      894
;  :arith-conflicts         409
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         399
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1639
;  :datatype-accessor-ax    934
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10372
;  :mk-clause               1020
;  :num-allocs              9857121
;  :num-checks              2097
;  :propagations            698
;  :quant-instantiations    257
;  :rlimit-count            617830)
(declare-const $t@447@07 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07))
    (= $t@447@07 $t@436@07))
  (implies
    (< $Perm.No $k@446@07)
    (=
      $t@447@07
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07)))
(assert (<=
  (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28953
;  :arith-add-rows          126
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      896
;  :arith-conflicts         410
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         400
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1640
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10381
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2098
;  :propagations            698
;  :quant-instantiations    258
;  :rlimit-count            618802)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@447@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28954
;  :arith-add-rows          127
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      897
;  :arith-conflicts         411
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         401
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1641
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10382
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2099
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            618897)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28954
;  :arith-add-rows          127
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      898
;  :arith-conflicts         412
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         402
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1642
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10383
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2100
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            618975)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))
  $t@439@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28954
;  :arith-add-rows          127
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      898
;  :arith-conflicts         412
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         402
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1642
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10383
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2101
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            618997)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28954
;  :arith-add-rows          128
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      899
;  :arith-conflicts         413
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         403
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1643
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10384
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2102
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            619118)
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28954
;  :arith-add-rows          128
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      900
;  :arith-conflicts         414
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         404
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1644
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10385
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2103
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            619219)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@434@07))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 12
(assert (not (< $Perm.No (+ (+ (- (- $k@278@07 $k@426@07) $k@432@07) $k@435@07) $k@446@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28956
;  :arith-add-rows          128
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      901
;  :arith-conflicts         415
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         405
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1645
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10387
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2104
;  :propagations            699
;  :quant-instantiations    258
;  :rlimit-count            619738)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@271@07)) $t@447@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28957
;  :arith-add-rows          129
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      902
;  :arith-conflicts         416
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         406
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               1646
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10388
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2105
;  :propagations            700
;  :quant-instantiations    258
;  :rlimit-count            619833)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@274@07 $k@428@07) $k@438@07))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28957
;  :arith-add-rows          129
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      903
;  :arith-conflicts         417
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         407
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               1647
;  :datatype-accessor-ax    935
;  :datatype-constructor-ax 7891
;  :datatype-occurs-check   1496
;  :datatype-splits         6511
;  :decisions               7618
;  :del-clause              934
;  :final-checks            250
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.89
;  :mk-bool-var             10389
;  :mk-clause               1021
;  :num-allocs              9857121
;  :num-checks              2106
;  :propagations            700
;  :quant-instantiations    258
;  :rlimit-count            619911)
(assert (=
  $t@439@07
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@271@07))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_88__128 := __flatten_89__129.Rng_seed_i % __flatten_92__132
; [eval] __flatten_89__129.Rng_seed_i % __flatten_92__132
(set-option :timeout 10)
(push) ; 12
(assert (not (= $t@439@07 __flatten_89__129@424@07)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29508
;  :arith-add-rows          129
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      903
;  :arith-conflicts         417
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         407
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               1648
;  :datatype-accessor-ax    939
;  :datatype-constructor-ax 8068
;  :datatype-occurs-check   1511
;  :datatype-splits         6616
;  :decisions               7792
;  :del-clause              958
;  :final-checks            253
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             10495
;  :mk-clause               1022
;  :num-allocs              10340673
;  :num-checks              2108
;  :propagations            703
;  :quant-instantiations    258
;  :rlimit-count            623103)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= sys__result@433@07 0))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29872
;  :arith-add-rows          129
;  :arith-assert-diseq      249
;  :arith-assert-lower      828
;  :arith-assert-upper      903
;  :arith-conflicts         417
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         407
;  :arith-pivots            218
;  :binary-propagations     22
;  :conflicts               1648
;  :datatype-accessor-ax    943
;  :datatype-constructor-ax 8175
;  :datatype-occurs-check   1526
;  :datatype-splits         6721
;  :decisions               7896
;  :del-clause              958
;  :final-checks            256
;  :max-generation          2
;  :max-memory              5.99
;  :memory                  5.99
;  :mk-bool-var             10600
;  :mk-clause               1022
;  :num-allocs              10340673
;  :num-checks              2109
;  :propagations            707
;  :quant-instantiations    258
;  :rlimit-count            625392
;  :time                    0.00)
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
