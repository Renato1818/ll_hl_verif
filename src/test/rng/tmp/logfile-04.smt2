(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-16 14:26:43
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-const class_Rng<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_CASR<TYPE> TYPE)
(declare-const class_LFSR<TYPE> TYPE)
(declare-const class_Combinate<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [Rng_m: Ref]
(declare-fun $FVF.domain_Rng_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Rng_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Rng_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Rng_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Rng_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Rng_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [CASR_m: Ref]
(declare-fun $FVF.domain_CASR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_CASR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_CASR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_CASR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_CASR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_CASR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [LFSR_m: Ref]
(declare-fun $FVF.domain_LFSR_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_LFSR_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_LFSR_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_LFSR_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_LFSR_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_LFSR_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Combinate_m: Ref]
(declare-fun $FVF.domain_Combinate_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Combinate_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Combinate_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Combinate_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Combinate_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Combinate_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun CASR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun CASR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun LFSR_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Combinate_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_Rng<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_CASR<TYPE> class_LFSR<TYPE> class_Combinate<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_Rng<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_CASR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_LFSR<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Combinate<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [Rng_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Rng_m vs) ($FVF.domain_Rng_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Rng_m vs))
            (= ($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x)))
          :pattern (($FVF.lookup_Rng_m vs x) ($FVF.lookup_Rng_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Rng_m pm r))
    :pattern ($FVF.perm_Rng_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Rng_m f r) true)
    :pattern ($FVF.loc_Rng_m f r))))
; /field_value_functions_axioms.smt2 [CASR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_CASR_m vs) ($FVF.domain_CASR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_CASR_m vs))
            (= ($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x)))
          :pattern (($FVF.lookup_CASR_m vs x) ($FVF.lookup_CASR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_CASR_m pm r))
    :pattern ($FVF.perm_CASR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_CASR_m f r) true)
    :pattern ($FVF.loc_CASR_m f r))))
; /field_value_functions_axioms.smt2 [LFSR_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_LFSR_m vs) ($FVF.domain_LFSR_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_LFSR_m vs))
            (= ($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x)))
          :pattern (($FVF.lookup_LFSR_m vs x) ($FVF.lookup_LFSR_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_LFSR_m pm r))
    :pattern ($FVF.perm_LFSR_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_LFSR_m f r) true)
    :pattern ($FVF.loc_LFSR_m f r))))
; /field_value_functions_axioms.smt2 [Combinate_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Combinate_m vs) ($FVF.domain_Combinate_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Combinate_m vs))
            (= ($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x)))
          :pattern (($FVF.lookup_Combinate_m vs x) ($FVF.lookup_Combinate_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Combinate_m pm r))
    :pattern ($FVF.perm_Combinate_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Combinate_m f r) true)
    :pattern ($FVF.loc_Combinate_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 6))
    (and
      (and
        (and
          (and
            (and
              (and
                (or
                  (< (Seq_index vals@8@00 0) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 0)))
                (or
                  (< (Seq_index vals@8@00 1) (- 0 1))
                  (<= result@9@00 (Seq_index vals@8@00 1))))
              (or
                (< (Seq_index vals@8@00 2) (- 0 1))
                (<= result@9@00 (Seq_index vals@8@00 2))))
            (or
              (< (Seq_index vals@8@00 3) (- 0 1))
              (<= result@9@00 (Seq_index vals@8@00 3))))
          (or
            (< (Seq_index vals@8@00 4) (- 0 1))
            (<= result@9@00 (Seq_index vals@8@00 4))))
        (or
          (< (Seq_index vals@8@00 5) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 5))))
      (and
        (implies
          (and
            (and
              (and
                (and
                  (and
                    (< (Seq_index vals@8@00 0) (- 0 1))
                    (< (Seq_index vals@8@00 1) (- 0 1)))
                  (< (Seq_index vals@8@00 2) (- 0 1)))
                (< (Seq_index vals@8@00 3) (- 0 1)))
              (< (Seq_index vals@8@00 4) (- 0 1)))
            (< (Seq_index vals@8@00 5) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (or
              (or
                (or
                  (or
                    (<= (- 0 1) (Seq_index vals@8@00 0))
                    (<= (- 0 1) (Seq_index vals@8@00 1)))
                  (<= (- 0 1) (Seq_index vals@8@00 2)))
                (<= (- 0 1) (Seq_index vals@8@00 3)))
              (<= (- 0 1) (Seq_index vals@8@00 4)))
            (<= (- 0 1) (Seq_index vals@8@00 5)))
          (or
            (or
              (or
                (or
                  (or
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 0))
                      (= result@9@00 (Seq_index vals@8@00 0)))
                    (and
                      (<= (- 0 1) (Seq_index vals@8@00 1))
                      (= result@9@00 (Seq_index vals@8@00 1))))
                  (and
                    (<= (- 0 1) (Seq_index vals@8@00 2))
                    (= result@9@00 (Seq_index vals@8@00 2))))
                (and
                  (<= (- 0 1) (Seq_index vals@8@00 3))
                  (= result@9@00 (Seq_index vals@8@00 3))))
              (and
                (<= (- 0 1) (Seq_index vals@8@00 4))
                (= result@9@00 (Seq_index vals@8@00 4))))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 5))
              (= result@9@00 (Seq_index vals@8@00 5)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Rng___contract_unsatisfiable__bit__EncodedGlobalVariables_Integer_Integer ----------
(declare-const diz@0@04 $Ref)
(declare-const __globals@1@04 $Ref)
(declare-const __var@2@04 Int)
(declare-const __pos@3@04 Int)
(declare-const sys__result@4@04 Int)
(declare-const diz@5@04 $Ref)
(declare-const __globals@6@04 $Ref)
(declare-const __var@7@04 Int)
(declare-const __pos@8@04 Int)
(declare-const sys__result@9@04 Int)
(push) ; 1
(declare-const $t@10@04 $Snap)
(assert (= $t@10@04 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@5@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.Rng_m, wildcard) && diz.Rng_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.Rng_m, __globals), write) && (true && (true && acc(diz.Rng_m.Main_process_state, write) && |diz.Rng_m.Main_process_state| == 3 && acc(diz.Rng_m.Main_event_state, write) && |diz.Rng_m.Main_event_state| == 6 && (forall i__13: Int :: { diz.Rng_m.Main_process_state[i__13] } 0 <= i__13 && i__13 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__13] == -1 || 0 <= diz.Rng_m.Main_process_state[i__13] && diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|)) && acc(diz.Rng_m.Main_rn, wildcard) && diz.Rng_m.Main_rn != null && acc(diz.Rng_m.Main_rn.Rng_clk, write) && acc(diz.Rng_m.Main_rn.Rng_reset, write) && acc(diz.Rng_m.Main_rn.Rng_loadseed_i, write) && acc(diz.Rng_m.Main_rn.Rng_seed_i, write) && acc(diz.Rng_m.Main_rn.Rng_number_o, write) && acc(diz.Rng_m.Main_rn.Rng_LFSR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_CASR_reg, write) && acc(diz.Rng_m.Main_rn.Rng_result, write) && acc(diz.Rng_m.Main_rn.Rng_i, write) && acc(diz.Rng_m.Main_rn.Rng_aux, write) && acc(diz.Rng_m.Main_rn_casr, wildcard) && diz.Rng_m.Main_rn_casr != null && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_var, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_out, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_CASR_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_plus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_bit_minus, write) && acc(diz.Rng_m.Main_rn_casr.CASR_i, write) && acc(diz.Rng_m.Main_rn_lfsr, wildcard) && diz.Rng_m.Main_rn_lfsr != null && acc(diz.Rng_m.Main_rn_lfsr.LFSR_LFSR_var, write) && acc(diz.Rng_m.Main_rn_lfsr.LFSR_outbit, write) && acc(diz.Rng_m.Main_rn_combinate, wildcard) && diz.Rng_m.Main_rn_combinate != null && acc(diz.Rng_m.Main_rn_combinate.Combinate_i, write) && acc(diz.Rng_m.Main_rn.Rng_m, wildcard) && diz.Rng_m.Main_rn.Rng_m == diz.Rng_m) && diz.Rng_m.Main_rn == diz)
(declare-const $t@11@04 $Snap)
(assert (= $t@11@04 ($Snap.combine ($Snap.first $t@11@04) ($Snap.second $t@11@04))))
(assert (= ($Snap.first $t@11@04) $Snap.unit))
(assert (=
  ($Snap.second $t@11@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@04))
    ($Snap.second ($Snap.second $t@11@04)))))
(declare-const $k@12@04 $Perm)
(assert ($Perm.isReadVar $k@12@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@12@04 $Perm.No) (< $Perm.No $k@12@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             19
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             1
;  :datatype-accessor-ax  3
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           275
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            2
;  :propagations          23
;  :quant-instantiations  1
;  :rlimit-count          114473)
(assert (<= $Perm.No $k@12@04))
(assert (<= $k@12@04 $Perm.Write))
(assert (implies (< $Perm.No $k@12@04) (not (= diz@5@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@11@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@11@04))) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             25
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             2
;  :datatype-accessor-ax  4
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           278
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            3
;  :propagations          23
;  :quant-instantiations  1
;  :rlimit-count          114726
;  :time                  0.00)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@11@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@11@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             31
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             3
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.78
;  :mk-bool-var           281
;  :mk-clause             3
;  :num-allocs            3525731
;  :num-checks            4
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          115010
;  :time                  0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             48
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             4
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           286
;  :mk-clause             3
;  :num-allocs            3645038
;  :num-checks            5
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          115450
;  :time                  0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             54
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   22
;  :conflicts             5
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           288
;  :mk-clause             3
;  :num-allocs            3645038
;  :num-checks            6
;  :propagations          23
;  :quant-instantiations  2
;  :rlimit-count          115699)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             61
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    4
;  :arith-eq-adapter      4
;  :binary-propagations   22
;  :conflicts             6
;  :datatype-accessor-ax  10
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           297
;  :mk-clause             6
;  :num-allocs            3645038
;  :num-checks            7
;  :propagations          24
;  :quant-instantiations  5
;  :rlimit-count          116084)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             67
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    4
;  :arith-eq-adapter      4
;  :binary-propagations   22
;  :conflicts             7
;  :datatype-accessor-ax  11
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           299
;  :mk-clause             6
;  :num-allocs            3645038
;  :num-checks            8
;  :propagations          24
;  :quant-instantiations  5
;  :rlimit-count          116353)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
  $Snap.unit))
; [eval] (forall i__13: Int :: { diz.Rng_m.Main_process_state[i__13] } 0 <= i__13 && i__13 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__13] == -1 || 0 <= diz.Rng_m.Main_process_state[i__13] && diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|)
(declare-const i__13@13@04 Int)
(push) ; 3
; [eval] 0 <= i__13 && i__13 < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i__13] == -1 || 0 <= diz.Rng_m.Main_process_state[i__13] && diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i__13 && i__13 < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i__13
(push) ; 4
; [then-branch: 0 | 0 <= i__13@13@04 | live]
; [else-branch: 0 | !(0 <= i__13@13@04) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i__13@13@04]
(assert (<= 0 i__13@13@04))
; [eval] i__13 < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    10
;  :arith-assert-upper    5
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :conflicts             8
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           310
;  :mk-clause             9
;  :num-allocs            3645038
;  :num-checks            9
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          116845)
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i__13@13@04)]
(assert (not (<= 0 i__13@13@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i__13@13@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))| && 0 <= i__13@13@04 | live]
; [else-branch: 1 | !(i__13@13@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))| && 0 <= i__13@13@04) | live]
(push) ; 5
; [then-branch: 1 | i__13@13@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))| && 0 <= i__13@13@04]
(assert (and
  (<
    i__13@13@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
  (<= 0 i__13@13@04)))
; [eval] diz.Rng_m.Main_process_state[i__13] == -1 || 0 <= diz.Rng_m.Main_process_state[i__13] && diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__13] == -1
; [eval] diz.Rng_m.Main_process_state[i__13]
(push) ; 6
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :conflicts             9
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           312
;  :mk-clause             9
;  :num-allocs            3645038
;  :num-checks            10
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117002)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i__13@13@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :conflicts             9
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           312
;  :mk-clause             9
;  :num-allocs            3645038
;  :num-checks            11
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117011)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
    i__13@13@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
      i__13@13@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i__13] && diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i__13]
; [eval] diz.Rng_m.Main_process_state[i__13]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :conflicts             10
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           313
;  :mk-clause             9
;  :num-allocs            3645038
;  :num-checks            12
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117261)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__13@13@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :binary-propagations   22
;  :conflicts             10
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           313
;  :mk-clause             9
;  :num-allocs            3645038
;  :num-checks            13
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117270)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
    i__13@13@04)))
; [eval] diz.Rng_m.Main_process_state[i__13] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i__13]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :binary-propagations   22
;  :conflicts             11
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           316
;  :mk-clause             10
;  :num-allocs            3645038
;  :num-checks            14
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117463)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__13@13@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :binary-propagations   22
;  :conflicts             11
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           316
;  :mk-clause             10
;  :num-allocs            3645038
;  :num-checks            15
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117472)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :binary-propagations   22
;  :conflicts             12
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           316
;  :mk-clause             10
;  :num-allocs            3645038
;  :num-checks            16
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          117520)
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))[i__13@13@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
      i__13@13@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i__13@13@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@11@04)))))))| && 0 <= i__13@13@04)]
(assert (not
  (and
    (<
      i__13@13@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
    (<= 0 i__13@13@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__13@13@04 Int)) (!
  (implies
    (and
      (<
        i__13@13@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))
      (<= 0 i__13@13@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
          i__13@13@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
            i__13@13@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
            i__13@13@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))
    i__13@13@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             80
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :binary-propagations   22
;  :conflicts             13
;  :datatype-accessor-ax  13
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           318
;  :mk-clause             10
;  :num-allocs            3645038
;  :num-checks            17
;  :propagations          25
;  :quant-instantiations  8
;  :rlimit-count          118235)
(declare-const $k@14@04 $Perm)
(assert ($Perm.isReadVar $k@14@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@14@04 $Perm.No) (< $Perm.No $k@14@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             80
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    7
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             14
;  :datatype-accessor-ax  13
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           322
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            18
;  :propagations          26
;  :quant-instantiations  8
;  :rlimit-count          118433)
(assert (<= $Perm.No $k@14@04))
(assert (<= $k@14@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@14@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             86
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             15
;  :datatype-accessor-ax  14
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           325
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            19
;  :propagations          26
;  :quant-instantiations  8
;  :rlimit-count          118786)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             86
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             16
;  :datatype-accessor-ax  14
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           325
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            20
;  :propagations          26
;  :quant-instantiations  8
;  :rlimit-count          118834)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             92
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             17
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           328
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            21
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119220)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             92
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             18
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           328
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            22
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119268)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             97
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             19
;  :datatype-accessor-ax  16
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           329
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            23
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119555)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             97
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             20
;  :datatype-accessor-ax  16
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           329
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            24
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119603)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             102
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             21
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           330
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            25
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119900)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             102
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             22
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           330
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            26
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          119948)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             23
;  :datatype-accessor-ax  18
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           331
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            27
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          120255)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             24
;  :datatype-accessor-ax  18
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           331
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            28
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          120303)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             112
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             25
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           332
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            29
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          120620)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             112
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             26
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           332
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            30
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          120668)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             117
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             27
;  :datatype-accessor-ax  20
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           333
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            31
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          120995)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             117
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             28
;  :datatype-accessor-ax  20
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           333
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            32
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          121043)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             122
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             29
;  :datatype-accessor-ax  21
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           334
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            33
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          121380)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             122
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             30
;  :datatype-accessor-ax  21
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           334
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            34
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          121428)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             127
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             31
;  :datatype-accessor-ax  22
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           335
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            35
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          121775)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             127
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             32
;  :datatype-accessor-ax  22
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           335
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            36
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          121823)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             132
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             33
;  :datatype-accessor-ax  23
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           336
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            37
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          122180)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             132
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             34
;  :datatype-accessor-ax  23
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           336
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            38
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          122228)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             137
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             35
;  :datatype-accessor-ax  24
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           337
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            39
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          122595)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             137
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             36
;  :datatype-accessor-ax  24
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.88
;  :mk-bool-var           337
;  :mk-clause             12
;  :num-allocs            3645038
;  :num-checks            40
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          122643)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             142
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :binary-propagations   22
;  :conflicts             37
;  :datatype-accessor-ax  25
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           338
;  :mk-clause             12
;  :num-allocs            3770068
;  :num-checks            41
;  :propagations          26
;  :quant-instantiations  9
;  :rlimit-count          123020)
(declare-const $k@15@04 $Perm)
(assert ($Perm.isReadVar $k@15@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@15@04 $Perm.No) (< $Perm.No $k@15@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             142
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    9
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             38
;  :datatype-accessor-ax  25
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           342
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            42
;  :propagations          27
;  :quant-instantiations  9
;  :rlimit-count          123219)
(assert (<= $Perm.No $k@15@04))
(assert (<= $k@15@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@15@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             148
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             39
;  :datatype-accessor-ax  26
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           345
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            43
;  :propagations          27
;  :quant-instantiations  9
;  :rlimit-count          123692)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             148
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             40
;  :datatype-accessor-ax  26
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           345
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            44
;  :propagations          27
;  :quant-instantiations  9
;  :rlimit-count          123740)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             154
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             41
;  :datatype-accessor-ax  27
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           348
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            45
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          124264)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             154
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             42
;  :datatype-accessor-ax  27
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           348
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            46
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          124312)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             159
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             43
;  :datatype-accessor-ax  28
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           349
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            47
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          124719)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             159
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             44
;  :datatype-accessor-ax  28
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           349
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            48
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          124767)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             164
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             45
;  :datatype-accessor-ax  29
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           350
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            49
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          125184)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             164
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             46
;  :datatype-accessor-ax  29
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           350
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            50
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          125232)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             169
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             47
;  :datatype-accessor-ax  30
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           351
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            51
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          125659)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             169
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             48
;  :datatype-accessor-ax  30
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           351
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            52
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          125707)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             174
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             49
;  :datatype-accessor-ax  31
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           352
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            53
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          126144)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             174
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             50
;  :datatype-accessor-ax  31
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           352
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            54
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          126192)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             179
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             51
;  :datatype-accessor-ax  32
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           353
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            55
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          126639)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             179
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             52
;  :datatype-accessor-ax  32
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           353
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            56
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          126687)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             184
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             53
;  :datatype-accessor-ax  33
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           354
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            57
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          127144)
(push) ; 3
(assert (not (< $Perm.No $k@15@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             184
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             54
;  :datatype-accessor-ax  33
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           354
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            58
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          127192)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             189
;  :arith-assert-diseq    6
;  :arith-assert-lower    18
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :binary-propagations   22
;  :conflicts             55
;  :datatype-accessor-ax  34
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           355
;  :mk-clause             14
;  :num-allocs            3770068
;  :num-checks            59
;  :propagations          27
;  :quant-instantiations  10
;  :rlimit-count          127659)
(declare-const $k@16@04 $Perm)
(assert ($Perm.isReadVar $k@16@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@16@04 $Perm.No) (< $Perm.No $k@16@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             189
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    11
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             56
;  :datatype-accessor-ax  34
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           359
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            60
;  :propagations          28
;  :quant-instantiations  10
;  :rlimit-count          127858)
(assert (<= $Perm.No $k@16@04))
(assert (<= $k@16@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             195
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             57
;  :datatype-accessor-ax  35
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           362
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            61
;  :propagations          28
;  :quant-instantiations  10
;  :rlimit-count          128421)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             195
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             58
;  :datatype-accessor-ax  35
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           362
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            62
;  :propagations          28
;  :quant-instantiations  10
;  :rlimit-count          128469)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             201
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             59
;  :datatype-accessor-ax  36
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           365
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            63
;  :propagations          28
;  :quant-instantiations  11
;  :rlimit-count          129077)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             201
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             60
;  :datatype-accessor-ax  36
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           365
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            64
;  :propagations          28
;  :quant-instantiations  11
;  :rlimit-count          129125)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             206
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             61
;  :datatype-accessor-ax  37
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           366
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            65
;  :propagations          28
;  :quant-instantiations  11
;  :rlimit-count          129622)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             206
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             62
;  :datatype-accessor-ax  37
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           366
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            66
;  :propagations          28
;  :quant-instantiations  11
;  :rlimit-count          129670)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             211
;  :arith-assert-diseq    7
;  :arith-assert-lower    20
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :binary-propagations   22
;  :conflicts             63
;  :datatype-accessor-ax  38
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           367
;  :mk-clause             16
;  :num-allocs            3770068
;  :num-checks            67
;  :propagations          28
;  :quant-instantiations  11
;  :rlimit-count          130177)
(declare-const $k@17@04 $Perm)
(assert ($Perm.isReadVar $k@17@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@17@04 $Perm.No) (< $Perm.No $k@17@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             211
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    13
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             64
;  :datatype-accessor-ax  38
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           371
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            68
;  :propagations          29
;  :quant-instantiations  11
;  :rlimit-count          130375)
(assert (<= $Perm.No $k@17@04))
(assert (<= $k@17@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@17@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             217
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             65
;  :datatype-accessor-ax  39
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           374
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            69
;  :propagations          29
;  :quant-instantiations  11
;  :rlimit-count          130978)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             217
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             66
;  :datatype-accessor-ax  39
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           374
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            70
;  :propagations          29
;  :quant-instantiations  11
;  :rlimit-count          131026)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             223
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             67
;  :datatype-accessor-ax  40
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           377
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            71
;  :propagations          29
;  :quant-instantiations  12
;  :rlimit-count          131664)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             223
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             68
;  :datatype-accessor-ax  40
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           377
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            72
;  :propagations          29
;  :quant-instantiations  12
;  :rlimit-count          131712)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             228
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             69
;  :datatype-accessor-ax  41
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           378
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            73
;  :propagations          29
;  :quant-instantiations  12
;  :rlimit-count          132249)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             228
;  :arith-assert-diseq    8
;  :arith-assert-lower    22
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :binary-propagations   22
;  :conflicts             70
;  :datatype-accessor-ax  41
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           378
;  :mk-clause             18
;  :num-allocs            3770068
;  :num-checks            74
;  :propagations          29
;  :quant-instantiations  12
;  :rlimit-count          132297)
(declare-const $k@18@04 $Perm)
(assert ($Perm.isReadVar $k@18@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@18@04 $Perm.No) (< $Perm.No $k@18@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             228
;  :arith-assert-diseq    9
;  :arith-assert-lower    24
;  :arith-assert-upper    15
;  :arith-eq-adapter      12
;  :binary-propagations   22
;  :conflicts             71
;  :datatype-accessor-ax  41
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.11
;  :memory                3.98
;  :mk-bool-var           382
;  :mk-clause             20
;  :num-allocs            3770068
;  :num-checks            75
;  :propagations          30
;  :quant-instantiations  12
;  :rlimit-count          132496)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@5@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               308
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      15
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               72
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             416
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              76
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            133469)
(assert (<= $Perm.No $k@18@04))
(assert (<= $k@18@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@18@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               73
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             419
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              77
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            134102)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               74
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             419
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              78
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            134150)
(push) ; 3
(assert (not (< $Perm.No $k@18@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               75
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             419
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              79
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            134198)
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               76
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             419
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              80
;  :propagations            30
;  :quant-instantiations    12
;  :rlimit-count            134246)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 3
(assert (not (< $Perm.No $k@12@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               77
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             422
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              81
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            134859)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               318
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               78
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 33
;  :datatype-occurs-check   7
;  :datatype-splits         32
;  :decisions               32
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             422
;  :mk-clause               21
;  :num-allocs              3900950
;  :num-checks              82
;  :propagations            30
;  :quant-instantiations    13
;  :rlimit-count            134907)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))
  diz@5@04))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 3
(assert (not (=
  diz@5@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04))))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               540
;  :arith-assert-diseq      9
;  :arith-assert-lower      24
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :binary-propagations     22
;  :conflicts               79
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 124
;  :datatype-occurs-check   21
;  :datatype-splits         66
;  :decisions               120
;  :del-clause              20
;  :final-checks            11
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             460
;  :mk-clause               22
;  :num-allocs              3900950
;  :num-checks              86
;  :propagations            32
;  :quant-instantiations    13
;  :rlimit-count            137302)
(declare-const $t@19@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@12@04)
    (=
      $t@19@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@11@04)))))
  (implies
    (< $Perm.No $k@18@04)
    (=
      $t@19@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@11@04)))))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@12@04 $k@18@04)))
(assert (<= (+ $k@12@04 $k@18@04) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@12@04 $k@18@04)) (not (= diz@5@04 $Ref.null))))
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Combinate_forkOperator_EncodedGlobalVariables ----------
(declare-const diz@20@04 $Ref)
(declare-const globals@21@04 $Ref)
(declare-const diz@22@04 $Ref)
(declare-const globals@23@04 $Ref)
(push) ; 1
(declare-const $t@24@04 $Snap)
(assert (= $t@24@04 ($Snap.combine ($Snap.first $t@24@04) ($Snap.second $t@24@04))))
(assert (= ($Snap.first $t@24@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@22@04 $Ref.null)))
(assert (=
  ($Snap.second $t@24@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@24@04))
    ($Snap.second ($Snap.second $t@24@04)))))
(declare-const $k@25@04 $Perm)
(assert ($Perm.isReadVar $k@25@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@25@04 $Perm.No) (< $Perm.No $k@25@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               624
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      18
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               80
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             474
;  :mk-clause               24
;  :num-allocs              3900950
;  :num-checks              88
;  :propagations            34
;  :quant-instantiations    13
;  :rlimit-count            138758)
(assert (<= $Perm.No $k@25@04))
(assert (<= $k@25@04 $Perm.Write))
(assert (implies (< $Perm.No $k@25@04) (not (= diz@22@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@24@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@24@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@24@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@24@04))) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@25@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               630
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      19
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               81
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             477
;  :mk-clause               24
;  :num-allocs              3900950
;  :num-checks              89
;  :propagations            34
;  :quant-instantiations    13
;  :rlimit-count            139011)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@24@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@24@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@24@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@24@04)))))))
(push) ; 2
(assert (not (< $Perm.No $k@25@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               636
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      19
;  :arith-eq-adapter        13
;  :binary-propagations     22
;  :conflicts               82
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             480
;  :mk-clause               24
;  :num-allocs              3900950
;  :num-checks              90
;  :propagations            34
;  :quant-instantiations    14
;  :rlimit-count            139295)
(declare-const $k@26@04 $Perm)
(assert ($Perm.isReadVar $k@26@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@26@04 $Perm.No) (< $Perm.No $k@26@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               636
;  :arith-assert-diseq      11
;  :arith-assert-lower      29
;  :arith-assert-upper      20
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               83
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             484
;  :mk-clause               26
;  :num-allocs              3900950
;  :num-checks              91
;  :propagations            35
;  :quant-instantiations    14
;  :rlimit-count            139494)
(assert (<= $Perm.No $k@26@04))
(assert (<= $k@26@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@26@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@24@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@24@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@24@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@24@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@24@04)))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@25@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               642
;  :arith-assert-diseq      11
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               84
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             487
;  :mk-clause               26
;  :num-allocs              3900950
;  :num-checks              92
;  :propagations            35
;  :quant-instantiations    14
;  :rlimit-count            139767)
(push) ; 2
(assert (not (< $Perm.No $k@26@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               642
;  :arith-assert-diseq      11
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-eq-adapter        14
;  :binary-propagations     22
;  :conflicts               85
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 154
;  :datatype-occurs-check   25
;  :datatype-splits         68
;  :decisions               149
;  :del-clause              21
;  :final-checks            13
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             487
;  :mk-clause               26
;  :num-allocs              3900950
;  :num-checks              93
;  :propagations            35
;  :quant-instantiations    14
;  :rlimit-count            139815)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@24@04)))))
  diz@22@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@27@04 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Combinate_run_EncodedGlobalVariables ----------
(declare-const diz@28@04 $Ref)
(declare-const __globals@29@04 $Ref)
(declare-const diz@30@04 $Ref)
(declare-const __globals@31@04 $Ref)
(push) ; 1
(declare-const $t@32@04 $Snap)
(assert (= $t@32@04 ($Snap.combine ($Snap.first $t@32@04) ($Snap.second $t@32@04))))
(assert (= ($Snap.first $t@32@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@30@04 $Ref.null)))
(assert (=
  ($Snap.second $t@32@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@32@04))
    ($Snap.second ($Snap.second $t@32@04)))))
(declare-const $k@33@04 $Perm)
(assert ($Perm.isReadVar $k@33@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@33@04 $Perm.No) (< $Perm.No $k@33@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               663
;  :arith-assert-diseq      12
;  :arith-assert-lower      31
;  :arith-assert-upper      22
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               86
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             500
;  :mk-clause               28
;  :num-allocs              3900950
;  :num-checks              95
;  :propagations            36
;  :quant-instantiations    15
;  :rlimit-count            140773)
(assert (<= $Perm.No $k@33@04))
(assert (<= $k@33@04 $Perm.Write))
(assert (implies (< $Perm.No $k@33@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@32@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@32@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@32@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@32@04))) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               669
;  :arith-assert-diseq      12
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               87
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             503
;  :mk-clause               28
;  :num-allocs              3900950
;  :num-checks              96
;  :propagations            36
;  :quant-instantiations    15
;  :rlimit-count            141026)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@32@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@04)))))))
(push) ; 2
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               675
;  :arith-assert-diseq      12
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-eq-adapter        15
;  :binary-propagations     22
;  :conflicts               88
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             506
;  :mk-clause               28
;  :num-allocs              3900950
;  :num-checks              97
;  :propagations            36
;  :quant-instantiations    16
;  :rlimit-count            141310)
(declare-const $k@34@04 $Perm)
(assert ($Perm.isReadVar $k@34@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@34@04 $Perm.No) (< $Perm.No $k@34@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               675
;  :arith-assert-diseq      13
;  :arith-assert-lower      33
;  :arith-assert-upper      24
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               89
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             510
;  :mk-clause               30
;  :num-allocs              3900950
;  :num-checks              98
;  :propagations            37
;  :quant-instantiations    16
;  :rlimit-count            141508)
(assert (<= $Perm.No $k@34@04))
(assert (<= $k@34@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@34@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@32@04))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               676
;  :arith-assert-diseq      13
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               90
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             512
;  :mk-clause               30
;  :num-allocs              3900950
;  :num-checks              99
;  :propagations            37
;  :quant-instantiations    16
;  :rlimit-count            141694)
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               676
;  :arith-assert-diseq      13
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-eq-adapter        16
;  :binary-propagations     22
;  :conflicts               91
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 157
;  :datatype-occurs-check   27
;  :datatype-splits         71
;  :decisions               152
;  :del-clause              25
;  :final-checks            15
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             512
;  :mk-clause               30
;  :num-allocs              3900950
;  :num-checks              100
;  :propagations            37
;  :quant-instantiations    16
;  :rlimit-count            141742)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@04)))))
  diz@30@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@35@04 $Snap)
(assert (= $t@35@04 ($Snap.combine ($Snap.first $t@35@04) ($Snap.second $t@35@04))))
(declare-const $k@36@04 $Perm)
(assert ($Perm.isReadVar $k@36@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@36@04 $Perm.No) (< $Perm.No $k@36@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               689
;  :arith-assert-diseq      14
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               92
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             521
;  :mk-clause               32
;  :num-allocs              3900950
;  :num-checks              102
;  :propagations            38
;  :quant-instantiations    17
;  :rlimit-count            142481)
(assert (<= $Perm.No $k@36@04))
(assert (<= $k@36@04 $Perm.Write))
(assert (implies (< $Perm.No $k@36@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@35@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@04))
    ($Snap.second ($Snap.second $t@35@04)))))
(assert (= ($Snap.first ($Snap.second $t@35@04)) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               695
;  :arith-assert-diseq      14
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               93
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             524
;  :mk-clause               32
;  :num-allocs              3900950
;  :num-checks              103
;  :propagations            38
;  :quant-instantiations    17
;  :rlimit-count            142724)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@35@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@35@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@35@04))))))
(push) ; 3
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      14
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-eq-adapter        17
;  :binary-propagations     22
;  :conflicts               94
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             527
;  :mk-clause               32
;  :num-allocs              3900950
;  :num-checks              104
;  :propagations            38
;  :quant-instantiations    18
;  :rlimit-count            142996)
(declare-const $k@37@04 $Perm)
(assert ($Perm.isReadVar $k@37@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@37@04 $Perm.No) (< $Perm.No $k@37@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               701
;  :arith-assert-diseq      15
;  :arith-assert-lower      37
;  :arith-assert-upper      28
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               95
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             531
;  :mk-clause               34
;  :num-allocs              3900950
;  :num-checks              105
;  :propagations            39
;  :quant-instantiations    18
;  :rlimit-count            143194)
(assert (<= $Perm.No $k@37@04))
(assert (<= $k@37@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@35@04)) $Ref.null))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@35@04))) $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@36@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      15
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               96
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             533
;  :mk-clause               34
;  :num-allocs              3900950
;  :num-checks              106
;  :propagations            39
;  :quant-instantiations    18
;  :rlimit-count            143370)
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      15
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               97
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              29
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             533
;  :mk-clause               34
;  :num-allocs              3900950
;  :num-checks              107
;  :propagations            39
;  :quant-instantiations    18
;  :rlimit-count            143418)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@35@04))))
  diz@30@04))
(pop) ; 2
(push) ; 2
; [exec]
; var globals__176: Ref
(declare-const globals__176@38@04 $Ref)
; [exec]
; var __flatten_134__177: Ref
(declare-const __flatten_134__177@39@04 $Ref)
; [exec]
; var __flatten_135__178: Seq[Int]
(declare-const __flatten_135__178@40@04 Seq<Int>)
; [exec]
; var __flatten_136__179: Ref
(declare-const __flatten_136__179@41@04 $Ref)
; [exec]
; var __flatten_137__180: Ref
(declare-const __flatten_137__180@42@04 $Ref)
; [exec]
; var __flatten_138__181: Seq[Int]
(declare-const __flatten_138__181@43@04 Seq<Int>)
; [exec]
; var __flatten_139__182: Ref
(declare-const __flatten_139__182@44@04 $Ref)
; [exec]
; var __flatten_140__184: Ref
(declare-const __flatten_140__184@45@04 $Ref)
; [exec]
; var __flatten_141__185: Ref
(declare-const __flatten_141__185@46@04 $Ref)
; [exec]
; var __flatten_142__186: Ref
(declare-const __flatten_142__186@47@04 $Ref)
; [exec]
; var __flatten_143__187: Ref
(declare-const __flatten_143__187@48@04 $Ref)
; [exec]
; var __flatten_144__188: Ref
(declare-const __flatten_144__188@49@04 $Ref)
; [exec]
; var __flatten_145__189: Ref
(declare-const __flatten_145__189@50@04 $Ref)
; [exec]
; var __flatten_146__190: Int
(declare-const __flatten_146__190@51@04 Int)
; [exec]
; var __flatten_147__191: Ref
(declare-const __flatten_147__191@52@04 $Ref)
; [exec]
; var __flatten_148__192: Ref
(declare-const __flatten_148__192@53@04 $Ref)
; [exec]
; var __flatten_149__193: Ref
(declare-const __flatten_149__193@54@04 $Ref)
; [exec]
; var __flatten_150__194: Ref
(declare-const __flatten_150__194@55@04 $Ref)
; [exec]
; var __flatten_151__195: Ref
(declare-const __flatten_151__195@56@04 $Ref)
; [exec]
; var __flatten_152__196: Ref
(declare-const __flatten_152__196@57@04 $Ref)
; [exec]
; var __flatten_153__197: Int
(declare-const __flatten_153__197@58@04 Int)
; [exec]
; var __flatten_154__198: Ref
(declare-const __flatten_154__198@59@04 $Ref)
; [exec]
; var __flatten_155__199: Ref
(declare-const __flatten_155__199@60@04 $Ref)
; [exec]
; var __flatten_156__200: Ref
(declare-const __flatten_156__200@61@04 $Ref)
; [exec]
; var __flatten_157__201: Int
(declare-const __flatten_157__201@62@04 Int)
; [exec]
; var __flatten_159__202: Int
(declare-const __flatten_159__202@63@04 Int)
; [exec]
; var __flatten_160__203: Ref
(declare-const __flatten_160__203@64@04 $Ref)
; [exec]
; var __flatten_161__204: Seq[Int]
(declare-const __flatten_161__204@65@04 Seq<Int>)
; [exec]
; var __flatten_162__205: Ref
(declare-const __flatten_162__205@66@04 $Ref)
; [exec]
; var __flatten_163__206: Ref
(declare-const __flatten_163__206@67@04 $Ref)
; [exec]
; var __flatten_164__207: Seq[Int]
(declare-const __flatten_164__207@68@04 Seq<Int>)
; [exec]
; var __flatten_165__208: Ref
(declare-const __flatten_165__208@69@04 $Ref)
; [exec]
; globals__176 := __globals
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               702
;  :arith-assert-diseq      15
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               98
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 159
;  :datatype-occurs-check   29
;  :datatype-splits         73
;  :decisions               154
;  :del-clause              33
;  :final-checks            17
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             533
;  :mk-clause               34
;  :num-allocs              3900950
;  :num-checks              108
;  :propagations            39
;  :quant-instantiations    18
;  :rlimit-count            143482)
(declare-const $t@70@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               708
;  :arith-assert-diseq      15
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-eq-adapter        18
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              33
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             533
;  :mk-clause               34
;  :num-allocs              3900950
;  :num-checks              110
;  :propagations            39
;  :quant-instantiations    18
;  :rlimit-count            143831)
(assert (= $t@70@04 ($Snap.combine ($Snap.first $t@70@04) ($Snap.second $t@70@04))))
(assert (= ($Snap.first $t@70@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@70@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@04))
    ($Snap.second ($Snap.second $t@70@04)))))
(assert (= ($Snap.first ($Snap.second $t@70@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@70@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@71@04 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@71@04 | live]
; [else-branch: 4 | !(0 <= i@71@04) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@71@04]
(assert (<= 0 i@71@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@71@04)]
(assert (not (<= 0 i@71@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@71@04 < |First:(Second:(Second:(Second:($t@70@04))))| && 0 <= i@71@04 | live]
; [else-branch: 5 | !(i@71@04 < |First:(Second:(Second:(Second:($t@70@04))))| && 0 <= i@71@04) | live]
(push) ; 5
; [then-branch: 5 | i@71@04 < |First:(Second:(Second:(Second:($t@70@04))))| && 0 <= i@71@04]
(assert (and
  (<
    i@71@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
  (<= 0 i@71@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@71@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               758
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              33
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             565
;  :mk-clause               40
;  :num-allocs              3900950
;  :num-checks              111
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            145179)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@70@04))))[i@71@04] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@70@04))))[i@71@04] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@70@04))))[i@71@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
    i@71@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@70@04))))[i@71@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
      i@71@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@71@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               758
;  :arith-assert-diseq      17
;  :arith-assert-lower      44
;  :arith-assert-upper      32
;  :arith-eq-adapter        22
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              33
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             566
;  :mk-clause               40
;  :num-allocs              3900950
;  :num-checks              112
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            145354)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@70@04))))[i@71@04] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@70@04))))[i@71@04]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@70@04))))[i@71@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
    i@71@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@71@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               758
;  :arith-assert-diseq      18
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-eq-adapter        23
;  :binary-propagations     22
;  :conflicts               99
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              33
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             569
;  :mk-clause               41
;  :num-allocs              3900950
;  :num-checks              113
;  :propagations            41
;  :quant-instantiations    24
;  :rlimit-count            145478)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@70@04))))[i@71@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
      i@71@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@71@04 < |First:(Second:(Second:(Second:($t@70@04))))| && 0 <= i@71@04)]
(assert (not
  (and
    (<
      i@71@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
    (<= 0 i@71@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@71@04 Int)) (!
  (implies
    (and
      (<
        i@71@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
      (<= 0 i@71@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
          i@71@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
            i@71@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
            i@71@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
    i@71@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))
(declare-const $k@72@04 $Perm)
(assert ($Perm.isReadVar $k@72@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@72@04 $Perm.No) (< $Perm.No $k@72@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               763
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      33
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               100
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             575
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              114
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            146247)
(assert (<= $Perm.No $k@72@04))
(assert (<= $k@72@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@72@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               769
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               101
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             578
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              115
;  :propagations            42
;  :quant-instantiations    24
;  :rlimit-count            146570)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               775
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               102
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             581
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              116
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            146926)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               780
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               103
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             582
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              117
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            147183)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               785
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               104
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             583
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              118
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            147450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               790
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               105
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             584
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              119
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            147727)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               795
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               106
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             585
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              120
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            148014)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               800
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               107
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             586
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              121
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            148311)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               805
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               108
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             587
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              122
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            148618)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               810
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               109
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             588
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              123
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            148935)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               815
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               110
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             589
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              124
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            149262)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               820
;  :arith-assert-diseq      19
;  :arith-assert-lower      49
;  :arith-assert-upper      34
;  :arith-eq-adapter        24
;  :binary-propagations     22
;  :conflicts               111
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             590
;  :mk-clause               43
;  :num-allocs              3900950
;  :num-checks              125
;  :propagations            42
;  :quant-instantiations    25
;  :rlimit-count            149599)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))
(declare-const $k@73@04 $Perm)
(assert ($Perm.isReadVar $k@73@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@73@04 $Perm.No) (< $Perm.No $k@73@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               825
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      35
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               112
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             595
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              126
;  :propagations            43
;  :quant-instantiations    25
;  :rlimit-count            150090)
(assert (<= $Perm.No $k@73@04))
(assert (<= $k@73@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@73@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               831
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               113
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             598
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              127
;  :propagations            43
;  :quant-instantiations    25
;  :rlimit-count            150533)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               837
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               114
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             601
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              128
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            151027)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               842
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               115
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             602
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              129
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            151404)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               847
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               116
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             603
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              130
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            151791)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               852
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               117
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             604
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              131
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            152188)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               857
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               118
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             605
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              132
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            152595)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               862
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               119
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             606
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              133
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            153012)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               867
;  :arith-assert-diseq      20
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-eq-adapter        25
;  :binary-propagations     22
;  :conflicts               120
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             607
;  :mk-clause               45
;  :num-allocs              3900950
;  :num-checks              134
;  :propagations            43
;  :quant-instantiations    26
;  :rlimit-count            153439)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))
(declare-const $k@74@04 $Perm)
(assert ($Perm.isReadVar $k@74@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@74@04 $Perm.No) (< $Perm.No $k@74@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               872
;  :arith-assert-diseq      21
;  :arith-assert-lower      53
;  :arith-assert-upper      37
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               121
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             612
;  :mk-clause               47
;  :num-allocs              3900950
;  :num-checks              135
;  :propagations            44
;  :quant-instantiations    26
;  :rlimit-count            154019)
(assert (<= $Perm.No $k@74@04))
(assert (<= $k@74@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@74@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               878
;  :arith-assert-diseq      21
;  :arith-assert-lower      53
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               122
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             615
;  :mk-clause               47
;  :num-allocs              3900950
;  :num-checks              136
;  :propagations            44
;  :quant-instantiations    26
;  :rlimit-count            154552)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               884
;  :arith-assert-diseq      21
;  :arith-assert-lower      53
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               123
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             618
;  :mk-clause               47
;  :num-allocs              3900950
;  :num-checks              137
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            155130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               889
;  :arith-assert-diseq      21
;  :arith-assert-lower      53
;  :arith-assert-upper      38
;  :arith-eq-adapter        26
;  :binary-propagations     22
;  :conflicts               124
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             619
;  :mk-clause               47
;  :num-allocs              3900950
;  :num-checks              138
;  :propagations            44
;  :quant-instantiations    27
;  :rlimit-count            155597)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))))
(declare-const $k@75@04 $Perm)
(assert ($Perm.isReadVar $k@75@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@75@04 $Perm.No) (< $Perm.No $k@75@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               894
;  :arith-assert-diseq      22
;  :arith-assert-lower      55
;  :arith-assert-upper      39
;  :arith-eq-adapter        27
;  :binary-propagations     22
;  :conflicts               125
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             624
;  :mk-clause               49
;  :num-allocs              3900950
;  :num-checks              139
;  :propagations            45
;  :quant-instantiations    27
;  :rlimit-count            156217)
(declare-const $t@76@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@34@04)
    (=
      $t@76@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@32@04)))))))
  (implies
    (< $Perm.No $k@75@04)
    (=
      $t@76@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@34@04 $k@75@04)))
(assert (<= (+ $k@34@04 $k@75@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@34@04 $k@75@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@75@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               904
;  :arith-assert-diseq      22
;  :arith-assert-lower      56
;  :arith-assert-upper      41
;  :arith-conflicts         1
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         1
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               126
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             632
;  :mk-clause               49
;  :num-allocs              3900950
;  :num-checks              140
;  :propagations            45
;  :quant-instantiations    28
;  :rlimit-count            157054)
(assert (not (= $t@76@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@75@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               910
;  :arith-assert-diseq      22
;  :arith-assert-lower      56
;  :arith-assert-upper      42
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               127
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             635
;  :mk-clause               49
;  :num-allocs              3900950
;  :num-checks              141
;  :propagations            45
;  :quant-instantiations    28
;  :rlimit-count            157610)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               915
;  :arith-assert-diseq      22
;  :arith-assert-lower      56
;  :arith-assert-upper      42
;  :arith-conflicts         2
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               128
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             636
;  :mk-clause               49
;  :num-allocs              3900950
;  :num-checks              142
;  :propagations            45
;  :quant-instantiations    28
;  :rlimit-count            158117)
(declare-const $k@77@04 $Perm)
(assert ($Perm.isReadVar $k@77@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@77@04 $Perm.No) (< $Perm.No $k@77@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               915
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      43
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               129
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             640
;  :mk-clause               51
;  :num-allocs              3900950
;  :num-checks              143
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            158316)
(assert (<= $Perm.No $k@77@04))
(assert (<= $k@77@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@77@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               130
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             642
;  :mk-clause               51
;  :num-allocs              3900950
;  :num-checks              144
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            158832)
(push) ; 3
(assert (not (< $Perm.No $k@77@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               916
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               131
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 161
;  :datatype-occurs-check   30
;  :datatype-splits         73
;  :decisions               156
;  :del-clause              34
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.11
;  :memory                  4.08
;  :mk-bool-var             642
;  :mk-clause               51
;  :num-allocs              3900950
;  :num-checks              145
;  :propagations            46
;  :quant-instantiations    28
;  :rlimit-count            158880)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@70@04 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) __globals@31@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               997
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               133
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 191
;  :datatype-occurs-check   38
;  :datatype-splits         100
;  :decisions               185
;  :del-clause              50
;  :final-checks            21
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             675
;  :mk-clause               52
;  :num-allocs              4049372
;  :num-checks              147
;  :propagations            46
;  :quant-instantiations    29
;  :rlimit-count            160251)
(declare-const $t@78@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_134__177 := diz.Combinate_m
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1071
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               134
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             701
;  :mk-clause               52
;  :num-allocs              4049372
;  :num-checks              149
;  :propagations            47
;  :quant-instantiations    29
;  :rlimit-count            161040)
(declare-const __flatten_134__177@79@04 $Ref)
(assert (=
  __flatten_134__177@79@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))
; [exec]
; __flatten_136__179 := diz.Combinate_m
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1072
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             702
;  :mk-clause               52
;  :num-allocs              4049372
;  :num-checks              150
;  :propagations            47
;  :quant-instantiations    29
;  :rlimit-count            161155)
(declare-const __flatten_136__179@80@04 $Ref)
(assert (=
  __flatten_136__179@80@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))
; [exec]
; __flatten_135__178 := __flatten_136__179.Main_process_state[2 := 4]
; [eval] __flatten_136__179.Main_process_state[2 := 4]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
  __flatten_136__179@80@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1073
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             703
;  :mk-clause               52
;  :num-allocs              4049372
;  :num-checks              151
;  :propagations            47
;  :quant-instantiations    29
;  :rlimit-count            161203)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1073
;  :arith-assert-diseq      23
;  :arith-assert-lower      58
;  :arith-assert-upper      44
;  :arith-conflicts         2
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          1
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             703
;  :mk-clause               52
;  :num-allocs              4049372
;  :num-checks              152
;  :propagations            47
;  :quant-instantiations    29
;  :rlimit-count            161218)
(declare-const __flatten_135__178@81@04 Seq<Int>)
(assert (Seq_equal
  __flatten_135__178@81@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))
    2
    4)))
; [exec]
; __flatten_134__177.Main_process_state := __flatten_135__178
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
  __flatten_134__177@79@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1083
;  :arith-add-rows          3
;  :arith-assert-diseq      24
;  :arith-assert-lower      62
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               135
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             726
;  :mk-clause               71
;  :num-allocs              4049372
;  :num-checks              153
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            161703)
(assert (not (= __flatten_134__177@79@04 $Ref.null)))
; [exec]
; __flatten_137__180 := diz.Combinate_m
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1084
;  :arith-add-rows          3
;  :arith-assert-diseq      24
;  :arith-assert-lower      62
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               136
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             727
;  :mk-clause               71
;  :num-allocs              4049372
;  :num-checks              154
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            161807)
(declare-const __flatten_137__180@82@04 $Ref)
(assert (=
  __flatten_137__180@82@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))
; [exec]
; __flatten_139__182 := diz.Combinate_m
(push) ; 3
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1085
;  :arith-add-rows          3
;  :arith-assert-diseq      24
;  :arith-assert-lower      62
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             728
;  :mk-clause               71
;  :num-allocs              4049372
;  :num-checks              155
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            161892)
(declare-const __flatten_139__182@83@04 $Ref)
(assert (=
  __flatten_139__182@83@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))
; [exec]
; __flatten_138__181 := __flatten_139__182.Main_event_state[4 := 2]
; [eval] __flatten_139__182.Main_event_state[4 := 2]
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
  __flatten_139__182@83@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-add-rows          3
;  :arith-assert-diseq      24
;  :arith-assert-lower      62
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             729
;  :mk-clause               71
;  :num-allocs              4049372
;  :num-checks              156
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            161940)
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1086
;  :arith-add-rows          3
;  :arith-assert-diseq      24
;  :arith-assert-lower      62
;  :arith-assert-upper      46
;  :arith-conflicts         2
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             729
;  :mk-clause               71
;  :num-allocs              4049372
;  :num-checks              157
;  :propagations            56
;  :quant-instantiations    34
;  :rlimit-count            161955)
(declare-const __flatten_138__181@84@04 Seq<Int>)
(assert (Seq_equal
  __flatten_138__181@84@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))
    4
    2)))
; [exec]
; __flatten_137__180.Main_event_state := __flatten_138__181
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
  __flatten_137__180@82@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1096
;  :arith-add-rows          6
;  :arith-assert-diseq      25
;  :arith-assert-lower      66
;  :arith-assert-upper      48
;  :arith-conflicts         2
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               137
;  :datatype-accessor-ax    100
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             752
;  :mk-clause               90
;  :num-allocs              4049372
;  :num-checks              158
;  :propagations            65
;  :quant-instantiations    39
;  :rlimit-count            162468)
(assert (not (= __flatten_137__180@82@04 $Ref.null)))
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@85@04 $Snap)
(assert (= $t@85@04 ($Snap.combine ($Snap.first $t@85@04) ($Snap.second $t@85@04))))
(declare-const $k@86@04 $Perm)
(assert ($Perm.isReadVar $k@86@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@86@04 $Perm.No) (< $Perm.No $k@86@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1101
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      68
;  :arith-assert-upper      49
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               138
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             757
;  :mk-clause               92
;  :num-allocs              4049372
;  :num-checks              159
;  :propagations            66
;  :quant-instantiations    39
;  :rlimit-count            162779)
(assert (<= $Perm.No $k@86@04))
(assert (<= $k@86@04 $Perm.Write))
(assert (implies (< $Perm.No $k@86@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@85@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@85@04))
    ($Snap.second ($Snap.second $t@85@04)))))
(assert (= ($Snap.first ($Snap.second $t@85@04)) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1107
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      68
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               139
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             760
;  :mk-clause               92
;  :num-allocs              4049372
;  :num-checks              160
;  :propagations            66
;  :quant-instantiations    39
;  :rlimit-count            163022)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@85@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@85@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1113
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      68
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               140
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             763
;  :mk-clause               92
;  :num-allocs              4049372
;  :num-checks              161
;  :propagations            66
;  :quant-instantiations    40
;  :rlimit-count            163294
;  :time                    0.00)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@85@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1118
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      68
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               141
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             764
;  :mk-clause               92
;  :num-allocs              4049372
;  :num-checks              162
;  :propagations            66
;  :quant-instantiations    40
;  :rlimit-count            163471)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1124
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      68
;  :arith-assert-upper      50
;  :arith-conflicts         2
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               142
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             766
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              163
;  :propagations            66
;  :quant-instantiations    40
;  :rlimit-count            163690)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1131
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      70
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               143
;  :datatype-accessor-ax    106
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             772
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              164
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            164020)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1137
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      70
;  :arith-assert-upper      51
;  :arith-conflicts         2
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               144
;  :datatype-accessor-ax    107
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             774
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              165
;  :propagations            66
;  :quant-instantiations    42
;  :rlimit-count            164259)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  $Snap.unit))
; [eval] (forall i__183: Int :: { diz.Combinate_m.Main_process_state[i__183] } 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|)
(declare-const i__183@87@04 Int)
(push) ; 4
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__183
(push) ; 5
; [then-branch: 8 | 0 <= i__183@87@04 | live]
; [else-branch: 8 | !(0 <= i__183@87@04) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i__183@87@04]
(assert (<= 0 i__183@87@04))
; [eval] i__183 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      73
;  :arith-assert-upper      52
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               145
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             782
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              166
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            164698)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i__183@87@04)]
(assert (not (<= 0 i__183@87@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 9 | i__183@87@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__183@87@04 | live]
; [else-branch: 9 | !(i__183@87@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__183@87@04) | live]
(push) ; 6
; [then-branch: 9 | i__183@87@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__183@87@04]
(assert (and
  (<
    i__183@87@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  (<= 0 i__183@87@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1
; [eval] diz.Combinate_m.Main_process_state[i__183]
(push) ; 7
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             784
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              167
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            164855)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__183@87@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               146
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             784
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              168
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            164864)
; [eval] -1
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04] != -1 | live]
(push) ; 8
; [then-branch: 10 | First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__183@87@04)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 10 | First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i__183@87@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183]
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             785
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              169
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165078)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__183@87@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      26
;  :arith-assert-lower      74
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               147
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             785
;  :mk-clause               92
;  :num-allocs              4201698
;  :num-checks              170
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165087)
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04]) | live]
(push) ; 10
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__183@87@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      77
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             788
;  :mk-clause               93
;  :num-allocs              4201698
;  :num-checks              171
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165250)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__183@87@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      77
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               148
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             788
;  :mk-clause               93
;  :num-allocs              4201698
;  :num-checks              172
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165259)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1145
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      77
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               149
;  :datatype-accessor-ax    108
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              50
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             788
;  :mk-clause               93
;  :num-allocs              4201698
;  :num-checks              173
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165307)
(pop) ; 10
(push) ; 10
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i__183@87@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i__183@87@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(i__183@87@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__183@87@04)]
(assert (not
  (and
    (<
      i__183@87@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
    (<= 0 i__183@87@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__183@87@04 Int)) (!
  (implies
    (and
      (<
        i__183@87@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i__183@87@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i__183@87@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__183@87@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__183@87@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__183@87@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1150
;  :arith-add-rows          6
;  :arith-assert-diseq      27
;  :arith-assert-lower      77
;  :arith-assert-upper      53
;  :arith-conflicts         2
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               150
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             790
;  :mk-clause               93
;  :num-allocs              4201698
;  :num-checks              174
;  :propagations            66
;  :quant-instantiations    44
;  :rlimit-count            165932)
(declare-const $k@88@04 $Perm)
(assert ($Perm.isReadVar $k@88@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@88@04 $Perm.No) (< $Perm.No $k@88@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1150
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      54
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               151
;  :datatype-accessor-ax    109
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             794
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              175
;  :propagations            67
;  :quant-instantiations    44
;  :rlimit-count            166131)
(assert (<= $Perm.No $k@88@04))
(assert (<= $k@88@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@88@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1156
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               152
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             797
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              176
;  :propagations            67
;  :quant-instantiations    44
;  :rlimit-count            166454)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1156
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               153
;  :datatype-accessor-ax    110
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             797
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              177
;  :propagations            67
;  :quant-instantiations    44
;  :rlimit-count            166502)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1162
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               154
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             800
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              178
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            166858)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1162
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               155
;  :datatype-accessor-ax    111
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             800
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              179
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            166906)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1167
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               156
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             801
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              180
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167163)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1167
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               157
;  :datatype-accessor-ax    112
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             801
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              181
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167211)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               158
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             802
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              182
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167478)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1172
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               159
;  :datatype-accessor-ax    113
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             802
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              183
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167526)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1177
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               160
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             803
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              184
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167803)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1177
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               161
;  :datatype-accessor-ax    114
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             803
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              185
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            167851)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1182
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               162
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             804
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              186
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168138)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1182
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               163
;  :datatype-accessor-ax    115
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             804
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              187
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168186)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1187
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               164
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             805
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              188
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168483)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1187
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               165
;  :datatype-accessor-ax    116
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             805
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              189
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168531)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1192
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               166
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             806
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              190
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168838)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1192
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               167
;  :datatype-accessor-ax    117
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             806
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              191
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            168886)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1197
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               168
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             807
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              192
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            169203)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1197
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               169
;  :datatype-accessor-ax    118
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             807
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              193
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            169251)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1202
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               170
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             808
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              194
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            169578)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1202
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               171
;  :datatype-accessor-ax    119
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             808
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              195
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            169626)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1207
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               172
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             809
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              196
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            169963)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1207
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               173
;  :datatype-accessor-ax    120
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             809
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              197
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            170011)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-add-rows          6
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      55
;  :arith-conflicts         2
;  :arith-eq-adapter        39
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               174
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             810
;  :mk-clause               95
;  :num-allocs              4201698
;  :num-checks              198
;  :propagations            67
;  :quant-instantiations    45
;  :rlimit-count            170358)
(declare-const $k@89@04 $Perm)
(assert ($Perm.isReadVar $k@89@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@89@04 $Perm.No) (< $Perm.No $k@89@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1212
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      56
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               175
;  :datatype-accessor-ax    121
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             814
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              199
;  :propagations            68
;  :quant-instantiations    45
;  :rlimit-count            170557)
(assert (<= $Perm.No $k@89@04))
(assert (<= $k@89@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@89@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               176
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             817
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              200
;  :propagations            68
;  :quant-instantiations    45
;  :rlimit-count            171000)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               177
;  :datatype-accessor-ax    122
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             817
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              201
;  :propagations            68
;  :quant-instantiations    45
;  :rlimit-count            171048)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1224
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               178
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             820
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              202
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            171542)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1224
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               179
;  :datatype-accessor-ax    123
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             820
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              203
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            171590)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1229
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               180
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             821
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              204
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            171967)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1229
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               181
;  :datatype-accessor-ax    124
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             821
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              205
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            172015)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1234
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               182
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             822
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              206
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            172402)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1234
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               183
;  :datatype-accessor-ax    125
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             822
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              207
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            172450)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1239
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               184
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             823
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              208
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            172847)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1239
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               185
;  :datatype-accessor-ax    126
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             823
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              209
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            172895)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1244
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               186
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             824
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              210
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            173302)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1244
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               187
;  :datatype-accessor-ax    127
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             824
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              211
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            173350)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               188
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             825
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              212
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            173767)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1249
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               189
;  :datatype-accessor-ax    128
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             825
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              213
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            173815)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               190
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             826
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              214
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            174242)
(push) ; 4
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1254
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               191
;  :datatype-accessor-ax    129
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             826
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              215
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            174290)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1259
;  :arith-add-rows          6
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      57
;  :arith-conflicts         2
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               192
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             827
;  :mk-clause               97
;  :num-allocs              4201698
;  :num-checks              216
;  :propagations            68
;  :quant-instantiations    46
;  :rlimit-count            174727)
(declare-const $k@90@04 $Perm)
(assert ($Perm.isReadVar $k@90@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@90@04 $Perm.No) (< $Perm.No $k@90@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1259
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      58
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               193
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             831
;  :mk-clause               99
;  :num-allocs              4201698
;  :num-checks              217
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            174925)
(assert (<= $Perm.No $k@90@04))
(assert (<= $k@90@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@90@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               194
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             834
;  :mk-clause               99
;  :num-allocs              4201698
;  :num-checks              218
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            175458)
(push) ; 4
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1265
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               195
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             834
;  :mk-clause               99
;  :num-allocs              4201698
;  :num-checks              219
;  :propagations            69
;  :quant-instantiations    46
;  :rlimit-count            175506)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1271
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               196
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             837
;  :mk-clause               99
;  :num-allocs              4201698
;  :num-checks              220
;  :propagations            69
;  :quant-instantiations    47
;  :rlimit-count            176084)
(push) ; 4
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1271
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               197
;  :datatype-accessor-ax    132
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.27
;  :memory                  4.27
;  :mk-bool-var             837
;  :mk-clause               99
;  :num-allocs              4201698
;  :num-checks              221
;  :propagations            69
;  :quant-instantiations    47
;  :rlimit-count            176132)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1276
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               198
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             838
;  :mk-clause               99
;  :num-allocs              4363119
;  :num-checks              222
;  :propagations            69
;  :quant-instantiations    47
;  :rlimit-count            176599)
(push) ; 4
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1276
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               199
;  :datatype-accessor-ax    133
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             838
;  :mk-clause               99
;  :num-allocs              4363119
;  :num-checks              223
;  :propagations            69
;  :quant-instantiations    47
;  :rlimit-count            176647)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1281
;  :arith-add-rows          6
;  :arith-assert-diseq      30
;  :arith-assert-lower      83
;  :arith-assert-upper      59
;  :arith-conflicts         2
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               200
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             839
;  :mk-clause               99
;  :num-allocs              4363119
;  :num-checks              224
;  :propagations            69
;  :quant-instantiations    47
;  :rlimit-count            177124)
(declare-const $k@91@04 $Perm)
(assert ($Perm.isReadVar $k@91@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@91@04 $Perm.No) (< $Perm.No $k@91@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1281
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      60
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               201
;  :datatype-accessor-ax    134
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             843
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              225
;  :propagations            70
;  :quant-instantiations    47
;  :rlimit-count            177322)
(assert (<= $Perm.No $k@91@04))
(assert (<= $k@91@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@91@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1287
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               202
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             846
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              226
;  :propagations            70
;  :quant-instantiations    47
;  :rlimit-count            177895)
(push) ; 4
(assert (not (< $Perm.No $k@91@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1287
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               203
;  :datatype-accessor-ax    135
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             846
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              227
;  :propagations            70
;  :quant-instantiations    47
;  :rlimit-count            177943)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1293
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               204
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             849
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              228
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            178551)
(push) ; 4
(assert (not (< $Perm.No $k@91@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1293
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               205
;  :datatype-accessor-ax    136
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             849
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              229
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            178599)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1298
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               206
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             850
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              230
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            179106)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1298
;  :arith-add-rows          6
;  :arith-assert-diseq      31
;  :arith-assert-lower      85
;  :arith-assert-upper      61
;  :arith-conflicts         2
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               207
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             850
;  :mk-clause               101
;  :num-allocs              4363119
;  :num-checks              231
;  :propagations            70
;  :quant-instantiations    48
;  :rlimit-count            179154)
(declare-const $k@92@04 $Perm)
(assert ($Perm.isReadVar $k@92@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@92@04 $Perm.No) (< $Perm.No $k@92@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1298
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      62
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               208
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             854
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              232
;  :propagations            71
;  :quant-instantiations    48
;  :rlimit-count            179353)
(assert (<= $Perm.No $k@92@04))
(assert (<= $k@92@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@92@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1304
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               209
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              233
;  :propagations            71
;  :quant-instantiations    48
;  :rlimit-count            179956)
(push) ; 4
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1304
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               210
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              234
;  :propagations            71
;  :quant-instantiations    48
;  :rlimit-count            180004)
(push) ; 4
(assert (not (< $Perm.No $k@92@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1304
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               211
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              235
;  :propagations            71
;  :quant-instantiations    48
;  :rlimit-count            180052)
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1304
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               212
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             857
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              236
;  :propagations            71
;  :quant-instantiations    48
;  :rlimit-count            180100)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 4
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1308
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               213
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             860
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              237
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            180683)
(push) ; 4
(assert (not (< $Perm.No $k@91@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1308
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               214
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             860
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              238
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            180731)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 5
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             861
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              239
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181177)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1311
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               215
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             861
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              240
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181192)
; [eval] -1
(push) ; 5
; [then-branch: 12 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 | live]
; [else-branch: 12 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 12 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 12 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_event_state[4]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             862
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              241
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181387)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               216
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             862
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              242
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181402)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [eval] !(diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2)
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             862
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              243
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181455)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1312
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               217
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             862
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              244
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181470)
; [eval] -1
(push) ; 5
; [then-branch: 13 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 | live]
; [else-branch: 13 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 13 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_event_state[4]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             863
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              245
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181661)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      32
;  :arith-assert-lower      87
;  :arith-assert-upper      63
;  :arith-conflicts         2
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               218
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              51
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             863
;  :mk-clause               103
;  :num-allocs              4363119
;  :num-checks              246
;  :propagations            71
;  :quant-instantiations    49
;  :rlimit-count            181676)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(declare-const $k@93@04 $Perm)
(assert ($Perm.isReadVar $k@93@04 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@93@04 $Perm.No) (< $Perm.No $k@93@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      89
;  :arith-assert-upper      64
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             867
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              247
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            181880)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@33@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      89
;  :arith-assert-upper      64
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               219
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             867
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              248
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            181891)
(assert (< $k@93@04 $k@33@04))
(assert (<= $Perm.No (- $k@33@04 $k@93@04)))
(assert (<= (- $k@33@04 $k@93@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@33@04 $k@93@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      91
;  :arith-assert-upper      65
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               220
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             870
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              249
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182099)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      91
;  :arith-assert-upper      65
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               221
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             870
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              250
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182147)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      91
;  :arith-assert-upper      65
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               222
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             870
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              251
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182195)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      91
;  :arith-assert-upper      65
;  :arith-conflicts         2
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               223
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             870
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              252
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182243)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_135__178@81@04) 3)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1313
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      91
;  :arith-assert-upper      65
;  :arith-conflicts         2
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               224
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             873
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              253
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182317)
(assert (= (Seq_length __flatten_135__178@81@04) 3))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1314
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      92
;  :arith-assert-upper      66
;  :arith-conflicts         2
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               225
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              254
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182416)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1314
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      92
;  :arith-assert-upper      66
;  :arith-conflicts         2
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               226
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             876
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              255
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182464)
(set-option :timeout 0)
(push) ; 4
(assert (not (= (Seq_length __flatten_138__181@84@04) 6)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1314
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      92
;  :arith-assert-upper      66
;  :arith-conflicts         2
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               227
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             879
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              256
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182538)
(assert (= (Seq_length __flatten_138__181@84@04) 6))
; [eval] (forall i__183: Int :: { diz.Combinate_m.Main_process_state[i__183] } 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|)
(declare-const i__183@94@04 Int)
(push) ; 4
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__183
(push) ; 5
; [then-branch: 14 | 0 <= i__183@94@04 | live]
; [else-branch: 14 | !(0 <= i__183@94@04) | live]
(push) ; 6
; [then-branch: 14 | 0 <= i__183@94@04]
(assert (<= 0 i__183@94@04))
; [eval] i__183 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1315
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      94
;  :arith-assert-upper      67
;  :arith-conflicts         2
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               228
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             883
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              257
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182690)
(pop) ; 6
(push) ; 6
; [else-branch: 14 | !(0 <= i__183@94@04)]
(assert (not (<= 0 i__183@94@04)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 15 | i__183@94@04 < |__flatten_135__178@81@04| && 0 <= i__183@94@04 | live]
; [else-branch: 15 | !(i__183@94@04 < |__flatten_135__178@81@04| && 0 <= i__183@94@04) | live]
(push) ; 6
; [then-branch: 15 | i__183@94@04 < |__flatten_135__178@81@04| && 0 <= i__183@94@04]
(assert (and (< i__183@94@04 (Seq_length __flatten_135__178@81@04)) (<= 0 i__183@94@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1
; [eval] diz.Combinate_m.Main_process_state[i__183]
(push) ; 7
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1315
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      68
;  :arith-conflicts         2
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             885
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              258
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182847)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= i__183@94@04 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1315
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      68
;  :arith-conflicts         2
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               229
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             885
;  :mk-clause               105
;  :num-allocs              4363119
;  :num-checks              259
;  :propagations            72
;  :quant-instantiations    49
;  :rlimit-count            182856)
; [eval] -1
(push) ; 7
; [then-branch: 16 | __flatten_135__178@81@04[i__183@94@04] == -1 | live]
; [else-branch: 16 | __flatten_135__178@81@04[i__183@94@04] != -1 | live]
(push) ; 8
; [then-branch: 16 | __flatten_135__178@81@04[i__183@94@04] == -1]
(assert (= (Seq_index __flatten_135__178@81@04 i__183@94@04) (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 16 | __flatten_135__178@81@04[i__183@94@04] != -1]
(assert (not (= (Seq_index __flatten_135__178@81@04 i__183@94@04) (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183]
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      69
;  :arith-conflicts         2
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             893
;  :mk-clause               115
;  :num-allocs              4363119
;  :num-checks              260
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            183063)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__183@94@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          6
;  :arith-assert-diseq      33
;  :arith-assert-lower      95
;  :arith-assert-upper      69
;  :arith-conflicts         2
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               230
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             893
;  :mk-clause               115
;  :num-allocs              4363119
;  :num-checks              261
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            183072)
(push) ; 9
; [then-branch: 17 | 0 <= __flatten_135__178@81@04[i__183@94@04] | live]
; [else-branch: 17 | !(0 <= __flatten_135__178@81@04[i__183@94@04]) | live]
(push) ; 10
; [then-branch: 17 | 0 <= __flatten_135__178@81@04[i__183@94@04]]
(assert (<= 0 (Seq_index __flatten_135__178@81@04 i__183@94@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          6
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      69
;  :arith-conflicts         2
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               116
;  :num-allocs              4363119
;  :num-checks              262
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            183184)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__183@94@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          6
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      69
;  :arith-conflicts         2
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               231
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               116
;  :num-allocs              4363119
;  :num-checks              263
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            183193)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1316
;  :arith-add-rows          6
;  :arith-assert-diseq      34
;  :arith-assert-lower      98
;  :arith-assert-upper      69
;  :arith-conflicts         2
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         6
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               232
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 220
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               213
;  :del-clause              63
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             896
;  :mk-clause               116
;  :num-allocs              4363119
;  :num-checks              264
;  :propagations            72
;  :quant-instantiations    50
;  :rlimit-count            183241)
(pop) ; 10
(push) ; 10
; [else-branch: 17 | !(0 <= __flatten_135__178@81@04[i__183@94@04])]
(assert (not (<= 0 (Seq_index __flatten_135__178@81@04 i__183@94@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 15 | !(i__183@94@04 < |__flatten_135__178@81@04| && 0 <= i__183@94@04)]
(assert (not
  (and
    (< i__183@94@04 (Seq_length __flatten_135__178@81@04))
    (<= 0 i__183@94@04))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((i__183@94@04 Int)) (!
  (implies
    (and
      (< i__183@94@04 (Seq_length __flatten_135__178@81@04))
      (<= 0 i__183@94@04))
    (or
      (= (Seq_index __flatten_135__178@81@04 i__183@94@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_135__178@81@04 i__183@94@04)
          (Seq_length __flatten_138__181@84@04))
        (<= 0 (Seq_index __flatten_135__178@81@04 i__183@94@04)))))
  :pattern ((Seq_index __flatten_135__178@81@04 i__183@94@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      39
;  :arith-assert-lower      112
;  :arith-assert-upper      81
;  :arith-conflicts         4
;  :arith-eq-adapter        58
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               238
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             934
;  :mk-clause               161
;  :num-allocs              4363119
;  :num-checks              265
;  :propagations            102
;  :quant-instantiations    53
;  :rlimit-count            183857)
(assert (forall ((i__183@94@04 Int)) (!
  (implies
    (and
      (< i__183@94@04 (Seq_length __flatten_135__178@81@04))
      (<= 0 i__183@94@04))
    (or
      (= (Seq_index __flatten_135__178@81@04 i__183@94@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_135__178@81@04 i__183@94@04)
          (Seq_length __flatten_138__181@84@04))
        (<= 0 (Seq_index __flatten_135__178@81@04 i__183@94@04)))))
  :pattern ((Seq_index __flatten_135__178@81@04 i__183@94@04))
  :qid |prog.l<no position>|)))
(declare-const $k@95@04 $Perm)
(assert ($Perm.isReadVar $k@95@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      114
;  :arith-assert-upper      82
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               239
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             939
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              266
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184326)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@95@04 $Perm.No) (< $Perm.No $k@95@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      114
;  :arith-assert-upper      82
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             939
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              267
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184376)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@72@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      114
;  :arith-assert-upper      82
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            6
;  :binary-propagations     22
;  :conflicts               240
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             939
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              268
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184387)
(assert (< $k@95@04 $k@72@04))
(assert (<= $Perm.No (- $k@72@04 $k@95@04)))
(assert (<= (- $k@72@04 $k@95@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@72@04 $k@95@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               241
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              269
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184601)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               242
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              270
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184649)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               243
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              271
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184697)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               244
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              272
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184745)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               245
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              273
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184793)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               246
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              274
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184841)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               247
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              275
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184889)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               248
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              276
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184937)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               249
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              277
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            184985)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               250
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              278
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185033)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               251
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              279
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185081)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               252
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              280
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185129)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               253
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              281
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185177)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               254
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              282
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185225)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               255
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              283
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185273)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               256
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              284
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185321)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               257
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              285
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185369)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               258
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              286
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185417)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               259
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              287
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185465)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               260
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              288
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185513)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               261
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              289
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185561)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      40
;  :arith-assert-lower      116
;  :arith-assert-upper      83
;  :arith-conflicts         4
;  :arith-eq-adapter        59
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               262
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             942
;  :mk-clause               163
;  :num-allocs              4363119
;  :num-checks              290
;  :propagations            103
;  :quant-instantiations    53
;  :rlimit-count            185609)
(declare-const $k@96@04 $Perm)
(assert ($Perm.isReadVar $k@96@04 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      118
;  :arith-assert-upper      84
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               263
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             946
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              291
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            185806)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@96@04 $Perm.No) (< $Perm.No $k@96@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      118
;  :arith-assert-upper      84
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             946
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              292
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            185856)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@73@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      118
;  :arith-assert-upper      84
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            7
;  :binary-propagations     22
;  :conflicts               264
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             946
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              293
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            185867)
(assert (< $k@96@04 $k@73@04))
(assert (<= $Perm.No (- $k@73@04 $k@96@04)))
(assert (<= (- $k@73@04 $k@96@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@73@04 $k@96@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               265
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              294
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186081)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               266
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              295
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186129)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               267
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              296
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186177)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               268
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              297
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186225)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               269
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              298
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186273)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               270
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              299
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186321)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               271
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              300
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186369)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               272
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              301
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186417)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               273
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              302
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186465)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               274
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              303
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186513)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               275
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              304
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186561)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               276
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              305
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186609)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               277
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              306
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186657)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               278
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              307
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186705)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               279
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              308
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186753)
(push) ; 4
(assert (not (< $Perm.No $k@73@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      41
;  :arith-assert-lower      120
;  :arith-assert-upper      85
;  :arith-conflicts         4
;  :arith-eq-adapter        60
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               280
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             949
;  :mk-clause               165
;  :num-allocs              4363119
;  :num-checks              309
;  :propagations            104
;  :quant-instantiations    53
;  :rlimit-count            186801)
(declare-const $k@97@04 $Perm)
(assert ($Perm.isReadVar $k@97@04 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      86
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               281
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             953
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              310
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            186997)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@97@04 $Perm.No) (< $Perm.No $k@97@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      86
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             953
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              311
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187047)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@74@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      122
;  :arith-assert-upper      86
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            8
;  :binary-propagations     22
;  :conflicts               282
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             953
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              312
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187058)
(assert (< $k@97@04 $k@74@04))
(assert (<= $Perm.No (- $k@74@04 $k@97@04)))
(assert (<= (- $k@74@04 $k@97@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@74@04 $k@97@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               283
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              313
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187272)
(push) ; 4
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               284
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              314
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187320)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               285
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              315
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187368)
(push) ; 4
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               286
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              316
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187416)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               287
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              317
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187464)
(push) ; 4
(assert (not (< $Perm.No $k@74@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      42
;  :arith-assert-lower      124
;  :arith-assert-upper      87
;  :arith-conflicts         4
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               288
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             956
;  :mk-clause               167
;  :num-allocs              4363119
;  :num-checks              318
;  :propagations            105
;  :quant-instantiations    53
;  :rlimit-count            187512)
(declare-const $k@98@04 $Perm)
(assert ($Perm.isReadVar $k@98@04 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      88
;  :arith-conflicts         4
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               289
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             960
;  :mk-clause               169
;  :num-allocs              4363119
;  :num-checks              319
;  :propagations            106
;  :quant-instantiations    53
;  :rlimit-count            187709)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@98@04 $Perm.No) (< $Perm.No $k@98@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1334
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      88
;  :arith-conflicts         4
;  :arith-eq-adapter        62
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               290
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              119
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             960
;  :mk-clause               169
;  :num-allocs              4363119
;  :num-checks              320
;  :propagations            106
;  :quant-instantiations    53
;  :rlimit-count            187759)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@34@04 $k@75@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          6
;  :arith-assert-diseq      43
;  :arith-assert-lower      126
;  :arith-assert-upper      89
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               291
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             962
;  :mk-clause               171
;  :num-allocs              4363119
;  :num-checks              321
;  :propagations            107
;  :quant-instantiations    53
;  :rlimit-count            187821)
(assert (< $k@98@04 (+ $k@34@04 $k@75@04)))
(assert (<= $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04)))
(assert (<= (- (+ $k@34@04 $k@75@04) $k@98@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      90
;  :arith-conflicts         5
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         8
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               292
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             965
;  :mk-clause               171
;  :num-allocs              4363119
;  :num-checks              322
;  :propagations            107
;  :quant-instantiations    53
;  :rlimit-count            188038)
(push) ; 4
(assert (not (< $Perm.No (+ $k@34@04 $k@75@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      91
;  :arith-conflicts         6
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         9
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               293
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             966
;  :mk-clause               171
;  :num-allocs              4363119
;  :num-checks              323
;  :propagations            107
;  :quant-instantiations    53
;  :rlimit-count            188101)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      91
;  :arith-conflicts         6
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         9
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               294
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             966
;  :mk-clause               171
;  :num-allocs              4363119
;  :num-checks              324
;  :propagations            107
;  :quant-instantiations    53
;  :rlimit-count            188149)
(push) ; 4
(assert (not (< $Perm.No (+ $k@34@04 $k@75@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      43
;  :arith-assert-lower      128
;  :arith-assert-upper      92
;  :arith-conflicts         7
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         10
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               295
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             967
;  :mk-clause               171
;  :num-allocs              4363119
;  :num-checks              325
;  :propagations            107
;  :quant-instantiations    53
;  :rlimit-count            188212)
(declare-const $k@99@04 $Perm)
(assert ($Perm.isReadVar $k@99@04 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      93
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               296
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             971
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              326
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188409)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      93
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               297
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             971
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              327
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188457)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@99@04 $Perm.No) (< $Perm.No $k@99@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      93
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             971
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              328
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188507)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@77@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      130
;  :arith-assert-upper      93
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            9
;  :binary-propagations     22
;  :conflicts               298
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             971
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              329
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188518)
(assert (< $k@99@04 $k@77@04))
(assert (<= $Perm.No (- $k@77@04 $k@99@04)))
(assert (<= (- $k@77@04 $k@99@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@77@04 $k@99@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      94
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               299
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             974
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              330
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188732)
(push) ; 4
(assert (not (< $Perm.No $k@72@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      94
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               300
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             974
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              331
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188780)
(push) ; 4
(assert (not (< $Perm.No $k@77@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      94
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               301
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             974
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              332
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188828)
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      94
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               302
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             974
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              333
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188876)
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 4
(assert (not (< $Perm.No $k@33@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      94
;  :arith-conflicts         7
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         10
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               303
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             974
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              334
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188924)
(push) ; 4
(assert (not (< $Perm.No (+ $k@34@04 $k@75@04))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      95
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               304
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             975
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              335
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            188987)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@76@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1335
;  :arith-add-rows          7
;  :arith-assert-diseq      44
;  :arith-assert-lower      132
;  :arith-assert-upper      95
;  :arith-conflicts         8
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               305
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 222
;  :datatype-occurs-check   46
;  :datatype-splits         127
;  :decisions               218
;  :del-clause              121
;  :final-checks            24
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             975
;  :mk-clause               173
;  :num-allocs              4363119
;  :num-checks              336
;  :propagations            108
;  :quant-instantiations    53
;  :rlimit-count            189043)
(assert (= $t@76@04 diz@30@04))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@86@04 $Perm.Write))
(assert ($Perm.isReadVar $k@88@04 $Perm.Write))
(assert ($Perm.isReadVar $k@89@04 $Perm.Write))
(assert ($Perm.isReadVar $k@90@04 $Perm.Write))
(assert ($Perm.isReadVar $k@91@04 $Perm.Write))
(assert ($Perm.isReadVar $k@92@04 $Perm.Write))
(assert (= $t@85@04 ($Snap.combine ($Snap.first $t@85@04) ($Snap.second $t@85@04))))
(assert (<= $Perm.No $k@86@04))
(assert (<= $k@86@04 $Perm.Write))
(assert (implies (< $Perm.No $k@86@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@85@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@85@04))
    ($Snap.second ($Snap.second $t@85@04)))))
(assert (= ($Snap.first ($Snap.second $t@85@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@85@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@85@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@85@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  $Snap.unit))
(assert (forall ((i__183@87@04 Int)) (!
  (implies
    (and
      (<
        i__183@87@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i__183@87@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i__183@87@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__183@87@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__183@87@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__183@87@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
(assert (<= $Perm.No $k@88@04))
(assert (<= $k@88@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@88@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
(assert (<= $Perm.No $k@89@04))
(assert (<= $k@89@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@89@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@90@04))
(assert (<= $k@90@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@90@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@91@04))
(assert (<= $k@91@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@91@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@92@04))
(assert (<= $k@92@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@92@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 5
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1967
;  :arith-add-rows          7
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      109
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   64
;  :datatype-splits         239
;  :decisions               356
;  :del-clause              135
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1188
;  :mk-clause               188
;  :num-allocs              4716216
;  :num-checks              339
;  :propagations            117
;  :quant-instantiations    63
;  :rlimit-count            197810)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1967
;  :arith-add-rows          7
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      109
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               307
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   64
;  :datatype-splits         239
;  :decisions               356
;  :del-clause              135
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1188
;  :mk-clause               188
;  :num-allocs              4716216
;  :num-checks              340
;  :propagations            117
;  :quant-instantiations    63
;  :rlimit-count            197825)
; [eval] -1
(push) ; 5
; [then-branch: 18 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 | live]
; [else-branch: 18 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 18 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 18 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_event_state[4]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1968
;  :arith-add-rows          7
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      109
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   64
;  :datatype-splits         239
;  :decisions               356
;  :del-clause              135
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1189
;  :mk-clause               188
;  :num-allocs              4716216
;  :num-checks              341
;  :propagations            117
;  :quant-instantiations    63
;  :rlimit-count            198016)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1968
;  :arith-add-rows          7
;  :arith-assert-diseq      50
;  :arith-assert-lower      148
;  :arith-assert-upper      109
;  :arith-conflicts         8
;  :arith-eq-adapter        72
;  :arith-fixed-eqs         11
;  :arith-pivots            10
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    180
;  :datatype-constructor-ax 364
;  :datatype-occurs-check   64
;  :datatype-splits         239
;  :decisions               356
;  :del-clause              135
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1189
;  :mk-clause               188
;  :num-allocs              4716216
;  :num-checks              342
;  :propagations            117
;  :quant-instantiations    63
;  :rlimit-count            198031)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
          4)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2149
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      155
;  :arith-assert-upper      112
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    182
;  :datatype-constructor-ax 422
;  :datatype-occurs-check   73
;  :datatype-splits         295
;  :decisions               413
;  :del-clause              146
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1260
;  :mk-clause               199
;  :num-allocs              4716216
;  :num-checks              343
;  :propagations            124
;  :quant-instantiations    65
;  :rlimit-count            199688
;  :time                    0.00)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
        4)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      155
;  :arith-assert-upper      112
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               308
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1317
;  :mk-clause               199
;  :num-allocs              4716216
;  :num-checks              344
;  :propagations            126
;  :quant-instantiations    65
;  :rlimit-count            201160
;  :time                    0.00)
; [then-branch: 19 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2 | live]
; [else-branch: 19 | !(First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2) | live]
(push) ; 5
; [then-branch: 19 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
        4)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      155
;  :arith-assert-upper      112
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               309
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1319
;  :mk-clause               200
;  :num-allocs              4716216
;  :num-checks              345
;  :propagations            126
;  :quant-instantiations    65
;  :rlimit-count            201438)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      155
;  :arith-assert-upper      112
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1319
;  :mk-clause               200
;  :num-allocs              4716216
;  :num-checks              346
;  :propagations            126
;  :quant-instantiations    65
;  :rlimit-count            201486)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@100@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 20 | 0 <= i@100@04 | live]
; [else-branch: 20 | !(0 <= i@100@04) | live]
(push) ; 8
; [then-branch: 20 | 0 <= i@100@04]
(assert (<= 0 i@100@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 20 | !(0 <= i@100@04)]
(assert (not (<= 0 i@100@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 21 | i@100@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i@100@04 | live]
; [else-branch: 21 | !(i@100@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i@100@04) | live]
(push) ; 8
; [then-branch: 21 | i@100@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i@100@04]
(assert (and
  (<
    i@100@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  (<= 0 i@100@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@100@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      52
;  :arith-assert-lower      156
;  :arith-assert-upper      113
;  :arith-conflicts         8
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1321
;  :mk-clause               200
;  :num-allocs              4716216
;  :num-checks              347
;  :propagations            126
;  :quant-instantiations    65
;  :rlimit-count            201622)
; [eval] -1
(push) ; 9
; [then-branch: 22 | First:(Second:(Second:(Second:($t@85@04))))[i@100@04] == -1 | live]
; [else-branch: 22 | First:(Second:(Second:(Second:($t@85@04))))[i@100@04] != -1 | live]
(push) ; 10
; [then-branch: 22 | First:(Second:(Second:(Second:($t@85@04))))[i@100@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i@100@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 22 | First:(Second:(Second:(Second:($t@85@04))))[i@100@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i@100@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@100@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      159
;  :arith-assert-upper      114
;  :arith-conflicts         8
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1327
;  :mk-clause               204
;  :num-allocs              4716216
;  :num-checks              348
;  :propagations            128
;  :quant-instantiations    66
;  :rlimit-count            201854)
(push) ; 11
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i@100@04] | live]
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i@100@04]) | live]
(push) ; 12
; [then-branch: 23 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i@100@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i@100@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@100@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      53
;  :arith-assert-lower      159
;  :arith-assert-upper      114
;  :arith-conflicts         8
;  :arith-eq-adapter        76
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               310
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              146
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1327
;  :mk-clause               204
;  :num-allocs              4716216
;  :num-checks              349
;  :propagations            128
;  :quant-instantiations    66
;  :rlimit-count            201968)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i@100@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i@100@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(i@100@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i@100@04)]
(assert (not
  (and
    (<
      i@100@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
    (<= 0 i@100@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@100@04 Int)) (!
  (implies
    (and
      (<
        i@100@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i@100@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i@100@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i@100@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i@100@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i@100@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      55
;  :arith-assert-lower      160
;  :arith-assert-upper      115
;  :arith-conflicts         8
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               311
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1335
;  :mk-clause               218
;  :num-allocs              4716216
;  :num-checks              350
;  :propagations            130
;  :quant-instantiations    67
;  :rlimit-count            202414)
(assert (forall ((i@100@04 Int)) (!
  (implies
    (and
      (<
        i@100@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i@100@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i@100@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i@100@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i@100@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i@100@04))
  :qid |prog.l<no position>|)))
(declare-const $k@101@04 $Perm)
(assert ($Perm.isReadVar $k@101@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@101@04 $Perm.No) (< $Perm.No $k@101@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1340
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              351
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            202975)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@88@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      162
;  :arith-assert-upper      116
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            12
;  :binary-propagations     22
;  :conflicts               312
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1340
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              352
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            202986)
(assert (< $k@101@04 $k@88@04))
(assert (<= $Perm.No (- $k@88@04 $k@101@04)))
(assert (<= (- $k@88@04 $k@101@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@88@04 $k@101@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               313
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              353
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203200)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               314
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              354
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203248)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               315
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              355
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203296)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               316
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              356
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203344)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               317
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              357
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203392)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               318
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              358
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203440)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               319
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              359
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203488)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               320
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              360
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203536)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               321
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              361
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203584)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               322
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              362
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203632)
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      56
;  :arith-assert-lower      164
;  :arith-assert-upper      117
;  :arith-conflicts         8
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               323
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1343
;  :mk-clause               220
;  :num-allocs              4716216
;  :num-checks              363
;  :propagations            131
;  :quant-instantiations    67
;  :rlimit-count            203680)
(declare-const $k@102@04 $Perm)
(assert ($Perm.isReadVar $k@102@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@102@04 $Perm.No) (< $Perm.No $k@102@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      166
;  :arith-assert-upper      118
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1347
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              364
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            203879)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@89@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      166
;  :arith-assert-upper      118
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            13
;  :binary-propagations     22
;  :conflicts               324
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1347
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              365
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            203890)
(assert (< $k@102@04 $k@89@04))
(assert (<= $Perm.No (- $k@89@04 $k@102@04)))
(assert (<= (- $k@89@04 $k@102@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@89@04 $k@102@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               325
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              366
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204104)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               326
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              367
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204152)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               327
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              368
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204200)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               328
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              369
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204248)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               329
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              370
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204296)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               330
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              371
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204344)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               331
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              372
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204392)
(push) ; 6
(assert (not (< $Perm.No $k@89@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      57
;  :arith-assert-lower      168
;  :arith-assert-upper      119
;  :arith-conflicts         8
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               332
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1350
;  :mk-clause               222
;  :num-allocs              4716216
;  :num-checks              373
;  :propagations            132
;  :quant-instantiations    67
;  :rlimit-count            204440)
(declare-const $k@103@04 $Perm)
(assert ($Perm.isReadVar $k@103@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@103@04 $Perm.No) (< $Perm.No $k@103@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      170
;  :arith-assert-upper      120
;  :arith-conflicts         8
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1354
;  :mk-clause               224
;  :num-allocs              4716216
;  :num-checks              374
;  :propagations            133
;  :quant-instantiations    67
;  :rlimit-count            204639)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@90@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      170
;  :arith-assert-upper      120
;  :arith-conflicts         8
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               333
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1354
;  :mk-clause               224
;  :num-allocs              4716216
;  :num-checks              375
;  :propagations            133
;  :quant-instantiations    67
;  :rlimit-count            204650)
(assert (< $k@103@04 $k@90@04))
(assert (<= $Perm.No (- $k@90@04 $k@103@04)))
(assert (<= (- $k@90@04 $k@103@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@90@04 $k@103@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      172
;  :arith-assert-upper      121
;  :arith-conflicts         8
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               334
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1357
;  :mk-clause               224
;  :num-allocs              4716216
;  :num-checks              376
;  :propagations            133
;  :quant-instantiations    67
;  :rlimit-count            204858)
(push) ; 6
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      172
;  :arith-assert-upper      121
;  :arith-conflicts         8
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               335
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1357
;  :mk-clause               224
;  :num-allocs              4716216
;  :num-checks              377
;  :propagations            133
;  :quant-instantiations    67
;  :rlimit-count            204906)
(push) ; 6
(assert (not (< $Perm.No $k@90@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      58
;  :arith-assert-lower      172
;  :arith-assert-upper      121
;  :arith-conflicts         8
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               336
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1357
;  :mk-clause               224
;  :num-allocs              4716216
;  :num-checks              378
;  :propagations            133
;  :quant-instantiations    67
;  :rlimit-count            204954)
(declare-const $k@104@04 $Perm)
(assert ($Perm.isReadVar $k@104@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@104@04 $Perm.No) (< $Perm.No $k@104@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      59
;  :arith-assert-lower      174
;  :arith-assert-upper      122
;  :arith-conflicts         8
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1361
;  :mk-clause               226
;  :num-allocs              4716216
;  :num-checks              379
;  :propagations            134
;  :quant-instantiations    67
;  :rlimit-count            205152)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@91@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      59
;  :arith-assert-lower      174
;  :arith-assert-upper      122
;  :arith-conflicts         8
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         12
;  :arith-pivots            14
;  :binary-propagations     22
;  :conflicts               337
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1361
;  :mk-clause               226
;  :num-allocs              4716216
;  :num-checks              380
;  :propagations            134
;  :quant-instantiations    67
;  :rlimit-count            205163)
(assert (< $k@104@04 $k@91@04))
(assert (<= $Perm.No (- $k@91@04 $k@104@04)))
(assert (<= (- $k@91@04 $k@104@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@91@04 $k@104@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@91@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      59
;  :arith-assert-lower      176
;  :arith-assert-upper      123
;  :arith-conflicts         8
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               338
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1364
;  :mk-clause               226
;  :num-allocs              4716216
;  :num-checks              381
;  :propagations            134
;  :quant-instantiations    67
;  :rlimit-count            205383)
(push) ; 6
(assert (not (< $Perm.No $k@91@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      59
;  :arith-assert-lower      176
;  :arith-assert-upper      123
;  :arith-conflicts         8
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               339
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1364
;  :mk-clause               226
;  :num-allocs              4716216
;  :num-checks              382
;  :propagations            134
;  :quant-instantiations    67
;  :rlimit-count            205431)
(declare-const $k@105@04 $Perm)
(assert ($Perm.isReadVar $k@105@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      178
;  :arith-assert-upper      124
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               340
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1368
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              383
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            205628)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@105@04 $Perm.No) (< $Perm.No $k@105@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      178
;  :arith-assert-upper      124
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1368
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              384
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            205678)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@92@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      178
;  :arith-assert-upper      124
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               341
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1368
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              385
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            205689)
(assert (< $k@105@04 $k@92@04))
(assert (<= $Perm.No (- $k@92@04 $k@105@04)))
(assert (<= (- $k@92@04 $k@105@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@92@04 $k@105@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No $k@88@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      180
;  :arith-assert-upper      125
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               342
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1371
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              386
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            205897)
(push) ; 6
(assert (not (< $Perm.No $k@92@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2328
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      180
;  :arith-assert-upper      125
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               343
;  :datatype-accessor-ax    184
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1371
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              387
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            205945)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) __globals@31@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2402
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      180
;  :arith-assert-upper      125
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               344
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1372
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              388
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            207500)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2402
;  :arith-add-rows          7
;  :arith-assert-diseq      60
;  :arith-assert-lower      180
;  :arith-assert-upper      125
;  :arith-conflicts         8
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         12
;  :arith-pivots            16
;  :binary-propagations     22
;  :conflicts               345
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 480
;  :datatype-occurs-check   82
;  :datatype-splits         351
;  :decisions               469
;  :del-clause              164
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1372
;  :mk-clause               228
;  :num-allocs              4716216
;  :num-checks              389
;  :propagations            135
;  :quant-instantiations    67
;  :rlimit-count            207548)
(declare-const $t@106@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2621
;  :arith-add-rows          7
;  :arith-assert-diseq      62
;  :arith-assert-lower      187
;  :arith-assert-upper      128
;  :arith-conflicts         8
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         13
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              184
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1441
;  :mk-clause               238
;  :num-allocs              4903724
;  :num-checks              391
;  :propagations            142
;  :quant-instantiations    70
;  :rlimit-count            209078)
(assert (= $t@106@04 ($Snap.combine ($Snap.first $t@106@04) ($Snap.second $t@106@04))))
(assert (= ($Snap.first $t@106@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@106@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@106@04))
    ($Snap.second ($Snap.second $t@106@04)))))
(assert (= ($Snap.first ($Snap.second $t@106@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@106@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@106@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@106@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@106@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@107@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 24 | 0 <= i@107@04 | live]
; [else-branch: 24 | !(0 <= i@107@04) | live]
(push) ; 8
; [then-branch: 24 | 0 <= i@107@04]
(assert (<= 0 i@107@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 24 | !(0 <= i@107@04)]
(assert (not (<= 0 i@107@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 25 | i@107@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i@107@04 | live]
; [else-branch: 25 | !(i@107@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i@107@04) | live]
(push) ; 8
; [then-branch: 25 | i@107@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i@107@04]
(assert (and
  (<
    i@107@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
  (<= 0 i@107@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@107@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2671
;  :arith-add-rows          7
;  :arith-assert-diseq      62
;  :arith-assert-lower      192
;  :arith-assert-upper      131
;  :arith-conflicts         8
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         13
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              184
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1467
;  :mk-clause               238
;  :num-allocs              4903724
;  :num-checks              392
;  :propagations            142
;  :quant-instantiations    74
;  :rlimit-count            210381)
; [eval] -1
(push) ; 9
; [then-branch: 26 | First:(Second:(Second:(Second:($t@106@04))))[i@107@04] == -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@106@04))))[i@107@04] != -1 | live]
(push) ; 10
; [then-branch: 26 | First:(Second:(Second:(Second:($t@106@04))))[i@107@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i@107@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 26 | First:(Second:(Second:(Second:($t@106@04))))[i@107@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
      i@107@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@107@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2671
;  :arith-add-rows          7
;  :arith-assert-diseq      62
;  :arith-assert-lower      192
;  :arith-assert-upper      131
;  :arith-conflicts         8
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         13
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              184
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1468
;  :mk-clause               238
;  :num-allocs              4903724
;  :num-checks              393
;  :propagations            142
;  :quant-instantiations    74
;  :rlimit-count            210556)
(push) ; 11
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@106@04))))[i@107@04] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@106@04))))[i@107@04]) | live]
(push) ; 12
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@106@04))))[i@107@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i@107@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@107@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2671
;  :arith-add-rows          7
;  :arith-assert-diseq      63
;  :arith-assert-lower      195
;  :arith-assert-upper      131
;  :arith-conflicts         8
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         13
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               346
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              184
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1471
;  :mk-clause               239
;  :num-allocs              4903724
;  :num-checks              394
;  :propagations            142
;  :quant-instantiations    74
;  :rlimit-count            210680)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@106@04))))[i@107@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
      i@107@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 25 | !(i@107@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i@107@04)]
(assert (not
  (and
    (<
      i@107@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
    (<= 0 i@107@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@107@04 Int)) (!
  (implies
    (and
      (<
        i@107@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
      (<= 0 i@107@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
          i@107@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i@107@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i@107@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i@107@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))
(declare-const $k@108@04 $Perm)
(assert ($Perm.isReadVar $k@108@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@108@04 $Perm.No) (< $Perm.No $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2676
;  :arith-add-rows          7
;  :arith-assert-diseq      64
;  :arith-assert-lower      197
;  :arith-assert-upper      132
;  :arith-conflicts         8
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         13
;  :arith-pivots            18
;  :binary-propagations     22
;  :conflicts               347
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1477
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              395
;  :propagations            143
;  :quant-instantiations    74
;  :rlimit-count            211448)
(declare-const $t@109@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@88@04 $k@101@04))
    (=
      $t@109@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))
  (implies
    (< $Perm.No $k@108@04)
    (=
      $t@109@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))
(assert (<= $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04)))
(assert (<= (+ (- $k@88@04 $k@101@04) $k@108@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2686
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      134
;  :arith-conflicts         9
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         14
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               348
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1485
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              396
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            212134)
(assert (not (= $t@109@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2692
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      135
;  :arith-conflicts         10
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         15
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               349
;  :datatype-accessor-ax    234
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1488
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              397
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            212458)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2697
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      136
;  :arith-conflicts         11
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         16
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               350
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1490
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              398
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            212747)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2702
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      137
;  :arith-conflicts         12
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         17
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               351
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1492
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              399
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            213046)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2707
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      138
;  :arith-conflicts         13
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         18
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               352
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1494
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              400
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            213355)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2712
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      139
;  :arith-conflicts         14
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         19
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               353
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1496
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              401
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            213674)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2717
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      140
;  :arith-conflicts         15
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         20
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               354
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1498
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              402
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            214003)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2722
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      141
;  :arith-conflicts         16
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         21
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               355
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1500
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              403
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            214342)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2727
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      142
;  :arith-conflicts         17
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         22
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               356
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1502
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              404
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            214691)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2732
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      143
;  :arith-conflicts         18
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         23
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               357
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1504
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              405
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            215050)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2737
;  :arith-add-rows          8
;  :arith-assert-diseq      64
;  :arith-assert-lower      198
;  :arith-assert-upper      144
;  :arith-conflicts         19
;  :arith-eq-adapter        89
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               358
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1506
;  :mk-clause               241
;  :num-allocs              4903724
;  :num-checks              406
;  :propagations            143
;  :quant-instantiations    75
;  :rlimit-count            215419)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))
(declare-const $k@110@04 $Perm)
(assert ($Perm.isReadVar $k@110@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@110@04 $Perm.No) (< $Perm.No $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2742
;  :arith-add-rows          8
;  :arith-assert-diseq      65
;  :arith-assert-lower      200
;  :arith-assert-upper      145
;  :arith-conflicts         19
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         24
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               359
;  :datatype-accessor-ax    244
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1511
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              407
;  :propagations            144
;  :quant-instantiations    75
;  :rlimit-count            215910)
(declare-const $t@111@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@89@04 $k@102@04))
    (=
      $t@111@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@110@04)
    (=
      $t@111@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04)))
(assert (<= (+ (- $k@89@04 $k@102@04) $k@110@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2752
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      147
;  :arith-conflicts         20
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         25
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               360
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1519
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              408
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            216848)
(assert (not (= $t@111@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2758
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      148
;  :arith-conflicts         21
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         26
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               361
;  :datatype-accessor-ax    246
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1522
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              409
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            217290)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2763
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      149
;  :arith-conflicts         22
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         27
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               362
;  :datatype-accessor-ax    247
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1524
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              410
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            217697)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2768
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      150
;  :arith-conflicts         23
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         28
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               363
;  :datatype-accessor-ax    248
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1526
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              411
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            218114)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2773
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      151
;  :arith-conflicts         24
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         29
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               364
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1528
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              412
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            218541)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2778
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      152
;  :arith-conflicts         25
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         30
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               365
;  :datatype-accessor-ax    250
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1530
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              413
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            218978)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2783
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      153
;  :arith-conflicts         26
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         31
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               366
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1532
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              414
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            219425)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2788
;  :arith-add-rows          9
;  :arith-assert-diseq      65
;  :arith-assert-lower      201
;  :arith-assert-upper      154
;  :arith-conflicts         27
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         32
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               367
;  :datatype-accessor-ax    252
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1534
;  :mk-clause               243
;  :num-allocs              4903724
;  :num-checks              415
;  :propagations            144
;  :quant-instantiations    76
;  :rlimit-count            219882)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))
(declare-const $k@112@04 $Perm)
(assert ($Perm.isReadVar $k@112@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@112@04 $Perm.No) (< $Perm.No $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2793
;  :arith-add-rows          9
;  :arith-assert-diseq      66
;  :arith-assert-lower      203
;  :arith-assert-upper      155
;  :arith-conflicts         27
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         32
;  :arith-pivots            19
;  :binary-propagations     22
;  :conflicts               368
;  :datatype-accessor-ax    253
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1539
;  :mk-clause               245
;  :num-allocs              4903724
;  :num-checks              416
;  :propagations            145
;  :quant-instantiations    76
;  :rlimit-count            220463)
(declare-const $t@113@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@90@04 $k@103@04))
    (=
      $t@113@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@112@04)
    (=
      $t@113@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04)))
(assert (<= (+ (- $k@90@04 $k@103@04) $k@112@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2803
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      204
;  :arith-assert-upper      157
;  :arith-conflicts         28
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         33
;  :arith-pivots            21
;  :binary-propagations     22
;  :conflicts               369
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1547
;  :mk-clause               245
;  :num-allocs              4903724
;  :num-checks              417
;  :propagations            145
;  :quant-instantiations    77
;  :rlimit-count            221603)
(assert (not (= $t@113@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2809
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      204
;  :arith-assert-upper      158
;  :arith-conflicts         29
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         34
;  :arith-pivots            22
;  :binary-propagations     22
;  :conflicts               370
;  :datatype-accessor-ax    255
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1550
;  :mk-clause               245
;  :num-allocs              4903724
;  :num-checks              418
;  :propagations            145
;  :quant-instantiations    77
;  :rlimit-count            222145)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2814
;  :arith-add-rows          10
;  :arith-assert-diseq      66
;  :arith-assert-lower      204
;  :arith-assert-upper      159
;  :arith-conflicts         30
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         35
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               371
;  :datatype-accessor-ax    256
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1552
;  :mk-clause               245
;  :num-allocs              4903724
;  :num-checks              419
;  :propagations            145
;  :quant-instantiations    77
;  :rlimit-count            222652)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))))
(declare-const $k@114@04 $Perm)
(assert ($Perm.isReadVar $k@114@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@114@04 $Perm.No) (< $Perm.No $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2819
;  :arith-add-rows          10
;  :arith-assert-diseq      67
;  :arith-assert-lower      206
;  :arith-assert-upper      160
;  :arith-conflicts         30
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         35
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               372
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1557
;  :mk-clause               247
;  :num-allocs              4903724
;  :num-checks              420
;  :propagations            146
;  :quant-instantiations    77
;  :rlimit-count            223273)
(declare-const $t@115@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@91@04 $k@104@04))
    (=
      $t@115@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@114@04)
    (=
      $t@115@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04)))
(assert (<= (+ (- $k@91@04 $k@104@04) $k@114@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2829
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      207
;  :arith-assert-upper      162
;  :arith-conflicts         31
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         36
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               373
;  :datatype-accessor-ax    258
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1565
;  :mk-clause               247
;  :num-allocs              4903724
;  :num-checks              421
;  :propagations            146
;  :quant-instantiations    78
;  :rlimit-count            224111)
(assert (not (= $t@115@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2834
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      207
;  :arith-assert-upper      163
;  :arith-conflicts         32
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         37
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               374
;  :datatype-accessor-ax    259
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1567
;  :mk-clause               247
;  :num-allocs              4903724
;  :num-checks              422
;  :propagations            146
;  :quant-instantiations    78
;  :rlimit-count            224656)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2839
;  :arith-add-rows          11
;  :arith-assert-diseq      67
;  :arith-assert-lower      207
;  :arith-assert-upper      164
;  :arith-conflicts         33
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         38
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               375
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1569
;  :mk-clause               247
;  :num-allocs              5099351
;  :num-checks              423
;  :propagations            146
;  :quant-instantiations    78
;  :rlimit-count            225195)
(declare-const $k@116@04 $Perm)
(assert ($Perm.isReadVar $k@116@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@116@04 $Perm.No) (< $Perm.No $k@116@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2839
;  :arith-add-rows          11
;  :arith-assert-diseq      68
;  :arith-assert-lower      209
;  :arith-assert-upper      165
;  :arith-conflicts         33
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         38
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1573
;  :mk-clause               249
;  :num-allocs              5099351
;  :num-checks              424
;  :propagations            147
;  :quant-instantiations    78
;  :rlimit-count            225394)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $t@109@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2839
;  :arith-add-rows          11
;  :arith-assert-diseq      68
;  :arith-assert-lower      209
;  :arith-assert-upper      165
;  :arith-conflicts         33
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         38
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               376
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1573
;  :mk-clause               249
;  :num-allocs              5099351
;  :num-checks              425
;  :propagations            147
;  :quant-instantiations    78
;  :rlimit-count            225405)
(declare-const $t@117@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@92@04 $k@105@04))
    (=
      $t@117@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@116@04)
    (=
      $t@117@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@92@04 $k@105@04) $k@116@04)))
(assert (<= (+ (- $k@92@04 $k@105@04) $k@116@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@92@04 $k@105@04) $k@116@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2845
;  :arith-add-rows          11
;  :arith-assert-diseq      68
;  :arith-assert-lower      210
;  :arith-assert-upper      167
;  :arith-conflicts         34
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1580
;  :mk-clause               249
;  :num-allocs              5099351
;  :num-checks              426
;  :propagations            147
;  :quant-instantiations    79
;  :rlimit-count            226181)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $t@109@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2845
;  :arith-add-rows          11
;  :arith-assert-diseq      68
;  :arith-assert-lower      210
;  :arith-assert-upper      167
;  :arith-conflicts         34
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         39
;  :arith-pivots            23
;  :binary-propagations     22
;  :conflicts               377
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1580
;  :mk-clause               249
;  :num-allocs              5099351
;  :num-checks              427
;  :propagations            147
;  :quant-instantiations    79
;  :rlimit-count            226192)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@92@04 $k@105@04) $k@116@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2845
;  :arith-add-rows          12
;  :arith-assert-diseq      68
;  :arith-assert-lower      210
;  :arith-assert-upper      168
;  :arith-conflicts         35
;  :arith-eq-adapter        93
;  :arith-fixed-eqs         40
;  :arith-pivots            25
;  :binary-propagations     22
;  :conflicts               378
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 538
;  :datatype-occurs-check   134
;  :datatype-splits         407
;  :decisions               526
;  :del-clause              185
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1581
;  :mk-clause               249
;  :num-allocs              5099351
;  :num-checks              428
;  :propagations            147
;  :quant-instantiations    79
;  :rlimit-count            226299)
(assert (= $t@117@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@106@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) __globals@31@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3350
;  :arith-add-rows          12
;  :arith-assert-diseq      73
;  :arith-assert-lower      229
;  :arith-assert-upper      177
;  :arith-conflicts         35
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         44
;  :arith-pivots            29
;  :binary-propagations     22
;  :conflicts               380
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 671
;  :datatype-occurs-check   187
;  :datatype-splits         487
;  :decisions               657
;  :del-clause              223
;  :final-checks            42
;  :max-generation          2
;  :max-memory              4.85
;  :memory                  4.85
;  :mk-bool-var             1704
;  :mk-clause               278
;  :num-allocs              5296194
;  :num-checks              430
;  :propagations            163
;  :quant-instantiations    85
;  :rlimit-count            229161)
(declare-const $t@118@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@119@04 $Perm)
(assert ($Perm.isReadVar $k@119@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@119@04 $Perm.No) (< $Perm.No $k@119@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      242
;  :arith-assert-upper      183
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1810
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              432
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231343)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= $k@86@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      242
;  :arith-assert-upper      183
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               381
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1810
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              433
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231354)
(assert (< $k@119@04 $k@86@04))
(assert (<= $Perm.No (- $k@86@04 $k@119@04)))
(assert (<= (- $k@86@04 $k@119@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@86@04 $k@119@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               382
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              434
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231562)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               383
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              435
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231610)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               384
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              436
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231658)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               385
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              437
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231706)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               386
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              438
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231754)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      244
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               387
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1813
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              439
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231802)
; [eval] (forall i__183: Int :: { diz.Combinate_m.Main_process_state[i__183] } 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|)
(declare-const i__183@120@04 Int)
(push) ; 6
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__183 && i__183 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__183
(push) ; 7
; [then-branch: 28 | 0 <= i__183@120@04 | live]
; [else-branch: 28 | !(0 <= i__183@120@04) | live]
(push) ; 8
; [then-branch: 28 | 0 <= i__183@120@04]
(assert (<= 0 i__183@120@04))
; [eval] i__183 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 9
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      245
;  :arith-assert-upper      184
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               388
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1814
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              440
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            231903)
(pop) ; 8
(push) ; 8
; [else-branch: 28 | !(0 <= i__183@120@04)]
(assert (not (<= 0 i__183@120@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 29 | i__183@120@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i__183@120@04 | live]
; [else-branch: 29 | !(i__183@120@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i__183@120@04) | live]
(push) ; 8
; [then-branch: 29 | i__183@120@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i__183@120@04]
(assert (and
  (<
    i__183@120@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
  (<= 0 i__183@120@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183] == -1
; [eval] diz.Combinate_m.Main_process_state[i__183]
(push) ; 9
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      185
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1816
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              441
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            232060)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i__183@120@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      77
;  :arith-assert-lower      246
;  :arith-assert-upper      185
;  :arith-conflicts         35
;  :arith-eq-adapter        108
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               389
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1816
;  :mk-clause               296
;  :num-allocs              5495370
;  :num-checks              442
;  :propagations            175
;  :quant-instantiations    89
;  :rlimit-count            232069)
; [eval] -1
(push) ; 9
; [then-branch: 30 | First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04] == -1 | live]
; [else-branch: 30 | First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04] != -1 | live]
(push) ; 10
; [then-branch: 30 | First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i__183@120@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 30 | First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
      i__183@120@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183] && diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__183]
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      78
;  :arith-assert-lower      249
;  :arith-assert-upper      186
;  :arith-conflicts         35
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1822
;  :mk-clause               300
;  :num-allocs              5495370
;  :num-checks              443
;  :propagations            177
;  :quant-instantiations    90
;  :rlimit-count            232340)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i__183@120@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      78
;  :arith-assert-lower      249
;  :arith-assert-upper      186
;  :arith-conflicts         35
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               390
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1822
;  :mk-clause               300
;  :num-allocs              5495370
;  :num-checks              444
;  :propagations            177
;  :quant-instantiations    90
;  :rlimit-count            232349)
(push) ; 11
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04] | live]
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04]) | live]
(push) ; 12
; [then-branch: 31 | 0 <= First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i__183@120@04)))
; [eval] diz.Combinate_m.Main_process_state[i__183] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__183]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      78
;  :arith-assert-lower      249
;  :arith-assert-upper      186
;  :arith-conflicts         35
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1822
;  :mk-clause               300
;  :num-allocs              5495370
;  :num-checks              445
;  :propagations            177
;  :quant-instantiations    90
;  :rlimit-count            232502)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i__183@120@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      78
;  :arith-assert-lower      249
;  :arith-assert-upper      186
;  :arith-conflicts         35
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               391
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1822
;  :mk-clause               300
;  :num-allocs              5495370
;  :num-checks              446
;  :propagations            177
;  :quant-instantiations    90
;  :rlimit-count            232511)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      78
;  :arith-assert-lower      249
;  :arith-assert-upper      186
;  :arith-conflicts         35
;  :arith-eq-adapter        109
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               392
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              239
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1822
;  :mk-clause               300
;  :num-allocs              5495370
;  :num-checks              447
;  :propagations            177
;  :quant-instantiations    90
;  :rlimit-count            232559)
(pop) ; 12
(push) ; 12
; [else-branch: 31 | !(0 <= First:(Second:(Second:(Second:($t@106@04))))[i__183@120@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
      i__183@120@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 29 | !(i__183@120@04 < |First:(Second:(Second:(Second:($t@106@04))))| && 0 <= i__183@120@04)]
(assert (not
  (and
    (<
      i__183@120@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
    (<= 0 i__183@120@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 6
(assert (not (forall ((i__183@120@04 Int)) (!
  (implies
    (and
      (<
        i__183@120@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
      (<= 0 i__183@120@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
          i__183@120@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i__183@120@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i__183@120@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i__183@120@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      80
;  :arith-assert-lower      250
;  :arith-assert-upper      187
;  :arith-conflicts         35
;  :arith-eq-adapter        110
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               393
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              257
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1830
;  :mk-clause               314
;  :num-allocs              5495370
;  :num-checks              448
;  :propagations            179
;  :quant-instantiations    91
;  :rlimit-count            233005)
(assert (forall ((i__183@120@04 Int)) (!
  (implies
    (and
      (<
        i__183@120@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))
      (<= 0 i__183@120@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
          i__183@120@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i__183@120@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
            i__183@120@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@106@04)))))
    i__183@120@04))
  :qid |prog.l<no position>|)))
(declare-const $k@121@04 $Perm)
(assert ($Perm.isReadVar $k@121@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      81
;  :arith-assert-lower      252
;  :arith-assert-upper      188
;  :arith-conflicts         35
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               394
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              257
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1835
;  :mk-clause               316
;  :num-allocs              5495370
;  :num-checks              449
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            233563)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@121@04 $Perm.No) (< $Perm.No $k@121@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3664
;  :arith-add-rows          13
;  :arith-assert-diseq      81
;  :arith-assert-lower      252
;  :arith-assert-upper      188
;  :arith-conflicts         35
;  :arith-eq-adapter        111
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               395
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              257
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1835
;  :mk-clause               316
;  :num-allocs              5495370
;  :num-checks              450
;  :propagations            180
;  :quant-instantiations    91
;  :rlimit-count            233613)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@88@04 $k@101@04) $k@108@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          13
;  :arith-assert-diseq      81
;  :arith-assert-lower      252
;  :arith-assert-upper      189
;  :arith-conflicts         36
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               396
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1837
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              451
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            233693)
(assert (< $k@121@04 (+ (- $k@88@04 $k@101@04) $k@108@04)))
(assert (<= $Perm.No (- (+ (- $k@88@04 $k@101@04) $k@108@04) $k@121@04)))
(assert (<= (- (+ (- $k@88@04 $k@101@04) $k@108@04) $k@121@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@88@04 $k@101@04) $k@108@04) $k@121@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      190
;  :arith-conflicts         36
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         46
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               397
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1840
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              452
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            233929)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      191
;  :arith-conflicts         37
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         47
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               398
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1841
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              453
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234010)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      191
;  :arith-conflicts         37
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         47
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               399
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1841
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              454
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234058)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      192
;  :arith-conflicts         38
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         48
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               400
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1842
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              455
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234139)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      192
;  :arith-conflicts         38
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         48
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               401
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1842
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              456
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234187)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      193
;  :arith-conflicts         39
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         49
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               402
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1843
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              457
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234268)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      193
;  :arith-conflicts         39
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         49
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               403
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1843
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              458
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234316)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      194
;  :arith-conflicts         40
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         50
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               404
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1844
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              459
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234397)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      194
;  :arith-conflicts         40
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         50
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               405
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1844
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              460
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234445)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      195
;  :arith-conflicts         41
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         51
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               406
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1845
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              461
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234526)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      195
;  :arith-conflicts         41
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         51
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               407
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1845
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              462
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234574)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      196
;  :arith-conflicts         42
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         52
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               408
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1846
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              463
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234655)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      196
;  :arith-conflicts         42
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         52
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               409
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1846
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              464
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234703)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      197
;  :arith-conflicts         43
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         53
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               410
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1847
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              465
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234784)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      197
;  :arith-conflicts         43
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         53
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               411
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1847
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              466
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234832)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      198
;  :arith-conflicts         44
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         54
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               412
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1848
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              467
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234913)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      198
;  :arith-conflicts         44
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         54
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               413
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1848
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              468
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            234961)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      199
;  :arith-conflicts         45
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         55
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               414
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1849
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              469
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            235042)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      199
;  :arith-conflicts         45
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         55
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               415
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1849
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              470
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            235090)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      200
;  :arith-conflicts         46
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         56
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               416
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1850
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              471
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            235171)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      200
;  :arith-conflicts         46
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         56
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               417
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1850
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              472
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            235219)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      81
;  :arith-assert-lower      254
;  :arith-assert-upper      201
;  :arith-conflicts         47
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         57
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               418
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1851
;  :mk-clause               318
;  :num-allocs              5495370
;  :num-checks              473
;  :propagations            181
;  :quant-instantiations    91
;  :rlimit-count            235300)
(declare-const $k@122@04 $Perm)
(assert ($Perm.isReadVar $k@122@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      256
;  :arith-assert-upper      202
;  :arith-conflicts         47
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         57
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               419
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1855
;  :mk-clause               320
;  :num-allocs              5495370
;  :num-checks              474
;  :propagations            182
;  :quant-instantiations    91
;  :rlimit-count            235497)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@122@04 $Perm.No) (< $Perm.No $k@122@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3665
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      256
;  :arith-assert-upper      202
;  :arith-conflicts         47
;  :arith-eq-adapter        113
;  :arith-fixed-eqs         57
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               420
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              259
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1855
;  :mk-clause               320
;  :num-allocs              5495370
;  :num-checks              475
;  :propagations            182
;  :quant-instantiations    91
;  :rlimit-count            235547)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@89@04 $k@102@04) $k@110@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          15
;  :arith-assert-diseq      82
;  :arith-assert-lower      256
;  :arith-assert-upper      203
;  :arith-conflicts         48
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         57
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               421
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1857
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              476
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            235625)
(assert (< $k@122@04 (+ (- $k@89@04 $k@102@04) $k@110@04)))
(assert (<= $Perm.No (- (+ (- $k@89@04 $k@102@04) $k@110@04) $k@122@04)))
(assert (<= (- (+ (- $k@89@04 $k@102@04) $k@110@04) $k@122@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@89@04 $k@102@04) $k@110@04) $k@122@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      204
;  :arith-conflicts         48
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         57
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               422
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1860
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              477
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            235860)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      205
;  :arith-conflicts         49
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         58
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               423
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1861
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              478
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            235938)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      205
;  :arith-conflicts         49
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         58
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               424
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1861
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              479
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            235986)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      206
;  :arith-conflicts         50
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         59
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               425
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1862
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              480
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236064)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      206
;  :arith-conflicts         50
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         59
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               426
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1862
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              481
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236112)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      207
;  :arith-conflicts         51
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         60
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               427
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1863
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              482
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236190)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      207
;  :arith-conflicts         51
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         60
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               428
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1863
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              483
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236238)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         61
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               429
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1864
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              484
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236316)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      208
;  :arith-conflicts         52
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         61
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               430
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1864
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              485
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236364)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         62
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               431
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1865
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              486
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236442)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      209
;  :arith-conflicts         53
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         62
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               432
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1865
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              487
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236490)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      210
;  :arith-conflicts         54
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         63
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               433
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1866
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              488
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236568)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      210
;  :arith-conflicts         54
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         63
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               434
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1866
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              489
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236616)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      211
;  :arith-conflicts         55
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         64
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               435
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1867
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              490
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236694)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      211
;  :arith-conflicts         55
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         64
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               436
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1867
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              491
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236742)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@89@04 $k@102@04) $k@110@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      82
;  :arith-assert-lower      258
;  :arith-assert-upper      212
;  :arith-conflicts         56
;  :arith-eq-adapter        114
;  :arith-fixed-eqs         65
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               437
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1868
;  :mk-clause               322
;  :num-allocs              5495370
;  :num-checks              492
;  :propagations            183
;  :quant-instantiations    91
;  :rlimit-count            236820)
(declare-const $k@123@04 $Perm)
(assert ($Perm.isReadVar $k@123@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      260
;  :arith-assert-upper      213
;  :arith-conflicts         56
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         65
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               438
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1872
;  :mk-clause               324
;  :num-allocs              5495370
;  :num-checks              493
;  :propagations            184
;  :quant-instantiations    91
;  :rlimit-count            237017)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@123@04 $Perm.No) (< $Perm.No $k@123@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3666
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      260
;  :arith-assert-upper      213
;  :arith-conflicts         56
;  :arith-eq-adapter        115
;  :arith-fixed-eqs         65
;  :arith-pivots            33
;  :binary-propagations     22
;  :conflicts               439
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              261
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1872
;  :mk-clause               324
;  :num-allocs              5495370
;  :num-checks              494
;  :propagations            184
;  :quant-instantiations    91
;  :rlimit-count            237067)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@90@04 $k@103@04) $k@112@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          16
;  :arith-assert-diseq      83
;  :arith-assert-lower      260
;  :arith-assert-upper      214
;  :arith-conflicts         57
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         65
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               440
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1874
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              495
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237155)
(assert (< $k@123@04 (+ (- $k@90@04 $k@103@04) $k@112@04)))
(assert (<= $Perm.No (- (+ (- $k@90@04 $k@103@04) $k@112@04) $k@123@04)))
(assert (<= (- (+ (- $k@90@04 $k@103@04) $k@112@04) $k@123@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@90@04 $k@103@04) $k@112@04) $k@123@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      215
;  :arith-conflicts         57
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         65
;  :arith-pivots            34
;  :binary-propagations     22
;  :conflicts               441
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1877
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              496
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237390)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      216
;  :arith-conflicts         58
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         66
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               442
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1878
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              497
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237479)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      216
;  :arith-conflicts         58
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         66
;  :arith-pivots            35
;  :binary-propagations     22
;  :conflicts               443
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1878
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              498
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237527)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      217
;  :arith-conflicts         59
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         67
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               444
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1879
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              499
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237616)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      217
;  :arith-conflicts         59
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         67
;  :arith-pivots            36
;  :binary-propagations     22
;  :conflicts               445
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1879
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              500
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237664)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@90@04 $k@103@04) $k@112@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      83
;  :arith-assert-lower      262
;  :arith-assert-upper      218
;  :arith-conflicts         60
;  :arith-eq-adapter        116
;  :arith-fixed-eqs         68
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               446
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1880
;  :mk-clause               326
;  :num-allocs              5495370
;  :num-checks              501
;  :propagations            185
;  :quant-instantiations    91
;  :rlimit-count            237753)
(declare-const $k@124@04 $Perm)
(assert ($Perm.isReadVar $k@124@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      84
;  :arith-assert-lower      264
;  :arith-assert-upper      219
;  :arith-conflicts         60
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         68
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               447
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1884
;  :mk-clause               328
;  :num-allocs              5495370
;  :num-checks              502
;  :propagations            186
;  :quant-instantiations    91
;  :rlimit-count            237949)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@124@04 $Perm.No) (< $Perm.No $k@124@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3667
;  :arith-add-rows          17
;  :arith-assert-diseq      84
;  :arith-assert-lower      264
;  :arith-assert-upper      219
;  :arith-conflicts         60
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         68
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               448
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              263
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1884
;  :mk-clause               328
;  :num-allocs              5495370
;  :num-checks              503
;  :propagations            186
;  :quant-instantiations    91
;  :rlimit-count            237999)
(set-option :timeout 10)
(push) ; 6
(assert (not (not (= (+ (- $k@91@04 $k@104@04) $k@114@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          17
;  :arith-assert-diseq      84
;  :arith-assert-lower      264
;  :arith-assert-upper      220
;  :arith-conflicts         61
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         68
;  :arith-pivots            37
;  :binary-propagations     22
;  :conflicts               449
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1886
;  :mk-clause               330
;  :num-allocs              5495370
;  :num-checks              504
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            238077)
(assert (< $k@124@04 (+ (- $k@91@04 $k@104@04) $k@114@04)))
(assert (<= $Perm.No (- (+ (- $k@91@04 $k@104@04) $k@114@04) $k@124@04)))
(assert (<= (- (+ (- $k@91@04 $k@104@04) $k@114@04) $k@124@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@91@04 $k@104@04) $k@114@04) $k@124@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      266
;  :arith-assert-upper      221
;  :arith-conflicts         61
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         68
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               450
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1889
;  :mk-clause               330
;  :num-allocs              5495370
;  :num-checks              505
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            238319)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      266
;  :arith-assert-upper      222
;  :arith-conflicts         62
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         69
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               451
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1890
;  :mk-clause               330
;  :num-allocs              5495370
;  :num-checks              506
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            238397)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      266
;  :arith-assert-upper      222
;  :arith-conflicts         62
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         69
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               452
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1890
;  :mk-clause               330
;  :num-allocs              5495370
;  :num-checks              507
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            238445)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      84
;  :arith-assert-lower      266
;  :arith-assert-upper      223
;  :arith-conflicts         63
;  :arith-eq-adapter        118
;  :arith-fixed-eqs         70
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               453
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1891
;  :mk-clause               330
;  :num-allocs              5495370
;  :num-checks              508
;  :propagations            187
;  :quant-instantiations    91
;  :rlimit-count            238523)
(declare-const $k@125@04 $Perm)
(assert ($Perm.isReadVar $k@125@04 $Perm.Write))
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      85
;  :arith-assert-lower      268
;  :arith-assert-upper      224
;  :arith-conflicts         63
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         70
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               454
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1895
;  :mk-clause               332
;  :num-allocs              5495370
;  :num-checks              509
;  :propagations            188
;  :quant-instantiations    91
;  :rlimit-count            238720)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      85
;  :arith-assert-lower      268
;  :arith-assert-upper      225
;  :arith-conflicts         64
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         71
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               455
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1896
;  :mk-clause               332
;  :num-allocs              5495370
;  :num-checks              510
;  :propagations            188
;  :quant-instantiations    91
;  :rlimit-count            238801)
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@125@04 $Perm.No) (< $Perm.No $k@125@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      85
;  :arith-assert-lower      268
;  :arith-assert-upper      225
;  :arith-conflicts         64
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         71
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1896
;  :mk-clause               332
;  :num-allocs              5495370
;  :num-checks              511
;  :propagations            188
;  :quant-instantiations    91
;  :rlimit-count            238851)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $t@109@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3668
;  :arith-add-rows          18
;  :arith-assert-diseq      85
;  :arith-assert-lower      268
;  :arith-assert-upper      225
;  :arith-conflicts         64
;  :arith-eq-adapter        119
;  :arith-fixed-eqs         71
;  :arith-pivots            38
;  :binary-propagations     22
;  :conflicts               456
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              265
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1896
;  :mk-clause               332
;  :num-allocs              5495370
;  :num-checks              512
;  :propagations            188
;  :quant-instantiations    91
;  :rlimit-count            238862)
(push) ; 6
(assert (not (not (= (+ (- $k@92@04 $k@105@04) $k@116@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          18
;  :arith-assert-diseq      85
;  :arith-assert-lower      268
;  :arith-assert-upper      226
;  :arith-conflicts         65
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         71
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               457
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1898
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              513
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            238950)
(assert (< $k@125@04 (+ (- $k@92@04 $k@105@04) $k@116@04)))
(assert (<= $Perm.No (- (+ (- $k@92@04 $k@105@04) $k@116@04) $k@125@04)))
(assert (<= (- (+ (- $k@92@04 $k@105@04) $k@116@04) $k@125@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@92@04 $k@105@04) $k@116@04) $k@125@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      227
;  :arith-conflicts         65
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         71
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               458
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1901
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              514
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239185)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@88@04 $k@101@04) $k@108@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      228
;  :arith-conflicts         66
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         72
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1902
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              515
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239266)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  $t@109@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      228
;  :arith-conflicts         66
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         72
;  :arith-pivots            39
;  :binary-propagations     22
;  :conflicts               459
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1902
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              516
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239277)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@92@04 $k@105@04) $k@116@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      229
;  :arith-conflicts         67
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         73
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               460
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1903
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              517
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239366)
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      229
;  :arith-conflicts         67
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         73
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               461
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1903
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              518
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239414)
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 6
(assert (not (< $Perm.No $k@86@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      229
;  :arith-conflicts         67
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         73
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               462
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1903
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              519
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239462)
(push) ; 6
(assert (not (< $Perm.No (+ (- $k@91@04 $k@104@04) $k@114@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1904
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              520
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239540)
(set-option :timeout 0)
(push) ; 6
(assert (not (= $t@115@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3669
;  :arith-add-rows          19
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            40
;  :binary-propagations     22
;  :conflicts               463
;  :datatype-accessor-ax    266
;  :datatype-constructor-ax 753
;  :datatype-occurs-check   240
;  :datatype-splits         567
;  :decisions               737
;  :del-clause              267
;  :final-checks            45
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             1904
;  :mk-clause               334
;  :num-allocs              5495370
;  :num-checks              521
;  :propagations            189
;  :quant-instantiations    91
;  :rlimit-count            239551)
(assert (= $t@115@04 diz@30@04))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | !(First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
          4)
        (- 0 2))))))
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3909
;  :arith-add-rows          21
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               464
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 838
;  :datatype-occurs-check   249
;  :datatype-splits         625
;  :decisions               819
;  :del-clause              282
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             1965
;  :mk-clause               335
;  :num-allocs              5704763
;  :num-checks              522
;  :propagations            191
;  :quant-instantiations    91
;  :rlimit-count            241516
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4194
;  :arith-add-rows          21
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               465
;  :datatype-accessor-ax    274
;  :datatype-constructor-ax 951
;  :datatype-occurs-check   261
;  :datatype-splits         734
;  :decisions               927
;  :del-clause              283
;  :final-checks            52
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2076
;  :mk-clause               336
;  :num-allocs              5704763
;  :num-checks              523
;  :propagations            195
;  :quant-instantiations    91
;  :rlimit-count            243516
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4479
;  :arith-add-rows          21
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               466
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1064
;  :datatype-occurs-check   273
;  :datatype-splits         843
;  :decisions               1035
;  :del-clause              284
;  :final-checks            56
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2187
;  :mk-clause               337
;  :num-allocs              5704763
;  :num-checks              524
;  :propagations            199
;  :quant-instantiations    91
;  :rlimit-count            245516
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4764
;  :arith-add-rows          21
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               467
;  :datatype-accessor-ax    284
;  :datatype-constructor-ax 1177
;  :datatype-occurs-check   285
;  :datatype-splits         952
;  :decisions               1143
;  :del-clause              285
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2298
;  :mk-clause               338
;  :num-allocs              5704763
;  :num-checks              525
;  :propagations            203
;  :quant-instantiations    91
;  :rlimit-count            247516
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5049
;  :arith-add-rows          21
;  :arith-assert-diseq      85
;  :arith-assert-lower      270
;  :arith-assert-upper      230
;  :arith-conflicts         68
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         74
;  :arith-pivots            47
;  :binary-propagations     22
;  :conflicts               468
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2409
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              526
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            249516
;  :time                    0.00)
(declare-const $t@126@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@86@04)
    (= $t@126@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))))
  (implies
    (< $Perm.No (- $k@33@04 $k@93@04))
    (=
      $t@126@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))))))
(assert (<= $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04))))
(assert (<= (+ $k@86@04 (- $k@33@04 $k@93@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))
  (not (= diz@30@04 $Ref.null))))
; [eval] !(diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2)
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 5
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5053
;  :arith-add-rows          22
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      232
;  :arith-conflicts         69
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         75
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               469
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2414
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              527
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            249887)
(push) ; 5
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5053
;  :arith-add-rows          22
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      232
;  :arith-conflicts         69
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         75
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2415
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              528
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            249967)
(set-option :timeout 0)
(push) ; 5
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5053
;  :arith-add-rows          22
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      232
;  :arith-conflicts         69
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         75
;  :arith-pivots            50
;  :binary-propagations     22
;  :conflicts               470
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2415
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              529
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            249982)
; [eval] -1
(push) ; 5
; [then-branch: 32 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1 | live]
(push) ; 6
; [then-branch: 32 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      2)
    (- 0 1))))
(pop) ; 6
(push) ; 6
; [else-branch: 32 | First:(Second:(Second:(Second:($t@85@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[4] != -2
; [eval] diz.Combinate_m.Main_event_state[4]
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5054
;  :arith-add-rows          23
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      233
;  :arith-conflicts         70
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         76
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               471
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2417
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              530
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            250238)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5054
;  :arith-add-rows          23
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      233
;  :arith-conflicts         70
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         76
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2418
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              531
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            250318)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  4
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5054
;  :arith-add-rows          23
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      233
;  :arith-conflicts         70
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         76
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    289
;  :datatype-constructor-ax 1290
;  :datatype-occurs-check   297
;  :datatype-splits         1061
;  :decisions               1251
;  :del-clause              286
;  :final-checks            64
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2418
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              532
;  :propagations            207
;  :quant-instantiations    91
;  :rlimit-count            250333)
; [eval] -2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 5
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
        4)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5229
;  :arith-add-rows          23
;  :arith-assert-diseq      85
;  :arith-assert-lower      271
;  :arith-assert-upper      233
;  :arith-conflicts         70
;  :arith-eq-adapter        120
;  :arith-fixed-eqs         76
;  :arith-pivots            53
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 1347
;  :datatype-occurs-check   308
;  :datatype-splits         1116
;  :decisions               1306
;  :del-clause              286
;  :final-checks            67
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2474
;  :mk-clause               339
;  :num-allocs              5704763
;  :num-checks              533
;  :propagations            209
;  :quant-instantiations    91
;  :rlimit-count            251795
;  :time                    0.00)
(push) ; 5
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
          4)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5406
;  :arith-add-rows          23
;  :arith-assert-diseq      87
;  :arith-assert-lower      278
;  :arith-assert-upper      236
;  :arith-conflicts         70
;  :arith-eq-adapter        123
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               472
;  :datatype-accessor-ax    293
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2544
;  :mk-clause               350
;  :num-allocs              5704763
;  :num-checks              534
;  :propagations            216
;  :quant-instantiations    93
;  :rlimit-count            253402
;  :time                    0.00)
; [then-branch: 33 | !(First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2) | live]
; [else-branch: 33 | First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2 | live]
(push) ; 5
; [then-branch: 33 | !(First:(Second:(Second:(Second:($t@85@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@85@04))))))[4] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
          4)
        (- 0 2))))))
(declare-const __flatten_141__185@127@04 $Ref)
(declare-const __flatten_140__184@128@04 $Ref)
(declare-const __flatten_143__187@129@04 $Ref)
(declare-const __flatten_142__186@130@04 $Ref)
(declare-const __flatten_160__203@131@04 $Ref)
(declare-const __flatten_162__205@132@04 $Ref)
(declare-const __flatten_161__204@133@04 Seq<Int>)
(declare-const __flatten_163__206@134@04 $Ref)
(declare-const __flatten_165__208@135@04 $Ref)
(declare-const __flatten_164__207@136@04 Seq<Int>)
(declare-const __flatten_145__189@137@04 $Ref)
(declare-const __flatten_144__188@138@04 $Ref)
(declare-const __flatten_147__191@139@04 $Ref)
(declare-const __flatten_149__193@140@04 $Ref)
(declare-const __flatten_148__192@141@04 $Ref)
(declare-const __flatten_150__194@142@04 $Ref)
(declare-const __flatten_152__196@143@04 $Ref)
(declare-const __flatten_151__195@144@04 $Ref)
(declare-const __flatten_153__197@145@04 Int)
(declare-const __flatten_154__198@146@04 $Ref)
(declare-const __flatten_156__200@147@04 $Ref)
(declare-const __flatten_155__199@148@04 $Ref)
(declare-const __flatten_157__201@149@04 Int)
(declare-const __flatten_146__190@150@04 Int)
(declare-const __flatten_159__202@151@04 Int)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@152@04 $Snap)
(assert (= $t@152@04 ($Snap.combine ($Snap.first $t@152@04) ($Snap.second $t@152@04))))
(declare-const $k@153@04 $Perm)
(assert ($Perm.isReadVar $k@153@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@153@04 $Perm.No) (< $Perm.No $k@153@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5413
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      280
;  :arith-assert-upper      237
;  :arith-conflicts         70
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               473
;  :datatype-accessor-ax    294
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2551
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              535
;  :propagations            217
;  :quant-instantiations    93
;  :rlimit-count            253897)
(assert (<= $Perm.No $k@153@04))
(assert (<= $k@153@04 $Perm.Write))
(assert (implies (< $Perm.No $k@153@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@152@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@152@04))
    ($Snap.second ($Snap.second $t@152@04)))))
(assert (= ($Snap.first ($Snap.second $t@152@04)) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5419
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      280
;  :arith-assert-upper      238
;  :arith-conflicts         70
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               474
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2554
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              536
;  :propagations            217
;  :quant-instantiations    93
;  :rlimit-count            254140)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@152@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@152@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5425
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      280
;  :arith-assert-upper      238
;  :arith-conflicts         70
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               475
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2557
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              537
;  :propagations            217
;  :quant-instantiations    94
;  :rlimit-count            254412)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@152@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5430
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      280
;  :arith-assert-upper      238
;  :arith-conflicts         70
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               476
;  :datatype-accessor-ax    297
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2558
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              538
;  :propagations            217
;  :quant-instantiations    94
;  :rlimit-count            254589)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5436
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      280
;  :arith-assert-upper      238
;  :arith-conflicts         70
;  :arith-eq-adapter        124
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               477
;  :datatype-accessor-ax    298
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2560
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              539
;  :propagations            217
;  :quant-instantiations    94
;  :rlimit-count            254808)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5443
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      282
;  :arith-assert-upper      239
;  :arith-conflicts         70
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               478
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2566
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              540
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            255138)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5449
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      282
;  :arith-assert-upper      239
;  :arith-conflicts         70
;  :arith-eq-adapter        125
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               479
;  :datatype-accessor-ax    300
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2568
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              541
;  :propagations            217
;  :quant-instantiations    96
;  :rlimit-count            255377)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  $Snap.unit))
; [eval] (forall i__209: Int :: { diz.Combinate_m.Main_process_state[i__209] } 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|)
(declare-const i__209@154@04 Int)
(push) ; 7
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__209
(push) ; 8
; [then-branch: 34 | 0 <= i__209@154@04 | live]
; [else-branch: 34 | !(0 <= i__209@154@04) | live]
(push) ; 9
; [then-branch: 34 | 0 <= i__209@154@04]
(assert (<= 0 i__209@154@04))
; [eval] i__209 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      285
;  :arith-assert-upper      240
;  :arith-conflicts         70
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               480
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2576
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              542
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            255817)
(pop) ; 9
(push) ; 9
; [else-branch: 34 | !(0 <= i__209@154@04)]
(assert (not (<= 0 i__209@154@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 35 | i__209@154@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__209@154@04 | live]
; [else-branch: 35 | !(i__209@154@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__209@154@04) | live]
(push) ; 9
; [then-branch: 35 | i__209@154@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__209@154@04]
(assert (and
  (<
    i__209@154@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  (<= 0 i__209@154@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1
; [eval] diz.Combinate_m.Main_process_state[i__209]
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      286
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2578
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              543
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            255974)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__209@154@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      286
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               481
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2578
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              544
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            255983)
; [eval] -1
(push) ; 10
; [then-branch: 36 | First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04] != -1 | live]
(push) ; 11
; [then-branch: 36 | First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__209@154@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 36 | First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
      i__209@154@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209]
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      286
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2579
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              545
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            256197)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__209@154@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      88
;  :arith-assert-lower      286
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        126
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               482
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2579
;  :mk-clause               352
;  :num-allocs              5704763
;  :num-checks              546
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            256206)
(push) ; 12
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04]) | live]
(push) ; 13
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__209@154@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2582
;  :mk-clause               353
;  :num-allocs              5704763
;  :num-checks              547
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            256368)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__209@154@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               483
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2582
;  :mk-clause               353
;  :num-allocs              5704763
;  :num-checks              548
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            256377)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5457
;  :arith-add-rows          23
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               484
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              297
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2582
;  :mk-clause               353
;  :num-allocs              5704763
;  :num-checks              549
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            256425)
(pop) ; 13
(push) ; 13
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@152@04))))[i__209@154@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
      i__209@154@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 35 | !(i__209@154@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__209@154@04)]
(assert (not
  (and
    (<
      i__209@154@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
    (<= 0 i__209@154@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__209@154@04 Int)) (!
  (implies
    (and
      (<
        i__209@154@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
      (<= 0 i__209@154@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
          i__209@154@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__209@154@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__209@154@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__209@154@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5462
;  :arith-add-rows          23
;  :arith-assert-diseq      89
;  :arith-assert-lower      289
;  :arith-assert-upper      241
;  :arith-conflicts         70
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               485
;  :datatype-accessor-ax    302
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2584
;  :mk-clause               353
;  :num-allocs              5704763
;  :num-checks              550
;  :propagations            217
;  :quant-instantiations    98
;  :rlimit-count            257050)
(declare-const $k@155@04 $Perm)
(assert ($Perm.isReadVar $k@155@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@155@04 $Perm.No) (< $Perm.No $k@155@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5462
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      242
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               486
;  :datatype-accessor-ax    302
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2588
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              551
;  :propagations            218
;  :quant-instantiations    98
;  :rlimit-count            257249)
(assert (<= $Perm.No $k@155@04))
(assert (<= $k@155@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@155@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5468
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               487
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              552
;  :propagations            218
;  :quant-instantiations    98
;  :rlimit-count            257572)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5468
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               488
;  :datatype-accessor-ax    303
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2591
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              553
;  :propagations            218
;  :quant-instantiations    98
;  :rlimit-count            257620)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5474
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               489
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2594
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              554
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            257976)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5474
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               490
;  :datatype-accessor-ax    304
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2594
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              555
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258024)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5479
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               491
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              556
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258281)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5479
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               492
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2595
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              557
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258329)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5484
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               493
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2596
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              558
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258596)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5484
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               494
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2596
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              559
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258644)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5489
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               495
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2597
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              560
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258921)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5489
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               496
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2597
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              561
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            258969)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5494
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               497
;  :datatype-accessor-ax    308
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2598
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              562
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            259256)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5494
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               498
;  :datatype-accessor-ax    308
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2598
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              563
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            259304)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5499
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               499
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              564
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            259601)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5499
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               500
;  :datatype-accessor-ax    309
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2599
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              565
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            259649)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5504
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               501
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2600
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              566
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            259956)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5504
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               502
;  :datatype-accessor-ax    310
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2600
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              567
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            260004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5509
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               503
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2601
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              568
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            260321)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5509
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               504
;  :datatype-accessor-ax    311
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2601
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              569
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            260369)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5514
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               505
;  :datatype-accessor-ax    312
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              570
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            260696)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5514
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               506
;  :datatype-accessor-ax    312
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2602
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              571
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            260744)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5519
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               507
;  :datatype-accessor-ax    313
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2603
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              572
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            261081)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5519
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               508
;  :datatype-accessor-ax    313
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2603
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              573
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            261129)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          23
;  :arith-assert-diseq      90
;  :arith-assert-lower      291
;  :arith-assert-upper      243
;  :arith-conflicts         70
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               509
;  :datatype-accessor-ax    314
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2604
;  :mk-clause               355
;  :num-allocs              5704763
;  :num-checks              574
;  :propagations            218
;  :quant-instantiations    99
;  :rlimit-count            261476)
(declare-const $k@156@04 $Perm)
(assert ($Perm.isReadVar $k@156@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@156@04 $Perm.No) (< $Perm.No $k@156@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      244
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               510
;  :datatype-accessor-ax    314
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2608
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              575
;  :propagations            219
;  :quant-instantiations    99
;  :rlimit-count            261675)
(assert (<= $Perm.No $k@156@04))
(assert (<= $k@156@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@156@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5530
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               511
;  :datatype-accessor-ax    315
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2611
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              576
;  :propagations            219
;  :quant-instantiations    99
;  :rlimit-count            262118)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5530
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               512
;  :datatype-accessor-ax    315
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2611
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              577
;  :propagations            219
;  :quant-instantiations    99
;  :rlimit-count            262166)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5536
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               513
;  :datatype-accessor-ax    316
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2614
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              578
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            262660)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5536
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               514
;  :datatype-accessor-ax    316
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2614
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              579
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            262708)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5541
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               515
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2615
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              580
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            263085)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5541
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               516
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2615
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              581
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            263133)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5546
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               517
;  :datatype-accessor-ax    318
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2616
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              582
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            263520)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5546
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               518
;  :datatype-accessor-ax    318
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2616
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              583
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            263568)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5551
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               519
;  :datatype-accessor-ax    319
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2617
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              584
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            263965)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5551
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               520
;  :datatype-accessor-ax    319
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2617
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              585
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            264013)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5556
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               521
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2618
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              586
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            264420)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5556
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               522
;  :datatype-accessor-ax    320
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2618
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              587
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            264468)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5561
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               523
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2619
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              588
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            264885)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5561
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               524
;  :datatype-accessor-ax    321
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2619
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              589
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            264933)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5566
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               525
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2620
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              590
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            265360)
(push) ; 7
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5566
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               526
;  :datatype-accessor-ax    322
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2620
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              591
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            265408)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5571
;  :arith-add-rows          23
;  :arith-assert-diseq      91
;  :arith-assert-lower      293
;  :arith-assert-upper      245
;  :arith-conflicts         70
;  :arith-eq-adapter        129
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               527
;  :datatype-accessor-ax    323
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2621
;  :mk-clause               357
;  :num-allocs              5704763
;  :num-checks              592
;  :propagations            219
;  :quant-instantiations    100
;  :rlimit-count            265845)
(declare-const $k@157@04 $Perm)
(assert ($Perm.isReadVar $k@157@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@157@04 $Perm.No) (< $Perm.No $k@157@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5571
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      246
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               528
;  :datatype-accessor-ax    323
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2625
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              593
;  :propagations            220
;  :quant-instantiations    100
;  :rlimit-count            266044)
(assert (<= $Perm.No $k@157@04))
(assert (<= $k@157@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@157@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5577
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               529
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2628
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              594
;  :propagations            220
;  :quant-instantiations    100
;  :rlimit-count            266577)
(push) ; 7
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5577
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               530
;  :datatype-accessor-ax    324
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2628
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              595
;  :propagations            220
;  :quant-instantiations    100
;  :rlimit-count            266625)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5583
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               531
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2631
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              596
;  :propagations            220
;  :quant-instantiations    101
;  :rlimit-count            267203)
(push) ; 7
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5583
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               532
;  :datatype-accessor-ax    325
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2631
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              597
;  :propagations            220
;  :quant-instantiations    101
;  :rlimit-count            267251)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5588
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               533
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2632
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              598
;  :propagations            220
;  :quant-instantiations    101
;  :rlimit-count            267718)
(push) ; 7
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5588
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               534
;  :datatype-accessor-ax    326
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2632
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              599
;  :propagations            220
;  :quant-instantiations    101
;  :rlimit-count            267766)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5593
;  :arith-add-rows          23
;  :arith-assert-diseq      92
;  :arith-assert-lower      295
;  :arith-assert-upper      247
;  :arith-conflicts         70
;  :arith-eq-adapter        130
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               535
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2633
;  :mk-clause               359
;  :num-allocs              5704763
;  :num-checks              600
;  :propagations            220
;  :quant-instantiations    101
;  :rlimit-count            268243)
(declare-const $k@158@04 $Perm)
(assert ($Perm.isReadVar $k@158@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@158@04 $Perm.No) (< $Perm.No $k@158@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5593
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      248
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               536
;  :datatype-accessor-ax    327
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2637
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              601
;  :propagations            221
;  :quant-instantiations    101
;  :rlimit-count            268442)
(assert (<= $Perm.No $k@158@04))
(assert (<= $k@158@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@158@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5599
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               537
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2640
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              602
;  :propagations            221
;  :quant-instantiations    101
;  :rlimit-count            269015)
(push) ; 7
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5599
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               538
;  :datatype-accessor-ax    328
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2640
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              603
;  :propagations            221
;  :quant-instantiations    101
;  :rlimit-count            269063)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5605
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               539
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2643
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              604
;  :propagations            221
;  :quant-instantiations    102
;  :rlimit-count            269671)
(push) ; 7
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5605
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               540
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2643
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              605
;  :propagations            221
;  :quant-instantiations    102
;  :rlimit-count            269719)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5610
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               541
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2644
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              606
;  :propagations            221
;  :quant-instantiations    102
;  :rlimit-count            270226)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5610
;  :arith-add-rows          23
;  :arith-assert-diseq      93
;  :arith-assert-lower      297
;  :arith-assert-upper      249
;  :arith-conflicts         70
;  :arith-eq-adapter        131
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               542
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2644
;  :mk-clause               361
;  :num-allocs              5704763
;  :num-checks              607
;  :propagations            221
;  :quant-instantiations    102
;  :rlimit-count            270274)
(declare-const $k@159@04 $Perm)
(assert ($Perm.isReadVar $k@159@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@159@04 $Perm.No) (< $Perm.No $k@159@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5610
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      250
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               543
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2648
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              608
;  :propagations            222
;  :quant-instantiations    102
;  :rlimit-count            270473)
(assert (<= $Perm.No $k@159@04))
(assert (<= $k@159@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@159@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               544
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2651
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              609
;  :propagations            222
;  :quant-instantiations    102
;  :rlimit-count            271076)
(push) ; 7
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               545
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2651
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              610
;  :propagations            222
;  :quant-instantiations    102
;  :rlimit-count            271124)
(push) ; 7
(assert (not (< $Perm.No $k@159@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               546
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2651
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              611
;  :propagations            222
;  :quant-instantiations    102
;  :rlimit-count            271172)
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               547
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2651
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              612
;  :propagations            222
;  :quant-instantiations    102
;  :rlimit-count            271220)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 7
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               548
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2654
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              613
;  :propagations            222
;  :quant-instantiations    103
;  :rlimit-count            271804)
(push) ; 7
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          23
;  :arith-assert-diseq      94
;  :arith-assert-lower      299
;  :arith-assert-upper      251
;  :arith-conflicts         70
;  :arith-eq-adapter        132
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               549
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              298
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2654
;  :mk-clause               363
;  :num-allocs              5704763
;  :num-checks              614
;  :propagations            222
;  :quant-instantiations    103
;  :rlimit-count            271852)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
(pop) ; 7
(push) ; 7
; [eval] !true
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(declare-const $k@160@04 $Perm)
(assert ($Perm.isReadVar $k@160@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@160@04 $Perm.No) (< $Perm.No $k@160@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5624
;  :arith-add-rows          23
;  :arith-assert-diseq      95
;  :arith-assert-lower      301
;  :arith-assert-upper      252
;  :arith-conflicts         70
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         77
;  :arith-pivots            55
;  :binary-propagations     22
;  :conflicts               550
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              310
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2659
;  :mk-clause               365
;  :num-allocs              5704763
;  :num-checks              615
;  :propagations            223
;  :quant-instantiations    103
;  :rlimit-count            272458)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ $k@86@04 (- $k@33@04 $k@93@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          24
;  :arith-assert-diseq      95
;  :arith-assert-lower      301
;  :arith-assert-upper      253
;  :arith-conflicts         71
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         77
;  :arith-pivots            57
;  :binary-propagations     22
;  :conflicts               551
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2661
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              616
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            272566)
(assert (< $k@160@04 (+ $k@86@04 (- $k@33@04 $k@93@04))))
(assert (<= $Perm.No (- (+ $k@86@04 (- $k@33@04 $k@93@04)) $k@160@04)))
(assert (<= (- (+ $k@86@04 (- $k@33@04 $k@93@04)) $k@160@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@86@04 (- $k@33@04 $k@93@04)) $k@160@04))
  (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          26
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      255
;  :arith-conflicts         72
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         78
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2665
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              617
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            272867)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= $t@126@04 $Ref.null))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          26
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      255
;  :arith-conflicts         72
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         78
;  :arith-pivots            60
;  :binary-propagations     22
;  :conflicts               552
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2665
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              618
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            272885)
(assert (not (= $t@126@04 $Ref.null)))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          27
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      256
;  :arith-conflicts         73
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         79
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               553
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2666
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              619
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273014)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          27
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      256
;  :arith-conflicts         73
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         79
;  :arith-pivots            62
;  :binary-propagations     22
;  :conflicts               554
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2667
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              620
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273094)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          28
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      257
;  :arith-conflicts         74
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         80
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               555
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2668
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              621
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273208)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          28
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      257
;  :arith-conflicts         74
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         80
;  :arith-pivots            65
;  :binary-propagations     22
;  :conflicts               556
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2669
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              622
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273288)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          29
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      258
;  :arith-conflicts         75
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         81
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               557
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2670
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              623
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273397)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          29
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      258
;  :arith-conflicts         75
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         81
;  :arith-pivots            67
;  :binary-propagations     22
;  :conflicts               558
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2671
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              624
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273477)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          30
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      259
;  :arith-conflicts         76
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         82
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               559
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2672
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              625
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273591)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          30
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      259
;  :arith-conflicts         76
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         82
;  :arith-pivots            70
;  :binary-propagations     22
;  :conflicts               560
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2673
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              626
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273671)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          31
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      260
;  :arith-conflicts         77
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         83
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               561
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2674
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              627
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273780)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          31
;  :arith-assert-diseq      95
;  :arith-assert-lower      303
;  :arith-assert-upper      260
;  :arith-conflicts         77
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         83
;  :arith-pivots            72
;  :binary-propagations     22
;  :conflicts               562
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2675
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              628
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            273860)
; [eval] (forall i__209: Int :: { diz.Combinate_m.Main_process_state[i__209] } 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|)
(declare-const i__209@161@04 Int)
(push) ; 7
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__209
(push) ; 8
; [then-branch: 38 | 0 <= i__209@161@04 | live]
; [else-branch: 38 | !(0 <= i__209@161@04) | live]
(push) ; 9
; [then-branch: 38 | 0 <= i__209@161@04]
(assert (<= 0 i__209@161@04))
; [eval] i__209 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 10
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          32
;  :arith-assert-diseq      95
;  :arith-assert-lower      304
;  :arith-assert-upper      261
;  :arith-conflicts         78
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         84
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               563
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2677
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              629
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            274027)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          32
;  :arith-assert-diseq      95
;  :arith-assert-lower      304
;  :arith-assert-upper      261
;  :arith-conflicts         78
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         84
;  :arith-pivots            75
;  :binary-propagations     22
;  :conflicts               564
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2678
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              630
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            274107)
(pop) ; 9
(push) ; 9
; [else-branch: 38 | !(0 <= i__209@161@04)]
(assert (not (<= 0 i__209@161@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 39 | i__209@161@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__209@161@04 | live]
; [else-branch: 39 | !(i__209@161@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__209@161@04) | live]
(push) ; 9
; [then-branch: 39 | i__209@161@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__209@161@04]
(assert (and
  (<
    i__209@161@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
  (<= 0 i__209@161@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1
; [eval] diz.Combinate_m.Main_process_state[i__209]
(push) ; 10
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      263
;  :arith-conflicts         79
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         85
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               565
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2681
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              631
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            274325)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      263
;  :arith-conflicts         79
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         85
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2682
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              632
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            274405)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__209@161@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          33
;  :arith-assert-diseq      95
;  :arith-assert-lower      305
;  :arith-assert-upper      263
;  :arith-conflicts         79
;  :arith-eq-adapter        134
;  :arith-fixed-eqs         85
;  :arith-pivots            77
;  :binary-propagations     22
;  :conflicts               566
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2682
;  :mk-clause               367
;  :num-allocs              5704763
;  :num-checks              633
;  :propagations            224
;  :quant-instantiations    103
;  :rlimit-count            274414)
; [eval] -1
(push) ; 10
; [then-branch: 40 | First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04] == -1 | live]
; [else-branch: 40 | First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04] != -1 | live]
(push) ; 11
; [then-branch: 40 | First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__209@161@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 40 | First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i__209@161@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209]
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          34
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      265
;  :arith-conflicts         80
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         86
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               567
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2689
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              634
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            274751)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          34
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      265
;  :arith-conflicts         80
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         86
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2690
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              635
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            274831)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= i__209@161@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          34
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      265
;  :arith-conflicts         80
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         86
;  :arith-pivots            80
;  :binary-propagations     22
;  :conflicts               568
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2690
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              636
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            274840)
(push) ; 12
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04] | live]
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04]) | live]
(push) ; 13
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__209@161@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          35
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      266
;  :arith-conflicts         81
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         87
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               569
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2691
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              637
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            275054)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          35
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      266
;  :arith-conflicts         81
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         87
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2692
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              638
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            275134)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__209@161@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          35
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      266
;  :arith-conflicts         81
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         87
;  :arith-pivots            82
;  :binary-propagations     22
;  :conflicts               570
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2692
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              639
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            275143)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          36
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      267
;  :arith-conflicts         82
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         88
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               571
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2693
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              640
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            275257)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          36
;  :arith-assert-diseq      96
;  :arith-assert-lower      308
;  :arith-assert-upper      267
;  :arith-conflicts         82
;  :arith-eq-adapter        135
;  :arith-fixed-eqs         88
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               572
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              312
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2694
;  :mk-clause               371
;  :num-allocs              5704763
;  :num-checks              641
;  :propagations            226
;  :quant-instantiations    104
;  :rlimit-count            275337)
(pop) ; 13
(push) ; 13
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@85@04))))[i__209@161@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
      i__209@161@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 39 | !(i__209@161@04 < |First:(Second:(Second:(Second:($t@85@04))))| && 0 <= i__209@161@04)]
(assert (not
  (and
    (<
      i__209@161@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
    (<= 0 i__209@161@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 7
(assert (not (forall ((i__209@161@04 Int)) (!
  (implies
    (and
      (<
        i__209@161@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i__209@161@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i__209@161@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__209@161@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__209@161@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__209@161@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          36
;  :arith-assert-diseq      97
;  :arith-assert-lower      309
;  :arith-assert-upper      268
;  :arith-conflicts         82
;  :arith-eq-adapter        136
;  :arith-fixed-eqs         88
;  :arith-pivots            85
;  :binary-propagations     22
;  :conflicts               573
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2702
;  :mk-clause               383
;  :num-allocs              5704763
;  :num-checks              642
;  :propagations            228
;  :quant-instantiations    105
;  :rlimit-count            275783)
(assert (forall ((i__209@161@04 Int)) (!
  (implies
    (and
      (<
        i__209@161@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))
      (<= 0 i__209@161@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
          i__209@161@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__209@161@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
            i__209@161@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))
    i__209@161@04))
  :qid |prog.l<no position>|)))
(declare-const $k@162@04 $Perm)
(assert ($Perm.isReadVar $k@162@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          37
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      270
;  :arith-conflicts         83
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         89
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               574
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2708
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              643
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276403)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@162@04 $Perm.No) (< $Perm.No $k@162@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          37
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      270
;  :arith-conflicts         83
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         89
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2708
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              644
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276453)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          37
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      270
;  :arith-conflicts         83
;  :arith-eq-adapter        137
;  :arith-fixed-eqs         89
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               575
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2708
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              645
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276464)
(push) ; 7
(assert (not (not (= (- $k@72@04 $k@95@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          37
;  :arith-assert-diseq      98
;  :arith-assert-lower      311
;  :arith-assert-upper      270
;  :arith-conflicts         83
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         89
;  :arith-pivots            87
;  :binary-propagations     22
;  :conflicts               576
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2709
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              646
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276532)
(assert (< $k@162@04 (- $k@72@04 $k@95@04)))
(assert (<= $Perm.No (- (- $k@72@04 $k@95@04) $k@162@04)))
(assert (<= (- (- $k@72@04 $k@95@04) $k@162@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@72@04 $k@95@04) $k@162@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          40
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      272
;  :arith-conflicts         84
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         90
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2713
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              647
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276858)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          40
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      272
;  :arith-conflicts         84
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         90
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2713
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              648
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276869)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          40
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      272
;  :arith-conflicts         84
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         90
;  :arith-pivots            92
;  :binary-propagations     22
;  :conflicts               577
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2713
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              649
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276888)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2714
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              650
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            276997)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2714
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              651
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            277008)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5625
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               578
;  :datatype-accessor-ax    331
;  :datatype-constructor-ax 1404
;  :datatype-occurs-check   319
;  :datatype-splits         1171
;  :decisions               1362
;  :del-clause              328
;  :final-checks            70
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.85
;  :mk-bool-var             2714
;  :mk-clause               385
;  :num-allocs              5704763
;  :num-checks              652
;  :propagations            229
;  :quant-instantiations    105
;  :rlimit-count            277027)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5861
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               579
;  :datatype-accessor-ax    334
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   330
;  :datatype-splits         1228
;  :decisions               1443
;  :del-clause              329
;  :final-checks            73
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2774
;  :mk-clause               386
;  :num-allocs              5940387
;  :num-checks              653
;  :propagations            231
;  :quant-instantiations    105
;  :rlimit-count            278897
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6207
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               580
;  :datatype-accessor-ax    338
;  :datatype-constructor-ax 1602
;  :datatype-occurs-check   352
;  :datatype-splits         1338
;  :decisions               1553
;  :del-clause              333
;  :final-checks            79
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2882
;  :mk-clause               386
;  :num-allocs              5940387
;  :num-checks              656
;  :propagations            235
;  :quant-instantiations    105
;  :rlimit-count            281511)
(declare-const $t@163@04 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6443
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               581
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2942
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              657
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            283381
;  :time                    0.00)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6443
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               582
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2943
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              658
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            283461)
(declare-const $t@164@04 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6443
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               583
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2944
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              659
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            283541)
(declare-const $t@165@04 $Ref)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6443
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               584
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2945
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              660
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            283621)
(declare-const $t@166@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@72@04 $k@95@04) $k@162@04))
    (=
      $t@163@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))
  (implies
    (< $Perm.No $k@88@04)
    (=
      $t@163@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@91@04)
    (=
      $t@164@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04))
    (= $t@164@04 $t@76@04))))
(assert (and
  (implies
    (< $Perm.No $k@90@04)
    (=
      $t@165@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@74@04 $k@97@04))
    (=
      $t@165@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@89@04)
    (=
      $t@166@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@73@04 $k@96@04))
    (=
      $t@166@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6456
;  :arith-add-rows          41
;  :arith-assert-diseq      98
;  :arith-assert-lower      313
;  :arith-assert-upper      273
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            94
;  :binary-propagations     22
;  :conflicts               585
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2952
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              661
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            284909)
(declare-const $t@167@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@77@04 $k@99@04))
    (=
      $t@167@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@92@04)
    (=
      $t@167@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@89@04 (- $k@73@04 $k@96@04))))
(assert (<= (+ $k@89@04 (- $k@73@04 $k@96@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@89@04 (- $k@73@04 $k@96@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (<= $Perm.No (+ $k@90@04 (- $k@74@04 $k@97@04))))
(assert (<= (+ $k@90@04 (- $k@74@04 $k@97@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@90@04 (- $k@74@04 $k@97@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (<= $Perm.No (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04))))
(assert (<= (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@72@04 $k@95@04) $k@162@04) $k@88@04)))
(assert (<= (+ (- (- $k@72@04 $k@95@04) $k@162@04) $k@88@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@72@04 $k@95@04) $k@162@04) $k@88@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04)))
      $Ref.null))))
(assert (<= $Perm.No (+ (- $k@77@04 $k@99@04) $k@92@04)))
(assert (<= (+ (- $k@77@04 $k@99@04) $k@92@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@77@04 $k@99@04) $k@92@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
      $Ref.null))))
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          46
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      278
;  :arith-conflicts         85
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         91
;  :arith-pivots            95
;  :binary-propagations     22
;  :conflicts               586
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2964
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              662
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            285794)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          47
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      279
;  :arith-conflicts         86
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         92
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2965
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              663
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            285908)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          47
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      279
;  :arith-conflicts         86
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         92
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2965
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              664
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            285919)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          47
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      279
;  :arith-conflicts         86
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         92
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               587
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2965
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              665
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            285938)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          47
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      279
;  :arith-conflicts         86
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         92
;  :arith-pivots            98
;  :binary-propagations     22
;  :conflicts               588
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2966
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              666
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286098)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          48
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      280
;  :arith-conflicts         87
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         93
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2967
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              667
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286207)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          48
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      280
;  :arith-conflicts         87
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         93
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2967
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              668
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286218)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          48
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      280
;  :arith-conflicts         87
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         93
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               589
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2967
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              669
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286237)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          48
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      280
;  :arith-conflicts         87
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         93
;  :arith-pivots            100
;  :binary-propagations     22
;  :conflicts               590
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2968
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              670
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286397)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          49
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      281
;  :arith-conflicts         88
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         94
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2969
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              671
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286511)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          49
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      281
;  :arith-conflicts         88
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         94
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2969
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              672
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286522)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          49
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      281
;  :arith-conflicts         88
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         94
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               591
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2969
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              673
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286541)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          49
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      281
;  :arith-conflicts         88
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         94
;  :arith-pivots            103
;  :binary-propagations     22
;  :conflicts               592
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2970
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              674
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286701)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.04s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          50
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      282
;  :arith-conflicts         89
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         95
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2971
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              675
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286810)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          50
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      282
;  :arith-conflicts         89
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         95
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2971
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              676
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286821)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          50
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      282
;  :arith-conflicts         89
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         95
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               593
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2971
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              677
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            286840)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          50
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      282
;  :arith-conflicts         89
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         95
;  :arith-pivots            105
;  :binary-propagations     22
;  :conflicts               594
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2972
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              678
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287000)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          51
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      283
;  :arith-conflicts         90
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         96
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2973
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              679
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287114)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          51
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      283
;  :arith-conflicts         90
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         96
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2973
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              680
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287125)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          51
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      283
;  :arith-conflicts         90
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         96
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               595
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2973
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              681
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287144)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          51
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      283
;  :arith-conflicts         90
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         96
;  :arith-pivots            108
;  :binary-propagations     22
;  :conflicts               596
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2974
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              682
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287304)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          52
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      284
;  :arith-conflicts         91
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         97
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2975
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              683
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287413)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          52
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      284
;  :arith-conflicts         91
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         97
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2975
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              684
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287424)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          52
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      284
;  :arith-conflicts         91
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         97
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               597
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2975
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              685
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287443)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          52
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      284
;  :arith-conflicts         91
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         97
;  :arith-pivots            110
;  :binary-propagations     22
;  :conflicts               598
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2976
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              686
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287603)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          53
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      285
;  :arith-conflicts         92
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         98
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2977
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              687
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287717)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          53
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      285
;  :arith-conflicts         92
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         98
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2977
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              688
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287728)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          53
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      285
;  :arith-conflicts         92
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         98
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               599
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2977
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              689
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287747)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          53
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      285
;  :arith-conflicts         92
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         98
;  :arith-pivots            113
;  :binary-propagations     22
;  :conflicts               600
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2978
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              690
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            287907)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          54
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      286
;  :arith-conflicts         93
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         99
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2979
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              691
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288016)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          54
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      286
;  :arith-conflicts         93
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         99
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2979
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              692
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288027)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          54
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      286
;  :arith-conflicts         93
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         99
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               601
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2979
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              693
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288046)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          54
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      286
;  :arith-conflicts         93
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         99
;  :arith-pivots            115
;  :binary-propagations     22
;  :conflicts               602
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2980
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              694
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288206)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          55
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      287
;  :arith-conflicts         94
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         100
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2981
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              695
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288320)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          55
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      287
;  :arith-conflicts         94
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         100
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2981
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              696
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288331)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          55
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      287
;  :arith-conflicts         94
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         100
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               603
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2981
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              697
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288350)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          55
;  :arith-assert-diseq      98
;  :arith-assert-lower      318
;  :arith-assert-upper      287
;  :arith-conflicts         94
;  :arith-eq-adapter        138
;  :arith-fixed-eqs         100
;  :arith-pivots            118
;  :binary-propagations     22
;  :conflicts               604
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2982
;  :mk-clause               387
;  :num-allocs              5940387
;  :num-checks              698
;  :propagations            237
;  :quant-instantiations    105
;  :rlimit-count            288510)
(declare-const $k@168@04 $Perm)
(assert ($Perm.isReadVar $k@168@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          56
;  :arith-assert-diseq      99
;  :arith-assert-lower      320
;  :arith-assert-upper      289
;  :arith-conflicts         95
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         101
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               605
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2987
;  :mk-clause               389
;  :num-allocs              5940387
;  :num-checks              699
;  :propagations            238
;  :quant-instantiations    105
;  :rlimit-count            288768)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@168@04 $Perm.No) (< $Perm.No $k@168@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          56
;  :arith-assert-diseq      99
;  :arith-assert-lower      320
;  :arith-assert-upper      289
;  :arith-conflicts         95
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         101
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               606
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2987
;  :mk-clause               389
;  :num-allocs              5940387
;  :num-checks              700
;  :propagations            238
;  :quant-instantiations    105
;  :rlimit-count            288818)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6457
;  :arith-add-rows          56
;  :arith-assert-diseq      99
;  :arith-assert-lower      320
;  :arith-assert-upper      289
;  :arith-conflicts         95
;  :arith-eq-adapter        139
;  :arith-fixed-eqs         101
;  :arith-pivots            120
;  :binary-propagations     22
;  :conflicts               607
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              334
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2988
;  :mk-clause               389
;  :num-allocs              5940387
;  :num-checks              701
;  :propagations            238
;  :quant-instantiations    105
;  :rlimit-count            288898)
(push) ; 7
(assert (not (not (= (+ $k@89@04 (- $k@73@04 $k@96@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          56
;  :arith-assert-diseq      99
;  :arith-assert-lower      320
;  :arith-assert-upper      290
;  :arith-conflicts         96
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         101
;  :arith-pivots            121
;  :binary-propagations     22
;  :conflicts               608
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2990
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              702
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            288982)
(assert (< $k@168@04 (+ $k@89@04 (- $k@73@04 $k@96@04))))
(assert (<= $Perm.No (- (+ $k@89@04 (- $k@73@04 $k@96@04)) $k@168@04)))
(assert (<= (- (+ $k@89@04 (- $k@73@04 $k@96@04)) $k@168@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@89@04 (- $k@73@04 $k@96@04)) $k@168@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          59
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      292
;  :arith-conflicts         97
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         102
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2994
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              703
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289284)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          59
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      292
;  :arith-conflicts         97
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         102
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2994
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              704
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289295)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          59
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      292
;  :arith-conflicts         97
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         102
;  :arith-pivots            124
;  :binary-propagations     22
;  :conflicts               609
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2994
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              705
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289314)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          60
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      293
;  :arith-conflicts         98
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         103
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2995
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              706
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289423)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          60
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      293
;  :arith-conflicts         98
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         103
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2995
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              707
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289434)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          60
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      293
;  :arith-conflicts         98
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         103
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               610
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2995
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              708
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289453)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          60
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      293
;  :arith-conflicts         98
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         103
;  :arith-pivots            126
;  :binary-propagations     22
;  :conflicts               611
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2996
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              709
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289733)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          61
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      294
;  :arith-conflicts         99
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         104
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2997
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              710
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289847)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          61
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      294
;  :arith-conflicts         99
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         104
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2997
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              711
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289858)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          61
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      294
;  :arith-conflicts         99
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         104
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               612
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2997
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              712
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            289877)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          61
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      294
;  :arith-conflicts         99
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         104
;  :arith-pivots            129
;  :binary-propagations     22
;  :conflicts               613
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2998
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              713
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290157)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          62
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      295
;  :arith-conflicts         100
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         105
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2999
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              714
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290266)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          62
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      295
;  :arith-conflicts         100
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         105
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2999
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              715
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290277)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          62
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      295
;  :arith-conflicts         100
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         105
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               614
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             2999
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              716
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290296)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          62
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      295
;  :arith-conflicts         100
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         105
;  :arith-pivots            131
;  :binary-propagations     22
;  :conflicts               615
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3000
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              717
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290576)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          63
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      296
;  :arith-conflicts         101
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         106
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3001
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              718
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290690)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          63
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      296
;  :arith-conflicts         101
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         106
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3001
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              719
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290701)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          63
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      296
;  :arith-conflicts         101
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         106
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               616
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3001
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              720
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            290720)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          63
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      296
;  :arith-conflicts         101
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         106
;  :arith-pivots            134
;  :binary-propagations     22
;  :conflicts               617
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3002
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              721
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291000)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          64
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      297
;  :arith-conflicts         102
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         107
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3003
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              722
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291109)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          64
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      297
;  :arith-conflicts         102
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         107
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3003
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              723
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291120)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          64
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      297
;  :arith-conflicts         102
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         107
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               618
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3003
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              724
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291139)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          64
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      297
;  :arith-conflicts         102
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         107
;  :arith-pivots            136
;  :binary-propagations     22
;  :conflicts               619
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3004
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              725
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291419)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          65
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      298
;  :arith-conflicts         103
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         108
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3005
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              726
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291533)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          65
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      298
;  :arith-conflicts         103
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         108
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3005
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              727
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291544)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          65
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      298
;  :arith-conflicts         103
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         108
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               620
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3005
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              728
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291563)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          65
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      298
;  :arith-conflicts         103
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         108
;  :arith-pivots            139
;  :binary-propagations     22
;  :conflicts               621
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3006
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              729
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291843)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          66
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      299
;  :arith-conflicts         104
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         109
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3007
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              730
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291952)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          66
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      299
;  :arith-conflicts         104
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         109
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3007
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              731
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291963)
(push) ; 7
(assert (not (< $Perm.No (- $k@73@04 $k@96@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          66
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      299
;  :arith-conflicts         104
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         109
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               622
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3007
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              732
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            291982)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          66
;  :arith-assert-diseq      99
;  :arith-assert-lower      322
;  :arith-assert-upper      299
;  :arith-conflicts         104
;  :arith-eq-adapter        140
;  :arith-fixed-eqs         109
;  :arith-pivots            141
;  :binary-propagations     22
;  :conflicts               623
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3008
;  :mk-clause               391
;  :num-allocs              5940387
;  :num-checks              733
;  :propagations            239
;  :quant-instantiations    105
;  :rlimit-count            292262)
(declare-const $k@169@04 $Perm)
(assert ($Perm.isReadVar $k@169@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          67
;  :arith-assert-diseq      100
;  :arith-assert-lower      324
;  :arith-assert-upper      301
;  :arith-conflicts         105
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         110
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               624
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3013
;  :mk-clause               393
;  :num-allocs              5940387
;  :num-checks              734
;  :propagations            240
;  :quant-instantiations    105
;  :rlimit-count            292524)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@169@04 $Perm.No) (< $Perm.No $k@169@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          67
;  :arith-assert-diseq      100
;  :arith-assert-lower      324
;  :arith-assert-upper      301
;  :arith-conflicts         105
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         110
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               625
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3013
;  :mk-clause               393
;  :num-allocs              5940387
;  :num-checks              735
;  :propagations            240
;  :quant-instantiations    105
;  :rlimit-count            292574)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6458
;  :arith-add-rows          67
;  :arith-assert-diseq      100
;  :arith-assert-lower      324
;  :arith-assert-upper      301
;  :arith-conflicts         105
;  :arith-eq-adapter        141
;  :arith-fixed-eqs         110
;  :arith-pivots            144
;  :binary-propagations     22
;  :conflicts               626
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              336
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3014
;  :mk-clause               393
;  :num-allocs              5940387
;  :num-checks              736
;  :propagations            240
;  :quant-instantiations    105
;  :rlimit-count            292654)
(push) ; 7
(assert (not (not (= (+ $k@90@04 (- $k@74@04 $k@97@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          67
;  :arith-assert-diseq      100
;  :arith-assert-lower      324
;  :arith-assert-upper      302
;  :arith-conflicts         106
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         110
;  :arith-pivots            145
;  :binary-propagations     22
;  :conflicts               627
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3016
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              737
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            292738)
(assert (< $k@169@04 (+ $k@90@04 (- $k@74@04 $k@97@04))))
(assert (<= $Perm.No (- (+ $k@90@04 (- $k@74@04 $k@97@04)) $k@169@04)))
(assert (<= (- (+ $k@90@04 (- $k@74@04 $k@97@04)) $k@169@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@90@04 (- $k@74@04 $k@97@04)) $k@169@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          70
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      304
;  :arith-conflicts         107
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         111
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3020
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              738
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293035)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          70
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      304
;  :arith-conflicts         107
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         111
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3020
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              739
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293046)
(push) ; 7
(assert (not (< $Perm.No (- $k@74@04 $k@97@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          70
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      304
;  :arith-conflicts         107
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         111
;  :arith-pivots            147
;  :binary-propagations     22
;  :conflicts               628
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3020
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              740
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293065)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          71
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      305
;  :arith-conflicts         108
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         112
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3021
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              741
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293179)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          71
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      305
;  :arith-conflicts         108
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         112
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3021
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              742
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293190)
(push) ; 7
(assert (not (< $Perm.No (- $k@74@04 $k@97@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          71
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      305
;  :arith-conflicts         108
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         112
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               629
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3021
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              743
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293209)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          71
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      305
;  :arith-conflicts         108
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         112
;  :arith-pivots            150
;  :binary-propagations     22
;  :conflicts               630
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3022
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              744
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293579)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          72
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      306
;  :arith-conflicts         109
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         113
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3023
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              745
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293688)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          72
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      306
;  :arith-conflicts         109
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         113
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3023
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              746
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293699)
(push) ; 7
(assert (not (< $Perm.No (- $k@74@04 $k@97@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          72
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      306
;  :arith-conflicts         109
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         113
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               631
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3023
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              747
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            293718)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          72
;  :arith-assert-diseq      100
;  :arith-assert-lower      326
;  :arith-assert-upper      306
;  :arith-conflicts         109
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         113
;  :arith-pivots            152
;  :binary-propagations     22
;  :conflicts               632
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3024
;  :mk-clause               395
;  :num-allocs              5940387
;  :num-checks              748
;  :propagations            241
;  :quant-instantiations    105
;  :rlimit-count            294088)
(declare-const $k@170@04 $Perm)
(assert ($Perm.isReadVar $k@170@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          73
;  :arith-assert-diseq      101
;  :arith-assert-lower      328
;  :arith-assert-upper      308
;  :arith-conflicts         110
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         114
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               633
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3029
;  :mk-clause               397
;  :num-allocs              5940387
;  :num-checks              749
;  :propagations            242
;  :quant-instantiations    105
;  :rlimit-count            294350)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@170@04 $Perm.No) (< $Perm.No $k@170@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          73
;  :arith-assert-diseq      101
;  :arith-assert-lower      328
;  :arith-assert-upper      308
;  :arith-conflicts         110
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         114
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               634
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3029
;  :mk-clause               397
;  :num-allocs              5940387
;  :num-checks              750
;  :propagations            242
;  :quant-instantiations    105
;  :rlimit-count            294400)
(set-option :timeout 10)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6459
;  :arith-add-rows          73
;  :arith-assert-diseq      101
;  :arith-assert-lower      328
;  :arith-assert-upper      308
;  :arith-conflicts         110
;  :arith-eq-adapter        143
;  :arith-fixed-eqs         114
;  :arith-pivots            155
;  :binary-propagations     22
;  :conflicts               635
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              338
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3030
;  :mk-clause               397
;  :num-allocs              5940387
;  :num-checks              751
;  :propagations            242
;  :quant-instantiations    105
;  :rlimit-count            294480)
(push) ; 7
(assert (not (not (= (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          75
;  :arith-assert-diseq      101
;  :arith-assert-lower      328
;  :arith-assert-upper      309
;  :arith-conflicts         111
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         114
;  :arith-pivots            157
;  :binary-propagations     22
;  :conflicts               636
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3032
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              752
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            294612)
(assert (< $k@170@04 (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04))))
(assert (<= $Perm.No (- (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)) $k@170@04)))
(assert (<= (- (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)) $k@170@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@91@04 (- (+ $k@34@04 $k@75@04) $k@98@04)) $k@170@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@85@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          77
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      311
;  :arith-conflicts         112
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         115
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3036
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              753
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            294912)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          77
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      311
;  :arith-conflicts         112
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         115
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3036
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              754
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            294923)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          77
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      311
;  :arith-conflicts         112
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         115
;  :arith-pivots            159
;  :binary-propagations     22
;  :conflicts               637
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3036
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              755
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            294944)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          78
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      312
;  :arith-conflicts         113
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         116
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3037
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              756
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            295058)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          78
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      312
;  :arith-conflicts         113
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         116
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3037
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              757
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            295069)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          78
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      312
;  :arith-conflicts         113
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         116
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3037
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              758
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            295090)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@85@04)))))))))))))))))))))))))))))))))))
  $t@76@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          78
;  :arith-assert-diseq      101
;  :arith-assert-lower      330
;  :arith-assert-upper      312
;  :arith-conflicts         113
;  :arith-eq-adapter        144
;  :arith-fixed-eqs         116
;  :arith-pivots            162
;  :binary-propagations     22
;  :conflicts               638
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3037
;  :mk-clause               399
;  :num-allocs              5940387
;  :num-checks              759
;  :propagations            243
;  :quant-instantiations    105
;  :rlimit-count            295101)
(declare-const $k@171@04 $Perm)
(assert ($Perm.isReadVar $k@171@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          79
;  :arith-assert-diseq      102
;  :arith-assert-lower      332
;  :arith-assert-upper      314
;  :arith-conflicts         114
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         117
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3042
;  :mk-clause               401
;  :num-allocs              5940387
;  :num-checks              760
;  :propagations            244
;  :quant-instantiations    105
;  :rlimit-count            295359)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          79
;  :arith-assert-diseq      102
;  :arith-assert-lower      332
;  :arith-assert-upper      314
;  :arith-conflicts         114
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         117
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3042
;  :mk-clause               401
;  :num-allocs              5940387
;  :num-checks              761
;  :propagations            244
;  :quant-instantiations    105
;  :rlimit-count            295370)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          79
;  :arith-assert-diseq      102
;  :arith-assert-lower      332
;  :arith-assert-upper      314
;  :arith-conflicts         114
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         117
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               639
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3042
;  :mk-clause               401
;  :num-allocs              5940387
;  :num-checks              762
;  :propagations            244
;  :quant-instantiations    105
;  :rlimit-count            295389)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@171@04 $Perm.No) (< $Perm.No $k@171@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6460
;  :arith-add-rows          79
;  :arith-assert-diseq      102
;  :arith-assert-lower      332
;  :arith-assert-upper      314
;  :arith-conflicts         114
;  :arith-eq-adapter        145
;  :arith-fixed-eqs         117
;  :arith-pivots            164
;  :binary-propagations     22
;  :conflicts               640
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              340
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3042
;  :mk-clause               401
;  :num-allocs              5940387
;  :num-checks              763
;  :propagations            244
;  :quant-instantiations    105
;  :rlimit-count            295439)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= (+ (- $k@77@04 $k@99@04) $k@92@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          79
;  :arith-assert-diseq      102
;  :arith-assert-lower      332
;  :arith-assert-upper      315
;  :arith-conflicts         115
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         117
;  :arith-pivots            165
;  :binary-propagations     22
;  :conflicts               641
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3044
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              764
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295523)
(assert (< $k@171@04 (+ (- $k@77@04 $k@99@04) $k@92@04)))
(assert (<= $Perm.No (- (+ (- $k@77@04 $k@99@04) $k@92@04) $k@171@04)))
(assert (<= (- (+ (- $k@77@04 $k@99@04) $k@92@04) $k@171@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@77@04 $k@99@04) $k@92@04) $k@171@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      317
;  :arith-conflicts         116
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         118
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3048
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              765
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295825)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      317
;  :arith-conflicts         116
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         118
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3048
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              766
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295836)
(push) ; 7
(assert (not (< $Perm.No (- $k@72@04 $k@95@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      317
;  :arith-conflicts         116
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         118
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3048
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              767
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295855)
(push) ; 7
(assert (not (< $Perm.No (- $k@77@04 $k@99@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          82
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      317
;  :arith-conflicts         116
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         118
;  :arith-pivots            168
;  :binary-propagations     22
;  :conflicts               642
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3048
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              768
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295874)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          83
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      318
;  :arith-conflicts         117
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         119
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3049
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              769
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            295983)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))
  $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          83
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      318
;  :arith-conflicts         117
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         119
;  :arith-pivots            170
;  :binary-propagations     22
;  :conflicts               643
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3049
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              770
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            296002)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@04))))))))))))))))))))))))))))))))))))))
  $t@126@04))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ $k@86@04 (- $k@33@04 $k@93@04)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          84
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      319
;  :arith-conflicts         118
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3050
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              771
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            296134)
(push) ; 7
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@32@04))) $t@126@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          84
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      319
;  :arith-conflicts         118
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3050
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              772
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            296145)
(push) ; 7
(assert (not (< $Perm.No (- (+ $k@34@04 $k@75@04) $k@98@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6461
;  :arith-add-rows          84
;  :arith-assert-diseq      102
;  :arith-assert-lower      334
;  :arith-assert-upper      319
;  :arith-conflicts         118
;  :arith-eq-adapter        146
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               644
;  :datatype-accessor-ax    341
;  :datatype-constructor-ax 1686
;  :datatype-occurs-check   363
;  :datatype-splits         1395
;  :decisions               1634
;  :del-clause              342
;  :final-checks            82
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3050
;  :mk-clause               403
;  :num-allocs              5940387
;  :num-checks              773
;  :propagations            245
;  :quant-instantiations    105
;  :rlimit-count            296166)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@153@04 $Perm.Write))
(assert ($Perm.isReadVar $k@155@04 $Perm.Write))
(assert ($Perm.isReadVar $k@156@04 $Perm.Write))
(assert ($Perm.isReadVar $k@157@04 $Perm.Write))
(assert ($Perm.isReadVar $k@158@04 $Perm.Write))
(assert ($Perm.isReadVar $k@159@04 $Perm.Write))
(assert (= $t@152@04 ($Snap.combine ($Snap.first $t@152@04) ($Snap.second $t@152@04))))
(assert (<= $Perm.No $k@153@04))
(assert (<= $k@153@04 $Perm.Write))
(assert (implies (< $Perm.No $k@153@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@152@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@152@04))
    ($Snap.second ($Snap.second $t@152@04)))))
(assert (= ($Snap.first ($Snap.second $t@152@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@152@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@152@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@152@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  $Snap.unit))
(assert (forall ((i__209@154@04 Int)) (!
  (implies
    (and
      (<
        i__209@154@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
      (<= 0 i__209@154@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
          i__209@154@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__209@154@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__209@154@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__209@154@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
(assert (<= $Perm.No $k@155@04))
(assert (<= $k@155@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@155@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
(assert (<= $Perm.No $k@156@04))
(assert (<= $k@156@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@156@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@157@04))
(assert (<= $k@157@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@157@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@158@04))
(assert (<= $k@158@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@158@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@159@04))
(assert (<= $k@159@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@159@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 8
(assert (not false))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7621
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               645
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1983
;  :datatype-occurs-check   402
;  :datatype-splits         1638
;  :decisions               1922
;  :del-clause              356
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3393
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              776
;  :propagations            259
;  :quant-instantiations    115
;  :rlimit-count            307892
;  :time                    0.00)
; [then-branch: 42 | True | live]
; [else-branch: 42 | False | dead]
(push) ; 8
; [then-branch: 42 | True]
; [exec]
; __flatten_141__185 := diz.Combinate_m
(push) ; 9
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7621
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1983
;  :datatype-occurs-check   402
;  :datatype-splits         1638
;  :decisions               1922
;  :del-clause              356
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3393
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              777
;  :propagations            259
;  :quant-instantiations    115
;  :rlimit-count            307945)
(declare-const __flatten_141__185@172@04 $Ref)
(assert (= __flatten_141__185@172@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_140__184 := __flatten_141__185.Main_rn
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_141__185@172@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7622
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               646
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1983
;  :datatype-occurs-check   402
;  :datatype-splits         1638
;  :decisions               1922
;  :del-clause              356
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3394
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              778
;  :propagations            259
;  :quant-instantiations    115
;  :rlimit-count            308013)
(push) ; 9
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7622
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1983
;  :datatype-occurs-check   402
;  :datatype-splits         1638
;  :decisions               1922
;  :del-clause              356
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3394
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              779
;  :propagations            259
;  :quant-instantiations    115
;  :rlimit-count            308061)
(declare-const __flatten_140__184@173@04 $Ref)
(assert (=
  __flatten_140__184@173@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
; [eval] !__flatten_140__184.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  __flatten_140__184@173@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7623
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1983
;  :datatype-occurs-check   402
;  :datatype-splits         1638
;  :decisions               1922
;  :del-clause              356
;  :final-checks            91
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3395
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              780
;  :propagations            259
;  :quant-instantiations    115
;  :rlimit-count            308209)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7897
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    390
;  :datatype-constructor-ax 2066
;  :datatype-occurs-check   415
;  :datatype-splits         1719
;  :decisions               2002
;  :del-clause              356
;  :final-checks            94
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3478
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              781
;  :propagations            262
;  :quant-instantiations    117
;  :rlimit-count            310197
;  :time                    0.00)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8171
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               647
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3561
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              782
;  :propagations            265
;  :quant-instantiations    119
;  :rlimit-count            312159
;  :time                    0.00)
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04))))))))))))) | live]
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04)))))))))))) | live]
(push) ; 9
; [then-branch: 43 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04)))))))))))))]
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
; [exec]
; __flatten_143__187 := diz.Combinate_m
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8175
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3564
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              783
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312414)
(declare-const __flatten_143__187@174@04 $Ref)
(assert (= __flatten_143__187@174@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_142__186 := __flatten_143__187.Main_rn
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_143__187@174@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8176
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               648
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3565
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              784
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312462)
(push) ; 10
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8176
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3565
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              785
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312510)
(declare-const __flatten_142__186@175@04 $Ref)
(assert (=
  __flatten_142__186@175@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
; [exec]
; __flatten_142__186.Rng_number_o := 0
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  __flatten_142__186@175@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8177
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               649
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3566
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              786
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312558)
(assert (not (= __flatten_142__186@175@04 $Ref.null)))
; [exec]
; __flatten_160__203 := diz.Combinate_m
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8178
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               650
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3567
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              787
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312662)
(declare-const __flatten_160__203@176@04 $Ref)
(assert (= __flatten_160__203@176@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_162__205 := diz.Combinate_m
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8179
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3568
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              788
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312747)
(declare-const __flatten_162__205@177@04 $Ref)
(assert (= __flatten_162__205@177@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_161__204 := __flatten_162__205.Main_process_state[2 := 5]
; [eval] __flatten_162__205.Main_process_state[2 := 5]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_162__205@177@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8180
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3569
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              789
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312795)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8180
;  :arith-add-rows          84
;  :arith-assert-diseq      108
;  :arith-assert-lower      350
;  :arith-assert-upper      333
;  :arith-conflicts         118
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         120
;  :arith-pivots            173
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3569
;  :mk-clause               418
;  :num-allocs              5940387
;  :num-checks              790
;  :propagations            265
;  :quant-instantiations    121
;  :rlimit-count            312810)
(declare-const __flatten_161__204@178@04 Seq<Int>)
(assert (Seq_equal
  __flatten_161__204@178@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    2
    5)))
; [exec]
; __flatten_160__203.Main_process_state := __flatten_161__204
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_160__203@176@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8190
;  :arith-add-rows          87
;  :arith-assert-diseq      109
;  :arith-assert-lower      354
;  :arith-assert-upper      335
;  :arith-conflicts         118
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         122
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               651
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3592
;  :mk-clause               437
;  :num-allocs              5940387
;  :num-checks              791
;  :propagations            274
;  :quant-instantiations    126
;  :rlimit-count            313291)
(assert (not (= __flatten_160__203@176@04 $Ref.null)))
; [exec]
; __flatten_163__206 := diz.Combinate_m
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8191
;  :arith-add-rows          87
;  :arith-assert-diseq      109
;  :arith-assert-lower      354
;  :arith-assert-upper      335
;  :arith-conflicts         118
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         122
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               652
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3593
;  :mk-clause               437
;  :num-allocs              5940387
;  :num-checks              792
;  :propagations            274
;  :quant-instantiations    126
;  :rlimit-count            313395)
(declare-const __flatten_163__206@179@04 $Ref)
(assert (= __flatten_163__206@179@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_165__208 := diz.Combinate_m
(push) ; 10
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8192
;  :arith-add-rows          87
;  :arith-assert-diseq      109
;  :arith-assert-lower      354
;  :arith-assert-upper      335
;  :arith-conflicts         118
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         122
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3594
;  :mk-clause               437
;  :num-allocs              5940387
;  :num-checks              793
;  :propagations            274
;  :quant-instantiations    126
;  :rlimit-count            313480)
(declare-const __flatten_165__208@180@04 $Ref)
(assert (= __flatten_165__208@180@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))
; [exec]
; __flatten_164__207 := __flatten_165__208.Main_event_state[5 := 5]
; [eval] __flatten_165__208.Main_event_state[5 := 5]
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_165__208@180@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8193
;  :arith-add-rows          87
;  :arith-assert-diseq      109
;  :arith-assert-lower      354
;  :arith-assert-upper      335
;  :arith-conflicts         118
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         122
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3595
;  :mk-clause               437
;  :num-allocs              5940387
;  :num-checks              794
;  :propagations            274
;  :quant-instantiations    126
;  :rlimit-count            313528)
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8193
;  :arith-add-rows          87
;  :arith-assert-diseq      109
;  :arith-assert-lower      354
;  :arith-assert-upper      335
;  :arith-conflicts         118
;  :arith-eq-adapter        157
;  :arith-fixed-eqs         122
;  :arith-pivots            175
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3595
;  :mk-clause               437
;  :num-allocs              5940387
;  :num-checks              795
;  :propagations            274
;  :quant-instantiations    126
;  :rlimit-count            313543)
(declare-const __flatten_164__207@181@04 Seq<Int>)
(assert (Seq_equal
  __flatten_164__207@181@04
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
    5
    5)))
; [exec]
; __flatten_163__206.Main_event_state := __flatten_164__207
(set-option :timeout 10)
(push) ; 10
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) __flatten_163__206@179@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8203
;  :arith-add-rows          90
;  :arith-assert-diseq      110
;  :arith-assert-lower      358
;  :arith-assert-upper      337
;  :arith-conflicts         118
;  :arith-eq-adapter        160
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               653
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3618
;  :mk-clause               456
;  :num-allocs              5940387
;  :num-checks              796
;  :propagations            283
;  :quant-instantiations    131
;  :rlimit-count            314045)
(assert (not (= __flatten_163__206@179@04 $Ref.null)))
(push) ; 10
; Loop head block: Check well-definedness of invariant
(declare-const $t@182@04 $Snap)
(assert (= $t@182@04 ($Snap.combine ($Snap.first $t@182@04) ($Snap.second $t@182@04))))
(declare-const $k@183@04 $Perm)
(assert ($Perm.isReadVar $k@183@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@183@04 $Perm.No) (< $Perm.No $k@183@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8208
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      338
;  :arith-conflicts         118
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               654
;  :datatype-accessor-ax    394
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3623
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              797
;  :propagations            284
;  :quant-instantiations    131
;  :rlimit-count            314357)
(assert (<= $Perm.No $k@183@04))
(assert (<= $k@183@04 $Perm.Write))
(assert (implies (< $Perm.No $k@183@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@182@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@182@04))
    ($Snap.second ($Snap.second $t@182@04)))))
(assert (= ($Snap.first ($Snap.second $t@182@04)) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8214
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      339
;  :arith-conflicts         118
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               655
;  :datatype-accessor-ax    395
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3626
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              798
;  :propagations            284
;  :quant-instantiations    131
;  :rlimit-count            314600)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@182@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@182@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8220
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      339
;  :arith-conflicts         118
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               656
;  :datatype-accessor-ax    396
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3629
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              799
;  :propagations            284
;  :quant-instantiations    132
;  :rlimit-count            314872)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@182@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8225
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      339
;  :arith-conflicts         118
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               657
;  :datatype-accessor-ax    397
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3630
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              800
;  :propagations            284
;  :quant-instantiations    132
;  :rlimit-count            315049)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8231
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      360
;  :arith-assert-upper      339
;  :arith-conflicts         118
;  :arith-eq-adapter        161
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               658
;  :datatype-accessor-ax    398
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3632
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              801
;  :propagations            284
;  :quant-instantiations    132
;  :rlimit-count            315268)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8238
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      362
;  :arith-assert-upper      340
;  :arith-conflicts         118
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               659
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3638
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              802
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            315598)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8244
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      362
;  :arith-assert-upper      340
;  :arith-conflicts         118
;  :arith-eq-adapter        162
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               660
;  :datatype-accessor-ax    400
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3640
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              803
;  :propagations            284
;  :quant-instantiations    134
;  :rlimit-count            315837)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  $Snap.unit))
; [eval] (forall i__211: Int :: { diz.Combinate_m.Main_process_state[i__211] } 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|)
(declare-const i__211@184@04 Int)
(push) ; 11
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__211
(push) ; 12
; [then-branch: 44 | 0 <= i__211@184@04 | live]
; [else-branch: 44 | !(0 <= i__211@184@04) | live]
(push) ; 13
; [then-branch: 44 | 0 <= i__211@184@04]
(assert (<= 0 i__211@184@04))
; [eval] i__211 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 14
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      365
;  :arith-assert-upper      341
;  :arith-conflicts         118
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               661
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3648
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              804
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316276)
(pop) ; 13
(push) ; 13
; [else-branch: 44 | !(0 <= i__211@184@04)]
(assert (not (<= 0 i__211@184@04)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 45 | i__211@184@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__211@184@04 | live]
; [else-branch: 45 | !(i__211@184@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__211@184@04) | live]
(push) ; 13
; [then-branch: 45 | i__211@184@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__211@184@04]
(assert (and
  (<
    i__211@184@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  (<= 0 i__211@184@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1
; [eval] diz.Combinate_m.Main_process_state[i__211]
(push) ; 14
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      366
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3650
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              805
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316433)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__211@184@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      366
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               662
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3650
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              806
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316442)
; [eval] -1
(push) ; 14
; [then-branch: 46 | First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04] == -1 | live]
; [else-branch: 46 | First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04] != -1 | live]
(push) ; 15
; [then-branch: 46 | First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__211@184@04)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 46 | First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i__211@184@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211]
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      366
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               663
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3651
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              807
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316656)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__211@184@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      111
;  :arith-assert-lower      366
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        163
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               663
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3651
;  :mk-clause               458
;  :num-allocs              5940387
;  :num-checks              808
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316665)
(push) ; 16
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04] | live]
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04]) | live]
(push) ; 17
; [then-branch: 47 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__211@184@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      112
;  :arith-assert-lower      369
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3654
;  :mk-clause               459
;  :num-allocs              5940387
;  :num-checks              809
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316827)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__211@184@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      112
;  :arith-assert-lower      369
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               664
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3654
;  :mk-clause               459
;  :num-allocs              5940387
;  :num-checks              810
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316836)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8252
;  :arith-add-rows          90
;  :arith-assert-diseq      112
;  :arith-assert-lower      369
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               665
;  :datatype-accessor-ax    401
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              356
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3654
;  :mk-clause               459
;  :num-allocs              5940387
;  :num-checks              811
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            316884)
(pop) ; 17
(push) ; 17
; [else-branch: 47 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i__211@184@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i__211@184@04))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 45 | !(i__211@184@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__211@184@04)]
(assert (not
  (and
    (<
      i__211@184@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
    (<= 0 i__211@184@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__211@184@04 Int)) (!
  (implies
    (and
      (<
        i__211@184@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i__211@184@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i__211@184@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__211@184@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__211@184@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__211@184@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8257
;  :arith-add-rows          90
;  :arith-assert-diseq      112
;  :arith-assert-lower      369
;  :arith-assert-upper      342
;  :arith-conflicts         118
;  :arith-eq-adapter        164
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               666
;  :datatype-accessor-ax    402
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3656
;  :mk-clause               459
;  :num-allocs              5940387
;  :num-checks              812
;  :propagations            284
;  :quant-instantiations    136
;  :rlimit-count            317509)
(declare-const $k@185@04 $Perm)
(assert ($Perm.isReadVar $k@185@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@185@04 $Perm.No) (< $Perm.No $k@185@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8257
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      343
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               667
;  :datatype-accessor-ax    402
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3660
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              813
;  :propagations            285
;  :quant-instantiations    136
;  :rlimit-count            317707)
(assert (<= $Perm.No $k@185@04))
(assert (<= $k@185@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8263
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               668
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3663
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              814
;  :propagations            285
;  :quant-instantiations    136
;  :rlimit-count            318030)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8263
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               669
;  :datatype-accessor-ax    403
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3663
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              815
;  :propagations            285
;  :quant-instantiations    136
;  :rlimit-count            318078)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8269
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               670
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3666
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              816
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            318434)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8269
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               671
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3666
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              817
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            318482)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8274
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               672
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3667
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              818
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            318739)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8274
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               673
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3667
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              819
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            318787)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8279
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               674
;  :datatype-accessor-ax    406
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3668
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              820
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319054)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8279
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               675
;  :datatype-accessor-ax    406
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3668
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              821
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319102)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8284
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               676
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3669
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              822
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319379)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8284
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               677
;  :datatype-accessor-ax    407
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3669
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              823
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319427)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8289
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               678
;  :datatype-accessor-ax    408
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3670
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              824
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319714)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8289
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               679
;  :datatype-accessor-ax    408
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3670
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              825
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            319762)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8294
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               680
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3671
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              826
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320059)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8294
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               681
;  :datatype-accessor-ax    409
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3671
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              827
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320107)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8299
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               682
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3672
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              828
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320414)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8299
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               683
;  :datatype-accessor-ax    410
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3672
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              829
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320462)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8304
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               684
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3673
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              830
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320779)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8304
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               685
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3673
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              831
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            320827)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8309
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               686
;  :datatype-accessor-ax    412
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3674
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              832
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            321154)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8309
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               687
;  :datatype-accessor-ax    412
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3674
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              833
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            321202)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8314
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               688
;  :datatype-accessor-ax    413
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3675
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              834
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            321539)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8314
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               689
;  :datatype-accessor-ax    413
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3675
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              835
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            321587)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8319
;  :arith-add-rows          90
;  :arith-assert-diseq      113
;  :arith-assert-lower      371
;  :arith-assert-upper      344
;  :arith-conflicts         118
;  :arith-eq-adapter        165
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               690
;  :datatype-accessor-ax    414
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3676
;  :mk-clause               461
;  :num-allocs              5940387
;  :num-checks              836
;  :propagations            285
;  :quant-instantiations    137
;  :rlimit-count            321934)
(declare-const $k@186@04 $Perm)
(assert ($Perm.isReadVar $k@186@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@186@04 $Perm.No) (< $Perm.No $k@186@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8319
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      345
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               691
;  :datatype-accessor-ax    414
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3680
;  :mk-clause               463
;  :num-allocs              5940387
;  :num-checks              837
;  :propagations            286
;  :quant-instantiations    137
;  :rlimit-count            322133)
(assert (<= $Perm.No $k@186@04))
(assert (<= $k@186@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@186@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8325
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               692
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3683
;  :mk-clause               463
;  :num-allocs              5940387
;  :num-checks              838
;  :propagations            286
;  :quant-instantiations    137
;  :rlimit-count            322576)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8325
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               693
;  :datatype-accessor-ax    415
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              4.95
;  :memory                  4.95
;  :mk-bool-var             3683
;  :mk-clause               463
;  :num-allocs              5940387
;  :num-checks              839
;  :propagations            286
;  :quant-instantiations    137
;  :rlimit-count            322624)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8331
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               694
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3686
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              840
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            323118)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8331
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               695
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3686
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              841
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            323166)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8336
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               696
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3687
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              842
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            323543)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8336
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               697
;  :datatype-accessor-ax    417
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3687
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              843
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            323591)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8341
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               698
;  :datatype-accessor-ax    418
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3688
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              844
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            323978)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8341
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               699
;  :datatype-accessor-ax    418
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3688
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              845
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            324026)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8346
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               700
;  :datatype-accessor-ax    419
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3689
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              846
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            324423)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8346
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               701
;  :datatype-accessor-ax    419
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3689
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              847
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            324471)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8351
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               702
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3690
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              848
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            324878)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8351
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               703
;  :datatype-accessor-ax    420
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.05
;  :memory                  5.05
;  :mk-bool-var             3690
;  :mk-clause               463
;  :num-allocs              6205743
;  :num-checks              849
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            324926)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8356
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               704
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3691
;  :mk-clause               463
;  :num-allocs              6738961
;  :num-checks              850
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            325343)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8356
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               705
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3691
;  :mk-clause               463
;  :num-allocs              6738961
;  :num-checks              851
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            325391)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8361
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               706
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3692
;  :mk-clause               463
;  :num-allocs              6738961
;  :num-checks              852
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            325818)
(push) ; 11
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8361
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               707
;  :datatype-accessor-ax    422
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3692
;  :mk-clause               463
;  :num-allocs              6738961
;  :num-checks              853
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            325866)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8366
;  :arith-add-rows          90
;  :arith-assert-diseq      114
;  :arith-assert-lower      373
;  :arith-assert-upper      346
;  :arith-conflicts         118
;  :arith-eq-adapter        166
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               708
;  :datatype-accessor-ax    423
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3693
;  :mk-clause               463
;  :num-allocs              6738961
;  :num-checks              854
;  :propagations            286
;  :quant-instantiations    138
;  :rlimit-count            326303)
(declare-const $k@187@04 $Perm)
(assert ($Perm.isReadVar $k@187@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@187@04 $Perm.No) (< $Perm.No $k@187@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8366
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      347
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               709
;  :datatype-accessor-ax    423
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3697
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              855
;  :propagations            287
;  :quant-instantiations    138
;  :rlimit-count            326502)
(assert (<= $Perm.No $k@187@04))
(assert (<= $k@187@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@187@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8372
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               710
;  :datatype-accessor-ax    424
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3700
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              856
;  :propagations            287
;  :quant-instantiations    138
;  :rlimit-count            327035)
(push) ; 11
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8372
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               711
;  :datatype-accessor-ax    424
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3700
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              857
;  :propagations            287
;  :quant-instantiations    138
;  :rlimit-count            327083)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8378
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               712
;  :datatype-accessor-ax    425
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3703
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              858
;  :propagations            287
;  :quant-instantiations    139
;  :rlimit-count            327661)
(push) ; 11
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8378
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               713
;  :datatype-accessor-ax    425
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3703
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              859
;  :propagations            287
;  :quant-instantiations    139
;  :rlimit-count            327709)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8383
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               714
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3704
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              860
;  :propagations            287
;  :quant-instantiations    139
;  :rlimit-count            328176)
(push) ; 11
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8383
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               715
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3704
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              861
;  :propagations            287
;  :quant-instantiations    139
;  :rlimit-count            328224)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8388
;  :arith-add-rows          90
;  :arith-assert-diseq      115
;  :arith-assert-lower      375
;  :arith-assert-upper      348
;  :arith-conflicts         118
;  :arith-eq-adapter        167
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               716
;  :datatype-accessor-ax    427
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3705
;  :mk-clause               465
;  :num-allocs              6738961
;  :num-checks              862
;  :propagations            287
;  :quant-instantiations    139
;  :rlimit-count            328701)
(declare-const $k@188@04 $Perm)
(assert ($Perm.isReadVar $k@188@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@188@04 $Perm.No) (< $Perm.No $k@188@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8388
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      349
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               717
;  :datatype-accessor-ax    427
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3709
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              863
;  :propagations            288
;  :quant-instantiations    139
;  :rlimit-count            328900)
(assert (<= $Perm.No $k@188@04))
(assert (<= $k@188@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@188@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8394
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               718
;  :datatype-accessor-ax    428
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3712
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              864
;  :propagations            288
;  :quant-instantiations    139
;  :rlimit-count            329473)
(push) ; 11
(assert (not (< $Perm.No $k@188@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8394
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               719
;  :datatype-accessor-ax    428
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3712
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              865
;  :propagations            288
;  :quant-instantiations    139
;  :rlimit-count            329521)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8400
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               720
;  :datatype-accessor-ax    429
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3715
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              866
;  :propagations            288
;  :quant-instantiations    140
;  :rlimit-count            330129)
(push) ; 11
(assert (not (< $Perm.No $k@188@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8400
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               721
;  :datatype-accessor-ax    429
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3715
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              867
;  :propagations            288
;  :quant-instantiations    140
;  :rlimit-count            330177)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8405
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               722
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3716
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              868
;  :propagations            288
;  :quant-instantiations    140
;  :rlimit-count            330684)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8405
;  :arith-add-rows          90
;  :arith-assert-diseq      116
;  :arith-assert-lower      377
;  :arith-assert-upper      350
;  :arith-conflicts         118
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               723
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3716
;  :mk-clause               467
;  :num-allocs              6738961
;  :num-checks              869
;  :propagations            288
;  :quant-instantiations    140
;  :rlimit-count            330732)
(declare-const $k@189@04 $Perm)
(assert ($Perm.isReadVar $k@189@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@189@04 $Perm.No) (< $Perm.No $k@189@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8405
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      351
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               724
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3720
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              870
;  :propagations            289
;  :quant-instantiations    140
;  :rlimit-count            330931)
(assert (<= $Perm.No $k@189@04))
(assert (<= $k@189@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@189@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8411
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               725
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3723
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              871
;  :propagations            289
;  :quant-instantiations    140
;  :rlimit-count            331534)
(push) ; 11
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8411
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               726
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3723
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              872
;  :propagations            289
;  :quant-instantiations    140
;  :rlimit-count            331582)
(push) ; 11
(assert (not (< $Perm.No $k@189@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8411
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               727
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3723
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              873
;  :propagations            289
;  :quant-instantiations    140
;  :rlimit-count            331630)
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8411
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               728
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3723
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              874
;  :propagations            289
;  :quant-instantiations    140
;  :rlimit-count            331678)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 11
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8416
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               729
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3726
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              875
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332262)
(push) ; 11
(assert (not (< $Perm.No $k@188@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8416
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               730
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3726
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              876
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332310)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; Loop head block: Check well-definedness of edge conditions
(push) ; 11
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8419
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3727
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              877
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332756)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8419
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               731
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3727
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              878
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332771)
; [eval] -1
(push) ; 12
; [then-branch: 48 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 | live]
; [else-branch: 48 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1 | live]
(push) ; 13
; [then-branch: 48 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      2)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 48 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_event_state[5]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8420
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3728
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              879
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332966)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8420
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               732
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3728
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              880
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            332981)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [eval] !(diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2)
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8420
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               733
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3728
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              881
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            333034)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8420
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               733
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3728
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              882
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            333049)
; [eval] -1
(push) ; 12
; [then-branch: 49 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 | live]
; [else-branch: 49 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1 | live]
(push) ; 13
; [then-branch: 49 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      2)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 49 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_event_state[5]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3729
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              883
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            333240)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      117
;  :arith-assert-lower      379
;  :arith-assert-upper      352
;  :arith-conflicts         118
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               734
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              357
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3729
;  :mk-clause               469
;  :num-allocs              6738961
;  :num-checks              884
;  :propagations            289
;  :quant-instantiations    141
;  :rlimit-count            333255)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
(push) ; 10
; Loop head block: Establish invariant
(declare-const $k@190@04 $Perm)
(assert ($Perm.isReadVar $k@190@04 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@190@04 $Perm.No) (< $Perm.No $k@190@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      381
;  :arith-assert-upper      353
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3733
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              885
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333458)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@153@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      381
;  :arith-assert-upper      353
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            177
;  :binary-propagations     22
;  :conflicts               735
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3733
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              886
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333469)
(assert (< $k@190@04 $k@153@04))
(assert (<= $Perm.No (- $k@153@04 $k@190@04)))
(assert (<= (- $k@153@04 $k@190@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@153@04 $k@190@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      383
;  :arith-assert-upper      354
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               736
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3736
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              887
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333683)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      383
;  :arith-assert-upper      354
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               737
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3736
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              888
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333731)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      383
;  :arith-assert-upper      354
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               738
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3736
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              889
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333779)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      383
;  :arith-assert-upper      354
;  :arith-conflicts         118
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               739
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3736
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              890
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333827)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_161__204@178@04) 3)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8421
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      383
;  :arith-assert-upper      354
;  :arith-conflicts         118
;  :arith-eq-adapter        171
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               740
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3739
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              891
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            333901)
(assert (= (Seq_length __flatten_161__204@178@04) 3))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8422
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      355
;  :arith-conflicts         118
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               741
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3742
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              892
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334000)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8422
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      355
;  :arith-conflicts         118
;  :arith-eq-adapter        172
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               742
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3742
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              893
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334048)
(set-option :timeout 0)
(push) ; 11
(assert (not (= (Seq_length __flatten_164__207@181@04) 6)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8422
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      384
;  :arith-assert-upper      355
;  :arith-conflicts         118
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               743
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3745
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              894
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334122)
(assert (= (Seq_length __flatten_164__207@181@04) 6))
; [eval] (forall i__211: Int :: { diz.Combinate_m.Main_process_state[i__211] } 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|)
(declare-const i__211@191@04 Int)
(push) ; 11
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__211
(push) ; 12
; [then-branch: 50 | 0 <= i__211@191@04 | live]
; [else-branch: 50 | !(0 <= i__211@191@04) | live]
(push) ; 13
; [then-branch: 50 | 0 <= i__211@191@04]
(assert (<= 0 i__211@191@04))
; [eval] i__211 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8423
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      386
;  :arith-assert-upper      356
;  :arith-conflicts         118
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               744
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3749
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              895
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334274)
(pop) ; 13
(push) ; 13
; [else-branch: 50 | !(0 <= i__211@191@04)]
(assert (not (<= 0 i__211@191@04)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 51 | i__211@191@04 < |__flatten_161__204@178@04| && 0 <= i__211@191@04 | live]
; [else-branch: 51 | !(i__211@191@04 < |__flatten_161__204@178@04| && 0 <= i__211@191@04) | live]
(push) ; 13
; [then-branch: 51 | i__211@191@04 < |__flatten_161__204@178@04| && 0 <= i__211@191@04]
(assert (and
  (< i__211@191@04 (Seq_length __flatten_161__204@178@04))
  (<= 0 i__211@191@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1
; [eval] diz.Combinate_m.Main_process_state[i__211]
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8423
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      387
;  :arith-assert-upper      357
;  :arith-conflicts         118
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3751
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              896
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334431)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__211@191@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8423
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      387
;  :arith-assert-upper      357
;  :arith-conflicts         118
;  :arith-eq-adapter        174
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               745
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3751
;  :mk-clause               471
;  :num-allocs              6738961
;  :num-checks              897
;  :propagations            290
;  :quant-instantiations    141
;  :rlimit-count            334440)
; [eval] -1
(push) ; 14
; [then-branch: 52 | __flatten_161__204@178@04[i__211@191@04] == -1 | live]
; [else-branch: 52 | __flatten_161__204@178@04[i__211@191@04] != -1 | live]
(push) ; 15
; [then-branch: 52 | __flatten_161__204@178@04[i__211@191@04] == -1]
(assert (= (Seq_index __flatten_161__204@178@04 i__211@191@04) (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 52 | __flatten_161__204@178@04[i__211@191@04] != -1]
(assert (not (= (Seq_index __flatten_161__204@178@04 i__211@191@04) (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211]
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      387
;  :arith-assert-upper      358
;  :arith-conflicts         118
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3759
;  :mk-clause               481
;  :num-allocs              6738961
;  :num-checks              898
;  :propagations            290
;  :quant-instantiations    142
;  :rlimit-count            334647)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__211@191@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          90
;  :arith-assert-diseq      118
;  :arith-assert-lower      387
;  :arith-assert-upper      358
;  :arith-conflicts         118
;  :arith-eq-adapter        175
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               746
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3759
;  :mk-clause               481
;  :num-allocs              6738961
;  :num-checks              899
;  :propagations            290
;  :quant-instantiations    142
;  :rlimit-count            334656)
(push) ; 16
; [then-branch: 53 | 0 <= __flatten_161__204@178@04[i__211@191@04] | live]
; [else-branch: 53 | !(0 <= __flatten_161__204@178@04[i__211@191@04]) | live]
(push) ; 17
; [then-branch: 53 | 0 <= __flatten_161__204@178@04[i__211@191@04]]
(assert (<= 0 (Seq_index __flatten_161__204@178@04 i__211@191@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          90
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      358
;  :arith-conflicts         118
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3762
;  :mk-clause               482
;  :num-allocs              6738961
;  :num-checks              900
;  :propagations            290
;  :quant-instantiations    142
;  :rlimit-count            334769)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__211@191@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          90
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      358
;  :arith-conflicts         118
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               747
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3762
;  :mk-clause               482
;  :num-allocs              6738961
;  :num-checks              901
;  :propagations            290
;  :quant-instantiations    142
;  :rlimit-count            334778)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8424
;  :arith-add-rows          90
;  :arith-assert-diseq      119
;  :arith-assert-lower      390
;  :arith-assert-upper      358
;  :arith-conflicts         118
;  :arith-eq-adapter        176
;  :arith-fixed-eqs         124
;  :arith-pivots            178
;  :binary-propagations     22
;  :conflicts               748
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2149
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2082
;  :del-clause              369
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3762
;  :mk-clause               482
;  :num-allocs              6738961
;  :num-checks              902
;  :propagations            290
;  :quant-instantiations    142
;  :rlimit-count            334826)
(pop) ; 17
(push) ; 17
; [else-branch: 53 | !(0 <= __flatten_161__204@178@04[i__211@191@04])]
(assert (not (<= 0 (Seq_index __flatten_161__204@178@04 i__211@191@04))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 51 | !(i__211@191@04 < |__flatten_161__204@178@04| && 0 <= i__211@191@04)]
(assert (not
  (and
    (< i__211@191@04 (Seq_length __flatten_161__204@178@04))
    (<= 0 i__211@191@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 11
(assert (not (forall ((i__211@191@04 Int)) (!
  (implies
    (and
      (< i__211@191@04 (Seq_length __flatten_161__204@178@04))
      (<= 0 i__211@191@04))
    (or
      (= (Seq_index __flatten_161__204@178@04 i__211@191@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_161__204@178@04 i__211@191@04)
          (Seq_length __flatten_164__207@181@04))
        (<= 0 (Seq_index __flatten_161__204@178@04 i__211@191@04)))))
  :pattern ((Seq_index __flatten_161__204@178@04 i__211@191@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      124
;  :arith-assert-lower      400
;  :arith-assert-upper      370
;  :arith-conflicts         120
;  :arith-eq-adapter        184
;  :arith-fixed-eqs         126
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               754
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3800
;  :mk-clause               513
;  :num-allocs              6738961
;  :num-checks              903
;  :propagations            316
;  :quant-instantiations    145
;  :rlimit-count            335456)
(assert (forall ((i__211@191@04 Int)) (!
  (implies
    (and
      (< i__211@191@04 (Seq_length __flatten_161__204@178@04))
      (<= 0 i__211@191@04))
    (or
      (= (Seq_index __flatten_161__204@178@04 i__211@191@04) (- 0 1))
      (and
        (<
          (Seq_index __flatten_161__204@178@04 i__211@191@04)
          (Seq_length __flatten_164__207@181@04))
        (<= 0 (Seq_index __flatten_161__204@178@04 i__211@191@04)))))
  :pattern ((Seq_index __flatten_161__204@178@04 i__211@191@04))
  :qid |prog.l<no position>|)))
(declare-const $k@192@04 $Perm)
(assert ($Perm.isReadVar $k@192@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      402
;  :arith-assert-upper      371
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               755
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3805
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              904
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            335924)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@192@04 $Perm.No) (< $Perm.No $k@192@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      402
;  :arith-assert-upper      371
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3805
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              905
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            335974)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@155@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      402
;  :arith-assert-upper      371
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            182
;  :binary-propagations     22
;  :conflicts               756
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3805
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              906
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            335985)
(assert (< $k@192@04 $k@155@04))
(assert (<= $Perm.No (- $k@155@04 $k@192@04)))
(assert (<= (- $k@155@04 $k@192@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@155@04 $k@192@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               757
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              907
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336205)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               758
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              908
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336253)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               759
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              909
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336301)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               760
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              910
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336349)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               761
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              911
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336397)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               762
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              912
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336445)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               763
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              913
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336493)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               764
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              914
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336541)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               765
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              915
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336589)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               766
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              916
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336637)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               767
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              917
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336685)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               768
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              918
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336733)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               769
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              919
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336781)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               770
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              920
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336829)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               771
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              921
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336877)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               772
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              922
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336925)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               773
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              923
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            336973)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               774
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              924
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            337021)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               775
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              925
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            337069)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               776
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              926
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            337117)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               777
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              927
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            337165)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      125
;  :arith-assert-lower      404
;  :arith-assert-upper      372
;  :arith-conflicts         120
;  :arith-eq-adapter        185
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               778
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3808
;  :mk-clause               515
;  :num-allocs              6738961
;  :num-checks              928
;  :propagations            317
;  :quant-instantiations    145
;  :rlimit-count            337213)
(declare-const $k@193@04 $Perm)
(assert ($Perm.isReadVar $k@193@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      406
;  :arith-assert-upper      373
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               779
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3812
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              929
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337410)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@193@04 $Perm.No) (< $Perm.No $k@193@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      406
;  :arith-assert-upper      373
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3812
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              930
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337460)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@156@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      406
;  :arith-assert-upper      373
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            184
;  :binary-propagations     22
;  :conflicts               780
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3812
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              931
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337471)
(assert (< $k@193@04 $k@156@04))
(assert (<= $Perm.No (- $k@156@04 $k@193@04)))
(assert (<= (- $k@156@04 $k@193@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@156@04 $k@193@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               781
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              932
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337685)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               782
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              933
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337733)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               783
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              934
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337781)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               784
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              935
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337829)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               785
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              936
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337877)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               786
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              937
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337925)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               787
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              938
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            337973)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               788
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              939
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338021)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               789
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              940
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338069)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               790
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              941
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338117)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               791
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              942
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338165)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               792
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              943
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338213)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               793
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              944
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338261)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               794
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              945
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338309)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               795
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              946
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338357)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      126
;  :arith-assert-lower      408
;  :arith-assert-upper      374
;  :arith-conflicts         120
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               796
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3815
;  :mk-clause               517
;  :num-allocs              6738961
;  :num-checks              947
;  :propagations            318
;  :quant-instantiations    145
;  :rlimit-count            338405)
(declare-const $k@194@04 $Perm)
(assert ($Perm.isReadVar $k@194@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      410
;  :arith-assert-upper      375
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               797
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3819
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              948
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338601)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@194@04 $Perm.No) (< $Perm.No $k@194@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      410
;  :arith-assert-upper      375
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3819
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              949
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338651)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@157@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      410
;  :arith-assert-upper      375
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            185
;  :binary-propagations     22
;  :conflicts               798
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3819
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              950
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338662)
(assert (< $k@194@04 $k@157@04))
(assert (<= $Perm.No (- $k@157@04 $k@194@04)))
(assert (<= (- $k@157@04 $k@194@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@157@04 $k@194@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               799
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              951
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338882)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               800
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              952
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338930)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               801
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              953
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            338978)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               802
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              954
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            339026)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               803
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              955
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            339074)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      127
;  :arith-assert-lower      412
;  :arith-assert-upper      376
;  :arith-conflicts         120
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               804
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3822
;  :mk-clause               519
;  :num-allocs              6738961
;  :num-checks              956
;  :propagations            319
;  :quant-instantiations    145
;  :rlimit-count            339122)
(declare-const $k@195@04 $Perm)
(assert ($Perm.isReadVar $k@195@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      414
;  :arith-assert-upper      377
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               805
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3826
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              957
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339318)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@195@04 $Perm.No) (< $Perm.No $k@195@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      414
;  :arith-assert-upper      377
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3826
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              958
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339368)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@158@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      414
;  :arith-assert-upper      377
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            187
;  :binary-propagations     22
;  :conflicts               806
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3826
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              959
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339379
;  :time                    0.00)
(assert (< $k@195@04 $k@158@04))
(assert (<= $Perm.No (- $k@158@04 $k@195@04)))
(assert (<= (- $k@158@04 $k@195@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@158@04 $k@195@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      416
;  :arith-assert-upper      378
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               807
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3829
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              960
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339593)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      416
;  :arith-assert-upper      378
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               808
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3829
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              961
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339641)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      416
;  :arith-assert-upper      378
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               809
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3829
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              962
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339689)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      128
;  :arith-assert-lower      416
;  :arith-assert-upper      378
;  :arith-conflicts         120
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               810
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3829
;  :mk-clause               521
;  :num-allocs              6738961
;  :num-checks              963
;  :propagations            320
;  :quant-instantiations    145
;  :rlimit-count            339737)
(declare-const $k@196@04 $Perm)
(assert ($Perm.isReadVar $k@196@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      418
;  :arith-assert-upper      379
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               811
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3833
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              964
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            339933)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      418
;  :arith-assert-upper      379
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               812
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3833
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              965
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            339981)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@196@04 $Perm.No) (< $Perm.No $k@196@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      418
;  :arith-assert-upper      379
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               813
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3833
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              966
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340031)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@159@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      418
;  :arith-assert-upper      379
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            188
;  :binary-propagations     22
;  :conflicts               813
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3833
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              967
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340042)
(assert (< $k@196@04 $k@159@04))
(assert (<= $Perm.No (- $k@159@04 $k@196@04)))
(assert (<= (- $k@159@04 $k@196@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@159@04 $k@196@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               814
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              968
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340256)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               815
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              969
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340304)
(push) ; 11
(assert (not (< $Perm.No $k@159@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               816
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              970
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340352)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               817
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              971
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340400)
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               818
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              972
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340448)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8444
;  :arith-add-rows          90
;  :arith-assert-diseq      129
;  :arith-assert-lower      420
;  :arith-assert-upper      380
;  :arith-conflicts         120
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               819
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2151
;  :datatype-occurs-check   428
;  :datatype-splits         1800
;  :decisions               2087
;  :del-clause              411
;  :final-checks            97
;  :max-generation          2
;  :max-memory              5.38
;  :memory                  5.22
;  :mk-bool-var             3836
;  :mk-clause               523
;  :num-allocs              6738961
;  :num-checks              973
;  :propagations            321
;  :quant-instantiations    145
;  :rlimit-count            340496)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert ($Perm.isReadVar $k@183@04 $Perm.Write))
(assert ($Perm.isReadVar $k@185@04 $Perm.Write))
(assert ($Perm.isReadVar $k@186@04 $Perm.Write))
(assert ($Perm.isReadVar $k@187@04 $Perm.Write))
(assert ($Perm.isReadVar $k@188@04 $Perm.Write))
(assert ($Perm.isReadVar $k@189@04 $Perm.Write))
(assert (= $t@182@04 ($Snap.combine ($Snap.first $t@182@04) ($Snap.second $t@182@04))))
(assert (<= $Perm.No $k@183@04))
(assert (<= $k@183@04 $Perm.Write))
(assert (implies (< $Perm.No $k@183@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@182@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@182@04))
    ($Snap.second ($Snap.second $t@182@04)))))
(assert (= ($Snap.first ($Snap.second $t@182@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@182@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@182@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@182@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  $Snap.unit))
(assert (forall ((i__211@184@04 Int)) (!
  (implies
    (and
      (<
        i__211@184@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i__211@184@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i__211@184@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__211@184@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__211@184@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__211@184@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
(assert (<= $Perm.No $k@185@04))
(assert (<= $k@185@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@185@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
(assert (<= $Perm.No $k@186@04))
(assert (<= $k@186@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@186@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@187@04))
(assert (<= $k@187@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@187@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@188@04))
(assert (<= $k@188@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@188@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@189@04))
(assert (<= $k@189@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@189@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 12
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9644
;  :arith-add-rows          90
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      394
;  :arith-conflicts         120
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2449
;  :datatype-occurs-check   458
;  :datatype-splits         2020
;  :decisions               2377
;  :del-clause              425
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4157
;  :mk-clause               538
;  :num-allocs              7305535
;  :num-checks              976
;  :propagations            334
;  :quant-instantiations    155
;  :rlimit-count            351937)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9644
;  :arith-add-rows          90
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      394
;  :arith-conflicts         120
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               821
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2449
;  :datatype-occurs-check   458
;  :datatype-splits         2020
;  :decisions               2377
;  :del-clause              425
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4157
;  :mk-clause               538
;  :num-allocs              7305535
;  :num-checks              977
;  :propagations            334
;  :quant-instantiations    155
;  :rlimit-count            351952)
; [eval] -1
(push) ; 12
; [then-branch: 54 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1 | live]
(push) ; 13
; [then-branch: 54 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      2)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 54 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_event_state[5]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9645
;  :arith-add-rows          90
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      394
;  :arith-conflicts         120
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2449
;  :datatype-occurs-check   458
;  :datatype-splits         2020
;  :decisions               2377
;  :del-clause              425
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4158
;  :mk-clause               538
;  :num-allocs              7305535
;  :num-checks              978
;  :propagations            334
;  :quant-instantiations    155
;  :rlimit-count            352143)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9645
;  :arith-add-rows          90
;  :arith-assert-diseq      135
;  :arith-assert-lower      436
;  :arith-assert-upper      394
;  :arith-conflicts         120
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               822
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2449
;  :datatype-occurs-check   458
;  :datatype-splits         2020
;  :decisions               2377
;  :del-clause              425
;  :final-checks            103
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4158
;  :mk-clause               538
;  :num-allocs              7305535
;  :num-checks              979
;  :propagations            334
;  :quant-instantiations    155
;  :rlimit-count            352158)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
          5)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10211
;  :arith-add-rows          90
;  :arith-assert-diseq      136
;  :arith-assert-lower      439
;  :arith-assert-upper      395
;  :arith-conflicts         120
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    482
;  :datatype-constructor-ax 2615
;  :datatype-occurs-check   479
;  :datatype-splits         2134
;  :decisions               2538
;  :del-clause              432
;  :final-checks            107
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4288
;  :mk-clause               545
;  :num-allocs              7305535
;  :num-checks              980
;  :propagations            340
;  :quant-instantiations    156
;  :rlimit-count            355501
;  :time                    0.00)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
        5)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      136
;  :arith-assert-lower      439
;  :arith-assert-upper      395
;  :arith-conflicts         120
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               824
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4399
;  :mk-clause               545
;  :num-allocs              7305535
;  :num-checks              981
;  :propagations            344
;  :quant-instantiations    156
;  :rlimit-count            357994
;  :time                    0.00)
; [then-branch: 55 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2 | live]
; [else-branch: 55 | !(First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2) | live]
(push) ; 12
; [then-branch: 55 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
        5)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      136
;  :arith-assert-lower      439
;  :arith-assert-upper      395
;  :arith-conflicts         120
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               825
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4401
;  :mk-clause               546
;  :num-allocs              7305535
;  :num-checks              982
;  :propagations            344
;  :quant-instantiations    156
;  :rlimit-count            358272)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      136
;  :arith-assert-lower      439
;  :arith-assert-upper      395
;  :arith-conflicts         120
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4401
;  :mk-clause               546
;  :num-allocs              7305535
;  :num-checks              983
;  :propagations            344
;  :quant-instantiations    156
;  :rlimit-count            358320)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@197@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 56 | 0 <= i@197@04 | live]
; [else-branch: 56 | !(0 <= i@197@04) | live]
(push) ; 15
; [then-branch: 56 | 0 <= i@197@04]
(assert (<= 0 i@197@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 56 | !(0 <= i@197@04)]
(assert (not (<= 0 i@197@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 57 | i@197@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i@197@04 | live]
; [else-branch: 57 | !(i@197@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i@197@04) | live]
(push) ; 15
; [then-branch: 57 | i@197@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i@197@04]
(assert (and
  (<
    i@197@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  (<= 0 i@197@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@197@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      136
;  :arith-assert-lower      440
;  :arith-assert-upper      396
;  :arith-conflicts         120
;  :arith-eq-adapter        198
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4403
;  :mk-clause               546
;  :num-allocs              7305535
;  :num-checks              984
;  :propagations            344
;  :quant-instantiations    156
;  :rlimit-count            358456)
; [eval] -1
(push) ; 16
; [then-branch: 58 | First:(Second:(Second:(Second:($t@182@04))))[i@197@04] == -1 | live]
; [else-branch: 58 | First:(Second:(Second:(Second:($t@182@04))))[i@197@04] != -1 | live]
(push) ; 17
; [then-branch: 58 | First:(Second:(Second:(Second:($t@182@04))))[i@197@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i@197@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 58 | First:(Second:(Second:(Second:($t@182@04))))[i@197@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i@197@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@197@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      137
;  :arith-assert-lower      443
;  :arith-assert-upper      397
;  :arith-conflicts         120
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4409
;  :mk-clause               550
;  :num-allocs              7305535
;  :num-checks              985
;  :propagations            346
;  :quant-instantiations    157
;  :rlimit-count            358688)
(push) ; 18
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i@197@04] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i@197@04]) | live]
(push) ; 19
; [then-branch: 59 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i@197@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i@197@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@197@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      137
;  :arith-assert-lower      443
;  :arith-assert-upper      397
;  :arith-conflicts         120
;  :arith-eq-adapter        199
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               826
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              432
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4409
;  :mk-clause               550
;  :num-allocs              7305535
;  :num-checks              986
;  :propagations            346
;  :quant-instantiations    157
;  :rlimit-count            358802)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 59 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i@197@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i@197@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 57 | !(i@197@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i@197@04)]
(assert (not
  (and
    (<
      i@197@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
    (<= 0 i@197@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 13
(assert (not (forall ((i@197@04 Int)) (!
  (implies
    (and
      (<
        i@197@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i@197@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i@197@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i@197@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i@197@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i@197@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      139
;  :arith-assert-lower      444
;  :arith-assert-upper      398
;  :arith-conflicts         120
;  :arith-eq-adapter        200
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               827
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4417
;  :mk-clause               564
;  :num-allocs              7305535
;  :num-checks              987
;  :propagations            348
;  :quant-instantiations    158
;  :rlimit-count            359248)
(assert (forall ((i@197@04 Int)) (!
  (implies
    (and
      (<
        i@197@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i@197@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i@197@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i@197@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i@197@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i@197@04))
  :qid |prog.l<no position>|)))
(declare-const $k@198@04 $Perm)
(assert ($Perm.isReadVar $k@198@04 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@198@04 $Perm.No) (< $Perm.No $k@198@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      446
;  :arith-assert-upper      399
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4422
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              988
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            359809)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@185@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      446
;  :arith-assert-upper      399
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            189
;  :binary-propagations     22
;  :conflicts               828
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4422
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              989
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            359820)
(assert (< $k@198@04 $k@185@04))
(assert (<= $Perm.No (- $k@185@04 $k@198@04)))
(assert (<= (- $k@185@04 $k@198@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@185@04 $k@198@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               829
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              990
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360034)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               830
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              991
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360082)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               831
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              992
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360130)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               832
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              993
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360178)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               833
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              994
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360226)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               834
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              995
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360274)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               835
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              996
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360322)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               836
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              997
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360370)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               837
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              998
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360418)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               838
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              999
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360466)
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      140
;  :arith-assert-lower      448
;  :arith-assert-upper      400
;  :arith-conflicts         120
;  :arith-eq-adapter        201
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               839
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4425
;  :mk-clause               566
;  :num-allocs              7305535
;  :num-checks              1000
;  :propagations            349
;  :quant-instantiations    158
;  :rlimit-count            360514)
(declare-const $k@199@04 $Perm)
(assert ($Perm.isReadVar $k@199@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@199@04 $Perm.No) (< $Perm.No $k@199@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      450
;  :arith-assert-upper      401
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4429
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1001
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            360713)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@186@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      450
;  :arith-assert-upper      401
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            190
;  :binary-propagations     22
;  :conflicts               840
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4429
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1002
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            360724)
(assert (< $k@199@04 $k@186@04))
(assert (<= $Perm.No (- $k@186@04 $k@199@04)))
(assert (<= (- $k@186@04 $k@199@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@186@04 $k@199@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               841
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1003
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            360938)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               842
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1004
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            360986)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               843
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1005
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361034)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               844
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1006
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361082)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               845
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1007
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361130)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               846
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1008
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361178)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               847
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1009
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361226)
(push) ; 13
(assert (not (< $Perm.No $k@186@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      141
;  :arith-assert-lower      452
;  :arith-assert-upper      402
;  :arith-conflicts         120
;  :arith-eq-adapter        202
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               848
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4432
;  :mk-clause               568
;  :num-allocs              7305535
;  :num-checks              1010
;  :propagations            350
;  :quant-instantiations    158
;  :rlimit-count            361274)
(declare-const $k@200@04 $Perm)
(assert ($Perm.isReadVar $k@200@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@200@04 $Perm.No) (< $Perm.No $k@200@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      142
;  :arith-assert-lower      454
;  :arith-assert-upper      403
;  :arith-conflicts         120
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4436
;  :mk-clause               570
;  :num-allocs              7305535
;  :num-checks              1011
;  :propagations            351
;  :quant-instantiations    158
;  :rlimit-count            361473)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@187@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      142
;  :arith-assert-lower      454
;  :arith-assert-upper      403
;  :arith-conflicts         120
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         126
;  :arith-pivots            191
;  :binary-propagations     22
;  :conflicts               849
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4436
;  :mk-clause               570
;  :num-allocs              7305535
;  :num-checks              1012
;  :propagations            351
;  :quant-instantiations    158
;  :rlimit-count            361484)
(assert (< $k@200@04 $k@187@04))
(assert (<= $Perm.No (- $k@187@04 $k@200@04)))
(assert (<= (- $k@187@04 $k@200@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@187@04 $k@200@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      142
;  :arith-assert-lower      456
;  :arith-assert-upper      404
;  :arith-conflicts         120
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         126
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               850
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4439
;  :mk-clause               570
;  :num-allocs              7305535
;  :num-checks              1013
;  :propagations            351
;  :quant-instantiations    158
;  :rlimit-count            361698)
(push) ; 13
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      142
;  :arith-assert-lower      456
;  :arith-assert-upper      404
;  :arith-conflicts         120
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         126
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               851
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4439
;  :mk-clause               570
;  :num-allocs              7305535
;  :num-checks              1014
;  :propagations            351
;  :quant-instantiations    158
;  :rlimit-count            361746)
(push) ; 13
(assert (not (< $Perm.No $k@187@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      142
;  :arith-assert-lower      456
;  :arith-assert-upper      404
;  :arith-conflicts         120
;  :arith-eq-adapter        203
;  :arith-fixed-eqs         126
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               852
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4439
;  :mk-clause               570
;  :num-allocs              7305535
;  :num-checks              1015
;  :propagations            351
;  :quant-instantiations    158
;  :rlimit-count            361794)
(declare-const $k@201@04 $Perm)
(assert ($Perm.isReadVar $k@201@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@201@04 $Perm.No) (< $Perm.No $k@201@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      143
;  :arith-assert-lower      458
;  :arith-assert-upper      405
;  :arith-conflicts         120
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         126
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4443
;  :mk-clause               572
;  :num-allocs              7305535
;  :num-checks              1016
;  :propagations            352
;  :quant-instantiations    158
;  :rlimit-count            361993)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@188@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      143
;  :arith-assert-lower      458
;  :arith-assert-upper      405
;  :arith-conflicts         120
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         126
;  :arith-pivots            192
;  :binary-propagations     22
;  :conflicts               853
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4443
;  :mk-clause               572
;  :num-allocs              7305535
;  :num-checks              1017
;  :propagations            352
;  :quant-instantiations    158
;  :rlimit-count            362004)
(assert (< $k@201@04 $k@188@04))
(assert (<= $Perm.No (- $k@188@04 $k@201@04)))
(assert (<= (- $k@188@04 $k@201@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@188@04 $k@201@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@188@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      143
;  :arith-assert-lower      460
;  :arith-assert-upper      406
;  :arith-conflicts         120
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         126
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               854
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4446
;  :mk-clause               572
;  :num-allocs              7305535
;  :num-checks              1018
;  :propagations            352
;  :quant-instantiations    158
;  :rlimit-count            362218)
(push) ; 13
(assert (not (< $Perm.No $k@188@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      143
;  :arith-assert-lower      460
;  :arith-assert-upper      406
;  :arith-conflicts         120
;  :arith-eq-adapter        204
;  :arith-fixed-eqs         126
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               855
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4446
;  :mk-clause               572
;  :num-allocs              7305535
;  :num-checks              1019
;  :propagations            352
;  :quant-instantiations    158
;  :rlimit-count            362266)
(declare-const $k@202@04 $Perm)
(assert ($Perm.isReadVar $k@202@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      462
;  :arith-assert-upper      407
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               856
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4450
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1020
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            362462)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@202@04 $Perm.No) (< $Perm.No $k@202@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      462
;  :arith-assert-upper      407
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4450
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1021
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            362512)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@189@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      462
;  :arith-assert-upper      407
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            193
;  :binary-propagations     22
;  :conflicts               857
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4450
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1022
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            362523)
(assert (< $k@202@04 $k@189@04))
(assert (<= $Perm.No (- $k@189@04 $k@202@04)))
(assert (<= (- $k@189@04 $k@202@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@189@04 $k@202@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
      $Ref.null))))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No $k@185@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      464
;  :arith-assert-upper      408
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               858
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4453
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1023
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            362737)
(push) ; 13
(assert (not (< $Perm.No $k@189@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10592
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      464
;  :arith-assert-upper      408
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               859
;  :datatype-accessor-ax    486
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4453
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1024
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            362785)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))
                                ($Snap.combine
                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))
                                  ($Snap.combine
                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))
                                      ($Snap.combine
                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))
                                          ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))
                                                          ($Snap.combine
                                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))
                                                            ($Snap.combine
                                                              $Snap.unit
                                                              ($Snap.combine
                                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))
                                                                ($Snap.combine
                                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
                                                                  ($Snap.combine
                                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))
                                                                    ($Snap.combine
                                                                      $Snap.unit
                                                                      ($Snap.combine
                                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))
                                                                        ($Snap.combine
                                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
                                                                          $Snap.unit))))))))))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) __globals@31@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10666
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      464
;  :arith-assert-upper      408
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               860
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4454
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1025
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            364340)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10666
;  :arith-add-rows          90
;  :arith-assert-diseq      144
;  :arith-assert-lower      464
;  :arith-assert-upper      408
;  :arith-conflicts         120
;  :arith-eq-adapter        205
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               861
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 2727
;  :datatype-occurs-check   494
;  :datatype-splits         2244
;  :decisions               2646
;  :del-clause              450
;  :final-checks            110
;  :max-generation          2
;  :max-memory              5.43
;  :memory                  5.43
;  :mk-bool-var             4454
;  :mk-clause               574
;  :num-allocs              7305535
;  :num-checks              1026
;  :propagations            353
;  :quant-instantiations    158
;  :rlimit-count            364388)
(declare-const $t@203@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11265
;  :arith-add-rows          90
;  :arith-assert-diseq      145
;  :arith-assert-lower      467
;  :arith-assert-upper      409
;  :arith-conflicts         120
;  :arith-eq-adapter        206
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    529
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4582
;  :mk-clause               580
;  :num-allocs              7601778
;  :num-checks              1028
;  :propagations            359
;  :quant-instantiations    160
;  :rlimit-count            367613)
(assert (= $t@203@04 ($Snap.combine ($Snap.first $t@203@04) ($Snap.second $t@203@04))))
(assert (= ($Snap.first $t@203@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@203@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@203@04))
    ($Snap.second ($Snap.second $t@203@04)))))
(assert (= ($Snap.first ($Snap.second $t@203@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@203@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@203@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@203@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@203@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 3
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 6
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@204@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 60 | 0 <= i@204@04 | live]
; [else-branch: 60 | !(0 <= i@204@04) | live]
(push) ; 15
; [then-branch: 60 | 0 <= i@204@04]
(assert (<= 0 i@204@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 15
(push) ; 15
; [else-branch: 60 | !(0 <= i@204@04)]
(assert (not (<= 0 i@204@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 61 | i@204@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i@204@04 | live]
; [else-branch: 61 | !(i@204@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i@204@04) | live]
(push) ; 15
; [then-branch: 61 | i@204@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i@204@04]
(assert (and
  (<
    i@204@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
  (<= 0 i@204@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@204@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11315
;  :arith-add-rows          90
;  :arith-assert-diseq      145
;  :arith-assert-lower      472
;  :arith-assert-upper      412
;  :arith-conflicts         120
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4608
;  :mk-clause               580
;  :num-allocs              7601778
;  :num-checks              1029
;  :propagations            359
;  :quant-instantiations    164
;  :rlimit-count            368916)
; [eval] -1
(push) ; 16
; [then-branch: 62 | First:(Second:(Second:(Second:($t@203@04))))[i@204@04] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@203@04))))[i@204@04] != -1 | live]
(push) ; 17
; [then-branch: 62 | First:(Second:(Second:(Second:($t@203@04))))[i@204@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i@204@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 62 | First:(Second:(Second:(Second:($t@203@04))))[i@204@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
      i@204@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 18
(assert (not (>= i@204@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11315
;  :arith-add-rows          90
;  :arith-assert-diseq      145
;  :arith-assert-lower      472
;  :arith-assert-upper      412
;  :arith-conflicts         120
;  :arith-eq-adapter        208
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4609
;  :mk-clause               580
;  :num-allocs              7601778
;  :num-checks              1030
;  :propagations            359
;  :quant-instantiations    164
;  :rlimit-count            369091)
(push) ; 18
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@203@04))))[i@204@04] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@203@04))))[i@204@04]) | live]
(push) ; 19
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@203@04))))[i@204@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i@204@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 20
(assert (not (>= i@204@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11315
;  :arith-add-rows          90
;  :arith-assert-diseq      146
;  :arith-assert-lower      475
;  :arith-assert-upper      412
;  :arith-conflicts         120
;  :arith-eq-adapter        209
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               864
;  :datatype-accessor-ax    537
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              464
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4612
;  :mk-clause               581
;  :num-allocs              7601778
;  :num-checks              1031
;  :propagations            359
;  :quant-instantiations    164
;  :rlimit-count            369215)
; [eval] |diz.Main_event_state|
(pop) ; 19
(push) ; 19
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@203@04))))[i@204@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
      i@204@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 61 | !(i@204@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i@204@04)]
(assert (not
  (and
    (<
      i@204@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
    (<= 0 i@204@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@204@04 Int)) (!
  (implies
    (and
      (<
        i@204@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
      (<= 0 i@204@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
          i@204@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i@204@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i@204@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i@204@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))
(declare-const $k@205@04 $Perm)
(assert ($Perm.isReadVar $k@205@04 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@205@04 $Perm.No) (< $Perm.No $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11320
;  :arith-add-rows          90
;  :arith-assert-diseq      147
;  :arith-assert-lower      477
;  :arith-assert-upper      413
;  :arith-conflicts         120
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         126
;  :arith-pivots            194
;  :binary-propagations     22
;  :conflicts               865
;  :datatype-accessor-ax    538
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4618
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1032
;  :propagations            360
;  :quant-instantiations    164
;  :rlimit-count            369983)
(declare-const $t@206@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@185@04 $k@198@04))
    (=
      $t@206@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))
  (implies
    (< $Perm.No $k@205@04)
    (=
      $t@206@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))
(assert (<= $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04)))
(assert (<= (+ (- $k@185@04 $k@198@04) $k@205@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))
  $Snap.unit))
; [eval] diz.Main_rn != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11330
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      415
;  :arith-conflicts         121
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         127
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               866
;  :datatype-accessor-ax    539
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4626
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1033
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            370669)
(assert (not (= $t@206@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11336
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      416
;  :arith-conflicts         122
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         128
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               867
;  :datatype-accessor-ax    540
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4629
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1034
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            370993)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11341
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      417
;  :arith-conflicts         123
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         129
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               868
;  :datatype-accessor-ax    541
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4631
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1035
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            371282)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11346
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      418
;  :arith-conflicts         124
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         130
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               869
;  :datatype-accessor-ax    542
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4633
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1036
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            371581)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11351
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      419
;  :arith-conflicts         125
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         131
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               870
;  :datatype-accessor-ax    543
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4635
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1037
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            371890)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11356
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      420
;  :arith-conflicts         126
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         132
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               871
;  :datatype-accessor-ax    544
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4637
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1038
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            372209)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11361
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      421
;  :arith-conflicts         127
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         133
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               872
;  :datatype-accessor-ax    545
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4639
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1039
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            372538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11366
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      422
;  :arith-conflicts         128
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         134
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               873
;  :datatype-accessor-ax    546
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4641
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1040
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            372877)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11371
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      423
;  :arith-conflicts         129
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         135
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               874
;  :datatype-accessor-ax    547
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4643
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1041
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            373226)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11376
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      424
;  :arith-conflicts         130
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         136
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               875
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4645
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1042
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            373585)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11381
;  :arith-add-rows          91
;  :arith-assert-diseq      147
;  :arith-assert-lower      478
;  :arith-assert-upper      425
;  :arith-conflicts         131
;  :arith-eq-adapter        210
;  :arith-fixed-eqs         137
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               876
;  :datatype-accessor-ax    549
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4647
;  :mk-clause               583
;  :num-allocs              7601778
;  :num-checks              1043
;  :propagations            360
;  :quant-instantiations    165
;  :rlimit-count            373954)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))
(declare-const $k@207@04 $Perm)
(assert ($Perm.isReadVar $k@207@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@207@04 $Perm.No) (< $Perm.No $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11386
;  :arith-add-rows          91
;  :arith-assert-diseq      148
;  :arith-assert-lower      480
;  :arith-assert-upper      426
;  :arith-conflicts         131
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         137
;  :arith-pivots            195
;  :binary-propagations     22
;  :conflicts               877
;  :datatype-accessor-ax    550
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4652
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1044
;  :propagations            361
;  :quant-instantiations    165
;  :rlimit-count            374444)
(declare-const $t@208@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@186@04 $k@199@04))
    (=
      $t@208@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@207@04)
    (=
      $t@208@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04)))
(assert (<= (+ (- $k@186@04 $k@199@04) $k@207@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11396
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      428
;  :arith-conflicts         132
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         138
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               878
;  :datatype-accessor-ax    551
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4660
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1045
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            375388)
(assert (not (= $t@208@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11402
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      429
;  :arith-conflicts         133
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         139
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               879
;  :datatype-accessor-ax    552
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4663
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1046
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            375832)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11407
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      430
;  :arith-conflicts         134
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         140
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               880
;  :datatype-accessor-ax    553
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4665
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1047
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            376241)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11412
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      431
;  :arith-conflicts         135
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         141
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               881
;  :datatype-accessor-ax    554
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4667
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1048
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            376660)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11417
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      432
;  :arith-conflicts         136
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         142
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               882
;  :datatype-accessor-ax    555
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4669
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1049
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            377089)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11422
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      433
;  :arith-conflicts         137
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         143
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               883
;  :datatype-accessor-ax    556
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4671
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1050
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            377528)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11427
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      434
;  :arith-conflicts         138
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         144
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               884
;  :datatype-accessor-ax    557
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4673
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1051
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            377977)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11432
;  :arith-add-rows          92
;  :arith-assert-diseq      148
;  :arith-assert-lower      481
;  :arith-assert-upper      435
;  :arith-conflicts         139
;  :arith-eq-adapter        211
;  :arith-fixed-eqs         145
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               885
;  :datatype-accessor-ax    558
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4675
;  :mk-clause               585
;  :num-allocs              7601778
;  :num-checks              1052
;  :propagations            361
;  :quant-instantiations    166
;  :rlimit-count            378436)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))
(declare-const $k@209@04 $Perm)
(assert ($Perm.isReadVar $k@209@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@209@04 $Perm.No) (< $Perm.No $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11437
;  :arith-add-rows          92
;  :arith-assert-diseq      149
;  :arith-assert-lower      483
;  :arith-assert-upper      436
;  :arith-conflicts         139
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         145
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               886
;  :datatype-accessor-ax    559
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4680
;  :mk-clause               587
;  :num-allocs              7601778
;  :num-checks              1053
;  :propagations            362
;  :quant-instantiations    166
;  :rlimit-count            379017)
(declare-const $t@210@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@187@04 $k@200@04))
    (=
      $t@210@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@209@04)
    (=
      $t@210@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04)))
(assert (<= (+ (- $k@187@04 $k@200@04) $k@209@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11447
;  :arith-add-rows          93
;  :arith-assert-diseq      149
;  :arith-assert-lower      484
;  :arith-assert-upper      438
;  :arith-conflicts         140
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         146
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               887
;  :datatype-accessor-ax    560
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4688
;  :mk-clause               587
;  :num-allocs              7601778
;  :num-checks              1054
;  :propagations            362
;  :quant-instantiations    167
;  :rlimit-count            380129)
(assert (not (= $t@210@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11453
;  :arith-add-rows          93
;  :arith-assert-diseq      149
;  :arith-assert-lower      484
;  :arith-assert-upper      439
;  :arith-conflicts         141
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         147
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               888
;  :datatype-accessor-ax    561
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4691
;  :mk-clause               587
;  :num-allocs              7601778
;  :num-checks              1055
;  :propagations            362
;  :quant-instantiations    167
;  :rlimit-count            380661)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11458
;  :arith-add-rows          93
;  :arith-assert-diseq      149
;  :arith-assert-lower      484
;  :arith-assert-upper      440
;  :arith-conflicts         142
;  :arith-eq-adapter        212
;  :arith-fixed-eqs         148
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               889
;  :datatype-accessor-ax    562
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4693
;  :mk-clause               587
;  :num-allocs              7601778
;  :num-checks              1056
;  :propagations            362
;  :quant-instantiations    167
;  :rlimit-count            381158)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))))
(declare-const $k@211@04 $Perm)
(assert ($Perm.isReadVar $k@211@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@211@04 $Perm.No) (< $Perm.No $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11463
;  :arith-add-rows          93
;  :arith-assert-diseq      150
;  :arith-assert-lower      486
;  :arith-assert-upper      441
;  :arith-conflicts         142
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         148
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               890
;  :datatype-accessor-ax    563
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4698
;  :mk-clause               589
;  :num-allocs              7601778
;  :num-checks              1057
;  :propagations            363
;  :quant-instantiations    167
;  :rlimit-count            381779)
(declare-const $t@212@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@188@04 $k@201@04))
    (=
      $t@212@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@211@04)
    (=
      $t@212@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04)))
(assert (<= (+ (- $k@188@04 $k@201@04) $k@211@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11473
;  :arith-add-rows          94
;  :arith-assert-diseq      150
;  :arith-assert-lower      487
;  :arith-assert-upper      443
;  :arith-conflicts         143
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         149
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               891
;  :datatype-accessor-ax    564
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4706
;  :mk-clause               589
;  :num-allocs              7601778
;  :num-checks              1058
;  :propagations            363
;  :quant-instantiations    168
;  :rlimit-count            382617)
(assert (not (= $t@212@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11478
;  :arith-add-rows          94
;  :arith-assert-diseq      150
;  :arith-assert-lower      487
;  :arith-assert-upper      444
;  :arith-conflicts         144
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         150
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               892
;  :datatype-accessor-ax    565
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4708
;  :mk-clause               589
;  :num-allocs              7601778
;  :num-checks              1059
;  :propagations            363
;  :quant-instantiations    168
;  :rlimit-count            383162)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11483
;  :arith-add-rows          94
;  :arith-assert-diseq      150
;  :arith-assert-lower      487
;  :arith-assert-upper      445
;  :arith-conflicts         145
;  :arith-eq-adapter        213
;  :arith-fixed-eqs         151
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               893
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4710
;  :mk-clause               589
;  :num-allocs              7601778
;  :num-checks              1060
;  :propagations            363
;  :quant-instantiations    168
;  :rlimit-count            383701)
(declare-const $k@213@04 $Perm)
(assert ($Perm.isReadVar $k@213@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@213@04 $Perm.No) (< $Perm.No $k@213@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11483
;  :arith-add-rows          94
;  :arith-assert-diseq      151
;  :arith-assert-lower      489
;  :arith-assert-upper      446
;  :arith-conflicts         145
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         151
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4714
;  :mk-clause               591
;  :num-allocs              7601778
;  :num-checks              1061
;  :propagations            364
;  :quant-instantiations    168
;  :rlimit-count            383899)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $t@206@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11483
;  :arith-add-rows          94
;  :arith-assert-diseq      151
;  :arith-assert-lower      489
;  :arith-assert-upper      446
;  :arith-conflicts         145
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         151
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               894
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4714
;  :mk-clause               591
;  :num-allocs              7601778
;  :num-checks              1062
;  :propagations            364
;  :quant-instantiations    168
;  :rlimit-count            383910)
(declare-const $t@214@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@189@04 $k@202@04))
    (=
      $t@214@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@213@04)
    (=
      $t@214@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@189@04 $k@202@04) $k@213@04)))
(assert (<= (+ (- $k@189@04 $k@202@04) $k@213@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@189@04 $k@202@04) $k@213@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_rn.Rng_m == diz
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11489
;  :arith-add-rows          95
;  :arith-assert-diseq      151
;  :arith-assert-lower      490
;  :arith-assert-upper      448
;  :arith-conflicts         146
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         152
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4721
;  :mk-clause               591
;  :num-allocs              7601778
;  :num-checks              1063
;  :propagations            364
;  :quant-instantiations    169
;  :rlimit-count            384687)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $t@206@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11489
;  :arith-add-rows          95
;  :arith-assert-diseq      151
;  :arith-assert-lower      490
;  :arith-assert-upper      448
;  :arith-conflicts         146
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         152
;  :arith-pivots            196
;  :binary-propagations     22
;  :conflicts               895
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4721
;  :mk-clause               591
;  :num-allocs              7601778
;  :num-checks              1064
;  :propagations            364
;  :quant-instantiations    169
;  :rlimit-count            384698)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@189@04 $k@202@04) $k@213@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11489
;  :arith-add-rows          95
;  :arith-assert-diseq      151
;  :arith-assert-lower      490
;  :arith-assert-upper      449
;  :arith-conflicts         147
;  :arith-eq-adapter        214
;  :arith-fixed-eqs         153
;  :arith-pivots            197
;  :binary-propagations     22
;  :conflicts               896
;  :datatype-accessor-ax    566
;  :datatype-constructor-ax 2893
;  :datatype-occurs-check   566
;  :datatype-splits         2358
;  :decisions               2807
;  :del-clause              465
;  :final-checks            114
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4722
;  :mk-clause               591
;  :num-allocs              7601778
;  :num-checks              1065
;  :propagations            364
;  :quant-instantiations    169
;  :rlimit-count            384782)
(assert (= $t@214@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@203@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) __globals@31@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Combinate_m, globals__176), write)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12411
;  :arith-add-rows          95
;  :arith-assert-diseq      152
;  :arith-assert-lower      493
;  :arith-assert-upper      450
;  :arith-conflicts         147
;  :arith-eq-adapter        215
;  :arith-fixed-eqs         153
;  :arith-pivots            197
;  :binary-propagations     22
;  :conflicts               902
;  :datatype-accessor-ax    579
;  :datatype-constructor-ax 3148
;  :datatype-occurs-check   648
;  :datatype-splits         2504
;  :decisions               3050
;  :del-clause              479
;  :final-checks            118
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             4886
;  :mk-clause               600
;  :num-allocs              8520922
;  :num-checks              1067
;  :propagations            374
;  :quant-instantiations    171
;  :rlimit-count            389353)
(declare-const $t@215@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(declare-const $k@216@04 $Perm)
(assert ($Perm.isReadVar $k@216@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@216@04 $Perm.No) (< $Perm.No $k@216@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      498
;  :arith-assert-upper      452
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            197
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5026
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1069
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392532)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@183@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      498
;  :arith-assert-upper      452
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            197
;  :binary-propagations     22
;  :conflicts               903
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5026
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1070
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392543)
(assert (< $k@216@04 $k@183@04))
(assert (<= $Perm.No (- $k@183@04 $k@216@04)))
(assert (<= (- $k@183@04 $k@216@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@183@04 $k@216@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               904
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1071
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392763)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               905
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1072
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392811)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               906
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1073
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392859)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               907
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1074
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392907)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               908
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1075
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            392955)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      499
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               909
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5029
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1076
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            393003)
; [eval] (forall i__211: Int :: { diz.Combinate_m.Main_process_state[i__211] } 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|)
(declare-const i__211@217@04 Int)
(push) ; 13
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__211 && i__211 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__211
(push) ; 14
; [then-branch: 64 | 0 <= i__211@217@04 | live]
; [else-branch: 64 | !(0 <= i__211@217@04) | live]
(push) ; 15
; [then-branch: 64 | 0 <= i__211@217@04]
(assert (<= 0 i__211@217@04))
; [eval] i__211 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      500
;  :arith-assert-upper      454
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               910
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5030
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1077
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            393103)
(pop) ; 15
(push) ; 15
; [else-branch: 64 | !(0 <= i__211@217@04)]
(assert (not (<= 0 i__211@217@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 65 | i__211@217@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i__211@217@04 | live]
; [else-branch: 65 | !(i__211@217@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i__211@217@04) | live]
(push) ; 15
; [then-branch: 65 | i__211@217@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i__211@217@04]
(assert (and
  (<
    i__211@217@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
  (<= 0 i__211@217@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211] == -1
; [eval] diz.Combinate_m.Main_process_state[i__211]
(push) ; 16
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      501
;  :arith-assert-upper      455
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5032
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1078
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            393260)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__211@217@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      154
;  :arith-assert-lower      501
;  :arith-assert-upper      455
;  :arith-conflicts         147
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               911
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5032
;  :mk-clause               606
;  :num-allocs              9138709
;  :num-checks              1079
;  :propagations            388
;  :quant-instantiations    173
;  :rlimit-count            393269)
; [eval] -1
(push) ; 16
; [then-branch: 66 | First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04] == -1 | live]
; [else-branch: 66 | First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04] != -1 | live]
(push) ; 17
; [then-branch: 66 | First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i__211@217@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 66 | First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
      i__211@217@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211] && diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__211]
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      155
;  :arith-assert-lower      504
;  :arith-assert-upper      456
;  :arith-conflicts         147
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5038
;  :mk-clause               610
;  :num-allocs              9138709
;  :num-checks              1080
;  :propagations            390
;  :quant-instantiations    174
;  :rlimit-count            393540)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__211@217@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      155
;  :arith-assert-lower      504
;  :arith-assert-upper      456
;  :arith-conflicts         147
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               912
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5038
;  :mk-clause               610
;  :num-allocs              9138709
;  :num-checks              1081
;  :propagations            390
;  :quant-instantiations    174
;  :rlimit-count            393549)
(push) ; 18
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04] | live]
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04]) | live]
(push) ; 19
; [then-branch: 67 | 0 <= First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i__211@217@04)))
; [eval] diz.Combinate_m.Main_process_state[i__211] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__211]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      155
;  :arith-assert-lower      504
;  :arith-assert-upper      456
;  :arith-conflicts         147
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5038
;  :mk-clause               610
;  :num-allocs              9138709
;  :num-checks              1082
;  :propagations            390
;  :quant-instantiations    174
;  :rlimit-count            393702)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__211@217@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      155
;  :arith-assert-lower      504
;  :arith-assert-upper      456
;  :arith-conflicts         147
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               913
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5038
;  :mk-clause               610
;  :num-allocs              9138709
;  :num-checks              1083
;  :propagations            390
;  :quant-instantiations    174
;  :rlimit-count            393711)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      155
;  :arith-assert-lower      504
;  :arith-assert-upper      456
;  :arith-conflicts         147
;  :arith-eq-adapter        218
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               914
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              483
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5038
;  :mk-clause               610
;  :num-allocs              9138709
;  :num-checks              1084
;  :propagations            390
;  :quant-instantiations    174
;  :rlimit-count            393759)
(pop) ; 19
(push) ; 19
; [else-branch: 67 | !(0 <= First:(Second:(Second:(Second:($t@203@04))))[i__211@217@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
      i__211@217@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 65 | !(i__211@217@04 < |First:(Second:(Second:(Second:($t@203@04))))| && 0 <= i__211@217@04)]
(assert (not
  (and
    (<
      i__211@217@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
    (<= 0 i__211@217@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__211@217@04 Int)) (!
  (implies
    (and
      (<
        i__211@217@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
      (<= 0 i__211@217@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
          i__211@217@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i__211@217@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i__211@217@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i__211@217@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      157
;  :arith-assert-lower      505
;  :arith-assert-upper      457
;  :arith-conflicts         147
;  :arith-eq-adapter        219
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               915
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              501
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5046
;  :mk-clause               624
;  :num-allocs              9138709
;  :num-checks              1085
;  :propagations            392
;  :quant-instantiations    175
;  :rlimit-count            394205)
(assert (forall ((i__211@217@04 Int)) (!
  (implies
    (and
      (<
        i__211@217@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))
      (<= 0 i__211@217@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
          i__211@217@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i__211@217@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
            i__211@217@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@203@04)))))
    i__211@217@04))
  :qid |prog.l<no position>|)))
(declare-const $k@218@04 $Perm)
(assert ($Perm.isReadVar $k@218@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      158
;  :arith-assert-lower      507
;  :arith-assert-upper      458
;  :arith-conflicts         147
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               916
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              501
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5051
;  :mk-clause               626
;  :num-allocs              9138709
;  :num-checks              1086
;  :propagations            393
;  :quant-instantiations    175
;  :rlimit-count            394764)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@218@04 $Perm.No) (< $Perm.No $k@218@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12956
;  :arith-add-rows          95
;  :arith-assert-diseq      158
;  :arith-assert-lower      507
;  :arith-assert-upper      458
;  :arith-conflicts         147
;  :arith-eq-adapter        220
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               917
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              501
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5051
;  :mk-clause               626
;  :num-allocs              9138709
;  :num-checks              1087
;  :propagations            393
;  :quant-instantiations    175
;  :rlimit-count            394814)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@185@04 $k@198@04) $k@205@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          95
;  :arith-assert-diseq      158
;  :arith-assert-lower      507
;  :arith-assert-upper      459
;  :arith-conflicts         148
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               918
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5053
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1088
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            394894)
(assert (< $k@218@04 (+ (- $k@185@04 $k@198@04) $k@205@04)))
(assert (<= $Perm.No (- (+ (- $k@185@04 $k@198@04) $k@205@04) $k@218@04)))
(assert (<= (- (+ (- $k@185@04 $k@198@04) $k@205@04) $k@218@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@185@04 $k@198@04) $k@205@04) $k@218@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      460
;  :arith-conflicts         148
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         153
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               919
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5056
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1089
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395130)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      461
;  :arith-conflicts         149
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         154
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               920
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5057
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1090
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395211)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      461
;  :arith-conflicts         149
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         154
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               921
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5057
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1091
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395259)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      462
;  :arith-conflicts         150
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         155
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               922
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5058
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1092
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395340)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      462
;  :arith-conflicts         150
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         155
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               923
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5058
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1093
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395388)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      463
;  :arith-conflicts         151
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         156
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               924
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5059
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1094
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395469)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      463
;  :arith-conflicts         151
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         156
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               925
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5059
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1095
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395517)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      464
;  :arith-conflicts         152
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         157
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               926
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5060
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1096
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395598)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      464
;  :arith-conflicts         152
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         157
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               927
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5060
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1097
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395646)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      465
;  :arith-conflicts         153
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         158
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               928
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5061
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1098
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395727)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      465
;  :arith-conflicts         153
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         158
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               929
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5061
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1099
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395775)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      466
;  :arith-conflicts         154
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         159
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               930
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5062
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1100
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395856)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      466
;  :arith-conflicts         154
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         159
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               931
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5062
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1101
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395904)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      467
;  :arith-conflicts         155
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         160
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               932
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5063
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1102
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            395985)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      467
;  :arith-conflicts         155
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         160
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               933
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5063
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1103
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396033)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      468
;  :arith-conflicts         156
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         161
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               934
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5064
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1104
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396114)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      468
;  :arith-conflicts         156
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         161
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               935
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5064
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1105
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396162)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      469
;  :arith-conflicts         157
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         162
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               936
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5065
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1106
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396243)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      469
;  :arith-conflicts         157
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         162
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               937
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5065
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1107
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396291)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      470
;  :arith-conflicts         158
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         163
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               938
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5066
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1108
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396372)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      470
;  :arith-conflicts         158
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         163
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               939
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5066
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1109
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396420)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      158
;  :arith-assert-lower      509
;  :arith-assert-upper      471
;  :arith-conflicts         159
;  :arith-eq-adapter        221
;  :arith-fixed-eqs         164
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               940
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5067
;  :mk-clause               628
;  :num-allocs              9138709
;  :num-checks              1110
;  :propagations            394
;  :quant-instantiations    175
;  :rlimit-count            396501)
(declare-const $k@219@04 $Perm)
(assert ($Perm.isReadVar $k@219@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      159
;  :arith-assert-lower      511
;  :arith-assert-upper      472
;  :arith-conflicts         159
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         164
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               941
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5071
;  :mk-clause               630
;  :num-allocs              9138709
;  :num-checks              1111
;  :propagations            395
;  :quant-instantiations    175
;  :rlimit-count            396697)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@219@04 $Perm.No) (< $Perm.No $k@219@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12957
;  :arith-add-rows          97
;  :arith-assert-diseq      159
;  :arith-assert-lower      511
;  :arith-assert-upper      472
;  :arith-conflicts         159
;  :arith-eq-adapter        222
;  :arith-fixed-eqs         164
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               942
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              503
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5071
;  :mk-clause               630
;  :num-allocs              9138709
;  :num-checks              1112
;  :propagations            395
;  :quant-instantiations    175
;  :rlimit-count            396747)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@186@04 $k@199@04) $k@207@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          97
;  :arith-assert-diseq      159
;  :arith-assert-lower      511
;  :arith-assert-upper      473
;  :arith-conflicts         160
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         164
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               943
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5073
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1113
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            396827)
(assert (< $k@219@04 (+ (- $k@186@04 $k@199@04) $k@207@04)))
(assert (<= $Perm.No (- (+ (- $k@186@04 $k@199@04) $k@207@04) $k@219@04)))
(assert (<= (- (+ (- $k@186@04 $k@199@04) $k@207@04) $k@219@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@186@04 $k@199@04) $k@207@04) $k@219@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      474
;  :arith-conflicts         160
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         164
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               944
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5076
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1114
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397063)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      475
;  :arith-conflicts         161
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         165
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               945
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5077
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1115
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397144)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      475
;  :arith-conflicts         161
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         165
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               946
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5077
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1116
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397192)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      476
;  :arith-conflicts         162
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         166
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               947
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5078
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1117
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397273)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      476
;  :arith-conflicts         162
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         166
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               948
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5078
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1118
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397321)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      477
;  :arith-conflicts         163
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         167
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               949
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5079
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1119
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397402)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      477
;  :arith-conflicts         163
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         167
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               950
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5079
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1120
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397450)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      478
;  :arith-conflicts         164
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         168
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               951
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5080
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1121
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397531)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      478
;  :arith-conflicts         164
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         168
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               952
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5080
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1122
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397579)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      479
;  :arith-conflicts         165
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         169
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               953
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5081
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1123
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397660)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      479
;  :arith-conflicts         165
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         169
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               954
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5081
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1124
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397708)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      480
;  :arith-conflicts         166
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         170
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               955
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5082
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1125
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397789)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      480
;  :arith-conflicts         166
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         170
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               956
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5082
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1126
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397837)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      481
;  :arith-conflicts         167
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         171
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               957
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5083
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1127
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397918)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      481
;  :arith-conflicts         167
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         171
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               958
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5083
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1128
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            397966)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@186@04 $k@199@04) $k@207@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      159
;  :arith-assert-lower      513
;  :arith-assert-upper      482
;  :arith-conflicts         168
;  :arith-eq-adapter        223
;  :arith-fixed-eqs         172
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               959
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5084
;  :mk-clause               632
;  :num-allocs              9138709
;  :num-checks              1129
;  :propagations            396
;  :quant-instantiations    175
;  :rlimit-count            398047)
(declare-const $k@220@04 $Perm)
(assert ($Perm.isReadVar $k@220@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      160
;  :arith-assert-lower      515
;  :arith-assert-upper      483
;  :arith-conflicts         168
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         172
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               960
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5088
;  :mk-clause               634
;  :num-allocs              9138709
;  :num-checks              1130
;  :propagations            397
;  :quant-instantiations    175
;  :rlimit-count            398244)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@220@04 $Perm.No) (< $Perm.No $k@220@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12958
;  :arith-add-rows          99
;  :arith-assert-diseq      160
;  :arith-assert-lower      515
;  :arith-assert-upper      483
;  :arith-conflicts         168
;  :arith-eq-adapter        224
;  :arith-fixed-eqs         172
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               961
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              505
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5088
;  :mk-clause               634
;  :num-allocs              9138709
;  :num-checks              1131
;  :propagations            397
;  :quant-instantiations    175
;  :rlimit-count            398294)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@187@04 $k@200@04) $k@209@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          99
;  :arith-assert-diseq      160
;  :arith-assert-lower      515
;  :arith-assert-upper      484
;  :arith-conflicts         169
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         172
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               962
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5090
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1132
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398372)
(assert (< $k@220@04 (+ (- $k@187@04 $k@200@04) $k@209@04)))
(assert (<= $Perm.No (- (+ (- $k@187@04 $k@200@04) $k@209@04) $k@220@04)))
(assert (<= (- (+ (- $k@187@04 $k@200@04) $k@209@04) $k@220@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@187@04 $k@200@04) $k@209@04) $k@220@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      485
;  :arith-conflicts         169
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         172
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               963
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5093
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1133
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398607)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      486
;  :arith-conflicts         170
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         173
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               964
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5094
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1134
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398685)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      486
;  :arith-conflicts         170
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         173
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               965
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5094
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1135
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398733)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      487
;  :arith-conflicts         171
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         174
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               966
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5095
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1136
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398811)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      487
;  :arith-conflicts         171
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         174
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               967
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5095
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1137
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398859)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@187@04 $k@200@04) $k@209@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      160
;  :arith-assert-lower      517
;  :arith-assert-upper      488
;  :arith-conflicts         172
;  :arith-eq-adapter        225
;  :arith-fixed-eqs         175
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               968
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5096
;  :mk-clause               636
;  :num-allocs              9138709
;  :num-checks              1138
;  :propagations            398
;  :quant-instantiations    175
;  :rlimit-count            398937)
(declare-const $k@221@04 $Perm)
(assert ($Perm.isReadVar $k@221@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      161
;  :arith-assert-lower      519
;  :arith-assert-upper      489
;  :arith-conflicts         172
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         175
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               969
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5100
;  :mk-clause               638
;  :num-allocs              9138709
;  :num-checks              1139
;  :propagations            399
;  :quant-instantiations    175
;  :rlimit-count            399133)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@221@04 $Perm.No) (< $Perm.No $k@221@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12959
;  :arith-add-rows          100
;  :arith-assert-diseq      161
;  :arith-assert-lower      519
;  :arith-assert-upper      489
;  :arith-conflicts         172
;  :arith-eq-adapter        226
;  :arith-fixed-eqs         175
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               970
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              507
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5100
;  :mk-clause               638
;  :num-allocs              9138709
;  :num-checks              1140
;  :propagations            399
;  :quant-instantiations    175
;  :rlimit-count            399183)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@188@04 $k@201@04) $k@211@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          100
;  :arith-assert-diseq      161
;  :arith-assert-lower      519
;  :arith-assert-upper      490
;  :arith-conflicts         173
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         175
;  :arith-pivots            199
;  :binary-propagations     22
;  :conflicts               971
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5102
;  :mk-clause               640
;  :num-allocs              9138709
;  :num-checks              1141
;  :propagations            400
;  :quant-instantiations    175
;  :rlimit-count            399261)
(assert (< $k@221@04 (+ (- $k@188@04 $k@201@04) $k@211@04)))
(assert (<= $Perm.No (- (+ (- $k@188@04 $k@201@04) $k@211@04) $k@221@04)))
(assert (<= (- (+ (- $k@188@04 $k@201@04) $k@211@04) $k@221@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@188@04 $k@201@04) $k@211@04) $k@221@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      161
;  :arith-assert-lower      521
;  :arith-assert-upper      491
;  :arith-conflicts         173
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         175
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               972
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5105
;  :mk-clause               640
;  :num-allocs              9138709
;  :num-checks              1142
;  :propagations            400
;  :quant-instantiations    175
;  :rlimit-count            399503)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      161
;  :arith-assert-lower      521
;  :arith-assert-upper      492
;  :arith-conflicts         174
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         176
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               973
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5106
;  :mk-clause               640
;  :num-allocs              9138709
;  :num-checks              1143
;  :propagations            400
;  :quant-instantiations    175
;  :rlimit-count            399581)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      161
;  :arith-assert-lower      521
;  :arith-assert-upper      492
;  :arith-conflicts         174
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         176
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               974
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5106
;  :mk-clause               640
;  :num-allocs              9138709
;  :num-checks              1144
;  :propagations            400
;  :quant-instantiations    175
;  :rlimit-count            399629)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      161
;  :arith-assert-lower      521
;  :arith-assert-upper      493
;  :arith-conflicts         175
;  :arith-eq-adapter        227
;  :arith-fixed-eqs         177
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               975
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5107
;  :mk-clause               640
;  :num-allocs              9138709
;  :num-checks              1145
;  :propagations            400
;  :quant-instantiations    175
;  :rlimit-count            399707)
(declare-const $k@222@04 $Perm)
(assert ($Perm.isReadVar $k@222@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      162
;  :arith-assert-lower      523
;  :arith-assert-upper      494
;  :arith-conflicts         175
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         177
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               976
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5111
;  :mk-clause               642
;  :num-allocs              9138709
;  :num-checks              1146
;  :propagations            401
;  :quant-instantiations    175
;  :rlimit-count            399903)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      162
;  :arith-assert-lower      523
;  :arith-assert-upper      495
;  :arith-conflicts         176
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         178
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               977
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5112
;  :mk-clause               642
;  :num-allocs              9138709
;  :num-checks              1147
;  :propagations            401
;  :quant-instantiations    175
;  :rlimit-count            399984)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@222@04 $Perm.No) (< $Perm.No $k@222@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      162
;  :arith-assert-lower      523
;  :arith-assert-upper      495
;  :arith-conflicts         176
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         178
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5112
;  :mk-clause               642
;  :num-allocs              9138709
;  :num-checks              1148
;  :propagations            401
;  :quant-instantiations    175
;  :rlimit-count            400034)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $t@206@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12960
;  :arith-add-rows          101
;  :arith-assert-diseq      162
;  :arith-assert-lower      523
;  :arith-assert-upper      495
;  :arith-conflicts         176
;  :arith-eq-adapter        228
;  :arith-fixed-eqs         178
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               978
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              509
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5112
;  :mk-clause               642
;  :num-allocs              9138709
;  :num-checks              1149
;  :propagations            401
;  :quant-instantiations    175
;  :rlimit-count            400045)
(push) ; 13
(assert (not (not (= (+ (- $k@189@04 $k@202@04) $k@213@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          101
;  :arith-assert-diseq      162
;  :arith-assert-lower      523
;  :arith-assert-upper      496
;  :arith-conflicts         177
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         178
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               979
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5114
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1150
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400125)
(assert (< $k@222@04 (+ (- $k@189@04 $k@202@04) $k@213@04)))
(assert (<= $Perm.No (- (+ (- $k@189@04 $k@202@04) $k@213@04) $k@222@04)))
(assert (<= (- (+ (- $k@189@04 $k@202@04) $k@213@04) $k@222@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@189@04 $k@202@04) $k@213@04) $k@222@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      497
;  :arith-conflicts         177
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         178
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               980
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5117
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1151
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400361)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@185@04 $k@198@04) $k@205@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      498
;  :arith-conflicts         178
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         179
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5118
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1152
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400442)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  $t@206@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      498
;  :arith-conflicts         178
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         179
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               981
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5118
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1153
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400453)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@189@04 $k@202@04) $k@213@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      499
;  :arith-conflicts         179
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         180
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               982
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5119
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1154
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400534)
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      499
;  :arith-conflicts         179
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         180
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               983
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5119
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1155
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400582)
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 13
(assert (not (< $Perm.No $k@183@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      499
;  :arith-conflicts         179
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         180
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               984
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5119
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1156
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400630)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@188@04 $k@201@04) $k@211@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5120
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1157
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400708)
(set-option :timeout 0)
(push) ; 13
(assert (not (= $t@212@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12961
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            200
;  :binary-propagations     22
;  :conflicts               985
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 3296
;  :datatype-occurs-check   725
;  :datatype-splits         2650
;  :decisions               3188
;  :del-clause              511
;  :final-checks            121
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.83
;  :mk-bool-var             5120
;  :mk-clause               644
;  :num-allocs              9138709
;  :num-checks              1158
;  :propagations            402
;  :quant-instantiations    175
;  :rlimit-count            400719)
(assert (= $t@212@04 diz@30@04))
(pop) ; 12
(push) ; 12
; [else-branch: 55 | !(First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
          5)
        (- 0 2))))))
(pop) ; 12
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13428
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               986
;  :datatype-accessor-ax    595
;  :datatype-constructor-ax 3436
;  :datatype-occurs-check   741
;  :datatype-splits         2762
;  :decisions               3323
;  :del-clause              532
;  :final-checks            124
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5235
;  :mk-clause               645
;  :num-allocs              9458330
;  :num-checks              1159
;  :propagations            406
;  :quant-instantiations    175
;  :rlimit-count            403622
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13836
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               987
;  :datatype-accessor-ax    600
;  :datatype-constructor-ax 3576
;  :datatype-occurs-check   757
;  :datatype-splits         2874
;  :decisions               3458
;  :del-clause              533
;  :final-checks            127
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5350
;  :mk-clause               646
;  :num-allocs              9458330
;  :num-checks              1160
;  :propagations            410
;  :quant-instantiations    175
;  :rlimit-count            406300
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14244
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               988
;  :datatype-accessor-ax    605
;  :datatype-constructor-ax 3716
;  :datatype-occurs-check   773
;  :datatype-splits         2986
;  :decisions               3593
;  :del-clause              534
;  :final-checks            130
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5465
;  :mk-clause               647
;  :num-allocs              9458330
;  :num-checks              1161
;  :propagations            414
;  :quant-instantiations    175
;  :rlimit-count            408978
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14652
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               989
;  :datatype-accessor-ax    610
;  :datatype-constructor-ax 3856
;  :datatype-occurs-check   789
;  :datatype-splits         3098
;  :decisions               3728
;  :del-clause              535
;  :final-checks            133
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5580
;  :mk-clause               648
;  :num-allocs              9458330
;  :num-checks              1162
;  :propagations            418
;  :quant-instantiations    175
;  :rlimit-count            411656
;  :time                    0.00)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15060
;  :arith-add-rows          103
;  :arith-assert-diseq      162
;  :arith-assert-lower      525
;  :arith-assert-upper      500
;  :arith-conflicts         180
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         181
;  :arith-pivots            210
;  :binary-propagations     22
;  :conflicts               990
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5695
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1163
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            414334
;  :time                    0.00)
(declare-const $t@223@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@183@04)
    (= $t@223@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))))
  (implies
    (< $Perm.No (- $k@153@04 $k@190@04))
    (= $t@223@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))))))
(assert (<= $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04))))
(assert (<= (+ $k@183@04 (- $k@153@04 $k@190@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))
  (not (= diz@30@04 $Ref.null))))
; [eval] !(diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2)
; [eval] diz.Combinate_m.Main_process_state[2] != -1 || diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_process_state[2] != -1
; [eval] diz.Combinate_m.Main_process_state[2]
(push) ; 12
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15065
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      502
;  :arith-conflicts         181
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         182
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               991
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5700
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1164
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            414657)
(push) ; 12
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15065
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      502
;  :arith-conflicts         181
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         182
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5701
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1165
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            414737)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  2
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15065
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      502
;  :arith-conflicts         181
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         182
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               992
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5701
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1166
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            414752)
; [eval] -1
(push) ; 12
; [then-branch: 68 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1 | live]
(push) ; 13
; [then-branch: 68 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      2)
    (- 0 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 68 | First:(Second:(Second:(Second:($t@182@04))))[2] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    2)
  (- 0 1)))
; [eval] diz.Combinate_m.Main_event_state[5] != -2
; [eval] diz.Combinate_m.Main_event_state[5]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15066
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         182
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               993
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5703
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1167
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            414975)
(push) ; 14
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15066
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         182
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5704
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1168
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            415055)
(set-option :timeout 0)
(push) ; 14
(assert (not (<
  5
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15066
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         182
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    615
;  :datatype-constructor-ax 3996
;  :datatype-occurs-check   805
;  :datatype-splits         3210
;  :decisions               3863
;  :del-clause              536
;  :final-checks            136
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5704
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1169
;  :propagations            422
;  :quant-instantiations    175
;  :rlimit-count            415070)
; [eval] -2
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 12
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
        5)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15442
;  :arith-add-rows          104
;  :arith-assert-diseq      162
;  :arith-assert-lower      526
;  :arith-assert-upper      503
;  :arith-conflicts         182
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               994
;  :datatype-accessor-ax    619
;  :datatype-constructor-ax 4107
;  :datatype-occurs-check   820
;  :datatype-splits         3319
;  :decisions               3970
;  :del-clause              536
;  :final-checks            139
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5814
;  :mk-clause               649
;  :num-allocs              9458330
;  :num-checks              1170
;  :propagations            426
;  :quant-instantiations    175
;  :rlimit-count            417552
;  :time                    0.00)
(push) ; 12
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
          5)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15968
;  :arith-add-rows          104
;  :arith-assert-diseq      163
;  :arith-assert-lower      529
;  :arith-assert-upper      504
;  :arith-conflicts         182
;  :arith-eq-adapter        230
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               996
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              543
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5943
;  :mk-clause               656
;  :num-allocs              9458330
;  :num-checks              1171
;  :propagations            432
;  :quant-instantiations    176
;  :rlimit-count            420813
;  :time                    0.00)
; [then-branch: 69 | !(First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2) | live]
; [else-branch: 69 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2 | live]
(push) ; 12
; [then-branch: 69 | !(First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          2)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
          5)
        (- 0 2))))))
; Loop head block: Re-establish invariant
(declare-const $k@224@04 $Perm)
(assert ($Perm.isReadVar $k@224@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@224@04 $Perm.No) (< $Perm.No $k@224@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15970
;  :arith-add-rows          104
;  :arith-assert-diseq      164
;  :arith-assert-lower      531
;  :arith-assert-upper      505
;  :arith-conflicts         182
;  :arith-eq-adapter        231
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               997
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              543
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5949
;  :mk-clause               658
;  :num-allocs              9458330
;  :num-checks              1172
;  :propagations            433
;  :quant-instantiations    176
;  :rlimit-count            421208)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ $k@183@04 (- $k@153@04 $k@190@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15971
;  :arith-add-rows          104
;  :arith-assert-diseq      164
;  :arith-assert-lower      531
;  :arith-assert-upper      506
;  :arith-conflicts         183
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         183
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               998
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5951
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1173
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421288)
(assert (< $k@224@04 (+ $k@183@04 (- $k@153@04 $k@190@04))))
(assert (<= $Perm.No (- (+ $k@183@04 (- $k@153@04 $k@190@04)) $k@224@04)))
(assert (<= (- (+ $k@183@04 (- $k@153@04 $k@190@04)) $k@224@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@183@04 (- $k@153@04 $k@190@04)) $k@224@04))
  (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15971
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      508
;  :arith-conflicts         184
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         184
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               999
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5955
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1174
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421557)
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= $t@223@04 $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15972
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      508
;  :arith-conflicts         184
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         184
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1000
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5956
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1175
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421605)
(assert (not (= $t@223@04 $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      509
;  :arith-conflicts         185
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         185
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1001
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5958
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1176
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421742)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      509
;  :arith-conflicts         185
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         185
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1002
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5959
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1177
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421822)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      510
;  :arith-conflicts         186
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         186
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1003
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5960
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1178
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421903)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      510
;  :arith-conflicts         186
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         186
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1004
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5961
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1179
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            421983)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      511
;  :arith-conflicts         187
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         187
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1005
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5962
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1180
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422064)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      511
;  :arith-conflicts         187
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         187
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1006
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5963
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1181
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422144)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      512
;  :arith-conflicts         188
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         188
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1007
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5964
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1182
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422225)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      512
;  :arith-conflicts         188
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         188
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1008
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5965
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1183
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422305)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      513
;  :arith-conflicts         189
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         189
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1009
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5966
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1184
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422386)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      533
;  :arith-assert-upper      513
;  :arith-conflicts         189
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         189
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1010
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5967
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1185
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422466)
; [eval] (forall i__209: Int :: { diz.Combinate_m.Main_process_state[i__209] } 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|)
(declare-const i__209@225@04 Int)
(push) ; 13
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__209 && i__209 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__209
(push) ; 14
; [then-branch: 70 | 0 <= i__209@225@04 | live]
; [else-branch: 70 | !(0 <= i__209@225@04) | live]
(push) ; 15
; [then-branch: 70 | 0 <= i__209@225@04]
(assert (<= 0 i__209@225@04))
; [eval] i__209 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      534
;  :arith-assert-upper      514
;  :arith-conflicts         190
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         190
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1011
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5969
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1186
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422600)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      534
;  :arith-assert-upper      514
;  :arith-conflicts         190
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         190
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1012
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5970
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1187
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422680)
(pop) ; 15
(push) ; 15
; [else-branch: 70 | !(0 <= i__209@225@04)]
(assert (not (<= 0 i__209@225@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 71 | i__209@225@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__209@225@04 | live]
; [else-branch: 71 | !(i__209@225@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__209@225@04) | live]
(push) ; 15
; [then-branch: 71 | i__209@225@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__209@225@04]
(assert (and
  (<
    i__209@225@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
  (<= 0 i__209@225@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209] == -1
; [eval] diz.Combinate_m.Main_process_state[i__209]
(push) ; 16
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      535
;  :arith-assert-upper      516
;  :arith-conflicts         191
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         191
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1013
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5973
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1188
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422870)
(push) ; 16
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      535
;  :arith-assert-upper      516
;  :arith-conflicts         191
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         191
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5974
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1189
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422950)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__209@225@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      164
;  :arith-assert-lower      535
;  :arith-assert-upper      516
;  :arith-conflicts         191
;  :arith-eq-adapter        232
;  :arith-fixed-eqs         191
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1014
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5974
;  :mk-clause               660
;  :num-allocs              9458330
;  :num-checks              1190
;  :propagations            434
;  :quant-instantiations    176
;  :rlimit-count            422959)
; [eval] -1
(push) ; 16
; [then-branch: 72 | First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04] == -1 | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04] != -1 | live]
(push) ; 17
; [then-branch: 72 | First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__209@225@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 72 | First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i__209@225@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209] && diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__209]
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      518
;  :arith-conflicts         192
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         192
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1015
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5981
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1191
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423263)
(push) ; 18
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      518
;  :arith-conflicts         192
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         192
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5982
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1192
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423343)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__209@225@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      518
;  :arith-conflicts         192
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         192
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1016
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5982
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1193
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423352)
(push) ; 18
; [then-branch: 73 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04] | live]
; [else-branch: 73 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04]) | live]
(push) ; 19
; [then-branch: 73 | 0 <= First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__209@225@04)))
; [eval] diz.Combinate_m.Main_process_state[i__209] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__209]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      519
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         193
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1017
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5983
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1194
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423538)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      519
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         193
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5984
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1195
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423618)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__209@225@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      519
;  :arith-conflicts         193
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         193
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1018
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5984
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1196
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423627)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      520
;  :arith-conflicts         194
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         194
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1019
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5985
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1197
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423708)
(push) ; 20
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      165
;  :arith-assert-lower      538
;  :arith-assert-upper      520
;  :arith-conflicts         194
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         194
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1020
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              545
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5986
;  :mk-clause               664
;  :num-allocs              9458330
;  :num-checks              1198
;  :propagations            436
;  :quant-instantiations    177
;  :rlimit-count            423788)
(pop) ; 19
(push) ; 19
; [else-branch: 73 | !(0 <= First:(Second:(Second:(Second:($t@182@04))))[i__209@225@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
      i__209@225@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 71 | !(i__209@225@04 < |First:(Second:(Second:(Second:($t@182@04))))| && 0 <= i__209@225@04)]
(assert (not
  (and
    (<
      i__209@225@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
    (<= 0 i__209@225@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__209@225@04 Int)) (!
  (implies
    (and
      (<
        i__209@225@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i__209@225@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i__209@225@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__209@225@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__209@225@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__209@225@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      166
;  :arith-assert-lower      539
;  :arith-assert-upper      521
;  :arith-conflicts         194
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         194
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1021
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             5994
;  :mk-clause               676
;  :num-allocs              9458330
;  :num-checks              1199
;  :propagations            438
;  :quant-instantiations    178
;  :rlimit-count            424234)
(assert (forall ((i__209@225@04 Int)) (!
  (implies
    (and
      (<
        i__209@225@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
      (<= 0 i__209@225@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
          i__209@225@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__209@225@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
            i__209@225@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
    i__209@225@04))
  :qid |prog.l<no position>|)))
(declare-const $k@226@04 $Perm)
(assert ($Perm.isReadVar $k@226@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      523
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         195
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1022
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6000
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1200
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            424826)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@226@04 $Perm.No) (< $Perm.No $k@226@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      523
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         195
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6000
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1201
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            424876)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      523
;  :arith-conflicts         195
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         195
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1023
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6000
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1202
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            424895)
(push) ; 13
(assert (not (not (= (- $k@155@04 $k@192@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          106
;  :arith-assert-diseq      167
;  :arith-assert-lower      541
;  :arith-assert-upper      523
;  :arith-conflicts         195
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         195
;  :arith-pivots            211
;  :binary-propagations     22
;  :conflicts               1024
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6001
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1203
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            424963)
(assert (< $k@226@04 (- $k@155@04 $k@192@04)))
(assert (<= $Perm.No (- (- $k@155@04 $k@192@04) $k@226@04)))
(assert (<= (- (- $k@155@04 $k@192@04) $k@226@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@155@04 $k@192@04) $k@226@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      525
;  :arith-conflicts         196
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         196
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6005
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1204
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425256)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      525
;  :arith-conflicts         196
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         196
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6005
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1205
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425275)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      525
;  :arith-conflicts         196
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         196
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1025
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6005
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1206
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425294)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6006
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1207
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425375)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6006
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1208
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425394)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15973
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1026
;  :datatype-accessor-ax    625
;  :datatype-constructor-ax 4271
;  :datatype-occurs-check   841
;  :datatype-splits         3432
;  :decisions               4129
;  :del-clause              561
;  :final-checks            143
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6006
;  :mk-clause               678
;  :num-allocs              9458330
;  :num-checks              1209
;  :propagations            439
;  :quant-instantiations    178
;  :rlimit-count            425413)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16400
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1027
;  :datatype-accessor-ax    630
;  :datatype-constructor-ax 4409
;  :datatype-occurs-check   857
;  :datatype-splits         3543
;  :decisions               4262
;  :del-clause              562
;  :final-checks            146
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6120
;  :mk-clause               679
;  :num-allocs              9458330
;  :num-checks              1210
;  :propagations            443
;  :quant-instantiations    178
;  :rlimit-count            428197
;  :time                    0.00)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17148
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1028
;  :datatype-accessor-ax    638
;  :datatype-constructor-ax 4631
;  :datatype-occurs-check   887
;  :datatype-splits         3761
;  :decisions               4476
;  :del-clause              566
;  :final-checks            152
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6336
;  :mk-clause               679
;  :num-allocs              9458330
;  :num-checks              1213
;  :propagations            451
;  :quant-instantiations    178
;  :rlimit-count            432854)
(declare-const $t@227@04 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17575
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1029
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6450
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1214
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            435638
;  :time                    0.00)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17575
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1030
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6451
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1215
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            435723)
(declare-const $t@228@04 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17575
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1031
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6452
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1216
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            435808)
(declare-const $t@229@04 $Ref)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17575
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1032
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6453
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1217
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            435893)
(declare-const $t@230@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@155@04 $k@192@04) $k@226@04))
    (=
      $t@227@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))
  (implies
    (< $Perm.No $k@185@04)
    (=
      $t@227@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@188@04)
    (=
      $t@228@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@158@04 $k@195@04))
    (=
      $t@228@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@187@04)
    (=
      $t@229@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@157@04 $k@194@04))
    (=
      $t@229@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))))))))))))
(assert (and
  (implies
    (< $Perm.No $k@186@04)
    (=
      $t@230@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))
  (implies
    (< $Perm.No (- $k@156@04 $k@193@04))
    (=
      $t@230@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17588
;  :arith-add-rows          108
;  :arith-assert-diseq      167
;  :arith-assert-lower      543
;  :arith-assert-upper      526
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1033
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6460
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1218
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            437161)
(declare-const $t@231@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@159@04 $k@196@04))
    (=
      $t@231@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@189@04)
    (=
      $t@231@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@186@04 (- $k@156@04 $k@193@04))))
(assert (<= (+ $k@186@04 (- $k@156@04 $k@193@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@186@04 (- $k@156@04 $k@193@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (<= $Perm.No (+ $k@187@04 (- $k@157@04 $k@194@04))))
(assert (<= (+ $k@187@04 (- $k@157@04 $k@194@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@187@04 (- $k@157@04 $k@194@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (<= $Perm.No (+ $k@188@04 (- $k@158@04 $k@195@04))))
(assert (<= (+ $k@188@04 (- $k@158@04 $k@195@04)) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@188@04 (- $k@158@04 $k@195@04)))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
(assert (<= $Perm.No (+ (- (- $k@155@04 $k@192@04) $k@226@04) $k@185@04)))
(assert (<= (+ (- (- $k@155@04 $k@192@04) $k@226@04) $k@185@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@155@04 $k@192@04) $k@226@04) $k@185@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
(assert (<= $Perm.No (+ (- $k@159@04 $k@196@04) $k@189@04)))
(assert (<= (+ (- $k@159@04 $k@196@04) $k@189@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@159@04 $k@196@04) $k@189@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      531
;  :arith-conflicts         197
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         197
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1034
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6472
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1219
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438035)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      532
;  :arith-conflicts         198
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         198
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6473
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1220
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438116)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      532
;  :arith-conflicts         198
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         198
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6473
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1221
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438135)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      532
;  :arith-conflicts         198
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         198
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1035
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6473
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1222
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438154)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      532
;  :arith-conflicts         198
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         198
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1036
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6474
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1223
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438314)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      533
;  :arith-conflicts         199
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6475
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1224
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438395)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      533
;  :arith-conflicts         199
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6475
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1225
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438414)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      533
;  :arith-conflicts         199
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1037
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6475
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1226
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438433)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      533
;  :arith-conflicts         199
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         199
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1038
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6476
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1227
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438593)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      534
;  :arith-conflicts         200
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         200
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6477
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1228
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438674)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      534
;  :arith-conflicts         200
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         200
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6477
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1229
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438693)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      534
;  :arith-conflicts         200
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         200
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1039
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6477
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1230
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438712)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      534
;  :arith-conflicts         200
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         200
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1040
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6478
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1231
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438872)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      535
;  :arith-conflicts         201
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         201
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6479
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1232
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438953)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      535
;  :arith-conflicts         201
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         201
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6479
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1233
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438972)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      535
;  :arith-conflicts         201
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         201
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1041
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6479
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1234
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            438991)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      535
;  :arith-conflicts         201
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         201
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1042
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6480
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1235
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439151)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      536
;  :arith-conflicts         202
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         202
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6481
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1236
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439232)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      536
;  :arith-conflicts         202
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         202
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6481
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1237
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439251)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      536
;  :arith-conflicts         202
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         202
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1043
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6481
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1238
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439270)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      536
;  :arith-conflicts         202
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         202
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1044
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6482
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1239
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439430)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      537
;  :arith-conflicts         203
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         203
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6483
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1240
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439511)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      537
;  :arith-conflicts         203
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         203
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6483
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1241
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439530)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      537
;  :arith-conflicts         203
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         203
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1045
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6483
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1242
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439549)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      537
;  :arith-conflicts         203
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         203
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1046
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6484
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1243
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439709)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      538
;  :arith-conflicts         204
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         204
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6485
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1244
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439790)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      538
;  :arith-conflicts         204
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         204
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6485
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1245
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439809)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      538
;  :arith-conflicts         204
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         204
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1047
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6485
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1246
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439828)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      538
;  :arith-conflicts         204
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         204
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1048
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6486
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1247
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            439988)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      539
;  :arith-conflicts         205
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         205
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6487
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1248
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440069)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      539
;  :arith-conflicts         205
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         205
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6487
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1249
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440088)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      539
;  :arith-conflicts         205
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         205
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1049
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6487
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1250
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440107)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      539
;  :arith-conflicts         205
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         205
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1050
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6488
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1251
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440267)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      540
;  :arith-conflicts         206
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         206
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6489
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1252
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440348)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      540
;  :arith-conflicts         206
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         206
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6489
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1253
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440367)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      540
;  :arith-conflicts         206
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         206
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1051
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6489
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1254
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440386)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      167
;  :arith-assert-lower      548
;  :arith-assert-upper      540
;  :arith-conflicts         206
;  :arith-eq-adapter        236
;  :arith-fixed-eqs         206
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1052
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6490
;  :mk-clause               680
;  :num-allocs              9458330
;  :num-checks              1255
;  :propagations            455
;  :quant-instantiations    178
;  :rlimit-count            440546)
(declare-const $k@232@04 $Perm)
(assert ($Perm.isReadVar $k@232@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      168
;  :arith-assert-lower      550
;  :arith-assert-upper      542
;  :arith-conflicts         207
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         207
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1053
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6495
;  :mk-clause               682
;  :num-allocs              9458330
;  :num-checks              1256
;  :propagations            456
;  :quant-instantiations    178
;  :rlimit-count            440776)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@232@04 $Perm.No) (< $Perm.No $k@232@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      168
;  :arith-assert-lower      550
;  :arith-assert-upper      542
;  :arith-conflicts         207
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         207
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1054
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6495
;  :mk-clause               682
;  :num-allocs              9458330
;  :num-checks              1257
;  :propagations            456
;  :quant-instantiations    178
;  :rlimit-count            440826)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17589
;  :arith-add-rows          113
;  :arith-assert-diseq      168
;  :arith-assert-lower      550
;  :arith-assert-upper      542
;  :arith-conflicts         207
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         207
;  :arith-pivots            213
;  :binary-propagations     22
;  :conflicts               1055
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              567
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6496
;  :mk-clause               682
;  :num-allocs              9458330
;  :num-checks              1258
;  :propagations            456
;  :quant-instantiations    178
;  :rlimit-count            440906)
(push) ; 13
(assert (not (not (= (+ $k@186@04 (- $k@156@04 $k@193@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          113
;  :arith-assert-diseq      168
;  :arith-assert-lower      550
;  :arith-assert-upper      543
;  :arith-conflicts         208
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         207
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1056
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6498
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1259
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            440990)
(assert (< $k@232@04 (+ $k@186@04 (- $k@156@04 $k@193@04))))
(assert (<= $Perm.No (- (+ $k@186@04 (- $k@156@04 $k@193@04)) $k@232@04)))
(assert (<= (- (+ $k@186@04 (- $k@156@04 $k@193@04)) $k@232@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@186@04 (- $k@156@04 $k@193@04)) $k@232@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      545
;  :arith-conflicts         209
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         208
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6502
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1260
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441259)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      545
;  :arith-conflicts         209
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         208
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6502
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1261
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441278)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      545
;  :arith-conflicts         209
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         208
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1057
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6502
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1262
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441297)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      546
;  :arith-conflicts         210
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         209
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6503
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1263
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441378)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      546
;  :arith-conflicts         210
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         209
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6503
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1264
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441397)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      546
;  :arith-conflicts         210
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         209
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1058
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6503
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1265
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441416)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      546
;  :arith-conflicts         210
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         209
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1059
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6504
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1266
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441696)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      547
;  :arith-conflicts         211
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         210
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6505
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1267
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441777)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      547
;  :arith-conflicts         211
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         210
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6505
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1268
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441796)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      547
;  :arith-conflicts         211
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         210
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1060
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6505
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1269
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            441815)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      547
;  :arith-conflicts         211
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         210
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1061
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6506
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1270
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442095)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      548
;  :arith-conflicts         212
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         211
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6507
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1271
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442176)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      548
;  :arith-conflicts         212
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         211
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6507
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1272
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442195)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      548
;  :arith-conflicts         212
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         211
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1062
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6507
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1273
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442214)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      548
;  :arith-conflicts         212
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         211
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1063
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6508
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1274
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442494)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      549
;  :arith-conflicts         213
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         212
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6509
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1275
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442575)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      549
;  :arith-conflicts         213
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         212
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6509
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1276
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442594)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      549
;  :arith-conflicts         213
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         212
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1064
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6509
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1277
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442613)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      549
;  :arith-conflicts         213
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         212
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1065
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6510
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1278
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442893)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      550
;  :arith-conflicts         214
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         213
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6511
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1279
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442974)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      550
;  :arith-conflicts         214
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         213
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6511
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1280
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            442993)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      550
;  :arith-conflicts         214
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         213
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1066
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6511
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1281
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443012)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      550
;  :arith-conflicts         214
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         213
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1067
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6512
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1282
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443292)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      551
;  :arith-conflicts         215
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         214
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6513
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1283
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443373)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      551
;  :arith-conflicts         215
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         214
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6513
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1284
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443392)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      551
;  :arith-conflicts         215
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         214
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1068
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6513
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1285
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443411)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      551
;  :arith-conflicts         215
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         214
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1069
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6514
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1286
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443691)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      552
;  :arith-conflicts         216
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         215
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6515
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1287
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443772)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      552
;  :arith-conflicts         216
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         215
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6515
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1288
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443791)
(push) ; 13
(assert (not (< $Perm.No (- $k@156@04 $k@193@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      552
;  :arith-conflicts         216
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         215
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1070
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6515
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1289
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            443810)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      168
;  :arith-assert-lower      552
;  :arith-assert-upper      552
;  :arith-conflicts         216
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         215
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1071
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6516
;  :mk-clause               684
;  :num-allocs              9458330
;  :num-checks              1290
;  :propagations            457
;  :quant-instantiations    178
;  :rlimit-count            444090)
(declare-const $k@233@04 $Perm)
(assert ($Perm.isReadVar $k@233@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      169
;  :arith-assert-lower      554
;  :arith-assert-upper      554
;  :arith-conflicts         217
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         216
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1072
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6521
;  :mk-clause               686
;  :num-allocs              9458330
;  :num-checks              1291
;  :propagations            458
;  :quant-instantiations    178
;  :rlimit-count            444320)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@233@04 $Perm.No) (< $Perm.No $k@233@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      169
;  :arith-assert-lower      554
;  :arith-assert-upper      554
;  :arith-conflicts         217
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         216
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1073
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6521
;  :mk-clause               686
;  :num-allocs              9458330
;  :num-checks              1292
;  :propagations            458
;  :quant-instantiations    178
;  :rlimit-count            444370)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17590
;  :arith-add-rows          115
;  :arith-assert-diseq      169
;  :arith-assert-lower      554
;  :arith-assert-upper      554
;  :arith-conflicts         217
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         216
;  :arith-pivots            214
;  :binary-propagations     22
;  :conflicts               1074
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              569
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6522
;  :mk-clause               686
;  :num-allocs              9458330
;  :num-checks              1293
;  :propagations            458
;  :quant-instantiations    178
;  :rlimit-count            444450)
(push) ; 13
(assert (not (not (= (+ $k@187@04 (- $k@157@04 $k@194@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          115
;  :arith-assert-diseq      169
;  :arith-assert-lower      554
;  :arith-assert-upper      555
;  :arith-conflicts         218
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         216
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1075
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6524
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1294
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444534)
(assert (< $k@233@04 (+ $k@187@04 (- $k@157@04 $k@194@04))))
(assert (<= $Perm.No (- (+ $k@187@04 (- $k@157@04 $k@194@04)) $k@233@04)))
(assert (<= (- (+ $k@187@04 (- $k@157@04 $k@194@04)) $k@233@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@187@04 (- $k@157@04 $k@194@04)) $k@233@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      557
;  :arith-conflicts         219
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         217
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6528
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1295
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444803)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      557
;  :arith-conflicts         219
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         217
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6528
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1296
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444822)
(push) ; 13
(assert (not (< $Perm.No (- $k@157@04 $k@194@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      557
;  :arith-conflicts         219
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         217
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1076
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6528
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1297
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444841)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      558
;  :arith-conflicts         220
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         218
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6529
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1298
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444922)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      558
;  :arith-conflicts         220
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         218
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6529
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1299
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444941)
(push) ; 13
(assert (not (< $Perm.No (- $k@157@04 $k@194@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      558
;  :arith-conflicts         220
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         218
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1077
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6529
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1300
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            444960)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      558
;  :arith-conflicts         220
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         218
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1078
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6530
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1301
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            445330)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      559
;  :arith-conflicts         221
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         219
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6531
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1302
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            445411)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      559
;  :arith-conflicts         221
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         219
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6531
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1303
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            445430)
(push) ; 13
(assert (not (< $Perm.No (- $k@157@04 $k@194@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      559
;  :arith-conflicts         221
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         219
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1079
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6531
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1304
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            445449)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      169
;  :arith-assert-lower      556
;  :arith-assert-upper      559
;  :arith-conflicts         221
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         219
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1080
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6532
;  :mk-clause               688
;  :num-allocs              9458330
;  :num-checks              1305
;  :propagations            459
;  :quant-instantiations    178
;  :rlimit-count            445819)
(declare-const $k@234@04 $Perm)
(assert ($Perm.isReadVar $k@234@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      170
;  :arith-assert-lower      558
;  :arith-assert-upper      561
;  :arith-conflicts         222
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         220
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1081
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6537
;  :mk-clause               690
;  :num-allocs              9458330
;  :num-checks              1306
;  :propagations            460
;  :quant-instantiations    178
;  :rlimit-count            446049)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@234@04 $Perm.No) (< $Perm.No $k@234@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      170
;  :arith-assert-lower      558
;  :arith-assert-upper      561
;  :arith-conflicts         222
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         220
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1082
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6537
;  :mk-clause               690
;  :num-allocs              9458330
;  :num-checks              1307
;  :propagations            460
;  :quant-instantiations    178
;  :rlimit-count            446099)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17591
;  :arith-add-rows          117
;  :arith-assert-diseq      170
;  :arith-assert-lower      558
;  :arith-assert-upper      561
;  :arith-conflicts         222
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         220
;  :arith-pivots            215
;  :binary-propagations     22
;  :conflicts               1083
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              571
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6538
;  :mk-clause               690
;  :num-allocs              9458330
;  :num-checks              1308
;  :propagations            460
;  :quant-instantiations    178
;  :rlimit-count            446179)
(push) ; 13
(assert (not (not (= (+ $k@188@04 (- $k@158@04 $k@195@04)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          117
;  :arith-assert-diseq      170
;  :arith-assert-lower      558
;  :arith-assert-upper      562
;  :arith-conflicts         223
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         220
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1084
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6540
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1309
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446263)
(assert (< $k@234@04 (+ $k@188@04 (- $k@158@04 $k@195@04))))
(assert (<= $Perm.No (- (+ $k@188@04 (- $k@158@04 $k@195@04)) $k@234@04)))
(assert (<= (- (+ $k@188@04 (- $k@158@04 $k@195@04)) $k@234@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@188@04 (- $k@158@04 $k@195@04)) $k@234@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@182@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      565
;  :arith-conflicts         224
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         221
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6544
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1310
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446538)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      565
;  :arith-conflicts         224
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         221
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6544
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1311
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446557)
(push) ; 13
(assert (not (< $Perm.No (- $k@158@04 $k@195@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      565
;  :arith-conflicts         224
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         221
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1085
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6544
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1312
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446576)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      566
;  :arith-conflicts         225
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         222
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6545
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1313
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446657)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      566
;  :arith-conflicts         225
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         222
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6545
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1314
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446676)
(push) ; 13
(assert (not (< $Perm.No (- $k@158@04 $k@195@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      566
;  :arith-conflicts         225
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         222
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6545
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1315
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446695)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      170
;  :arith-assert-lower      559
;  :arith-assert-upper      566
;  :arith-conflicts         225
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         222
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1086
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6545
;  :mk-clause               692
;  :num-allocs              9458330
;  :num-checks              1316
;  :propagations            461
;  :quant-instantiations    178
;  :rlimit-count            446706)
(declare-const $k@235@04 $Perm)
(assert ($Perm.isReadVar $k@235@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      171
;  :arith-assert-lower      561
;  :arith-assert-upper      568
;  :arith-conflicts         226
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         223
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6550
;  :mk-clause               694
;  :num-allocs              9458330
;  :num-checks              1317
;  :propagations            462
;  :quant-instantiations    178
;  :rlimit-count            446935)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      171
;  :arith-assert-lower      561
;  :arith-assert-upper      568
;  :arith-conflicts         226
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         223
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6550
;  :mk-clause               694
;  :num-allocs              9458330
;  :num-checks              1318
;  :propagations            462
;  :quant-instantiations    178
;  :rlimit-count            446954)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      171
;  :arith-assert-lower      561
;  :arith-assert-upper      568
;  :arith-conflicts         226
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         223
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1087
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6550
;  :mk-clause               694
;  :num-allocs              9458330
;  :num-checks              1319
;  :propagations            462
;  :quant-instantiations    178
;  :rlimit-count            446973)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@235@04 $Perm.No) (< $Perm.No $k@235@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17592
;  :arith-add-rows          119
;  :arith-assert-diseq      171
;  :arith-assert-lower      561
;  :arith-assert-upper      568
;  :arith-conflicts         226
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         223
;  :arith-pivots            216
;  :binary-propagations     22
;  :conflicts               1088
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              573
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6550
;  :mk-clause               694
;  :num-allocs              9458330
;  :num-checks              1320
;  :propagations            462
;  :quant-instantiations    178
;  :rlimit-count            447023)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (+ (- $k@159@04 $k@196@04) $k@189@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          119
;  :arith-assert-diseq      171
;  :arith-assert-lower      561
;  :arith-assert-upper      569
;  :arith-conflicts         227
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         223
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1089
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6552
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1321
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447107)
(assert (< $k@235@04 (+ (- $k@159@04 $k@196@04) $k@189@04)))
(assert (<= $Perm.No (- (+ (- $k@159@04 $k@196@04) $k@189@04) $k@235@04)))
(assert (<= (- (+ (- $k@159@04 $k@196@04) $k@189@04) $k@235@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@159@04 $k@196@04) $k@189@04) $k@235@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      571
;  :arith-conflicts         228
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         224
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6556
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1322
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447376)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      571
;  :arith-conflicts         228
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         224
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6556
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1323
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447395)
(push) ; 13
(assert (not (< $Perm.No (- $k@155@04 $k@192@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      571
;  :arith-conflicts         228
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         224
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6556
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1324
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447414)
(push) ; 13
(assert (not (< $Perm.No (- $k@159@04 $k@196@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      571
;  :arith-conflicts         228
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         224
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1090
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6556
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1325
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447433)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      572
;  :arith-conflicts         229
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         225
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6557
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1326
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447514)
(set-option :timeout 0)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      572
;  :arith-conflicts         229
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         225
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1091
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6557
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1327
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447536)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
  $t@223@04))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ $k@183@04 (- $k@153@04 $k@190@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6558
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1328
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447636)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $t@223@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6558
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1329
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447655)
(push) ; 13
(assert (not (< $Perm.No (- $k@158@04 $k@195@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          121
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            217
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              575
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6558
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1330
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447674)
(pop) ; 12
(push) ; 12
; [else-branch: 69 | First:(Second:(Second:(Second:($t@182@04))))[2] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@182@04))))))[5] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))
        2)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@182@04)))))))
        5)
      (- 0 2)))))
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 43 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
(pop) ; 9
; [eval] !!__flatten_140__184.Rng_reset
; [eval] !__flatten_140__184.Rng_reset
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
  __flatten_140__184@173@04)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17593
;  :arith-add-rows          124
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    643
;  :datatype-constructor-ax 4769
;  :datatype-occurs-check   903
;  :datatype-splits         3872
;  :decisions               4609
;  :del-clause              634
;  :final-checks            155
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6558
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1331
;  :propagations            463
;  :quant-instantiations    178
;  :rlimit-count            447857)
(push) ; 9
(assert (not (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17867
;  :arith-add-rows          124
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    646
;  :datatype-constructor-ax 4852
;  :datatype-occurs-check   916
;  :datatype-splits         3953
;  :decisions               4689
;  :del-clause              634
;  :final-checks            158
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6641
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1332
;  :propagations            466
;  :quant-instantiations    180
;  :rlimit-count            449817
;  :time                    0.00)
(push) ; 9
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18141
;  :arith-add-rows          124
;  :arith-assert-diseq      171
;  :arith-assert-lower      563
;  :arith-assert-upper      573
;  :arith-conflicts         230
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1092
;  :datatype-accessor-ax    649
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6724
;  :mk-clause               696
;  :num-allocs              9458330
;  :num-checks              1333
;  :propagations            469
;  :quant-instantiations    182
;  :rlimit-count            451783
;  :time                    0.00)
; [then-branch: 74 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04)))))))))))) | live]
; [else-branch: 74 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04))))))))))))) | live]
(push) ; 9
; [then-branch: 74 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@152@04))))))))))))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))
; [exec]
; diz.Combinate_i := 0
(declare-const __flatten_145__189@236@04 $Ref)
(declare-const __flatten_144__188@237@04 $Ref)
(declare-const __flatten_147__191@238@04 $Ref)
(declare-const __flatten_149__193@239@04 $Ref)
(declare-const __flatten_148__192@240@04 $Ref)
(declare-const __flatten_150__194@241@04 $Ref)
(declare-const __flatten_152__196@242@04 $Ref)
(declare-const __flatten_151__195@243@04 $Ref)
(declare-const __flatten_153__197@244@04 Int)
(declare-const __flatten_154__198@245@04 $Ref)
(declare-const __flatten_156__200@246@04 $Ref)
(declare-const __flatten_155__199@247@04 $Ref)
(declare-const __flatten_157__201@248@04 Int)
(declare-const __flatten_146__190@249@04 Int)
(declare-const __flatten_159__202@250@04 Int)
(push) ; 10
; Loop head block: Check well-definedness of invariant
(declare-const $t@251@04 $Snap)
(assert (= $t@251@04 ($Snap.combine ($Snap.first $t@251@04) ($Snap.second $t@251@04))))
(declare-const $k@252@04 $Perm)
(assert ($Perm.isReadVar $k@252@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@252@04 $Perm.No) (< $Perm.No $k@252@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18150
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      565
;  :arith-assert-upper      574
;  :arith-conflicts         230
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1093
;  :datatype-accessor-ax    650
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6732
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1334
;  :propagations            470
;  :quant-instantiations    184
;  :rlimit-count            452267)
(assert (<= $Perm.No $k@252@04))
(assert (<= $k@252@04 $Perm.Write))
(assert (implies (< $Perm.No $k@252@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@251@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@251@04))
    ($Snap.second ($Snap.second $t@251@04)))))
(assert (= ($Snap.first ($Snap.second $t@251@04)) $Snap.unit))
; [eval] diz.Combinate_m != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18156
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      565
;  :arith-assert-upper      575
;  :arith-conflicts         230
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1094
;  :datatype-accessor-ax    651
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6735
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1335
;  :propagations            470
;  :quant-instantiations    184
;  :rlimit-count            452510)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@251@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@251@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18162
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      565
;  :arith-assert-upper      575
;  :arith-conflicts         230
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1095
;  :datatype-accessor-ax    652
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6738
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1336
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            452782)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@251@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18167
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      565
;  :arith-assert-upper      575
;  :arith-conflicts         230
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1096
;  :datatype-accessor-ax    653
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6739
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1337
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            452959)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18173
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      565
;  :arith-assert-upper      575
;  :arith-conflicts         230
;  :arith-eq-adapter        245
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1097
;  :datatype-accessor-ax    654
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6741
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1338
;  :propagations            470
;  :quant-instantiations    185
;  :rlimit-count            453178)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18180
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      567
;  :arith-assert-upper      576
;  :arith-conflicts         230
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1098
;  :datatype-accessor-ax    655
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6747
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1339
;  :propagations            470
;  :quant-instantiations    187
;  :rlimit-count            453508)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  $Snap.unit))
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18186
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      567
;  :arith-assert-upper      576
;  :arith-conflicts         230
;  :arith-eq-adapter        246
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1099
;  :datatype-accessor-ax    656
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6749
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1340
;  :propagations            470
;  :quant-instantiations    187
;  :rlimit-count            453747)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  $Snap.unit))
; [eval] (forall i__210: Int :: { diz.Combinate_m.Main_process_state[i__210] } 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|)
(declare-const i__210@253@04 Int)
(push) ; 11
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__210
(push) ; 12
; [then-branch: 75 | 0 <= i__210@253@04 | live]
; [else-branch: 75 | !(0 <= i__210@253@04) | live]
(push) ; 13
; [then-branch: 75 | 0 <= i__210@253@04]
(assert (<= 0 i__210@253@04))
; [eval] i__210 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 14
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      570
;  :arith-assert-upper      577
;  :arith-conflicts         230
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1100
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6757
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1341
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454186)
(pop) ; 13
(push) ; 13
; [else-branch: 75 | !(0 <= i__210@253@04)]
(assert (not (<= 0 i__210@253@04)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 76 | i__210@253@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i__210@253@04 | live]
; [else-branch: 76 | !(i__210@253@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i__210@253@04) | live]
(push) ; 13
; [then-branch: 76 | i__210@253@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i__210@253@04]
(assert (and
  (<
    i__210@253@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  (<= 0 i__210@253@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1
; [eval] diz.Combinate_m.Main_process_state[i__210]
(push) ; 14
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      571
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6759
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1342
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454343)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__210@253@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      571
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1101
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6759
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1343
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454352)
; [eval] -1
(push) ; 14
; [then-branch: 77 | First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04] == -1 | live]
; [else-branch: 77 | First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04] != -1 | live]
(push) ; 15
; [then-branch: 77 | First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i__210@253@04)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 77 | First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
      i__210@253@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210]
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      571
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6760
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1344
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454566)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__210@253@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      172
;  :arith-assert-lower      571
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        247
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1102
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6760
;  :mk-clause               698
;  :num-allocs              9458330
;  :num-checks              1345
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454575)
(push) ; 16
; [then-branch: 78 | 0 <= First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04] | live]
; [else-branch: 78 | !(0 <= First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04]) | live]
(push) ; 17
; [then-branch: 78 | 0 <= First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i__210@253@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      173
;  :arith-assert-lower      574
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6763
;  :mk-clause               699
;  :num-allocs              9458330
;  :num-checks              1346
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454737)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__210@253@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      173
;  :arith-assert-lower      574
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1103
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6763
;  :mk-clause               699
;  :num-allocs              9458330
;  :num-checks              1347
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454746)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18194
;  :arith-add-rows          124
;  :arith-assert-diseq      173
;  :arith-assert-lower      574
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1104
;  :datatype-accessor-ax    657
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              634
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6763
;  :mk-clause               699
;  :num-allocs              9458330
;  :num-checks              1348
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            454794)
(pop) ; 17
(push) ; 17
; [else-branch: 78 | !(0 <= First:(Second:(Second:(Second:($t@251@04))))[i__210@253@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
      i__210@253@04))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 76 | !(i__210@253@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i__210@253@04)]
(assert (not
  (and
    (<
      i__210@253@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
    (<= 0 i__210@253@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__210@253@04 Int)) (!
  (implies
    (and
      (<
        i__210@253@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
      (<= 0 i__210@253@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
          i__210@253@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i__210@253@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i__210@253@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i__210@253@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18199
;  :arith-add-rows          124
;  :arith-assert-diseq      173
;  :arith-assert-lower      574
;  :arith-assert-upper      578
;  :arith-conflicts         230
;  :arith-eq-adapter        248
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1105
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6765
;  :mk-clause               699
;  :num-allocs              9458330
;  :num-checks              1349
;  :propagations            470
;  :quant-instantiations    189
;  :rlimit-count            455419)
(declare-const $k@254@04 $Perm)
(assert ($Perm.isReadVar $k@254@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@254@04 $Perm.No) (< $Perm.No $k@254@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18199
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      579
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1106
;  :datatype-accessor-ax    658
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6769
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1350
;  :propagations            471
;  :quant-instantiations    189
;  :rlimit-count            455618)
(assert (<= $Perm.No $k@254@04))
(assert (<= $k@254@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@254@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18205
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1107
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6772
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1351
;  :propagations            471
;  :quant-instantiations    189
;  :rlimit-count            455941)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18205
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1108
;  :datatype-accessor-ax    659
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6772
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1352
;  :propagations            471
;  :quant-instantiations    189
;  :rlimit-count            455989)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18211
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1109
;  :datatype-accessor-ax    660
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6775
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1353
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            456345)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18211
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1110
;  :datatype-accessor-ax    660
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6775
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1354
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            456393)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18216
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1111
;  :datatype-accessor-ax    661
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6776
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1355
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            456650)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18216
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1112
;  :datatype-accessor-ax    661
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6776
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1356
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            456698)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18221
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1113
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6777
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1357
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            456965)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18221
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1114
;  :datatype-accessor-ax    662
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6777
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1358
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457013)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18226
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1115
;  :datatype-accessor-ax    663
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6778
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1359
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457290)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18226
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1116
;  :datatype-accessor-ax    663
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6778
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1360
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457338)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18231
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1117
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6779
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1361
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457625)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18231
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1118
;  :datatype-accessor-ax    664
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6779
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1362
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457673)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18236
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1119
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6780
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1363
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            457970)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18236
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1120
;  :datatype-accessor-ax    665
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6780
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1364
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            458018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18241
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1121
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6781
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1365
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            458325)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18241
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1122
;  :datatype-accessor-ax    666
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6781
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1366
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            458373)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18246
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1123
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6782
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1367
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            458690)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18246
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1124
;  :datatype-accessor-ax    667
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6782
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1368
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            458738)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18251
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1125
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6783
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1369
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            459065)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18251
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1126
;  :datatype-accessor-ax    668
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6783
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1370
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            459113)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18256
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1127
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6784
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1371
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            459450)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18256
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1128
;  :datatype-accessor-ax    669
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6784
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1372
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            459498)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18261
;  :arith-add-rows          124
;  :arith-assert-diseq      174
;  :arith-assert-lower      576
;  :arith-assert-upper      580
;  :arith-conflicts         230
;  :arith-eq-adapter        249
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1129
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6785
;  :mk-clause               701
;  :num-allocs              9458330
;  :num-checks              1373
;  :propagations            471
;  :quant-instantiations    190
;  :rlimit-count            459845)
(declare-const $k@255@04 $Perm)
(assert ($Perm.isReadVar $k@255@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@255@04 $Perm.No) (< $Perm.No $k@255@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18261
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      581
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1130
;  :datatype-accessor-ax    670
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6789
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1374
;  :propagations            472
;  :quant-instantiations    190
;  :rlimit-count            460043)
(assert (<= $Perm.No $k@255@04))
(assert (<= $k@255@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@255@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_casr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18267
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1131
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6792
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1375
;  :propagations            472
;  :quant-instantiations    190
;  :rlimit-count            460486)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18267
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1132
;  :datatype-accessor-ax    671
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6792
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1376
;  :propagations            472
;  :quant-instantiations    190
;  :rlimit-count            460534)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18273
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1133
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6795
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1377
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461028)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18273
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1134
;  :datatype-accessor-ax    672
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6795
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1378
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461076)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18278
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1135
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6796
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1379
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461453)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18278
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1136
;  :datatype-accessor-ax    673
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6796
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1380
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461501)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18283
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1137
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6797
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1381
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461888)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18283
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1138
;  :datatype-accessor-ax    674
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6797
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1382
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            461936)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18288
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1139
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6798
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1383
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            462333)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18288
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1140
;  :datatype-accessor-ax    675
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6798
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1384
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            462381)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18293
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1141
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6799
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1385
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            462788)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18293
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1142
;  :datatype-accessor-ax    676
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6799
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1386
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            462836)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18298
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1143
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6800
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1387
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            463253)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18298
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1144
;  :datatype-accessor-ax    677
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6800
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1388
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            463301)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18303
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1145
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6801
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1389
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            463728)
(push) ; 11
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18303
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1146
;  :datatype-accessor-ax    678
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6801
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1390
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            463776)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18308
;  :arith-add-rows          124
;  :arith-assert-diseq      175
;  :arith-assert-lower      578
;  :arith-assert-upper      582
;  :arith-conflicts         230
;  :arith-eq-adapter        250
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1147
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6802
;  :mk-clause               703
;  :num-allocs              9458330
;  :num-checks              1391
;  :propagations            472
;  :quant-instantiations    191
;  :rlimit-count            464213)
(declare-const $k@256@04 $Perm)
(assert ($Perm.isReadVar $k@256@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@256@04 $Perm.No) (< $Perm.No $k@256@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18308
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      583
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1148
;  :datatype-accessor-ax    679
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6806
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1392
;  :propagations            473
;  :quant-instantiations    191
;  :rlimit-count            464412)
(assert (<= $Perm.No $k@256@04))
(assert (<= $k@256@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@256@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18314
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1149
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6809
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1393
;  :propagations            473
;  :quant-instantiations    191
;  :rlimit-count            464945)
(push) ; 11
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18314
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1150
;  :datatype-accessor-ax    680
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6809
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1394
;  :propagations            473
;  :quant-instantiations    191
;  :rlimit-count            464993)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18320
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1151
;  :datatype-accessor-ax    681
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6812
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1395
;  :propagations            473
;  :quant-instantiations    192
;  :rlimit-count            465571)
(push) ; 11
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18320
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1152
;  :datatype-accessor-ax    681
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6812
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1396
;  :propagations            473
;  :quant-instantiations    192
;  :rlimit-count            465619)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18325
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1153
;  :datatype-accessor-ax    682
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6813
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1397
;  :propagations            473
;  :quant-instantiations    192
;  :rlimit-count            466086)
(push) ; 11
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18325
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1154
;  :datatype-accessor-ax    682
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6813
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1398
;  :propagations            473
;  :quant-instantiations    192
;  :rlimit-count            466134)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18330
;  :arith-add-rows          124
;  :arith-assert-diseq      176
;  :arith-assert-lower      580
;  :arith-assert-upper      584
;  :arith-conflicts         230
;  :arith-eq-adapter        251
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1155
;  :datatype-accessor-ax    683
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6814
;  :mk-clause               705
;  :num-allocs              9458330
;  :num-checks              1399
;  :propagations            473
;  :quant-instantiations    192
;  :rlimit-count            466611)
(declare-const $k@257@04 $Perm)
(assert ($Perm.isReadVar $k@257@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@257@04 $Perm.No) (< $Perm.No $k@257@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18330
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      585
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1156
;  :datatype-accessor-ax    683
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6818
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1400
;  :propagations            474
;  :quant-instantiations    192
;  :rlimit-count            466809)
(assert (<= $Perm.No $k@257@04))
(assert (<= $k@257@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@257@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18336
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1157
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6821
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1401
;  :propagations            474
;  :quant-instantiations    192
;  :rlimit-count            467382)
(push) ; 11
(assert (not (< $Perm.No $k@257@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18336
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1158
;  :datatype-accessor-ax    684
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6821
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1402
;  :propagations            474
;  :quant-instantiations    192
;  :rlimit-count            467430)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18342
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1159
;  :datatype-accessor-ax    685
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6824
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1403
;  :propagations            474
;  :quant-instantiations    193
;  :rlimit-count            468038)
(push) ; 11
(assert (not (< $Perm.No $k@257@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18342
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1160
;  :datatype-accessor-ax    685
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6824
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1404
;  :propagations            474
;  :quant-instantiations    193
;  :rlimit-count            468086)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))))
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18347
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1161
;  :datatype-accessor-ax    686
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6825
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1405
;  :propagations            474
;  :quant-instantiations    193
;  :rlimit-count            468593)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18347
;  :arith-add-rows          124
;  :arith-assert-diseq      177
;  :arith-assert-lower      582
;  :arith-assert-upper      586
;  :arith-conflicts         230
;  :arith-eq-adapter        252
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1162
;  :datatype-accessor-ax    686
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6825
;  :mk-clause               707
;  :num-allocs              9458330
;  :num-checks              1406
;  :propagations            474
;  :quant-instantiations    193
;  :rlimit-count            468641)
(declare-const $k@258@04 $Perm)
(assert ($Perm.isReadVar $k@258@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@258@04 $Perm.No) (< $Perm.No $k@258@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18347
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      587
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1163
;  :datatype-accessor-ax    686
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6829
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1407
;  :propagations            475
;  :quant-instantiations    193
;  :rlimit-count            468840)
(assert (<= $Perm.No $k@258@04))
(assert (<= $k@258@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@258@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18353
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1164
;  :datatype-accessor-ax    687
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6832
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1408
;  :propagations            475
;  :quant-instantiations    193
;  :rlimit-count            469443)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18353
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1165
;  :datatype-accessor-ax    687
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6832
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1409
;  :propagations            475
;  :quant-instantiations    193
;  :rlimit-count            469491)
(push) ; 11
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18353
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1166
;  :datatype-accessor-ax    687
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6832
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1410
;  :propagations            475
;  :quant-instantiations    193
;  :rlimit-count            469539)
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18353
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1167
;  :datatype-accessor-ax    687
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6832
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1411
;  :propagations            475
;  :quant-instantiations    193
;  :rlimit-count            469587)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18362
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1168
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6836
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1412
;  :propagations            475
;  :quant-instantiations    194
;  :rlimit-count            470265)
(push) ; 11
(assert (not (< $Perm.No $k@257@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18362
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1169
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6836
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1413
;  :propagations            475
;  :quant-instantiations    194
;  :rlimit-count            470313)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(push) ; 11
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18367
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1170
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6838
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1414
;  :propagations            475
;  :quant-instantiations    194
;  :rlimit-count            470845)
(push) ; 11
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18367
;  :arith-add-rows          124
;  :arith-assert-diseq      178
;  :arith-assert-lower      584
;  :arith-assert-upper      588
;  :arith-conflicts         230
;  :arith-eq-adapter        253
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1171
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              635
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6838
;  :mk-clause               709
;  :num-allocs              9458330
;  :num-checks              1415
;  :propagations            475
;  :quant-instantiations    194
;  :rlimit-count            470893)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 11
; [eval] diz.Combinate_i < 32
(pop) ; 11
(push) ; 11
; [eval] !(diz.Combinate_i < 32)
; [eval] diz.Combinate_i < 32
(pop) ; 11
(pop) ; 10
(push) ; 10
; Loop head block: Establish invariant
(declare-const $k@259@04 $Perm)
(assert ($Perm.isReadVar $k@259@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@259@04 $Perm.No) (< $Perm.No $k@259@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      586
;  :arith-assert-upper      589
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6844
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1416
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471294)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@153@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      586
;  :arith-assert-upper      589
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            233
;  :binary-propagations     22
;  :conflicts               1172
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6844
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1417
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471305)
(assert (< $k@259@04 $k@153@04))
(assert (<= $Perm.No (- $k@153@04 $k@259@04)))
(assert (<= (- $k@153@04 $k@259@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@153@04 $k@259@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1173
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1418
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471519)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1174
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1419
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471567)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1175
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1420
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471615)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1176
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1421
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471663)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1177
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1422
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471711)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      588
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1178
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6847
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1423
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471759)
; [eval] (forall i__210: Int :: { diz.Combinate_m.Main_process_state[i__210] } 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|)
(declare-const i__210@260@04 Int)
(push) ; 11
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__210
(push) ; 12
; [then-branch: 79 | 0 <= i__210@260@04 | live]
; [else-branch: 79 | !(0 <= i__210@260@04) | live]
(push) ; 13
; [then-branch: 79 | 0 <= i__210@260@04]
(assert (<= 0 i__210@260@04))
; [eval] i__210 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      589
;  :arith-assert-upper      590
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1179
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6848
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1424
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            471859)
(pop) ; 13
(push) ; 13
; [else-branch: 79 | !(0 <= i__210@260@04)]
(assert (not (<= 0 i__210@260@04)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 80 | i__210@260@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__210@260@04 | live]
; [else-branch: 80 | !(i__210@260@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__210@260@04) | live]
(push) ; 13
; [then-branch: 80 | i__210@260@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__210@260@04]
(assert (and
  (<
    i__210@260@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
  (<= 0 i__210@260@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1
; [eval] diz.Combinate_m.Main_process_state[i__210]
(push) ; 14
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      590
;  :arith-assert-upper      591
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6850
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1425
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            472016)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i__210@260@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      179
;  :arith-assert-lower      590
;  :arith-assert-upper      591
;  :arith-conflicts         230
;  :arith-eq-adapter        254
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1180
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6850
;  :mk-clause               711
;  :num-allocs              9458330
;  :num-checks              1426
;  :propagations            476
;  :quant-instantiations    195
;  :rlimit-count            472025)
; [eval] -1
(push) ; 14
; [then-branch: 81 | First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04] == -1 | live]
; [else-branch: 81 | First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04] != -1 | live]
(push) ; 15
; [then-branch: 81 | First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__210@260@04)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 81 | First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
      i__210@260@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210]
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      180
;  :arith-assert-lower      593
;  :arith-assert-upper      592
;  :arith-conflicts         230
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6856
;  :mk-clause               715
;  :num-allocs              9458330
;  :num-checks              1427
;  :propagations            478
;  :quant-instantiations    196
;  :rlimit-count            472296)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__210@260@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      180
;  :arith-assert-lower      593
;  :arith-assert-upper      592
;  :arith-conflicts         230
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1181
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6856
;  :mk-clause               715
;  :num-allocs              9458330
;  :num-checks              1428
;  :propagations            478
;  :quant-instantiations    196
;  :rlimit-count            472305)
(push) ; 16
; [then-branch: 82 | 0 <= First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04] | live]
; [else-branch: 82 | !(0 <= First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04]) | live]
(push) ; 17
; [then-branch: 82 | 0 <= First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__210@260@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      180
;  :arith-assert-lower      593
;  :arith-assert-upper      592
;  :arith-conflicts         230
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6856
;  :mk-clause               715
;  :num-allocs              9458330
;  :num-checks              1429
;  :propagations            478
;  :quant-instantiations    196
;  :rlimit-count            472458)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__210@260@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      180
;  :arith-assert-lower      593
;  :arith-assert-upper      592
;  :arith-conflicts         230
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1182
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6856
;  :mk-clause               715
;  :num-allocs              9458330
;  :num-checks              1430
;  :propagations            478
;  :quant-instantiations    196
;  :rlimit-count            472467)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      180
;  :arith-assert-lower      593
;  :arith-assert-upper      592
;  :arith-conflicts         230
;  :arith-eq-adapter        255
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1183
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              647
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6856
;  :mk-clause               715
;  :num-allocs              9458330
;  :num-checks              1431
;  :propagations            478
;  :quant-instantiations    196
;  :rlimit-count            472515)
(pop) ; 17
(push) ; 17
; [else-branch: 82 | !(0 <= First:(Second:(Second:(Second:($t@152@04))))[i__210@260@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
      i__210@260@04))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 80 | !(i__210@260@04 < |First:(Second:(Second:(Second:($t@152@04))))| && 0 <= i__210@260@04)]
(assert (not
  (and
    (<
      i__210@260@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
    (<= 0 i__210@260@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 11
(assert (not (forall ((i__210@260@04 Int)) (!
  (implies
    (and
      (<
        i__210@260@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
      (<= 0 i__210@260@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
          i__210@260@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__210@260@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__210@260@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__210@260@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      181
;  :arith-assert-lower      594
;  :arith-assert-upper      593
;  :arith-conflicts         230
;  :arith-eq-adapter        256
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1184
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6864
;  :mk-clause               727
;  :num-allocs              9458330
;  :num-checks              1432
;  :propagations            480
;  :quant-instantiations    197
;  :rlimit-count            472961)
(assert (forall ((i__210@260@04 Int)) (!
  (implies
    (and
      (<
        i__210@260@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))
      (<= 0 i__210@260@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
          i__210@260@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__210@260@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
            i__210@260@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@152@04)))))
    i__210@260@04))
  :qid |prog.l<no position>|)))
(declare-const $k@261@04 $Perm)
(assert ($Perm.isReadVar $k@261@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      596
;  :arith-assert-upper      594
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1185
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6869
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1433
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473519)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@261@04 $Perm.No) (< $Perm.No $k@261@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      596
;  :arith-assert-upper      594
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6869
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1434
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473569)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@155@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      596
;  :arith-assert-upper      594
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            234
;  :binary-propagations     22
;  :conflicts               1186
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6869
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1435
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473580)
(assert (< $k@261@04 $k@155@04))
(assert (<= $Perm.No (- $k@155@04 $k@261@04)))
(assert (<= (- $k@155@04 $k@261@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@155@04 $k@261@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1187
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1436
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473794)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1188
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1437
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473842)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1189
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1438
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473890)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1190
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1439
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473938)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1191
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1440
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            473986)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1192
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1441
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474034)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1193
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1442
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474082)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1194
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1443
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474130)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1195
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1444
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474178)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1196
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1445
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474226)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1197
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1446
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474274)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1198
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1447
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474322)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1199
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1448
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474370)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1200
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1449
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474418)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1201
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1450
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474466)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1202
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1451
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474514)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1203
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1452
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474562)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1204
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1453
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474610)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1205
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1454
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474658)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1206
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1455
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474706)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1207
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1456
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474754)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      182
;  :arith-assert-lower      598
;  :arith-assert-upper      595
;  :arith-conflicts         230
;  :arith-eq-adapter        257
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1208
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6872
;  :mk-clause               729
;  :num-allocs              9458330
;  :num-checks              1457
;  :propagations            481
;  :quant-instantiations    197
;  :rlimit-count            474802)
(declare-const $k@262@04 $Perm)
(assert ($Perm.isReadVar $k@262@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      600
;  :arith-assert-upper      596
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1209
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6876
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1458
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            474999)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@262@04 $Perm.No) (< $Perm.No $k@262@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      600
;  :arith-assert-upper      596
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6876
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1459
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475049)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@156@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      600
;  :arith-assert-upper      596
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1210
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6876
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1460
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475060)
(assert (< $k@262@04 $k@156@04))
(assert (<= $Perm.No (- $k@156@04 $k@262@04)))
(assert (<= (- $k@156@04 $k@262@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@156@04 $k@262@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1211
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1461
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475268)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1212
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1462
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475316)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1213
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1463
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475364)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1214
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1464
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475412)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1215
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1465
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475460)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1216
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1466
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475508)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1217
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1467
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475556)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1218
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1468
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475604)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1219
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1469
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475652)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1220
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1470
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475700)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1221
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1471
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475748)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1222
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1472
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475796)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1223
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1473
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475844)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1224
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1474
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475892)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1225
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1475
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475940)
(push) ; 11
(assert (not (< $Perm.No $k@156@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      183
;  :arith-assert-lower      602
;  :arith-assert-upper      597
;  :arith-conflicts         230
;  :arith-eq-adapter        258
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1226
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6879
;  :mk-clause               731
;  :num-allocs              9458330
;  :num-checks              1476
;  :propagations            482
;  :quant-instantiations    197
;  :rlimit-count            475988)
(declare-const $k@263@04 $Perm)
(assert ($Perm.isReadVar $k@263@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      604
;  :arith-assert-upper      598
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1227
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6883
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1477
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476185)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@263@04 $Perm.No) (< $Perm.No $k@263@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      604
;  :arith-assert-upper      598
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1228
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6883
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1478
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476235)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@157@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      604
;  :arith-assert-upper      598
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1228
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6883
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1479
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476246)
(assert (< $k@263@04 $k@157@04))
(assert (<= $Perm.No (- $k@157@04 $k@263@04)))
(assert (<= (- $k@157@04 $k@263@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@157@04 $k@263@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1229
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1480
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476454)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1230
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1481
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476502)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1231
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1482
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476550)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1232
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1483
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476598)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1233
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1484
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476646)
(push) ; 11
(assert (not (< $Perm.No $k@157@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      184
;  :arith-assert-lower      606
;  :arith-assert-upper      599
;  :arith-conflicts         230
;  :arith-eq-adapter        259
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1234
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6886
;  :mk-clause               733
;  :num-allocs              9458330
;  :num-checks              1485
;  :propagations            483
;  :quant-instantiations    197
;  :rlimit-count            476694)
(declare-const $k@264@04 $Perm)
(assert ($Perm.isReadVar $k@264@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      608
;  :arith-assert-upper      600
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1235
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6890
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1486
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            476891)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@264@04 $Perm.No) (< $Perm.No $k@264@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      608
;  :arith-assert-upper      600
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6890
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1487
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            476941)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@158@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      608
;  :arith-assert-upper      600
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1236
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6890
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1488
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            476952)
(assert (< $k@264@04 $k@158@04))
(assert (<= $Perm.No (- $k@158@04 $k@264@04)))
(assert (<= (- $k@158@04 $k@264@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@158@04 $k@264@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@152@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      610
;  :arith-assert-upper      601
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1237
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6893
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1489
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            477160)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      610
;  :arith-assert-upper      601
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1238
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6893
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1490
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            477208)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      610
;  :arith-assert-upper      601
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1239
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6893
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1491
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            477256)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      610
;  :arith-assert-upper      601
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6893
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1492
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            477304)
(push) ; 11
(assert (not (=
  diz@30@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      185
;  :arith-assert-lower      610
;  :arith-assert-upper      601
;  :arith-conflicts         230
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1240
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6893
;  :mk-clause               735
;  :num-allocs              9458330
;  :num-checks              1493
;  :propagations            484
;  :quant-instantiations    197
;  :rlimit-count            477315)
(declare-const $k@265@04 $Perm)
(assert ($Perm.isReadVar $k@265@04 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      612
;  :arith-assert-upper      602
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1241
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6897
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1494
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477511)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      612
;  :arith-assert-upper      602
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1242
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6897
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1495
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477559)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@265@04 $Perm.No) (< $Perm.No $k@265@04))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      612
;  :arith-assert-upper      602
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6897
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1496
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477609)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@159@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      612
;  :arith-assert-upper      602
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            235
;  :binary-propagations     22
;  :conflicts               1243
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6897
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1497
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477620)
(assert (< $k@265@04 $k@159@04))
(assert (<= $Perm.No (- $k@159@04 $k@265@04)))
(assert (<= (- $k@159@04 $k@265@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@159@04 $k@265@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@152@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1244
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1498
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477834)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1245
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1499
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477882)
(push) ; 11
(assert (not (< $Perm.No $k@159@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1246
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1500
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477930)
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1247
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1501
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            477978)
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1248
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1502
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            478026)
(push) ; 11
(assert (not (< $Perm.No $k@158@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1249
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1503
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            478074)
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(push) ; 11
(assert (not (< $Perm.No $k@153@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1250
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1504
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            478122)
(push) ; 11
(assert (not (< $Perm.No $k@155@04)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18370
;  :arith-add-rows          124
;  :arith-assert-diseq      186
;  :arith-assert-lower      614
;  :arith-assert-upper      603
;  :arith-conflicts         230
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1251
;  :datatype-accessor-ax    688
;  :datatype-constructor-ax 4935
;  :datatype-occurs-check   929
;  :datatype-splits         4034
;  :decisions               4769
;  :del-clause              663
;  :final-checks            161
;  :max-generation          2
;  :max-memory              5.83
;  :memory                  5.74
;  :mk-bool-var             6900
;  :mk-clause               737
;  :num-allocs              9458330
;  :num-checks              1505
;  :propagations            485
;  :quant-instantiations    197
;  :rlimit-count            478170)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 11
(assert ($Perm.isReadVar $k@252@04 $Perm.Write))
(assert ($Perm.isReadVar $k@254@04 $Perm.Write))
(assert ($Perm.isReadVar $k@255@04 $Perm.Write))
(assert ($Perm.isReadVar $k@256@04 $Perm.Write))
(assert ($Perm.isReadVar $k@257@04 $Perm.Write))
(assert ($Perm.isReadVar $k@258@04 $Perm.Write))
(assert (= $t@251@04 ($Snap.combine ($Snap.first $t@251@04) ($Snap.second $t@251@04))))
(assert (<= $Perm.No $k@252@04))
(assert (<= $k@252@04 $Perm.Write))
(assert (implies (< $Perm.No $k@252@04) (not (= diz@30@04 $Ref.null))))
(assert (=
  ($Snap.second $t@251@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@251@04))
    ($Snap.second ($Snap.second $t@251@04)))))
(assert (= ($Snap.first ($Snap.second $t@251@04)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@251@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@251@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@251@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  $Snap.unit))
(assert (forall ((i__210@253@04 Int)) (!
  (implies
    (and
      (<
        i__210@253@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
      (<= 0 i__210@253@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
          i__210@253@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i__210@253@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i__210@253@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i__210@253@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
(assert (<= $Perm.No $k@254@04))
(assert (<= $k@254@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@254@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
(assert (<= $Perm.No $k@255@04))
(assert (<= $k@255@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@255@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@256@04))
(assert (<= $k@256@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@256@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@257@04))
(assert (<= $k@257@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@257@04)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@258@04))
(assert (<= $k@258@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@258@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))
  diz@30@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Combinate_i < 32
(push) ; 12
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
    32))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19935
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      630
;  :arith-assert-upper      618
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    738
;  :datatype-constructor-ax 5342
;  :datatype-occurs-check   971
;  :datatype-splits         4361
;  :decisions               5164
;  :del-clause              677
;  :final-checks            170
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7333
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1508
;  :propagations            502
;  :quant-instantiations    209
;  :rlimit-count            492380
;  :time                    0.00)
(push) ; 12
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
  32)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20307
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      618
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1252
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7443
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1509
;  :propagations            506
;  :quant-instantiations    210
;  :rlimit-count            495078
;  :time                    0.00)
; [then-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@251@04)))))))))))))))))))))))))))))))))))) < 32 | live]
; [else-branch: 83 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@251@04)))))))))))))))))))))))))))))))))))) < 32) | live]
(push) ; 12
; [then-branch: 83 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@251@04)))))))))))))))))))))))))))))))))))) < 32]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
  32))
; [exec]
; __flatten_145__189 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20308
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1253
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7445
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1510
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            495572)
(declare-const __flatten_145__189@266@04 $Ref)
(assert (= __flatten_145__189@266@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_144__188 := __flatten_145__189.Main_rn
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_145__189@266@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20309
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1253
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7446
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1511
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            495640)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20309
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1254
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7446
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1512
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            495688)
(declare-const __flatten_144__188@267@04 $Ref)
(assert (=
  __flatten_144__188@267@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
; [exec]
; __flatten_147__191 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20310
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1255
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7447
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1513
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            495873)
(declare-const __flatten_147__191@268@04 $Ref)
(assert (= __flatten_147__191@268@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_149__193 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20311
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7448
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1514
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            495958)
(declare-const __flatten_149__193@269@04 $Ref)
(assert (= __flatten_149__193@269@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_148__192 := __flatten_149__193.Main_rn
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_149__193@269@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20312
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1256
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7449
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1515
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496006)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20312
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1257
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7449
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1516
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496054)
(declare-const __flatten_148__192@270@04 $Ref)
(assert (=
  __flatten_148__192@270@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
; [exec]
; __flatten_150__194 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20313
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1258
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7450
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1517
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496139)
(declare-const __flatten_150__194@271@04 $Ref)
(assert (= __flatten_150__194@271@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_152__196 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20314
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7451
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1518
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496224)
(declare-const __flatten_152__196@272@04 $Ref)
(assert (= __flatten_152__196@272@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_151__195 := __flatten_152__196.Main_rn
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_152__196@272@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20315
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1259
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7452
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1519
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496272)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20315
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7452
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1520
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496320)
(declare-const __flatten_151__195@273@04 $Ref)
(assert (=
  __flatten_151__195@273@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
; [exec]
; __flatten_153__197 := Rng_bit__EncodedGlobalVariables_Integer_Integer(__flatten_150__194.Main_rn, globals__176, __flatten_151__195.Rng_LFSR_reg, diz.Combinate_i)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_150__194@271@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1260
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7453
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1521
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496368)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7453
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1522
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496416)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  __flatten_151__195@273@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      192
;  :arith-assert-lower      631
;  :arith-assert-upper      619
;  :arith-conflicts         230
;  :arith-eq-adapter        269
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1261
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7453
;  :mk-clause               752
;  :num-allocs              9837453
;  :num-checks              1523
;  :propagations            506
;  :quant-instantiations    211
;  :rlimit-count            496427)
; [eval] diz != null
(declare-const $k@274@04 $Perm)
(assert ($Perm.isReadVar $k@274@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@274@04 $Perm.No) (< $Perm.No $k@274@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      633
;  :arith-assert-upper      620
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7457
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1524
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496626)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@258@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      633
;  :arith-assert-upper      620
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1262
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7457
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1525
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496637)
(assert (< $k@274@04 $k@258@04))
(assert (<= $Perm.No (- $k@258@04 $k@274@04)))
(assert (<= (- $k@258@04 $k@274@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@258@04 $k@274@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1526
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496845)
(set-option :timeout 0)
(push) ; 13
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1263
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1527
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496863)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))
    $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1528
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496931)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1264
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1529
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496950)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1530
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            496998)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1265
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1531
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497017)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1532
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497065)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1266
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1533
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497084)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1534
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497132)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1267
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1535
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497151)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1536
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497199)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      635
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1268
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7460
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1537
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497218)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@275@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 84 | 0 <= i@275@04 | live]
; [else-branch: 84 | !(0 <= i@275@04) | live]
(push) ; 15
; [then-branch: 84 | 0 <= i@275@04]
(assert (<= 0 i@275@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      636
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7461
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1538
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497319)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      636
;  :arith-assert-upper      621
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1269
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7461
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1539
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497338)
(pop) ; 15
(push) ; 15
; [else-branch: 84 | !(0 <= i@275@04)]
(assert (not (<= 0 i@275@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 85 | i@275@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i@275@04 | live]
; [else-branch: 85 | !(i@275@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i@275@04) | live]
(push) ; 15
; [then-branch: 85 | i@275@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i@275@04]
(assert (and
  (<
    i@275@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
  (<= 0 i@275@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      637
;  :arith-assert-upper      622
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7463
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1540
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497495)
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      637
;  :arith-assert-upper      622
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7463
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1541
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497514)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@275@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      193
;  :arith-assert-lower      637
;  :arith-assert-upper      622
;  :arith-conflicts         230
;  :arith-eq-adapter        270
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1270
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7463
;  :mk-clause               754
;  :num-allocs              9837453
;  :num-checks              1542
;  :propagations            507
;  :quant-instantiations    211
;  :rlimit-count            497523)
; [eval] -1
(push) ; 16
; [then-branch: 86 | First:(Second:(Second:(Second:($t@251@04))))[i@275@04] == -1 | live]
; [else-branch: 86 | First:(Second:(Second:(Second:($t@251@04))))[i@275@04] != -1 | live]
(push) ; 17
; [then-branch: 86 | First:(Second:(Second:(Second:($t@251@04))))[i@275@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i@275@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 86 | First:(Second:(Second:(Second:($t@251@04))))[i@275@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
      i@275@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1543
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            497794)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1544
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            497813)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@275@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1271
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1545
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            497822)
(push) ; 18
; [then-branch: 87 | 0 <= First:(Second:(Second:(Second:($t@251@04))))[i@275@04] | live]
; [else-branch: 87 | !(0 <= First:(Second:(Second:(Second:($t@251@04))))[i@275@04]) | live]
(push) ; 19
; [then-branch: 87 | 0 <= First:(Second:(Second:(Second:($t@251@04))))[i@275@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i@275@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1546
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            497975)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1547
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            497994)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@275@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1272
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1548
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            498003)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1549
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            498051)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      194
;  :arith-assert-lower      640
;  :arith-assert-upper      623
;  :arith-conflicts         230
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1273
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              677
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7469
;  :mk-clause               758
;  :num-allocs              9837453
;  :num-checks              1550
;  :propagations            509
;  :quant-instantiations    212
;  :rlimit-count            498070)
(pop) ; 19
(push) ; 19
; [else-branch: 87 | !(0 <= First:(Second:(Second:(Second:($t@251@04))))[i@275@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
      i@275@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 85 | !(i@275@04 < |First:(Second:(Second:(Second:($t@251@04))))| && 0 <= i@275@04)]
(assert (not
  (and
    (<
      i@275@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
    (<= 0 i@275@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i@275@04 Int)) (!
  (implies
    (and
      (<
        i@275@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
      (<= 0 i@275@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
          i@275@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i@275@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i@275@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i@275@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      196
;  :arith-assert-lower      641
;  :arith-assert-upper      624
;  :arith-conflicts         230
;  :arith-eq-adapter        272
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1274
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7477
;  :mk-clause               772
;  :num-allocs              9837453
;  :num-checks              1551
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            498516)
(assert (forall ((i@275@04 Int)) (!
  (implies
    (and
      (<
        i@275@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))
      (<= 0 i@275@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
          i@275@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i@275@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
            i@275@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))
    i@275@04))
  :qid |prog.l<no position>|)))
(declare-const $k@276@04 $Perm)
(assert ($Perm.isReadVar $k@276@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      643
;  :arith-assert-upper      625
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1275
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7482
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1552
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499074)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@276@04 $Perm.No) (< $Perm.No $k@276@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      643
;  :arith-assert-upper      625
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7482
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1553
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499124)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      643
;  :arith-assert-upper      625
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7482
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1554
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499143)
(push) ; 13
(assert (not (not (= $k@254@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      643
;  :arith-assert-upper      625
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            236
;  :binary-propagations     22
;  :conflicts               1276
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7482
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1555
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499154)
(assert (< $k@276@04 $k@254@04))
(assert (<= $Perm.No (- $k@254@04 $k@276@04)))
(assert (<= (- $k@254@04 $k@276@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@254@04 $k@276@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1556
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499368)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1277
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1557
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499387)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1278
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1558
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499435)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1559
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499483)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1279
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1560
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499502)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1280
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1561
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499550)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1562
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499598)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1281
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1563
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499617)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1282
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1564
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499665)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1565
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499713)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1283
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1566
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499732)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1284
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1567
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499780)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1568
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499828)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1285
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1569
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499847)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1286
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1570
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499895)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1571
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499943)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1287
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1572
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            499962)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1288
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1573
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500010)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1574
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500058)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1289
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1575
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500077)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1290
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1576
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500125)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1291
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1577
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500173)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1291
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1578
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500192)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1292
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1579
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500240)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1580
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500288)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1293
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1581
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500307)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1294
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1582
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500355)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1583
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500403)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1295
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1584
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500422)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1296
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1585
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500470)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1586
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500518)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1297
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1587
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500537)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      197
;  :arith-assert-lower      645
;  :arith-assert-upper      626
;  :arith-conflicts         230
;  :arith-eq-adapter        273
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1298
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7485
;  :mk-clause               774
;  :num-allocs              9837453
;  :num-checks              1588
;  :propagations            512
;  :quant-instantiations    213
;  :rlimit-count            500585)
(declare-const $k@277@04 $Perm)
(assert ($Perm.isReadVar $k@277@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      647
;  :arith-assert-upper      627
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1299
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7489
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1589
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            500782)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@277@04 $Perm.No) (< $Perm.No $k@277@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      647
;  :arith-assert-upper      627
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7489
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1590
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            500832)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      647
;  :arith-assert-upper      627
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7489
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1591
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            500851)
(push) ; 13
(assert (not (not (= $k@255@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      647
;  :arith-assert-upper      627
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1300
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7489
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1592
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            500862)
(assert (< $k@277@04 $k@255@04))
(assert (<= $Perm.No (- $k@255@04 $k@277@04)))
(assert (<= (- $k@255@04 $k@277@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@255@04 $k@277@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1593
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501070)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1301
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1594
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501089)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1302
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1595
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501137)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1596
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501185)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1303
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1597
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501204)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1304
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1598
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501252)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1599
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501300)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1305
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1600
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501319)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1306
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1601
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501367)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1602
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501415)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1307
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1603
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501434)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1308
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1604
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501482)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1605
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501530)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1309
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1606
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501549)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1310
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1607
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501597)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1608
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501645)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1311
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1609
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501664)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1312
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1610
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501712)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1611
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501760)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1313
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1612
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501779)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1314
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1613
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501827)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1614
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501875)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1315
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1615
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501894)
(push) ; 13
(assert (not (< $Perm.No $k@255@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      198
;  :arith-assert-lower      649
;  :arith-assert-upper      628
;  :arith-conflicts         230
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1316
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7492
;  :mk-clause               776
;  :num-allocs              9837453
;  :num-checks              1616
;  :propagations            513
;  :quant-instantiations    213
;  :rlimit-count            501942)
(declare-const $k@278@04 $Perm)
(assert ($Perm.isReadVar $k@278@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      651
;  :arith-assert-upper      629
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1317
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7496
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1617
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502139)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@278@04 $Perm.No) (< $Perm.No $k@278@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      651
;  :arith-assert-upper      629
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7496
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1618
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502189)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      651
;  :arith-assert-upper      629
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7496
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1619
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502208)
(push) ; 13
(assert (not (not (= $k@256@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      651
;  :arith-assert-upper      629
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            237
;  :binary-propagations     22
;  :conflicts               1318
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7496
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1620
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502219)
(assert (< $k@278@04 $k@256@04))
(assert (<= $Perm.No (- $k@256@04 $k@278@04)))
(assert (<= (- $k@256@04 $k@278@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@256@04 $k@278@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1621
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502433)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1319
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1622
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502452)
(push) ; 13
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1320
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1623
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502500)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1624
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502548)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1321
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1625
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502567)
(push) ; 13
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1322
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1626
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502615)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1627
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502663)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1323
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1628
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502682)
(push) ; 13
(assert (not (< $Perm.No $k@256@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      199
;  :arith-assert-lower      653
;  :arith-assert-upper      630
;  :arith-conflicts         230
;  :arith-eq-adapter        275
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1324
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7499
;  :mk-clause               778
;  :num-allocs              9837453
;  :num-checks              1629
;  :propagations            514
;  :quant-instantiations    213
;  :rlimit-count            502730)
(declare-const $k@279@04 $Perm)
(assert ($Perm.isReadVar $k@279@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      655
;  :arith-assert-upper      631
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1325
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7503
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1630
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            502926)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@279@04 $Perm.No) (< $Perm.No $k@279@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      655
;  :arith-assert-upper      631
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7503
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1631
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            502976)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      655
;  :arith-assert-upper      631
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7503
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1632
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            502995)
(push) ; 13
(assert (not (not (= $k@257@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      655
;  :arith-assert-upper      631
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            238
;  :binary-propagations     22
;  :conflicts               1326
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7503
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1633
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503006)
(assert (< $k@279@04 $k@257@04))
(assert (<= $Perm.No (- $k@257@04 $k@279@04)))
(assert (<= (- $k@257@04 $k@279@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@257@04 $k@279@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1634
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503220)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1327
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1635
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503239)
(push) ; 13
(assert (not (< $Perm.No $k@257@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1328
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1636
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503287)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1637
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503335)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1329
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1638
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503354)
(push) ; 13
(assert (not (< $Perm.No $k@257@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      200
;  :arith-assert-lower      657
;  :arith-assert-upper      632
;  :arith-conflicts         230
;  :arith-eq-adapter        276
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1330
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7506
;  :mk-clause               780
;  :num-allocs              9837453
;  :num-checks              1639
;  :propagations            515
;  :quant-instantiations    213
;  :rlimit-count            503402)
(declare-const $k@280@04 $Perm)
(assert ($Perm.isReadVar $k@280@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      659
;  :arith-assert-upper      633
;  :arith-conflicts         230
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7510
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1640
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            503598)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      659
;  :arith-assert-upper      633
;  :arith-conflicts         230
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1331
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7510
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1641
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            503617)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      659
;  :arith-assert-upper      633
;  :arith-conflicts         230
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1332
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7510
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1642
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            503665)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@280@04 $Perm.No) (< $Perm.No $k@280@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      659
;  :arith-assert-upper      633
;  :arith-conflicts         230
;  :arith-eq-adapter        277
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1333
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7510
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1643
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            503715)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= (- $k@258@04 $k@274@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      659
;  :arith-assert-upper      633
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            239
;  :binary-propagations     22
;  :conflicts               1334
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7511
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1644
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            503783)
(assert (< $k@280@04 (- $k@258@04 $k@274@04)))
(assert (<= $Perm.No (- (- $k@258@04 $k@274@04) $k@280@04)))
(assert (<= (- (- $k@258@04 $k@274@04) $k@280@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- $k@258@04 $k@274@04) $k@280@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1645
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504022)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1335
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1646
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504041)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1336
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1647
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504089)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1337
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1648
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504137)
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1338
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1649
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504185)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (< $Perm.No $k@258@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1650
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504233)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1339
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1651
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504252)
(push) ; 13
(assert (not (< $Perm.No $k@254@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20316
;  :arith-add-rows          124
;  :arith-assert-diseq      201
;  :arith-assert-lower      661
;  :arith-assert-upper      634
;  :arith-conflicts         230
;  :arith-eq-adapter        278
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1340
;  :datatype-accessor-ax    742
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7514
;  :mk-clause               782
;  :num-allocs              9837453
;  :num-checks              1652
;  :propagations            516
;  :quant-instantiations    213
;  :rlimit-count            504300)
(declare-const sys__result@281@04 Int)
(declare-const $t@282@04 $Snap)
(assert (= $t@282@04 ($Snap.combine ($Snap.first $t@282@04) ($Snap.second $t@282@04))))
(declare-const $k@283@04 $Perm)
(assert ($Perm.isReadVar $k@283@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@283@04 $Perm.No) (< $Perm.No $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20321
;  :arith-add-rows          124
;  :arith-assert-diseq      202
;  :arith-assert-lower      663
;  :arith-assert-upper      635
;  :arith-conflicts         230
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         226
;  :arith-pivots            240
;  :binary-propagations     22
;  :conflicts               1341
;  :datatype-accessor-ax    743
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7519
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1653
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            504586)
(declare-const $t@284@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (- $k@258@04 $k@274@04) $k@280@04))
    (=
      $t@284@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@283@04)
    (= $t@284@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@282@04))))))
(assert (<= $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)))
(assert (<= (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@282@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@282@04))
    ($Snap.second ($Snap.second $t@282@04)))))
(assert (= ($Snap.first ($Snap.second $t@282@04)) $Snap.unit))
; [eval] diz.Rng_m != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20331
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      664
;  :arith-assert-upper      637
;  :arith-conflicts         231
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         227
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1342
;  :datatype-accessor-ax    744
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7527
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1654
;  :propagations            517
;  :quant-instantiations    214
;  :rlimit-count            505126)
(assert (not (= $t@284@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@282@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@282@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20337
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      664
;  :arith-assert-upper      638
;  :arith-conflicts         232
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         228
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1343
;  :datatype-accessor-ax    745
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7530
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1655
;  :propagations            517
;  :quant-instantiations    214
;  :rlimit-count            505386)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@282@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20342
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      664
;  :arith-assert-upper      639
;  :arith-conflicts         233
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         229
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1344
;  :datatype-accessor-ax    746
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7532
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1656
;  :propagations            517
;  :quant-instantiations    214
;  :rlimit-count            505611)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20348
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      664
;  :arith-assert-upper      640
;  :arith-conflicts         234
;  :arith-eq-adapter        279
;  :arith-fixed-eqs         230
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1345
;  :datatype-accessor-ax    747
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7535
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1657
;  :propagations            517
;  :quant-instantiations    214
;  :rlimit-count            505878)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20355
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      666
;  :arith-assert-upper      642
;  :arith-conflicts         235
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         231
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1346
;  :datatype-accessor-ax    748
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7542
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1658
;  :propagations            517
;  :quant-instantiations    216
;  :rlimit-count            506256)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20361
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      666
;  :arith-assert-upper      643
;  :arith-conflicts         236
;  :arith-eq-adapter        280
;  :arith-fixed-eqs         232
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1347
;  :datatype-accessor-ax    749
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7545
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1659
;  :propagations            517
;  :quant-instantiations    216
;  :rlimit-count            506543)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@285@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 88 | 0 <= i@285@04 | live]
; [else-branch: 88 | !(0 <= i@285@04) | live]
(push) ; 15
; [then-branch: 88 | 0 <= i@285@04]
(assert (<= 0 i@285@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      669
;  :arith-assert-upper      645
;  :arith-conflicts         237
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         233
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1348
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7554
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1660
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507030)
(pop) ; 15
(push) ; 15
; [else-branch: 88 | !(0 <= i@285@04)]
(assert (not (<= 0 i@285@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 89 | i@285@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@285@04 | live]
; [else-branch: 89 | !(i@285@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@285@04) | live]
(push) ; 15
; [then-branch: 89 | i@285@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@285@04]
(assert (and
  (<
    i@285@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
  (<= 0 i@285@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      670
;  :arith-assert-upper      647
;  :arith-conflicts         238
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         234
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7557
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1661
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507235)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@285@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      670
;  :arith-assert-upper      647
;  :arith-conflicts         238
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         234
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1349
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7557
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1662
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507244)
; [eval] -1
(push) ; 16
; [then-branch: 90 | First:(Second:(Second:(Second:($t@282@04))))[i@285@04] == -1 | live]
; [else-branch: 90 | First:(Second:(Second:(Second:($t@282@04))))[i@285@04] != -1 | live]
(push) ; 17
; [then-branch: 90 | First:(Second:(Second:(Second:($t@282@04))))[i@285@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@285@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 90 | First:(Second:(Second:(Second:($t@282@04))))[i@285@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
      i@285@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      670
;  :arith-assert-upper      648
;  :arith-conflicts         239
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         235
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7559
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1663
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507506)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@285@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      202
;  :arith-assert-lower      670
;  :arith-assert-upper      648
;  :arith-conflicts         239
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         235
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1350
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7559
;  :mk-clause               784
;  :num-allocs              9837453
;  :num-checks              1664
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507515)
(push) ; 18
; [then-branch: 91 | 0 <= First:(Second:(Second:(Second:($t@282@04))))[i@285@04] | live]
; [else-branch: 91 | !(0 <= First:(Second:(Second:(Second:($t@282@04))))[i@285@04]) | live]
(push) ; 19
; [then-branch: 91 | 0 <= First:(Second:(Second:(Second:($t@282@04))))[i@285@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@285@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      203
;  :arith-assert-lower      673
;  :arith-assert-upper      649
;  :arith-conflicts         240
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         236
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7563
;  :mk-clause               785
;  :num-allocs              9837453
;  :num-checks              1665
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507726)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@285@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      203
;  :arith-assert-lower      673
;  :arith-assert-upper      649
;  :arith-conflicts         240
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         236
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1351
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7563
;  :mk-clause               785
;  :num-allocs              9837453
;  :num-checks              1666
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507735)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20369
;  :arith-add-rows          125
;  :arith-assert-diseq      203
;  :arith-assert-lower      673
;  :arith-assert-upper      650
;  :arith-conflicts         241
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         237
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1352
;  :datatype-accessor-ax    750
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              695
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7564
;  :mk-clause               785
;  :num-allocs              9837453
;  :num-checks              1667
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            507831)
(pop) ; 19
(push) ; 19
; [else-branch: 91 | !(0 <= First:(Second:(Second:(Second:($t@282@04))))[i@285@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
      i@285@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 89 | !(i@285@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@285@04)]
(assert (not
  (and
    (<
      i@285@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
    (<= 0 i@285@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@285@04 Int)) (!
  (implies
    (and
      (<
        i@285@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
      (<= 0 i@285@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
          i@285@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@285@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@285@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@285@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20374
;  :arith-add-rows          125
;  :arith-assert-diseq      203
;  :arith-assert-lower      673
;  :arith-assert-upper      651
;  :arith-conflicts         242
;  :arith-eq-adapter        282
;  :arith-fixed-eqs         238
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1353
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7567
;  :mk-clause               785
;  :num-allocs              9837453
;  :num-checks              1668
;  :propagations            517
;  :quant-instantiations    218
;  :rlimit-count            508504)
(declare-const $k@286@04 $Perm)
(assert ($Perm.isReadVar $k@286@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@286@04 $Perm.No) (< $Perm.No $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20374
;  :arith-add-rows          125
;  :arith-assert-diseq      204
;  :arith-assert-lower      675
;  :arith-assert-upper      652
;  :arith-conflicts         242
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         238
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7571
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1669
;  :propagations            518
;  :quant-instantiations    218
;  :rlimit-count            508702)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20374
;  :arith-add-rows          125
;  :arith-assert-diseq      204
;  :arith-assert-lower      675
;  :arith-assert-upper      652
;  :arith-conflicts         242
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         238
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1354
;  :datatype-accessor-ax    751
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7571
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1670
;  :propagations            518
;  :quant-instantiations    218
;  :rlimit-count            508713)
(declare-const $t@287@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@254@04 $k@276@04))
    (=
      $t@287@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
  (implies
    (< $Perm.No $k@286@04)
    (=
      $t@287@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))
(assert (<= $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04)))
(assert (<= (+ (- $k@254@04 $k@276@04) $k@286@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20384
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      654
;  :arith-conflicts         243
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         239
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7579
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1671
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509317)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20384
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      654
;  :arith-conflicts         243
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         239
;  :arith-pivots            241
;  :binary-propagations     22
;  :conflicts               1355
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7579
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1672
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509328)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20384
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      655
;  :arith-conflicts         244
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         240
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1356
;  :datatype-accessor-ax    752
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7580
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1673
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509412)
(assert (not (= $t@287@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20390
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      656
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         241
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7583
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1674
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509752)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20390
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      656
;  :arith-conflicts         245
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         241
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1357
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7583
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1675
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509763)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20390
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      657
;  :arith-conflicts         246
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         242
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1358
;  :datatype-accessor-ax    753
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7584
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1676
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            509843)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20395
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      658
;  :arith-conflicts         247
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         243
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7586
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1677
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510148)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20395
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      658
;  :arith-conflicts         247
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         243
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1359
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7586
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1678
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510159)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20395
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      659
;  :arith-conflicts         248
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         244
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1360
;  :datatype-accessor-ax    754
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7587
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1679
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510239)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20400
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      660
;  :arith-conflicts         249
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         245
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7589
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1680
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510554)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20400
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      660
;  :arith-conflicts         249
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         245
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1361
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7589
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1681
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510565)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20400
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      661
;  :arith-conflicts         250
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         246
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1362
;  :datatype-accessor-ax    755
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7590
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1682
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510645)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20405
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      662
;  :arith-conflicts         251
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         247
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7592
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1683
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510970)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20405
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      662
;  :arith-conflicts         251
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         247
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1363
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7592
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1684
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            510981)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20405
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      663
;  :arith-conflicts         252
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         248
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1364
;  :datatype-accessor-ax    756
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7593
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1685
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511061)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20410
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      664
;  :arith-conflicts         253
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         249
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7595
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1686
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511396)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20410
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      664
;  :arith-conflicts         253
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         249
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1365
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7595
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1687
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511407)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20410
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      665
;  :arith-conflicts         254
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         250
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1366
;  :datatype-accessor-ax    757
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7596
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1688
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511487)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20415
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      666
;  :arith-conflicts         255
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         251
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7598
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1689
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511832)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20415
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      666
;  :arith-conflicts         255
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         251
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1367
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7598
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1690
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511843)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20415
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      667
;  :arith-conflicts         256
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         252
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1368
;  :datatype-accessor-ax    758
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7599
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1691
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            511923)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20420
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      668
;  :arith-conflicts         257
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         253
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7601
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1692
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512278)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20420
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      668
;  :arith-conflicts         257
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         253
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1369
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7601
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1693
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512289)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20420
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      669
;  :arith-conflicts         258
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         254
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1370
;  :datatype-accessor-ax    759
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7602
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1694
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512369)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20425
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      670
;  :arith-conflicts         259
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         255
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7604
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1695
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512734)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20425
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      670
;  :arith-conflicts         259
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         255
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1371
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7604
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1696
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512745)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20425
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      671
;  :arith-conflicts         260
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         256
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1372
;  :datatype-accessor-ax    760
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7605
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1697
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            512825)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20430
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      672
;  :arith-conflicts         261
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         257
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7607
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1698
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513200)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20430
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      672
;  :arith-conflicts         261
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         257
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1373
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7607
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1699
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513211)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20430
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      673
;  :arith-conflicts         262
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         258
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1374
;  :datatype-accessor-ax    761
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7608
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1700
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513291)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20435
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      674
;  :arith-conflicts         263
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         259
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7610
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1701
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513676)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20435
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      674
;  :arith-conflicts         263
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         259
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1375
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7610
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1702
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513687)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20435
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      675
;  :arith-conflicts         264
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         260
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1376
;  :datatype-accessor-ax    762
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7611
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1703
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            513767)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20440
;  :arith-add-rows          126
;  :arith-assert-diseq      204
;  :arith-assert-lower      676
;  :arith-assert-upper      676
;  :arith-conflicts         265
;  :arith-eq-adapter        283
;  :arith-fixed-eqs         261
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1377
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7613
;  :mk-clause               787
;  :num-allocs              9837453
;  :num-checks              1704
;  :propagations            518
;  :quant-instantiations    219
;  :rlimit-count            514162)
(declare-const $k@288@04 $Perm)
(assert ($Perm.isReadVar $k@288@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@288@04 $Perm.No) (< $Perm.No $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20440
;  :arith-add-rows          126
;  :arith-assert-diseq      205
;  :arith-assert-lower      678
;  :arith-assert-upper      677
;  :arith-conflicts         265
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         261
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7617
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1705
;  :propagations            519
;  :quant-instantiations    219
;  :rlimit-count            514360)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20440
;  :arith-add-rows          126
;  :arith-assert-diseq      205
;  :arith-assert-lower      678
;  :arith-assert-upper      677
;  :arith-conflicts         265
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         261
;  :arith-pivots            242
;  :binary-propagations     22
;  :conflicts               1378
;  :datatype-accessor-ax    763
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7617
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1706
;  :propagations            519
;  :quant-instantiations    219
;  :rlimit-count            514371)
(declare-const $t@289@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@255@04 $k@277@04))
    (=
      $t@289@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@288@04)
    (=
      $t@289@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04)))
(assert (<= (+ (- $k@255@04 $k@277@04) $k@288@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20450
;  :arith-add-rows          126
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      679
;  :arith-conflicts         266
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         262
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7625
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1707
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            515333)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20450
;  :arith-add-rows          126
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      679
;  :arith-conflicts         266
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         262
;  :arith-pivots            243
;  :binary-propagations     22
;  :conflicts               1379
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7625
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1708
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            515344)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20450
;  :arith-add-rows          127
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      680
;  :arith-conflicts         267
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         263
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1380
;  :datatype-accessor-ax    764
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7626
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1709
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            515453)
(assert (not (= $t@289@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20456
;  :arith-add-rows          127
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      681
;  :arith-conflicts         268
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         264
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7629
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1710
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            515913)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20456
;  :arith-add-rows          127
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      681
;  :arith-conflicts         268
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         264
;  :arith-pivots            245
;  :binary-propagations     22
;  :conflicts               1381
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7629
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1711
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            515924)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20456
;  :arith-add-rows          128
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      682
;  :arith-conflicts         269
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         265
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               1382
;  :datatype-accessor-ax    765
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7630
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1712
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            516037)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20461
;  :arith-add-rows          128
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      683
;  :arith-conflicts         270
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         266
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    766
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7632
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1713
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            516462)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20461
;  :arith-add-rows          128
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      683
;  :arith-conflicts         270
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         266
;  :arith-pivots            248
;  :binary-propagations     22
;  :conflicts               1383
;  :datatype-accessor-ax    766
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7632
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1714
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            516473)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20461
;  :arith-add-rows          129
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      684
;  :arith-conflicts         271
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         267
;  :arith-pivots            250
;  :binary-propagations     22
;  :conflicts               1384
;  :datatype-accessor-ax    766
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7633
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1715
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            516581)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20466
;  :arith-add-rows          129
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      685
;  :arith-conflicts         272
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         268
;  :arith-pivots            250
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    767
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7635
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1716
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517016)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20466
;  :arith-add-rows          129
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      685
;  :arith-conflicts         272
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         268
;  :arith-pivots            250
;  :binary-propagations     22
;  :conflicts               1385
;  :datatype-accessor-ax    767
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7635
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1717
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517027)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20466
;  :arith-add-rows          130
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      686
;  :arith-conflicts         273
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         269
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               1386
;  :datatype-accessor-ax    767
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7636
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1718
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517140)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20471
;  :arith-add-rows          130
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      687
;  :arith-conflicts         274
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         270
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7638
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1719
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517585)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20471
;  :arith-add-rows          130
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      687
;  :arith-conflicts         274
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         270
;  :arith-pivots            253
;  :binary-propagations     22
;  :conflicts               1387
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7638
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1720
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517596)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20471
;  :arith-add-rows          131
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      688
;  :arith-conflicts         275
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         271
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               1388
;  :datatype-accessor-ax    768
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7639
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1721
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            517704)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20476
;  :arith-add-rows          131
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      689
;  :arith-conflicts         276
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         272
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               1389
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7641
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1722
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518159)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20476
;  :arith-add-rows          131
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      689
;  :arith-conflicts         276
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         272
;  :arith-pivots            255
;  :binary-propagations     22
;  :conflicts               1389
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7641
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1723
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518170)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20476
;  :arith-add-rows          132
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      690
;  :arith-conflicts         277
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         273
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               1390
;  :datatype-accessor-ax    769
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7642
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1724
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518283)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20481
;  :arith-add-rows          132
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      691
;  :arith-conflicts         278
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         274
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               1391
;  :datatype-accessor-ax    770
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7644
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1725
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518748)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20481
;  :arith-add-rows          132
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      691
;  :arith-conflicts         278
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         274
;  :arith-pivots            258
;  :binary-propagations     22
;  :conflicts               1391
;  :datatype-accessor-ax    770
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7644
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1726
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518759)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20481
;  :arith-add-rows          133
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      692
;  :arith-conflicts         279
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         275
;  :arith-pivots            260
;  :binary-propagations     22
;  :conflicts               1392
;  :datatype-accessor-ax    770
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7645
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1727
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            518867)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20486
;  :arith-add-rows          133
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      693
;  :arith-conflicts         280
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         276
;  :arith-pivots            260
;  :binary-propagations     22
;  :conflicts               1393
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7647
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1728
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            519342)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20486
;  :arith-add-rows          133
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      693
;  :arith-conflicts         280
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         276
;  :arith-pivots            260
;  :binary-propagations     22
;  :conflicts               1393
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7647
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1729
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            519353)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20486
;  :arith-add-rows          134
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      694
;  :arith-conflicts         281
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         277
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1394
;  :datatype-accessor-ax    771
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7648
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1730
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            519466)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20491
;  :arith-add-rows          134
;  :arith-assert-diseq      205
;  :arith-assert-lower      679
;  :arith-assert-upper      695
;  :arith-conflicts         282
;  :arith-eq-adapter        284
;  :arith-fixed-eqs         278
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1395
;  :datatype-accessor-ax    772
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7650
;  :mk-clause               789
;  :num-allocs              9837453
;  :num-checks              1731
;  :propagations            519
;  :quant-instantiations    220
;  :rlimit-count            519951
;  :time                    0.00)
(declare-const $k@290@04 $Perm)
(assert ($Perm.isReadVar $k@290@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@290@04 $Perm.No) (< $Perm.No $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20491
;  :arith-add-rows          134
;  :arith-assert-diseq      206
;  :arith-assert-lower      681
;  :arith-assert-upper      696
;  :arith-conflicts         282
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         278
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    772
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7654
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1732
;  :propagations            520
;  :quant-instantiations    220
;  :rlimit-count            520149)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20491
;  :arith-add-rows          134
;  :arith-assert-diseq      206
;  :arith-assert-lower      681
;  :arith-assert-upper      696
;  :arith-conflicts         282
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         278
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1396
;  :datatype-accessor-ax    772
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7654
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1733
;  :propagations            520
;  :quant-instantiations    220
;  :rlimit-count            520160)
(declare-const $t@291@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@256@04 $k@278@04))
    (=
      $t@291@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@290@04)
    (=
      $t@291@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04)))
(assert (<= (+ (- $k@256@04 $k@278@04) $k@290@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20501
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      698
;  :arith-conflicts         283
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         279
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1397
;  :datatype-accessor-ax    773
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7662
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1734
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            521290)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20501
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      698
;  :arith-conflicts         283
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         279
;  :arith-pivots            263
;  :binary-propagations     22
;  :conflicts               1397
;  :datatype-accessor-ax    773
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7662
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1735
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            521301)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20501
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      699
;  :arith-conflicts         284
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         280
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1398
;  :datatype-accessor-ax    773
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7663
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1736
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            521385)
(assert (not (= $t@291@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20507
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      700
;  :arith-conflicts         285
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         281
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1399
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7666
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1737
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            521935)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20507
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      700
;  :arith-conflicts         285
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         281
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1399
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7666
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1738
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            521946)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20507
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      701
;  :arith-conflicts         286
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         282
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1400
;  :datatype-accessor-ax    774
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7667
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1739
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            522026)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20512
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      702
;  :arith-conflicts         287
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         283
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    775
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7669
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1740
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            522541)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20512
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      702
;  :arith-conflicts         287
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         283
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1401
;  :datatype-accessor-ax    775
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7669
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1741
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            522552)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20512
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      703
;  :arith-conflicts         288
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         284
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1402
;  :datatype-accessor-ax    775
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7670
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1742
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            522632)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20517
;  :arith-add-rows          135
;  :arith-assert-diseq      206
;  :arith-assert-lower      682
;  :arith-assert-upper      704
;  :arith-conflicts         289
;  :arith-eq-adapter        285
;  :arith-fixed-eqs         285
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1403
;  :datatype-accessor-ax    776
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7672
;  :mk-clause               791
;  :num-allocs              9837453
;  :num-checks              1743
;  :propagations            520
;  :quant-instantiations    221
;  :rlimit-count            523157)
(declare-const $k@292@04 $Perm)
(assert ($Perm.isReadVar $k@292@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@292@04 $Perm.No) (< $Perm.No $k@292@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20517
;  :arith-add-rows          135
;  :arith-assert-diseq      207
;  :arith-assert-lower      684
;  :arith-assert-upper      705
;  :arith-conflicts         289
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         285
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    776
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7676
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1744
;  :propagations            521
;  :quant-instantiations    221
;  :rlimit-count            523355)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20517
;  :arith-add-rows          135
;  :arith-assert-diseq      207
;  :arith-assert-lower      684
;  :arith-assert-upper      705
;  :arith-conflicts         289
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         285
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1404
;  :datatype-accessor-ax    776
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7676
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1745
;  :propagations            521
;  :quant-instantiations    221
;  :rlimit-count            523366)
(declare-const $t@293@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@257@04 $k@279@04))
    (=
      $t@293@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04)))))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@292@04)
    (=
      $t@293@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04)))
(assert (<= (+ (- $k@257@04 $k@279@04) $k@292@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20527
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      707
;  :arith-conflicts         290
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         286
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1405
;  :datatype-accessor-ax    777
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7684
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1746
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524222)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20527
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      707
;  :arith-conflicts         290
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         286
;  :arith-pivots            264
;  :binary-propagations     22
;  :conflicts               1405
;  :datatype-accessor-ax    777
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7684
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1747
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524233)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20527
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      708
;  :arith-conflicts         291
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         287
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1406
;  :datatype-accessor-ax    777
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7685
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1748
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524317)
(assert (not (= $t@293@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20532
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      709
;  :arith-conflicts         292
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         288
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1407
;  :datatype-accessor-ax    778
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7687
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1749
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524880)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20532
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      709
;  :arith-conflicts         292
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         288
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1407
;  :datatype-accessor-ax    778
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7687
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1750
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524891)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20532
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      710
;  :arith-conflicts         293
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         289
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1408
;  :datatype-accessor-ax    778
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7688
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1751
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            524971)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20537
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      711
;  :arith-conflicts         294
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         290
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1409
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7690
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1752
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            525526)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@284@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20537
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      711
;  :arith-conflicts         294
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         290
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1409
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7690
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1753
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            525537)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20537
;  :arith-add-rows          136
;  :arith-assert-diseq      207
;  :arith-assert-lower      685
;  :arith-assert-upper      712
;  :arith-conflicts         295
;  :arith-eq-adapter        286
;  :arith-fixed-eqs         291
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1410
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7691
;  :mk-clause               793
;  :num-allocs              9837453
;  :num-checks              1754
;  :propagations            521
;  :quant-instantiations    222
;  :rlimit-count            525617)
(declare-const $k@294@04 $Perm)
(assert ($Perm.isReadVar $k@294@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@294@04 $Perm.No) (< $Perm.No $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20537
;  :arith-add-rows          136
;  :arith-assert-diseq      208
;  :arith-assert-lower      687
;  :arith-assert-upper      713
;  :arith-conflicts         295
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         291
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1411
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7695
;  :mk-clause               795
;  :num-allocs              9837453
;  :num-checks              1755
;  :propagations            522
;  :quant-instantiations    222
;  :rlimit-count            525815)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20537
;  :arith-add-rows          136
;  :arith-assert-diseq      208
;  :arith-assert-lower      687
;  :arith-assert-upper      713
;  :arith-conflicts         295
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         291
;  :arith-pivots            265
;  :binary-propagations     22
;  :conflicts               1411
;  :datatype-accessor-ax    779
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7695
;  :mk-clause               795
;  :num-allocs              9837453
;  :num-checks              1756
;  :propagations            522
;  :quant-instantiations    222
;  :rlimit-count            525826)
(declare-const $t@295@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04))
    (= $t@295@04 $t@284@04))
  (implies
    (< $Perm.No $k@294@04)
    (=
      $t@295@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)))
(assert (<=
  (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20545
;  :arith-add-rows          139
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      715
;  :arith-conflicts         296
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         292
;  :arith-pivots            267
;  :binary-propagations     22
;  :conflicts               1412
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7704
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1757
;  :propagations            522
;  :quant-instantiations    223
;  :rlimit-count            526798)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20546
;  :arith-add-rows          140
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      716
;  :arith-conflicts         297
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         293
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               1413
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7705
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1758
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            526888)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20546
;  :arith-add-rows          140
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      717
;  :arith-conflicts         298
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         294
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7706
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1759
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            526968
;  :time                    0.00)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20546
;  :arith-add-rows          140
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      717
;  :arith-conflicts         298
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         294
;  :arith-pivots            268
;  :binary-propagations     22
;  :conflicts               1414
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7706
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1760
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            526979)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20546
;  :arith-add-rows          141
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      718
;  :arith-conflicts         299
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         295
;  :arith-pivots            269
;  :binary-propagations     22
;  :conflicts               1415
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7707
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1761
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            527100)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20546
;  :arith-add-rows          141
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      719
;  :arith-conflicts         300
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         296
;  :arith-pivots            269
;  :binary-propagations     22
;  :conflicts               1416
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7708
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1762
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            527201)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20548
;  :arith-add-rows          141
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      720
;  :arith-conflicts         301
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         297
;  :arith-pivots            269
;  :binary-propagations     22
;  :conflicts               1417
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7710
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1763
;  :propagations            523
;  :quant-instantiations    223
;  :rlimit-count            527720)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20549
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      721
;  :arith-conflicts         302
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         298
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1418
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7711
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1764
;  :propagations            524
;  :quant-instantiations    223
;  :rlimit-count            527810)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20549
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         299
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1419
;  :datatype-accessor-ax    780
;  :datatype-constructor-ax 5453
;  :datatype-occurs-check   985
;  :datatype-splits         4470
;  :decisions               5271
;  :del-clause              696
;  :final-checks            173
;  :max-generation          2
;  :max-memory              5.84
;  :memory                  5.84
;  :mk-bool-var             7712
;  :mk-clause               796
;  :num-allocs              9837453
;  :num-checks              1765
;  :propagations            524
;  :quant-instantiations    223
;  :rlimit-count            527890)
(assert (=
  $t@287@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_154__198 := diz.Combinate_m
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21300
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         299
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1421
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7847
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1767
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            531981)
(declare-const __flatten_154__198@296@04 $Ref)
(assert (= __flatten_154__198@296@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_156__200 := diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21301
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         299
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1422
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7848
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1768
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532066)
(declare-const __flatten_156__200@297@04 $Ref)
(assert (= __flatten_156__200@297@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [exec]
; __flatten_155__199 := __flatten_156__200.Main_rn
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_156__200@297@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      722
;  :arith-conflicts         303
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         299
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1422
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7849
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1769
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532114)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      723
;  :arith-conflicts         304
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         300
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7850
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1770
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532194)
; [exec]
; __flatten_157__201 := Rng_bit__EncodedGlobalVariables_Integer_Integer(__flatten_154__198.Main_rn, globals__176, __flatten_155__199.Rng_CASR_reg, diz.Combinate_i)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_154__198@296@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      723
;  :arith-conflicts         304
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         300
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1423
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7850
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1771
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532205)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         301
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7851
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1772
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532285)
(push) ; 13
(assert (not (= $t@293@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      208
;  :arith-assert-lower      688
;  :arith-assert-upper      724
;  :arith-conflicts         305
;  :arith-eq-adapter        287
;  :arith-fixed-eqs         301
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1424
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7851
;  :mk-clause               797
;  :num-allocs              10248348
;  :num-checks              1773
;  :propagations            528
;  :quant-instantiations    223
;  :rlimit-count            532296)
; [eval] diz != null
(declare-const $k@298@04 $Perm)
(assert ($Perm.isReadVar $k@298@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@298@04 $Perm.No) (< $Perm.No $k@298@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      209
;  :arith-assert-lower      690
;  :arith-assert-upper      725
;  :arith-conflicts         305
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         301
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7855
;  :mk-clause               799
;  :num-allocs              10248348
;  :num-checks              1774
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            532494)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21302
;  :arith-add-rows          142
;  :arith-assert-diseq      209
;  :arith-assert-lower      690
;  :arith-assert-upper      725
;  :arith-conflicts         305
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         301
;  :arith-pivots            270
;  :binary-propagations     22
;  :conflicts               1425
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              720
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7855
;  :mk-clause               799
;  :num-allocs              10248348
;  :num-checks              1775
;  :propagations            529
;  :quant-instantiations    223
;  :rlimit-count            532505)
(push) ; 13
(assert (not (not
  (= (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21303
;  :arith-add-rows          143
;  :arith-assert-diseq      209
;  :arith-assert-lower      690
;  :arith-assert-upper      726
;  :arith-conflicts         306
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         301
;  :arith-pivots            271
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7857
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1776
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            532624)
(assert (< $k@298@04 (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)))
(assert (<=
  $Perm.No
  (- (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04) $k@298@04)))
(assert (<=
  (- (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04) $k@298@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
      $k@298@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21303
;  :arith-add-rows          145
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      727
;  :arith-conflicts         306
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         301
;  :arith-pivots            271
;  :binary-propagations     22
;  :conflicts               1426
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7860
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1777
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            532843)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21303
;  :arith-add-rows          145
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      728
;  :arith-conflicts         307
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         302
;  :arith-pivots            271
;  :binary-propagations     22
;  :conflicts               1427
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7861
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1778
;  :propagations            530
;  :quant-instantiations    223
;  :rlimit-count            532945)
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= $t@295@04 $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21305
;  :arith-add-rows          146
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      729
;  :arith-conflicts         308
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         303
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               1428
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7862
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1779
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            533021)
(assert (not (= $t@295@04 $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21305
;  :arith-add-rows          146
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      729
;  :arith-conflicts         308
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         303
;  :arith-pivots            272
;  :binary-propagations     22
;  :conflicts               1428
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7863
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1780
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            533087)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21305
;  :arith-add-rows          147
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      730
;  :arith-conflicts         309
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         304
;  :arith-pivots            273
;  :binary-propagations     22
;  :conflicts               1429
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7864
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1781
;  :propagations            531
;  :quant-instantiations    223
;  :rlimit-count            533209)
(push) ; 13
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21306
;  :arith-add-rows          148
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      731
;  :arith-conflicts         310
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         305
;  :arith-pivots            274
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7865
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1782
;  :propagations            532
;  :quant-instantiations    223
;  :rlimit-count            533299)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21306
;  :arith-add-rows          148
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      731
;  :arith-conflicts         310
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         305
;  :arith-pivots            274
;  :binary-propagations     22
;  :conflicts               1430
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7865
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1783
;  :propagations            532
;  :quant-instantiations    223
;  :rlimit-count            533310)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21306
;  :arith-add-rows          149
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      732
;  :arith-conflicts         311
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         306
;  :arith-pivots            275
;  :binary-propagations     22
;  :conflicts               1431
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7866
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1784
;  :propagations            532
;  :quant-instantiations    223
;  :rlimit-count            533432)
(push) ; 13
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21307
;  :arith-add-rows          150
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      733
;  :arith-conflicts         312
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         307
;  :arith-pivots            276
;  :binary-propagations     22
;  :conflicts               1432
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7867
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1785
;  :propagations            533
;  :quant-instantiations    223
;  :rlimit-count            533522)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21307
;  :arith-add-rows          150
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      733
;  :arith-conflicts         312
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         307
;  :arith-pivots            276
;  :binary-propagations     22
;  :conflicts               1432
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7867
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1786
;  :propagations            533
;  :quant-instantiations    223
;  :rlimit-count            533533)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21307
;  :arith-add-rows          151
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      734
;  :arith-conflicts         313
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         308
;  :arith-pivots            277
;  :binary-propagations     22
;  :conflicts               1433
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7868
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1787
;  :propagations            533
;  :quant-instantiations    223
;  :rlimit-count            533655)
(push) ; 13
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21308
;  :arith-add-rows          152
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      735
;  :arith-conflicts         314
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         309
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7869
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1788
;  :propagations            534
;  :quant-instantiations    223
;  :rlimit-count            533745)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21308
;  :arith-add-rows          152
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      735
;  :arith-conflicts         314
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         309
;  :arith-pivots            278
;  :binary-propagations     22
;  :conflicts               1434
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7869
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1789
;  :propagations            534
;  :quant-instantiations    223
;  :rlimit-count            533756)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21308
;  :arith-add-rows          153
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      736
;  :arith-conflicts         315
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         310
;  :arith-pivots            279
;  :binary-propagations     22
;  :conflicts               1435
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7870
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1790
;  :propagations            534
;  :quant-instantiations    223
;  :rlimit-count            533878)
(push) ; 13
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21309
;  :arith-add-rows          154
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      737
;  :arith-conflicts         316
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         311
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7871
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1791
;  :propagations            535
;  :quant-instantiations    223
;  :rlimit-count            533968)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21309
;  :arith-add-rows          154
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      737
;  :arith-conflicts         316
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         311
;  :arith-pivots            280
;  :binary-propagations     22
;  :conflicts               1436
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7871
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1792
;  :propagations            535
;  :quant-instantiations    223
;  :rlimit-count            533979)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21309
;  :arith-add-rows          155
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      738
;  :arith-conflicts         317
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         312
;  :arith-pivots            281
;  :binary-propagations     22
;  :conflicts               1437
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7872
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1793
;  :propagations            535
;  :quant-instantiations    223
;  :rlimit-count            534101)
(push) ; 13
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21310
;  :arith-add-rows          156
;  :arith-assert-diseq      209
;  :arith-assert-lower      692
;  :arith-assert-upper      739
;  :arith-conflicts         318
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         313
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               1438
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7873
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1794
;  :propagations            536
;  :quant-instantiations    223
;  :rlimit-count            534191)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@299@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 92 | 0 <= i@299@04 | live]
; [else-branch: 92 | !(0 <= i@299@04) | live]
(push) ; 15
; [then-branch: 92 | 0 <= i@299@04]
(assert (<= 0 i@299@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21310
;  :arith-add-rows          156
;  :arith-assert-diseq      209
;  :arith-assert-lower      693
;  :arith-assert-upper      739
;  :arith-conflicts         318
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         313
;  :arith-pivots            282
;  :binary-propagations     22
;  :conflicts               1438
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7874
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1795
;  :propagations            536
;  :quant-instantiations    223
;  :rlimit-count            534254)
(push) ; 16
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21310
;  :arith-add-rows          157
;  :arith-assert-diseq      209
;  :arith-assert-lower      693
;  :arith-assert-upper      740
;  :arith-conflicts         319
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         314
;  :arith-pivots            283
;  :binary-propagations     22
;  :conflicts               1439
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7875
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1796
;  :propagations            536
;  :quant-instantiations    223
;  :rlimit-count            534376)
(push) ; 16
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21311
;  :arith-add-rows          158
;  :arith-assert-diseq      209
;  :arith-assert-lower      693
;  :arith-assert-upper      741
;  :arith-conflicts         320
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         315
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7876
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1797
;  :propagations            537
;  :quant-instantiations    223
;  :rlimit-count            534466)
(pop) ; 15
(push) ; 15
; [else-branch: 92 | !(0 <= i@299@04)]
(assert (not (<= 0 i@299@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 93 | i@299@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@299@04 | live]
; [else-branch: 93 | !(i@299@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@299@04) | live]
(push) ; 15
; [then-branch: 93 | i@299@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@299@04]
(assert (and
  (<
    i@299@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
  (<= 0 i@299@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21311
;  :arith-add-rows          158
;  :arith-assert-diseq      209
;  :arith-assert-lower      694
;  :arith-assert-upper      742
;  :arith-conflicts         320
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         315
;  :arith-pivots            284
;  :binary-propagations     22
;  :conflicts               1440
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7878
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1798
;  :propagations            537
;  :quant-instantiations    223
;  :rlimit-count            534586)
(push) ; 16
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21311
;  :arith-add-rows          159
;  :arith-assert-diseq      209
;  :arith-assert-lower      694
;  :arith-assert-upper      743
;  :arith-conflicts         321
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         316
;  :arith-pivots            285
;  :binary-propagations     22
;  :conflicts               1441
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7879
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1799
;  :propagations            537
;  :quant-instantiations    223
;  :rlimit-count            534708)
(push) ; 16
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21312
;  :arith-add-rows          160
;  :arith-assert-diseq      209
;  :arith-assert-lower      694
;  :arith-assert-upper      744
;  :arith-conflicts         322
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         317
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7880
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1800
;  :propagations            538
;  :quant-instantiations    223
;  :rlimit-count            534798)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@299@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21312
;  :arith-add-rows          160
;  :arith-assert-diseq      209
;  :arith-assert-lower      694
;  :arith-assert-upper      744
;  :arith-conflicts         322
;  :arith-eq-adapter        289
;  :arith-fixed-eqs         317
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7880
;  :mk-clause               801
;  :num-allocs              10248348
;  :num-checks              1801
;  :propagations            538
;  :quant-instantiations    223
;  :rlimit-count            534807)
; [eval] -1
(push) ; 16
; [then-branch: 94 | First:(Second:(Second:(Second:($t@282@04))))[i@299@04] == -1 | live]
; [else-branch: 94 | First:(Second:(Second:(Second:($t@282@04))))[i@299@04] != -1 | live]
(push) ; 17
; [then-branch: 94 | First:(Second:(Second:(Second:($t@282@04))))[i@299@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@299@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 94 | First:(Second:(Second:(Second:($t@282@04))))[i@299@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
      i@299@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21312
;  :arith-add-rows          160
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      745
;  :arith-conflicts         322
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         317
;  :arith-pivots            286
;  :binary-propagations     22
;  :conflicts               1442
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7886
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1802
;  :propagations            540
;  :quant-instantiations    224
;  :rlimit-count            535041)
(push) ; 18
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21312
;  :arith-add-rows          161
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      746
;  :arith-conflicts         323
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         318
;  :arith-pivots            287
;  :binary-propagations     22
;  :conflicts               1443
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7887
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1803
;  :propagations            540
;  :quant-instantiations    224
;  :rlimit-count            535163)
(push) ; 18
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21313
;  :arith-add-rows          162
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      747
;  :arith-conflicts         324
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         319
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7888
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1804
;  :propagations            541
;  :quant-instantiations    224
;  :rlimit-count            535253)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@299@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21313
;  :arith-add-rows          162
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      747
;  :arith-conflicts         324
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         319
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7888
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1805
;  :propagations            541
;  :quant-instantiations    224
;  :rlimit-count            535262)
(push) ; 18
; [then-branch: 95 | 0 <= First:(Second:(Second:(Second:($t@282@04))))[i@299@04] | live]
; [else-branch: 95 | !(0 <= First:(Second:(Second:(Second:($t@282@04))))[i@299@04]) | live]
(push) ; 19
; [then-branch: 95 | 0 <= First:(Second:(Second:(Second:($t@282@04))))[i@299@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@299@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21313
;  :arith-add-rows          162
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      747
;  :arith-conflicts         324
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         319
;  :arith-pivots            288
;  :binary-propagations     22
;  :conflicts               1444
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7888
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1806
;  :propagations            541
;  :quant-instantiations    224
;  :rlimit-count            535378)
(push) ; 20
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21313
;  :arith-add-rows          163
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      748
;  :arith-conflicts         325
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         320
;  :arith-pivots            289
;  :binary-propagations     22
;  :conflicts               1445
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7889
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1807
;  :propagations            541
;  :quant-instantiations    224
;  :rlimit-count            535500)
(push) ; 20
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21314
;  :arith-add-rows          164
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      749
;  :arith-conflicts         326
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         321
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7890
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1808
;  :propagations            542
;  :quant-instantiations    224
;  :rlimit-count            535590)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@299@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21314
;  :arith-add-rows          164
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      749
;  :arith-conflicts         326
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         321
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7890
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1809
;  :propagations            542
;  :quant-instantiations    224
;  :rlimit-count            535599)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21314
;  :arith-add-rows          164
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      749
;  :arith-conflicts         326
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         321
;  :arith-pivots            290
;  :binary-propagations     22
;  :conflicts               1446
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7890
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1810
;  :propagations            542
;  :quant-instantiations    224
;  :rlimit-count            535610)
(push) ; 20
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21314
;  :arith-add-rows          165
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      750
;  :arith-conflicts         327
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         322
;  :arith-pivots            291
;  :binary-propagations     22
;  :conflicts               1447
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7891
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1811
;  :propagations            542
;  :quant-instantiations    224
;  :rlimit-count            535732)
(push) ; 20
(assert (not (= $t@284@04 $t@295@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21315
;  :arith-add-rows          166
;  :arith-assert-diseq      210
;  :arith-assert-lower      697
;  :arith-assert-upper      751
;  :arith-conflicts         328
;  :arith-eq-adapter        290
;  :arith-fixed-eqs         323
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               1448
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              722
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7892
;  :mk-clause               805
;  :num-allocs              10248348
;  :num-checks              1812
;  :propagations            543
;  :quant-instantiations    224
;  :rlimit-count            535822)
(pop) ; 19
(push) ; 19
; [else-branch: 95 | !(0 <= First:(Second:(Second:(Second:($t@282@04))))[i@299@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
      i@299@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 93 | !(i@299@04 < |First:(Second:(Second:(Second:($t@282@04))))| && 0 <= i@299@04)]
(assert (not
  (and
    (<
      i@299@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
    (<= 0 i@299@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i@299@04 Int)) (!
  (implies
    (and
      (<
        i@299@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
      (<= 0 i@299@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
          i@299@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@299@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@299@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@299@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21315
;  :arith-add-rows          166
;  :arith-assert-diseq      212
;  :arith-assert-lower      698
;  :arith-assert-upper      752
;  :arith-conflicts         328
;  :arith-eq-adapter        291
;  :arith-fixed-eqs         323
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              740
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7900
;  :mk-clause               819
;  :num-allocs              10248348
;  :num-checks              1813
;  :propagations            545
;  :quant-instantiations    225
;  :rlimit-count            536268)
(assert (forall ((i@299@04 Int)) (!
  (implies
    (and
      (<
        i@299@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))
      (<= 0 i@299@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
          i@299@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@299@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
            i@299@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@04)))))
    i@299@04))
  :qid |prog.l<no position>|)))
(declare-const $k@300@04 $Perm)
(assert ($Perm.isReadVar $k@300@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21315
;  :arith-add-rows          166
;  :arith-assert-diseq      213
;  :arith-assert-lower      700
;  :arith-assert-upper      753
;  :arith-conflicts         328
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         323
;  :arith-pivots            292
;  :binary-propagations     22
;  :conflicts               1449
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              740
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7905
;  :mk-clause               821
;  :num-allocs              10248348
;  :num-checks              1814
;  :propagations            546
;  :quant-instantiations    225
;  :rlimit-count            536790)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21315
;  :arith-add-rows          167
;  :arith-assert-diseq      213
;  :arith-assert-lower      700
;  :arith-assert-upper      754
;  :arith-conflicts         329
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         324
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               1450
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              740
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7906
;  :mk-clause               821
;  :num-allocs              10248348
;  :num-checks              1815
;  :propagations            546
;  :quant-instantiations    225
;  :rlimit-count            536912)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@300@04 $Perm.No) (< $Perm.No $k@300@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21315
;  :arith-add-rows          167
;  :arith-assert-diseq      213
;  :arith-assert-lower      700
;  :arith-assert-upper      754
;  :arith-conflicts         329
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         324
;  :arith-pivots            293
;  :binary-propagations     22
;  :conflicts               1451
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              740
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7906
;  :mk-clause               821
;  :num-allocs              10248348
;  :num-checks              1816
;  :propagations            546
;  :quant-instantiations    225
;  :rlimit-count            536962)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21316
;  :arith-add-rows          168
;  :arith-assert-diseq      213
;  :arith-assert-lower      700
;  :arith-assert-upper      755
;  :arith-conflicts         330
;  :arith-eq-adapter        292
;  :arith-fixed-eqs         325
;  :arith-pivots            294
;  :binary-propagations     22
;  :conflicts               1452
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              740
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7907
;  :mk-clause               821
;  :num-allocs              10248348
;  :num-checks              1817
;  :propagations            547
;  :quant-instantiations    225
;  :rlimit-count            537052)
(push) ; 13
(assert (not (not (= (+ (- $k@254@04 $k@276@04) $k@286@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21317
;  :arith-add-rows          168
;  :arith-assert-diseq      213
;  :arith-assert-lower      700
;  :arith-assert-upper      756
;  :arith-conflicts         331
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         325
;  :arith-pivots            294
;  :binary-propagations     22
;  :conflicts               1453
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7909
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1818
;  :propagations            548
;  :quant-instantiations    225
;  :rlimit-count            537132)
(assert (< $k@300@04 (+ (- $k@254@04 $k@276@04) $k@286@04)))
(assert (<= $Perm.No (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04)))
(assert (<= (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21317
;  :arith-add-rows          170
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      757
;  :arith-conflicts         331
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         325
;  :arith-pivots            294
;  :binary-propagations     22
;  :conflicts               1453
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7912
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1819
;  :propagations            548
;  :quant-instantiations    225
;  :rlimit-count            537331)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21317
;  :arith-add-rows          171
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      758
;  :arith-conflicts         332
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         326
;  :arith-pivots            295
;  :binary-propagations     22
;  :conflicts               1454
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7913
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1820
;  :propagations            548
;  :quant-instantiations    225
;  :rlimit-count            537453)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21318
;  :arith-add-rows          172
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      759
;  :arith-conflicts         333
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         327
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               1455
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7914
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1821
;  :propagations            549
;  :quant-instantiations    225
;  :rlimit-count            537543)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21318
;  :arith-add-rows          172
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      760
;  :arith-conflicts         334
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         328
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7915
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1822
;  :propagations            549
;  :quant-instantiations    225
;  :rlimit-count            537624)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21318
;  :arith-add-rows          172
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      760
;  :arith-conflicts         334
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         328
;  :arith-pivots            296
;  :binary-propagations     22
;  :conflicts               1456
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7915
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1823
;  :propagations            549
;  :quant-instantiations    225
;  :rlimit-count            537635)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21318
;  :arith-add-rows          173
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      761
;  :arith-conflicts         335
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         329
;  :arith-pivots            297
;  :binary-propagations     22
;  :conflicts               1457
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7916
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1824
;  :propagations            549
;  :quant-instantiations    225
;  :rlimit-count            537757)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21319
;  :arith-add-rows          174
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      762
;  :arith-conflicts         336
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         330
;  :arith-pivots            298
;  :binary-propagations     22
;  :conflicts               1458
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7917
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1825
;  :propagations            550
;  :quant-instantiations    225
;  :rlimit-count            537847)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21319
;  :arith-add-rows          174
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      763
;  :arith-conflicts         337
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         331
;  :arith-pivots            298
;  :binary-propagations     22
;  :conflicts               1459
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7918
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1826
;  :propagations            550
;  :quant-instantiations    225
;  :rlimit-count            537928)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21319
;  :arith-add-rows          174
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      763
;  :arith-conflicts         337
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         331
;  :arith-pivots            298
;  :binary-propagations     22
;  :conflicts               1459
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7918
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1827
;  :propagations            550
;  :quant-instantiations    225
;  :rlimit-count            537939)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21319
;  :arith-add-rows          175
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      764
;  :arith-conflicts         338
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         332
;  :arith-pivots            299
;  :binary-propagations     22
;  :conflicts               1460
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7919
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1828
;  :propagations            550
;  :quant-instantiations    225
;  :rlimit-count            538061)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21320
;  :arith-add-rows          176
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      765
;  :arith-conflicts         339
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         333
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               1461
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7920
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1829
;  :propagations            551
;  :quant-instantiations    225
;  :rlimit-count            538151)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21320
;  :arith-add-rows          176
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      766
;  :arith-conflicts         340
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         334
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7921
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1830
;  :propagations            551
;  :quant-instantiations    225
;  :rlimit-count            538232)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21320
;  :arith-add-rows          176
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      766
;  :arith-conflicts         340
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         334
;  :arith-pivots            300
;  :binary-propagations     22
;  :conflicts               1462
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7921
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1831
;  :propagations            551
;  :quant-instantiations    225
;  :rlimit-count            538243)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21320
;  :arith-add-rows          177
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      767
;  :arith-conflicts         341
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         335
;  :arith-pivots            301
;  :binary-propagations     22
;  :conflicts               1463
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7922
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1832
;  :propagations            551
;  :quant-instantiations    225
;  :rlimit-count            538365)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21321
;  :arith-add-rows          178
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      768
;  :arith-conflicts         342
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         336
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               1464
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7923
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1833
;  :propagations            552
;  :quant-instantiations    225
;  :rlimit-count            538455)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21321
;  :arith-add-rows          178
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      769
;  :arith-conflicts         343
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         337
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               1465
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7924
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1834
;  :propagations            552
;  :quant-instantiations    225
;  :rlimit-count            538536)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21321
;  :arith-add-rows          178
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      769
;  :arith-conflicts         343
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         337
;  :arith-pivots            302
;  :binary-propagations     22
;  :conflicts               1465
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7924
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1835
;  :propagations            552
;  :quant-instantiations    225
;  :rlimit-count            538547)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21321
;  :arith-add-rows          179
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      770
;  :arith-conflicts         344
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         338
;  :arith-pivots            303
;  :binary-propagations     22
;  :conflicts               1466
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7925
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1836
;  :propagations            552
;  :quant-instantiations    225
;  :rlimit-count            538669)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21322
;  :arith-add-rows          180
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      771
;  :arith-conflicts         345
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         339
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               1467
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7926
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1837
;  :propagations            553
;  :quant-instantiations    225
;  :rlimit-count            538759)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21322
;  :arith-add-rows          180
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      772
;  :arith-conflicts         346
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         340
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7927
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1838
;  :propagations            553
;  :quant-instantiations    225
;  :rlimit-count            538840)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21322
;  :arith-add-rows          180
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      772
;  :arith-conflicts         346
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         340
;  :arith-pivots            304
;  :binary-propagations     22
;  :conflicts               1468
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7927
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1839
;  :propagations            553
;  :quant-instantiations    225
;  :rlimit-count            538851)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21322
;  :arith-add-rows          181
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      773
;  :arith-conflicts         347
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         341
;  :arith-pivots            305
;  :binary-propagations     22
;  :conflicts               1469
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7928
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1840
;  :propagations            553
;  :quant-instantiations    225
;  :rlimit-count            538973)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21323
;  :arith-add-rows          182
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      774
;  :arith-conflicts         348
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         342
;  :arith-pivots            306
;  :binary-propagations     22
;  :conflicts               1470
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7929
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1841
;  :propagations            554
;  :quant-instantiations    225
;  :rlimit-count            539063)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21323
;  :arith-add-rows          182
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      775
;  :arith-conflicts         349
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         343
;  :arith-pivots            306
;  :binary-propagations     22
;  :conflicts               1471
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7930
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1842
;  :propagations            554
;  :quant-instantiations    225
;  :rlimit-count            539144)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21323
;  :arith-add-rows          182
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      775
;  :arith-conflicts         349
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         343
;  :arith-pivots            306
;  :binary-propagations     22
;  :conflicts               1471
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7930
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1843
;  :propagations            554
;  :quant-instantiations    225
;  :rlimit-count            539155)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21323
;  :arith-add-rows          183
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      776
;  :arith-conflicts         350
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         344
;  :arith-pivots            307
;  :binary-propagations     22
;  :conflicts               1472
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7931
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1844
;  :propagations            554
;  :quant-instantiations    225
;  :rlimit-count            539277)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21324
;  :arith-add-rows          184
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      777
;  :arith-conflicts         351
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         345
;  :arith-pivots            308
;  :binary-propagations     22
;  :conflicts               1473
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7932
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1845
;  :propagations            555
;  :quant-instantiations    225
;  :rlimit-count            539367)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21324
;  :arith-add-rows          184
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      778
;  :arith-conflicts         352
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         346
;  :arith-pivots            308
;  :binary-propagations     22
;  :conflicts               1474
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7933
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1846
;  :propagations            555
;  :quant-instantiations    225
;  :rlimit-count            539448)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21324
;  :arith-add-rows          184
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      778
;  :arith-conflicts         352
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         346
;  :arith-pivots            308
;  :binary-propagations     22
;  :conflicts               1474
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7933
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1847
;  :propagations            555
;  :quant-instantiations    225
;  :rlimit-count            539459)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21324
;  :arith-add-rows          185
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      779
;  :arith-conflicts         353
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         347
;  :arith-pivots            309
;  :binary-propagations     22
;  :conflicts               1475
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7934
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1848
;  :propagations            555
;  :quant-instantiations    225
;  :rlimit-count            539581)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21325
;  :arith-add-rows          186
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      780
;  :arith-conflicts         354
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         348
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               1476
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7935
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1849
;  :propagations            556
;  :quant-instantiations    225
;  :rlimit-count            539671)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21325
;  :arith-add-rows          186
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      781
;  :arith-conflicts         355
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         349
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               1477
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7936
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1850
;  :propagations            556
;  :quant-instantiations    225
;  :rlimit-count            539752)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21325
;  :arith-add-rows          186
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      781
;  :arith-conflicts         355
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         349
;  :arith-pivots            310
;  :binary-propagations     22
;  :conflicts               1477
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7936
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1851
;  :propagations            556
;  :quant-instantiations    225
;  :rlimit-count            539763)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21325
;  :arith-add-rows          187
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      782
;  :arith-conflicts         356
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         350
;  :arith-pivots            311
;  :binary-propagations     22
;  :conflicts               1478
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7937
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1852
;  :propagations            556
;  :quant-instantiations    225
;  :rlimit-count            539885)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21326
;  :arith-add-rows          188
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      783
;  :arith-conflicts         357
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         351
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               1479
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7938
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1853
;  :propagations            557
;  :quant-instantiations    225
;  :rlimit-count            539975)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21326
;  :arith-add-rows          188
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      784
;  :arith-conflicts         358
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         352
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               1480
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7939
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1854
;  :propagations            557
;  :quant-instantiations    225
;  :rlimit-count            540056)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21326
;  :arith-add-rows          188
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      784
;  :arith-conflicts         358
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         352
;  :arith-pivots            312
;  :binary-propagations     22
;  :conflicts               1480
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7939
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1855
;  :propagations            557
;  :quant-instantiations    225
;  :rlimit-count            540067)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21326
;  :arith-add-rows          189
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      785
;  :arith-conflicts         359
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         353
;  :arith-pivots            313
;  :binary-propagations     22
;  :conflicts               1481
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7940
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1856
;  :propagations            557
;  :quant-instantiations    225
;  :rlimit-count            540189)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21327
;  :arith-add-rows          190
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      786
;  :arith-conflicts         360
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         354
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               1482
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7941
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1857
;  :propagations            558
;  :quant-instantiations    225
;  :rlimit-count            540279)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21327
;  :arith-add-rows          190
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      787
;  :arith-conflicts         361
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         355
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7942
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1858
;  :propagations            558
;  :quant-instantiations    225
;  :rlimit-count            540360)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21327
;  :arith-add-rows          190
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      787
;  :arith-conflicts         361
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         355
;  :arith-pivots            314
;  :binary-propagations     22
;  :conflicts               1483
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7942
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1859
;  :propagations            558
;  :quant-instantiations    225
;  :rlimit-count            540371)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21327
;  :arith-add-rows          191
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      788
;  :arith-conflicts         362
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         356
;  :arith-pivots            315
;  :binary-propagations     22
;  :conflicts               1484
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7943
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1860
;  :propagations            558
;  :quant-instantiations    225
;  :rlimit-count            540493)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21328
;  :arith-add-rows          192
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      789
;  :arith-conflicts         363
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         357
;  :arith-pivots            316
;  :binary-propagations     22
;  :conflicts               1485
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7944
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1861
;  :propagations            559
;  :quant-instantiations    225
;  :rlimit-count            540583)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21328
;  :arith-add-rows          192
;  :arith-assert-diseq      213
;  :arith-assert-lower      702
;  :arith-assert-upper      790
;  :arith-conflicts         364
;  :arith-eq-adapter        293
;  :arith-fixed-eqs         358
;  :arith-pivots            316
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7945
;  :mk-clause               823
;  :num-allocs              10248348
;  :num-checks              1862
;  :propagations            559
;  :quant-instantiations    225
;  :rlimit-count            540664)
(declare-const $k@301@04 $Perm)
(assert ($Perm.isReadVar $k@301@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21328
;  :arith-add-rows          192
;  :arith-assert-diseq      214
;  :arith-assert-lower      704
;  :arith-assert-upper      791
;  :arith-conflicts         364
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         358
;  :arith-pivots            316
;  :binary-propagations     22
;  :conflicts               1486
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7949
;  :mk-clause               825
;  :num-allocs              10248348
;  :num-checks              1863
;  :propagations            560
;  :quant-instantiations    225
;  :rlimit-count            540824)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21328
;  :arith-add-rows          193
;  :arith-assert-diseq      214
;  :arith-assert-lower      704
;  :arith-assert-upper      792
;  :arith-conflicts         365
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         359
;  :arith-pivots            317
;  :binary-propagations     22
;  :conflicts               1487
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7950
;  :mk-clause               825
;  :num-allocs              10248348
;  :num-checks              1864
;  :propagations            560
;  :quant-instantiations    225
;  :rlimit-count            540946)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@301@04 $Perm.No) (< $Perm.No $k@301@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21328
;  :arith-add-rows          193
;  :arith-assert-diseq      214
;  :arith-assert-lower      704
;  :arith-assert-upper      792
;  :arith-conflicts         365
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         359
;  :arith-pivots            317
;  :binary-propagations     22
;  :conflicts               1488
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7950
;  :mk-clause               825
;  :num-allocs              10248348
;  :num-checks              1865
;  :propagations            560
;  :quant-instantiations    225
;  :rlimit-count            540996)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21329
;  :arith-add-rows          194
;  :arith-assert-diseq      214
;  :arith-assert-lower      704
;  :arith-assert-upper      793
;  :arith-conflicts         366
;  :arith-eq-adapter        294
;  :arith-fixed-eqs         360
;  :arith-pivots            318
;  :binary-propagations     22
;  :conflicts               1489
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              742
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7951
;  :mk-clause               825
;  :num-allocs              10248348
;  :num-checks              1866
;  :propagations            561
;  :quant-instantiations    225
;  :rlimit-count            541086)
(push) ; 13
(assert (not (not (= (+ (- $k@255@04 $k@277@04) $k@288@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21330
;  :arith-add-rows          195
;  :arith-assert-diseq      214
;  :arith-assert-lower      704
;  :arith-assert-upper      794
;  :arith-conflicts         367
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         360
;  :arith-pivots            320
;  :binary-propagations     22
;  :conflicts               1490
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7953
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1867
;  :propagations            562
;  :quant-instantiations    225
;  :rlimit-count            541194)
(assert (< $k@301@04 (+ (- $k@255@04 $k@277@04) $k@288@04)))
(assert (<= $Perm.No (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04)))
(assert (<= (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21330
;  :arith-add-rows          196
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      795
;  :arith-conflicts         367
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         360
;  :arith-pivots            320
;  :binary-propagations     22
;  :conflicts               1490
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7956
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1868
;  :propagations            562
;  :quant-instantiations    225
;  :rlimit-count            541392)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21330
;  :arith-add-rows          197
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      796
;  :arith-conflicts         368
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         361
;  :arith-pivots            321
;  :binary-propagations     22
;  :conflicts               1491
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7957
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1869
;  :propagations            562
;  :quant-instantiations    225
;  :rlimit-count            541514)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21331
;  :arith-add-rows          198
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      797
;  :arith-conflicts         369
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         362
;  :arith-pivots            322
;  :binary-propagations     22
;  :conflicts               1492
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7958
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1870
;  :propagations            563
;  :quant-instantiations    225
;  :rlimit-count            541604)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21331
;  :arith-add-rows          199
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      798
;  :arith-conflicts         370
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         363
;  :arith-pivots            325
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7959
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1871
;  :propagations            563
;  :quant-instantiations    225
;  :rlimit-count            541718)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21331
;  :arith-add-rows          199
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      798
;  :arith-conflicts         370
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         363
;  :arith-pivots            325
;  :binary-propagations     22
;  :conflicts               1493
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7959
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1872
;  :propagations            563
;  :quant-instantiations    225
;  :rlimit-count            541729)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21331
;  :arith-add-rows          200
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      799
;  :arith-conflicts         371
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         364
;  :arith-pivots            326
;  :binary-propagations     22
;  :conflicts               1494
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7960
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1873
;  :propagations            563
;  :quant-instantiations    225
;  :rlimit-count            541851)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21332
;  :arith-add-rows          201
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      800
;  :arith-conflicts         372
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         365
;  :arith-pivots            327
;  :binary-propagations     22
;  :conflicts               1495
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7961
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1874
;  :propagations            564
;  :quant-instantiations    225
;  :rlimit-count            541941)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21332
;  :arith-add-rows          202
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      801
;  :arith-conflicts         373
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         366
;  :arith-pivots            329
;  :binary-propagations     22
;  :conflicts               1496
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7962
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1875
;  :propagations            564
;  :quant-instantiations    225
;  :rlimit-count            542050)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21332
;  :arith-add-rows          202
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      801
;  :arith-conflicts         373
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         366
;  :arith-pivots            329
;  :binary-propagations     22
;  :conflicts               1496
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7962
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1876
;  :propagations            564
;  :quant-instantiations    225
;  :rlimit-count            542061)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21332
;  :arith-add-rows          203
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      802
;  :arith-conflicts         374
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         367
;  :arith-pivots            330
;  :binary-propagations     22
;  :conflicts               1497
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7963
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1877
;  :propagations            564
;  :quant-instantiations    225
;  :rlimit-count            542183)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21333
;  :arith-add-rows          204
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      803
;  :arith-conflicts         375
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         368
;  :arith-pivots            331
;  :binary-propagations     22
;  :conflicts               1498
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7964
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1878
;  :propagations            565
;  :quant-instantiations    225
;  :rlimit-count            542273)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21333
;  :arith-add-rows          205
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      804
;  :arith-conflicts         376
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         369
;  :arith-pivots            334
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7965
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1879
;  :propagations            565
;  :quant-instantiations    225
;  :rlimit-count            542387)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21333
;  :arith-add-rows          205
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      804
;  :arith-conflicts         376
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         369
;  :arith-pivots            334
;  :binary-propagations     22
;  :conflicts               1499
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7965
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1880
;  :propagations            565
;  :quant-instantiations    225
;  :rlimit-count            542398)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21333
;  :arith-add-rows          206
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      805
;  :arith-conflicts         377
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         370
;  :arith-pivots            335
;  :binary-propagations     22
;  :conflicts               1500
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7966
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1881
;  :propagations            565
;  :quant-instantiations    225
;  :rlimit-count            542520)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21334
;  :arith-add-rows          207
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      806
;  :arith-conflicts         378
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         371
;  :arith-pivots            336
;  :binary-propagations     22
;  :conflicts               1501
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7967
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1882
;  :propagations            566
;  :quant-instantiations    225
;  :rlimit-count            542610)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21334
;  :arith-add-rows          208
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      807
;  :arith-conflicts         379
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         372
;  :arith-pivots            338
;  :binary-propagations     22
;  :conflicts               1502
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7968
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1883
;  :propagations            566
;  :quant-instantiations    225
;  :rlimit-count            542719)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21334
;  :arith-add-rows          208
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      807
;  :arith-conflicts         379
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         372
;  :arith-pivots            338
;  :binary-propagations     22
;  :conflicts               1502
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7968
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1884
;  :propagations            566
;  :quant-instantiations    225
;  :rlimit-count            542730)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21334
;  :arith-add-rows          209
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      808
;  :arith-conflicts         380
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         373
;  :arith-pivots            339
;  :binary-propagations     22
;  :conflicts               1503
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7969
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1885
;  :propagations            566
;  :quant-instantiations    225
;  :rlimit-count            542852)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21335
;  :arith-add-rows          210
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      809
;  :arith-conflicts         381
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         374
;  :arith-pivots            340
;  :binary-propagations     22
;  :conflicts               1504
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7970
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1886
;  :propagations            567
;  :quant-instantiations    225
;  :rlimit-count            542942)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21335
;  :arith-add-rows          211
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      810
;  :arith-conflicts         382
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         375
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7971
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1887
;  :propagations            567
;  :quant-instantiations    225
;  :rlimit-count            543056)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21335
;  :arith-add-rows          211
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      810
;  :arith-conflicts         382
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         375
;  :arith-pivots            343
;  :binary-propagations     22
;  :conflicts               1505
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7971
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1888
;  :propagations            567
;  :quant-instantiations    225
;  :rlimit-count            543067)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21335
;  :arith-add-rows          212
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      811
;  :arith-conflicts         383
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         376
;  :arith-pivots            344
;  :binary-propagations     22
;  :conflicts               1506
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7972
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1889
;  :propagations            567
;  :quant-instantiations    225
;  :rlimit-count            543189)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21336
;  :arith-add-rows          213
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      812
;  :arith-conflicts         384
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         377
;  :arith-pivots            345
;  :binary-propagations     22
;  :conflicts               1507
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7973
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1890
;  :propagations            568
;  :quant-instantiations    225
;  :rlimit-count            543279)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21336
;  :arith-add-rows          214
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      813
;  :arith-conflicts         385
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         378
;  :arith-pivots            347
;  :binary-propagations     22
;  :conflicts               1508
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7974
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1891
;  :propagations            568
;  :quant-instantiations    225
;  :rlimit-count            543388)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21336
;  :arith-add-rows          214
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      813
;  :arith-conflicts         385
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         378
;  :arith-pivots            347
;  :binary-propagations     22
;  :conflicts               1508
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7974
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1892
;  :propagations            568
;  :quant-instantiations    225
;  :rlimit-count            543399)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21336
;  :arith-add-rows          215
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      814
;  :arith-conflicts         386
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         379
;  :arith-pivots            348
;  :binary-propagations     22
;  :conflicts               1509
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7975
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1893
;  :propagations            568
;  :quant-instantiations    225
;  :rlimit-count            543521)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21337
;  :arith-add-rows          216
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      815
;  :arith-conflicts         387
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         380
;  :arith-pivots            349
;  :binary-propagations     22
;  :conflicts               1510
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7976
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1894
;  :propagations            569
;  :quant-instantiations    225
;  :rlimit-count            543611)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21337
;  :arith-add-rows          217
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      816
;  :arith-conflicts         388
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         381
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               1511
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7977
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1895
;  :propagations            569
;  :quant-instantiations    225
;  :rlimit-count            543725)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21337
;  :arith-add-rows          217
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      816
;  :arith-conflicts         388
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         381
;  :arith-pivots            352
;  :binary-propagations     22
;  :conflicts               1511
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7977
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1896
;  :propagations            569
;  :quant-instantiations    225
;  :rlimit-count            543736)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21337
;  :arith-add-rows          218
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      817
;  :arith-conflicts         389
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         382
;  :arith-pivots            353
;  :binary-propagations     22
;  :conflicts               1512
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7978
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1897
;  :propagations            569
;  :quant-instantiations    225
;  :rlimit-count            543858)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21338
;  :arith-add-rows          219
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      818
;  :arith-conflicts         390
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         383
;  :arith-pivots            354
;  :binary-propagations     22
;  :conflicts               1513
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7979
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1898
;  :propagations            570
;  :quant-instantiations    225
;  :rlimit-count            543948)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@255@04 $k@277@04) $k@288@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21338
;  :arith-add-rows          220
;  :arith-assert-diseq      214
;  :arith-assert-lower      706
;  :arith-assert-upper      819
;  :arith-conflicts         391
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         384
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               1514
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7980
;  :mk-clause               827
;  :num-allocs              10248348
;  :num-checks              1899
;  :propagations            570
;  :quant-instantiations    225
;  :rlimit-count            544057)
(declare-const $k@302@04 $Perm)
(assert ($Perm.isReadVar $k@302@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21338
;  :arith-add-rows          220
;  :arith-assert-diseq      215
;  :arith-assert-lower      708
;  :arith-assert-upper      820
;  :arith-conflicts         391
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         384
;  :arith-pivots            356
;  :binary-propagations     22
;  :conflicts               1514
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7984
;  :mk-clause               829
;  :num-allocs              10248348
;  :num-checks              1900
;  :propagations            571
;  :quant-instantiations    225
;  :rlimit-count            544216)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21338
;  :arith-add-rows          221
;  :arith-assert-diseq      215
;  :arith-assert-lower      708
;  :arith-assert-upper      821
;  :arith-conflicts         392
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         385
;  :arith-pivots            357
;  :binary-propagations     22
;  :conflicts               1515
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7985
;  :mk-clause               829
;  :num-allocs              10248348
;  :num-checks              1901
;  :propagations            571
;  :quant-instantiations    225
;  :rlimit-count            544338)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@302@04 $Perm.No) (< $Perm.No $k@302@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21338
;  :arith-add-rows          221
;  :arith-assert-diseq      215
;  :arith-assert-lower      708
;  :arith-assert-upper      821
;  :arith-conflicts         392
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         385
;  :arith-pivots            357
;  :binary-propagations     22
;  :conflicts               1516
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7985
;  :mk-clause               829
;  :num-allocs              10248348
;  :num-checks              1902
;  :propagations            571
;  :quant-instantiations    225
;  :rlimit-count            544388)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21339
;  :arith-add-rows          222
;  :arith-assert-diseq      215
;  :arith-assert-lower      708
;  :arith-assert-upper      822
;  :arith-conflicts         393
;  :arith-eq-adapter        296
;  :arith-fixed-eqs         386
;  :arith-pivots            358
;  :binary-propagations     22
;  :conflicts               1517
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              744
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7986
;  :mk-clause               829
;  :num-allocs              10248348
;  :num-checks              1903
;  :propagations            572
;  :quant-instantiations    225
;  :rlimit-count            544478)
(push) ; 13
(assert (not (not (= (+ (- $k@256@04 $k@278@04) $k@290@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21340
;  :arith-add-rows          222
;  :arith-assert-diseq      215
;  :arith-assert-lower      708
;  :arith-assert-upper      823
;  :arith-conflicts         394
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         386
;  :arith-pivots            358
;  :binary-propagations     22
;  :conflicts               1518
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7988
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1904
;  :propagations            573
;  :quant-instantiations    225
;  :rlimit-count            544558)
(assert (< $k@302@04 (+ (- $k@256@04 $k@278@04) $k@290@04)))
(assert (<= $Perm.No (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04)))
(assert (<= (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21340
;  :arith-add-rows          224
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      824
;  :arith-conflicts         394
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         386
;  :arith-pivots            358
;  :binary-propagations     22
;  :conflicts               1518
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7991
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1905
;  :propagations            573
;  :quant-instantiations    225
;  :rlimit-count            544757)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21340
;  :arith-add-rows          225
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      825
;  :arith-conflicts         395
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         387
;  :arith-pivots            359
;  :binary-propagations     22
;  :conflicts               1519
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7992
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1906
;  :propagations            573
;  :quant-instantiations    225
;  :rlimit-count            544879)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21341
;  :arith-add-rows          226
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      826
;  :arith-conflicts         396
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         388
;  :arith-pivots            360
;  :binary-propagations     22
;  :conflicts               1520
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7993
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1907
;  :propagations            574
;  :quant-instantiations    225
;  :rlimit-count            544969)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21341
;  :arith-add-rows          226
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      827
;  :arith-conflicts         397
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         389
;  :arith-pivots            360
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7994
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1908
;  :propagations            574
;  :quant-instantiations    225
;  :rlimit-count            545050)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21341
;  :arith-add-rows          226
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      827
;  :arith-conflicts         397
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         389
;  :arith-pivots            360
;  :binary-propagations     22
;  :conflicts               1521
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7994
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1909
;  :propagations            574
;  :quant-instantiations    225
;  :rlimit-count            545061)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21341
;  :arith-add-rows          227
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      828
;  :arith-conflicts         398
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         390
;  :arith-pivots            361
;  :binary-propagations     22
;  :conflicts               1522
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7995
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1910
;  :propagations            574
;  :quant-instantiations    225
;  :rlimit-count            545183)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21342
;  :arith-add-rows          228
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      829
;  :arith-conflicts         399
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         391
;  :arith-pivots            362
;  :binary-propagations     22
;  :conflicts               1523
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7996
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1911
;  :propagations            575
;  :quant-instantiations    225
;  :rlimit-count            545273)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21342
;  :arith-add-rows          228
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      830
;  :arith-conflicts         400
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         392
;  :arith-pivots            362
;  :binary-propagations     22
;  :conflicts               1524
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7997
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1912
;  :propagations            575
;  :quant-instantiations    225
;  :rlimit-count            545354)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21342
;  :arith-add-rows          228
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      830
;  :arith-conflicts         400
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         392
;  :arith-pivots            362
;  :binary-propagations     22
;  :conflicts               1524
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7997
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1913
;  :propagations            575
;  :quant-instantiations    225
;  :rlimit-count            545365)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21342
;  :arith-add-rows          229
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      831
;  :arith-conflicts         401
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         393
;  :arith-pivots            363
;  :binary-propagations     22
;  :conflicts               1525
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7998
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1914
;  :propagations            575
;  :quant-instantiations    225
;  :rlimit-count            545487)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21343
;  :arith-add-rows          230
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      832
;  :arith-conflicts         402
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         394
;  :arith-pivots            364
;  :binary-propagations     22
;  :conflicts               1526
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             7999
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1915
;  :propagations            576
;  :quant-instantiations    225
;  :rlimit-count            545577)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@256@04 $k@278@04) $k@290@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21343
;  :arith-add-rows          230
;  :arith-assert-diseq      215
;  :arith-assert-lower      710
;  :arith-assert-upper      833
;  :arith-conflicts         403
;  :arith-eq-adapter        297
;  :arith-fixed-eqs         395
;  :arith-pivots            364
;  :binary-propagations     22
;  :conflicts               1527
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8000
;  :mk-clause               831
;  :num-allocs              10248348
;  :num-checks              1916
;  :propagations            576
;  :quant-instantiations    225
;  :rlimit-count            545658)
(declare-const $k@303@04 $Perm)
(assert ($Perm.isReadVar $k@303@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21343
;  :arith-add-rows          230
;  :arith-assert-diseq      216
;  :arith-assert-lower      712
;  :arith-assert-upper      834
;  :arith-conflicts         403
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         395
;  :arith-pivots            364
;  :binary-propagations     22
;  :conflicts               1527
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8004
;  :mk-clause               833
;  :num-allocs              10248348
;  :num-checks              1917
;  :propagations            577
;  :quant-instantiations    225
;  :rlimit-count            545818)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21343
;  :arith-add-rows          231
;  :arith-assert-diseq      216
;  :arith-assert-lower      712
;  :arith-assert-upper      835
;  :arith-conflicts         404
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         396
;  :arith-pivots            365
;  :binary-propagations     22
;  :conflicts               1528
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8005
;  :mk-clause               833
;  :num-allocs              10248348
;  :num-checks              1918
;  :propagations            577
;  :quant-instantiations    225
;  :rlimit-count            545940)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@303@04 $Perm.No) (< $Perm.No $k@303@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21343
;  :arith-add-rows          231
;  :arith-assert-diseq      216
;  :arith-assert-lower      712
;  :arith-assert-upper      835
;  :arith-conflicts         404
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         396
;  :arith-pivots            365
;  :binary-propagations     22
;  :conflicts               1529
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8005
;  :mk-clause               833
;  :num-allocs              10248348
;  :num-checks              1919
;  :propagations            577
;  :quant-instantiations    225
;  :rlimit-count            545990)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21344
;  :arith-add-rows          232
;  :arith-assert-diseq      216
;  :arith-assert-lower      712
;  :arith-assert-upper      836
;  :arith-conflicts         405
;  :arith-eq-adapter        298
;  :arith-fixed-eqs         397
;  :arith-pivots            366
;  :binary-propagations     22
;  :conflicts               1530
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              746
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8006
;  :mk-clause               833
;  :num-allocs              10248348
;  :num-checks              1920
;  :propagations            578
;  :quant-instantiations    225
;  :rlimit-count            546080)
(push) ; 13
(assert (not (not (= (+ (- $k@257@04 $k@279@04) $k@292@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21345
;  :arith-add-rows          232
;  :arith-assert-diseq      216
;  :arith-assert-lower      712
;  :arith-assert-upper      837
;  :arith-conflicts         406
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         397
;  :arith-pivots            366
;  :binary-propagations     22
;  :conflicts               1531
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8008
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1921
;  :propagations            579
;  :quant-instantiations    225
;  :rlimit-count            546160)
(assert (< $k@303@04 (+ (- $k@257@04 $k@279@04) $k@292@04)))
(assert (<= $Perm.No (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04)))
(assert (<= (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21345
;  :arith-add-rows          234
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      838
;  :arith-conflicts         406
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         397
;  :arith-pivots            366
;  :binary-propagations     22
;  :conflicts               1531
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8011
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1922
;  :propagations            579
;  :quant-instantiations    225
;  :rlimit-count            546359)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21345
;  :arith-add-rows          235
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      839
;  :arith-conflicts         407
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         398
;  :arith-pivots            367
;  :binary-propagations     22
;  :conflicts               1532
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8012
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1923
;  :propagations            579
;  :quant-instantiations    225
;  :rlimit-count            546481)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.02s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21346
;  :arith-add-rows          236
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      840
;  :arith-conflicts         408
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         399
;  :arith-pivots            368
;  :binary-propagations     22
;  :conflicts               1533
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8013
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1924
;  :propagations            580
;  :quant-instantiations    225
;  :rlimit-count            546571
;  :time                    0.00)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21346
;  :arith-add-rows          236
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      841
;  :arith-conflicts         409
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         400
;  :arith-pivots            368
;  :binary-propagations     22
;  :conflicts               1534
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8014
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1925
;  :propagations            580
;  :quant-instantiations    225
;  :rlimit-count            546652)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21346
;  :arith-add-rows          236
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      841
;  :arith-conflicts         409
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         400
;  :arith-pivots            368
;  :binary-propagations     22
;  :conflicts               1534
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8014
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1926
;  :propagations            580
;  :quant-instantiations    225
;  :rlimit-count            546663)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21346
;  :arith-add-rows          237
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      842
;  :arith-conflicts         410
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         401
;  :arith-pivots            369
;  :binary-propagations     22
;  :conflicts               1535
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8015
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1927
;  :propagations            580
;  :quant-instantiations    225
;  :rlimit-count            546785)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21347
;  :arith-add-rows          238
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      843
;  :arith-conflicts         411
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         402
;  :arith-pivots            370
;  :binary-propagations     22
;  :conflicts               1536
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8016
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1928
;  :propagations            581
;  :quant-instantiations    225
;  :rlimit-count            546875)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@257@04 $k@279@04) $k@292@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21347
;  :arith-add-rows          238
;  :arith-assert-diseq      216
;  :arith-assert-lower      714
;  :arith-assert-upper      844
;  :arith-conflicts         412
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         403
;  :arith-pivots            370
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8017
;  :mk-clause               835
;  :num-allocs              10248348
;  :num-checks              1929
;  :propagations            581
;  :quant-instantiations    225
;  :rlimit-count            546956)
(declare-const $k@304@04 $Perm)
(assert ($Perm.isReadVar $k@304@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21347
;  :arith-add-rows          238
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      845
;  :arith-conflicts         412
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         403
;  :arith-pivots            370
;  :binary-propagations     22
;  :conflicts               1537
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8021
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1930
;  :propagations            582
;  :quant-instantiations    225
;  :rlimit-count            547116)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21347
;  :arith-add-rows          239
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      846
;  :arith-conflicts         413
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         404
;  :arith-pivots            371
;  :binary-propagations     22
;  :conflicts               1538
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8022
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1931
;  :propagations            582
;  :quant-instantiations    225
;  :rlimit-count            547238)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          240
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      847
;  :arith-conflicts         414
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         405
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               1539
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8023
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1932
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547328)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          240
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      848
;  :arith-conflicts         415
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         406
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               1540
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8024
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1933
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547409)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@304@04 $Perm.No) (< $Perm.No $k@304@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          240
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      848
;  :arith-conflicts         415
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         406
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8024
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1934
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547459)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          240
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      848
;  :arith-conflicts         415
;  :arith-eq-adapter        300
;  :arith-fixed-eqs         406
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               1541
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8024
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1935
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547470)
(push) ; 13
(assert (not (not
  (=
    (-
      (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
      $k@298@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          240
;  :arith-assert-diseq      217
;  :arith-assert-lower      716
;  :arith-assert-upper      848
;  :arith-conflicts         415
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         406
;  :arith-pivots            372
;  :binary-propagations     22
;  :conflicts               1542
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8025
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1936
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547582)
(assert (<
  $k@304@04
  (- (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04) $k@298@04)))
(assert (<=
  $Perm.No
  (-
    (-
      (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
      $k@298@04)
    $k@304@04)))
(assert (<=
  (-
    (-
      (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
      $k@298@04)
    $k@304@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          244
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      849
;  :arith-conflicts         415
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         406
;  :arith-pivots            373
;  :binary-propagations     22
;  :conflicts               1542
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8028
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1937
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547846)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21348
;  :arith-add-rows          245
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      850
;  :arith-conflicts         416
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         407
;  :arith-pivots            374
;  :binary-propagations     22
;  :conflicts               1543
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8029
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1938
;  :propagations            583
;  :quant-instantiations    225
;  :rlimit-count            547968)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          246
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      851
;  :arith-conflicts         417
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         408
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1544
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8030
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1939
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548058)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          246
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      852
;  :arith-conflicts         418
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         409
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1545
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8031
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1940
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548139)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          246
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      852
;  :arith-conflicts         418
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         409
;  :arith-pivots            375
;  :binary-propagations     22
;  :conflicts               1545
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8031
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1941
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548150)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          247
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      853
;  :arith-conflicts         419
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         410
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8032
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1942
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548272)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          247
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      853
;  :arith-conflicts         419
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         410
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1546
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8032
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1943
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548283)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          247
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      854
;  :arith-conflicts         420
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         411
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8033
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1944
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548385)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          247
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      854
;  :arith-conflicts         420
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         411
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1547
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8033
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1945
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548396)
(push) ; 13
(assert (not (< $Perm.No (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21349
;  :arith-add-rows          247
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      855
;  :arith-conflicts         421
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         412
;  :arith-pivots            376
;  :binary-propagations     22
;  :conflicts               1548
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8034
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1946
;  :propagations            584
;  :quant-instantiations    225
;  :rlimit-count            548498)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@295@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21350
;  :arith-add-rows          248
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      856
;  :arith-conflicts         422
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         413
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1549
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8035
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1947
;  :propagations            585
;  :quant-instantiations    225
;  :rlimit-count            548588)
(push) ; 13
(assert (not (< $Perm.No (+ (- $k@254@04 $k@276@04) $k@286@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21350
;  :arith-add-rows          248
;  :arith-assert-diseq      217
;  :arith-assert-lower      718
;  :arith-assert-upper      857
;  :arith-conflicts         423
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         414
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1550
;  :datatype-accessor-ax    785
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8036
;  :mk-clause               837
;  :num-allocs              10248348
;  :num-checks              1948
;  :propagations            585
;  :quant-instantiations    225
;  :rlimit-count            548669)
(declare-const sys__result@305@04 Int)
(declare-const $t@306@04 $Snap)
(assert (= $t@306@04 ($Snap.combine ($Snap.first $t@306@04) ($Snap.second $t@306@04))))
(declare-const $k@307@04 $Perm)
(assert ($Perm.isReadVar $k@307@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@307@04 $Perm.No) (< $Perm.No $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21355
;  :arith-add-rows          248
;  :arith-assert-diseq      218
;  :arith-assert-lower      720
;  :arith-assert-upper      858
;  :arith-conflicts         423
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         414
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    786
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8041
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1949
;  :propagations            586
;  :quant-instantiations    225
;  :rlimit-count            548956)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21355
;  :arith-add-rows          248
;  :arith-assert-diseq      218
;  :arith-assert-lower      720
;  :arith-assert-upper      858
;  :arith-conflicts         423
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         414
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    786
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8041
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1950
;  :propagations            586
;  :quant-instantiations    225
;  :rlimit-count            548967)
(declare-const $t@308@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04))
    (= $t@308@04 $t@295@04))
  (implies
    (< $Perm.No $k@307@04)
    (= $t@308@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@306@04))))))
(assert (<=
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04)))
(assert (<=
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@306@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@306@04))
    ($Snap.second ($Snap.second $t@306@04)))))
(assert (= ($Snap.first ($Snap.second $t@306@04)) $Snap.unit))
; [eval] diz.Rng_m != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21365
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      859
;  :arith-conflicts         423
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         414
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1551
;  :datatype-accessor-ax    787
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8048
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1951
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            549465)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21365
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      860
;  :arith-conflicts         424
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         415
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1552
;  :datatype-accessor-ax    787
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8049
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1952
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            549603)
(assert (not (= $t@308@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@306@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@306@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21370
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      860
;  :arith-conflicts         424
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         415
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1552
;  :datatype-accessor-ax    788
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8050
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1953
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            549751)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21370
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      861
;  :arith-conflicts         425
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         416
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1553
;  :datatype-accessor-ax    788
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8051
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1954
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            549889)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@306@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21375
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      861
;  :arith-conflicts         425
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         416
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1553
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8052
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1955
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            550029)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21375
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      862
;  :arith-conflicts         426
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         417
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    789
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8053
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1956
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            550167)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21381
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      862
;  :arith-conflicts         426
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         417
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1554
;  :datatype-accessor-ax    790
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8055
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1957
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            550349)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21381
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      721
;  :arith-assert-upper      863
;  :arith-conflicts         427
;  :arith-eq-adapter        302
;  :arith-fixed-eqs         418
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    790
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8056
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1958
;  :propagations            586
;  :quant-instantiations    226
;  :rlimit-count            550487)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21388
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      723
;  :arith-assert-upper      864
;  :arith-conflicts         427
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         418
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1555
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8062
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1959
;  :propagations            586
;  :quant-instantiations    228
;  :rlimit-count            550780)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21388
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      723
;  :arith-assert-upper      865
;  :arith-conflicts         428
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         419
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1556
;  :datatype-accessor-ax    791
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8063
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1960
;  :propagations            586
;  :quant-instantiations    228
;  :rlimit-count            550918)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21394
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      723
;  :arith-assert-upper      865
;  :arith-conflicts         428
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         419
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1556
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8065
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1961
;  :propagations            586
;  :quant-instantiations    228
;  :rlimit-count            551120)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21394
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      723
;  :arith-assert-upper      866
;  :arith-conflicts         429
;  :arith-eq-adapter        303
;  :arith-fixed-eqs         420
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    792
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8066
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1962
;  :propagations            586
;  :quant-instantiations    228
;  :rlimit-count            551258)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@309@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 96 | 0 <= i@309@04 | live]
; [else-branch: 96 | !(0 <= i@309@04) | live]
(push) ; 15
; [then-branch: 96 | 0 <= i@309@04]
(assert (<= 0 i@309@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      726
;  :arith-assert-upper      867
;  :arith-conflicts         429
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         420
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1557
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8074
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1963
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            551661)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      726
;  :arith-assert-upper      868
;  :arith-conflicts         430
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         421
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1558
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8075
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1964
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            551799)
(pop) ; 15
(push) ; 15
; [else-branch: 96 | !(0 <= i@309@04)]
(assert (not (<= 0 i@309@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 97 | i@309@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@309@04 | live]
; [else-branch: 97 | !(i@309@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@309@04) | live]
(push) ; 15
; [then-branch: 97 | i@309@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@309@04]
(assert (and
  (<
    i@309@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
  (<= 0 i@309@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      869
;  :arith-conflicts         430
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         421
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1558
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8077
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1965
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            551919)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      870
;  :arith-conflicts         431
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         422
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8078
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1966
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552057)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@309@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      870
;  :arith-conflicts         431
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         422
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8078
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1967
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552066)
; [eval] -1
(push) ; 16
; [then-branch: 98 | First:(Second:(Second:(Second:($t@306@04))))[i@309@04] == -1 | live]
; [else-branch: 98 | First:(Second:(Second:(Second:($t@306@04))))[i@309@04] != -1 | live]
(push) ; 17
; [then-branch: 98 | First:(Second:(Second:(Second:($t@306@04))))[i@309@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@309@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 98 | First:(Second:(Second:(Second:($t@306@04))))[i@309@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
      i@309@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      870
;  :arith-conflicts         431
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         422
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1559
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8079
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1968
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552243)
(push) ; 18
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      871
;  :arith-conflicts         432
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         423
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1560
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8080
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1969
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552381)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@309@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      218
;  :arith-assert-lower      727
;  :arith-assert-upper      871
;  :arith-conflicts         432
;  :arith-eq-adapter        304
;  :arith-fixed-eqs         423
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1560
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8080
;  :mk-clause               839
;  :num-allocs              10248348
;  :num-checks              1970
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552390)
(push) ; 18
; [then-branch: 99 | 0 <= First:(Second:(Second:(Second:($t@306@04))))[i@309@04] | live]
; [else-branch: 99 | !(0 <= First:(Second:(Second:(Second:($t@306@04))))[i@309@04]) | live]
(push) ; 19
; [then-branch: 99 | 0 <= First:(Second:(Second:(Second:($t@306@04))))[i@309@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@309@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      871
;  :arith-conflicts         432
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         423
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1560
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8083
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1971
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552515)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      872
;  :arith-conflicts         433
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         424
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8084
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1972
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552653)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@309@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      872
;  :arith-conflicts         433
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         424
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8084
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1973
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552662)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      872
;  :arith-conflicts         433
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         424
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1561
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8084
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1974
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552673)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21402
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      873
;  :arith-conflicts         434
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         425
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    793
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              748
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8085
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1975
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            552811)
(pop) ; 19
(push) ; 19
; [else-branch: 99 | !(0 <= First:(Second:(Second:(Second:($t@306@04))))[i@309@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
      i@309@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 97 | !(i@309@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@309@04)]
(assert (not
  (and
    (<
      i@309@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
    (<= 0 i@309@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@309@04 Int)) (!
  (implies
    (and
      (<
        i@309@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
      (<= 0 i@309@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
          i@309@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@309@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@309@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@309@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21407
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      873
;  :arith-conflicts         434
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         425
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1562
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8087
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1976
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            553399)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21407
;  :arith-add-rows          252
;  :arith-assert-diseq      219
;  :arith-assert-lower      730
;  :arith-assert-upper      874
;  :arith-conflicts         435
;  :arith-eq-adapter        305
;  :arith-fixed-eqs         426
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1563
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8088
;  :mk-clause               840
;  :num-allocs              10248348
;  :num-checks              1977
;  :propagations            586
;  :quant-instantiations    230
;  :rlimit-count            553537)
(declare-const $k@310@04 $Perm)
(assert ($Perm.isReadVar $k@310@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@310@04 $Perm.No) (< $Perm.No $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21407
;  :arith-add-rows          252
;  :arith-assert-diseq      220
;  :arith-assert-lower      732
;  :arith-assert-upper      875
;  :arith-conflicts         435
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         426
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1564
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8092
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1978
;  :propagations            587
;  :quant-instantiations    230
;  :rlimit-count            553735)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21408
;  :arith-add-rows          252
;  :arith-assert-diseq      220
;  :arith-assert-lower      732
;  :arith-assert-upper      876
;  :arith-conflicts         436
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         427
;  :arith-pivots            377
;  :binary-propagations     22
;  :conflicts               1565
;  :datatype-accessor-ax    794
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8093
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1979
;  :propagations            588
;  :quant-instantiations    230
;  :rlimit-count            553809)
(declare-const $t@311@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04))
    (= $t@311@04 $t@287@04))
  (implies
    (< $Perm.No $k@310@04)
    (=
      $t@311@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)))
(assert (<=
  (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21418
;  :arith-add-rows          254
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      877
;  :arith-conflicts         436
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         427
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1565
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8100
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1980
;  :propagations            588
;  :quant-instantiations    231
;  :rlimit-count            554358)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21418
;  :arith-add-rows          254
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      878
;  :arith-conflicts         437
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         428
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1566
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8101
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1981
;  :propagations            588
;  :quant-instantiations    231
;  :rlimit-count            554496)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21419
;  :arith-add-rows          254
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      879
;  :arith-conflicts         438
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         429
;  :arith-pivots            378
;  :binary-propagations     22
;  :conflicts               1567
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8102
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1982
;  :propagations            589
;  :quant-instantiations    231
;  :rlimit-count            554570)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21419
;  :arith-add-rows          256
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      880
;  :arith-conflicts         439
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         430
;  :arith-pivots            380
;  :binary-propagations     22
;  :conflicts               1568
;  :datatype-accessor-ax    795
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8103
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1983
;  :propagations            589
;  :quant-instantiations    231
;  :rlimit-count            554720)
(assert (not (= $t@311@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21424
;  :arith-add-rows          256
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      880
;  :arith-conflicts         439
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         430
;  :arith-pivots            380
;  :binary-propagations     22
;  :conflicts               1568
;  :datatype-accessor-ax    796
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8104
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1984
;  :propagations            589
;  :quant-instantiations    231
;  :rlimit-count            554948)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21424
;  :arith-add-rows          256
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      881
;  :arith-conflicts         440
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         431
;  :arith-pivots            380
;  :binary-propagations     22
;  :conflicts               1569
;  :datatype-accessor-ax    796
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8105
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1985
;  :propagations            589
;  :quant-instantiations    231
;  :rlimit-count            555086)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21425
;  :arith-add-rows          256
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      882
;  :arith-conflicts         441
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         432
;  :arith-pivots            380
;  :binary-propagations     22
;  :conflicts               1570
;  :datatype-accessor-ax    796
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8106
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1986
;  :propagations            590
;  :quant-instantiations    231
;  :rlimit-count            555160)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21425
;  :arith-add-rows          257
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      883
;  :arith-conflicts         442
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         433
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1571
;  :datatype-accessor-ax    796
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8107
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1987
;  :propagations            590
;  :quant-instantiations    231
;  :rlimit-count            555289)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21430
;  :arith-add-rows          257
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      883
;  :arith-conflicts         442
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         433
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1571
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8108
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1988
;  :propagations            590
;  :quant-instantiations    231
;  :rlimit-count            555509)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21430
;  :arith-add-rows          257
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      884
;  :arith-conflicts         443
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         434
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1572
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8109
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1989
;  :propagations            590
;  :quant-instantiations    231
;  :rlimit-count            555647)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21431
;  :arith-add-rows          257
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      885
;  :arith-conflicts         444
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         435
;  :arith-pivots            381
;  :binary-propagations     22
;  :conflicts               1573
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8110
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1990
;  :propagations            591
;  :quant-instantiations    231
;  :rlimit-count            555721)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21431
;  :arith-add-rows          258
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      886
;  :arith-conflicts         445
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         436
;  :arith-pivots            382
;  :binary-propagations     22
;  :conflicts               1574
;  :datatype-accessor-ax    797
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8111
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1991
;  :propagations            591
;  :quant-instantiations    231
;  :rlimit-count            555851)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21436
;  :arith-add-rows          258
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      886
;  :arith-conflicts         445
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         436
;  :arith-pivots            382
;  :binary-propagations     22
;  :conflicts               1574
;  :datatype-accessor-ax    798
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8112
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1992
;  :propagations            591
;  :quant-instantiations    231
;  :rlimit-count            556081)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21436
;  :arith-add-rows          258
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      887
;  :arith-conflicts         446
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         437
;  :arith-pivots            382
;  :binary-propagations     22
;  :conflicts               1575
;  :datatype-accessor-ax    798
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8113
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1993
;  :propagations            591
;  :quant-instantiations    231
;  :rlimit-count            556219)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21437
;  :arith-add-rows          258
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      888
;  :arith-conflicts         447
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         438
;  :arith-pivots            382
;  :binary-propagations     22
;  :conflicts               1576
;  :datatype-accessor-ax    798
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8114
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1994
;  :propagations            592
;  :quant-instantiations    231
;  :rlimit-count            556293)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21437
;  :arith-add-rows          259
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      889
;  :arith-conflicts         448
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         439
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    798
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8115
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1995
;  :propagations            592
;  :quant-instantiations    231
;  :rlimit-count            556422)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21442
;  :arith-add-rows          259
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      889
;  :arith-conflicts         448
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         439
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1577
;  :datatype-accessor-ax    799
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8116
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1996
;  :propagations            592
;  :quant-instantiations    231
;  :rlimit-count            556662)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21442
;  :arith-add-rows          259
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      890
;  :arith-conflicts         449
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         440
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1578
;  :datatype-accessor-ax    799
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8117
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1997
;  :propagations            592
;  :quant-instantiations    231
;  :rlimit-count            556800)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21443
;  :arith-add-rows          259
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      891
;  :arith-conflicts         450
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         441
;  :arith-pivots            383
;  :binary-propagations     22
;  :conflicts               1579
;  :datatype-accessor-ax    799
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8118
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1998
;  :propagations            593
;  :quant-instantiations    231
;  :rlimit-count            556874
;  :time                    0.00)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21443
;  :arith-add-rows          260
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      892
;  :arith-conflicts         451
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         442
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1580
;  :datatype-accessor-ax    799
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8119
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              1999
;  :propagations            593
;  :quant-instantiations    231
;  :rlimit-count            557004)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21448
;  :arith-add-rows          260
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      892
;  :arith-conflicts         451
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         442
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1580
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8120
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2000
;  :propagations            593
;  :quant-instantiations    231
;  :rlimit-count            557254)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21448
;  :arith-add-rows          260
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      893
;  :arith-conflicts         452
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         443
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1581
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8121
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2001
;  :propagations            593
;  :quant-instantiations    231
;  :rlimit-count            557392)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21449
;  :arith-add-rows          260
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      894
;  :arith-conflicts         453
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         444
;  :arith-pivots            384
;  :binary-propagations     22
;  :conflicts               1582
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8122
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2002
;  :propagations            594
;  :quant-instantiations    231
;  :rlimit-count            557466)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21449
;  :arith-add-rows          261
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      895
;  :arith-conflicts         454
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         445
;  :arith-pivots            385
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    800
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8123
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2003
;  :propagations            594
;  :quant-instantiations    231
;  :rlimit-count            557595)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21454
;  :arith-add-rows          261
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      895
;  :arith-conflicts         454
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         445
;  :arith-pivots            385
;  :binary-propagations     22
;  :conflicts               1583
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8124
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2004
;  :propagations            594
;  :quant-instantiations    231
;  :rlimit-count            557855)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21454
;  :arith-add-rows          261
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      896
;  :arith-conflicts         455
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         446
;  :arith-pivots            385
;  :binary-propagations     22
;  :conflicts               1584
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8125
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2005
;  :propagations            594
;  :quant-instantiations    231
;  :rlimit-count            557993)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21455
;  :arith-add-rows          261
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      897
;  :arith-conflicts         456
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         447
;  :arith-pivots            385
;  :binary-propagations     22
;  :conflicts               1585
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8126
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2006
;  :propagations            595
;  :quant-instantiations    231
;  :rlimit-count            558067)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21455
;  :arith-add-rows          262
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      898
;  :arith-conflicts         457
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         448
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               1586
;  :datatype-accessor-ax    801
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8127
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2007
;  :propagations            595
;  :quant-instantiations    231
;  :rlimit-count            558197)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21460
;  :arith-add-rows          262
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      898
;  :arith-conflicts         457
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         448
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               1586
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8128
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2008
;  :propagations            595
;  :quant-instantiations    231
;  :rlimit-count            558467)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21460
;  :arith-add-rows          262
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      899
;  :arith-conflicts         458
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         449
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               1587
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8129
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2009
;  :propagations            595
;  :quant-instantiations    231
;  :rlimit-count            558605)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21461
;  :arith-add-rows          262
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      900
;  :arith-conflicts         459
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         450
;  :arith-pivots            386
;  :binary-propagations     22
;  :conflicts               1588
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8130
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2010
;  :propagations            596
;  :quant-instantiations    231
;  :rlimit-count            558679)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21461
;  :arith-add-rows          263
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      901
;  :arith-conflicts         460
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         451
;  :arith-pivots            387
;  :binary-propagations     22
;  :conflicts               1589
;  :datatype-accessor-ax    802
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8131
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2011
;  :propagations            596
;  :quant-instantiations    231
;  :rlimit-count            558808)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21466
;  :arith-add-rows          263
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      901
;  :arith-conflicts         460
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         451
;  :arith-pivots            387
;  :binary-propagations     22
;  :conflicts               1589
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8132
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2012
;  :propagations            596
;  :quant-instantiations    231
;  :rlimit-count            559088)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21466
;  :arith-add-rows          263
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      902
;  :arith-conflicts         461
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         452
;  :arith-pivots            387
;  :binary-propagations     22
;  :conflicts               1590
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8133
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2013
;  :propagations            596
;  :quant-instantiations    231
;  :rlimit-count            559226)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21467
;  :arith-add-rows          263
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      903
;  :arith-conflicts         462
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         453
;  :arith-pivots            387
;  :binary-propagations     22
;  :conflicts               1591
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8134
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2014
;  :propagations            597
;  :quant-instantiations    231
;  :rlimit-count            559300)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21467
;  :arith-add-rows          264
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      904
;  :arith-conflicts         463
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         454
;  :arith-pivots            388
;  :binary-propagations     22
;  :conflicts               1592
;  :datatype-accessor-ax    803
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8135
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2015
;  :propagations            597
;  :quant-instantiations    231
;  :rlimit-count            559430)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21472
;  :arith-add-rows          264
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      904
;  :arith-conflicts         463
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         454
;  :arith-pivots            388
;  :binary-propagations     22
;  :conflicts               1592
;  :datatype-accessor-ax    804
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8136
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2016
;  :propagations            597
;  :quant-instantiations    231
;  :rlimit-count            559720)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21472
;  :arith-add-rows          264
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      905
;  :arith-conflicts         464
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         455
;  :arith-pivots            388
;  :binary-propagations     22
;  :conflicts               1593
;  :datatype-accessor-ax    804
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8137
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2017
;  :propagations            597
;  :quant-instantiations    231
;  :rlimit-count            559858)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21473
;  :arith-add-rows          264
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      906
;  :arith-conflicts         465
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         456
;  :arith-pivots            388
;  :binary-propagations     22
;  :conflicts               1594
;  :datatype-accessor-ax    804
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8138
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2018
;  :propagations            598
;  :quant-instantiations    231
;  :rlimit-count            559932)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21473
;  :arith-add-rows          265
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      907
;  :arith-conflicts         466
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         457
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    804
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8139
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2019
;  :propagations            598
;  :quant-instantiations    231
;  :rlimit-count            560061)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21478
;  :arith-add-rows          265
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      907
;  :arith-conflicts         466
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         457
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1595
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8140
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2020
;  :propagations            598
;  :quant-instantiations    231
;  :rlimit-count            560361)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21478
;  :arith-add-rows          265
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      908
;  :arith-conflicts         467
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         458
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1596
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8141
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2021
;  :propagations            598
;  :quant-instantiations    231
;  :rlimit-count            560499)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21479
;  :arith-add-rows          265
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      909
;  :arith-conflicts         468
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         459
;  :arith-pivots            389
;  :binary-propagations     22
;  :conflicts               1597
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8142
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2022
;  :propagations            599
;  :quant-instantiations    231
;  :rlimit-count            560573)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21479
;  :arith-add-rows          266
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      910
;  :arith-conflicts         469
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         460
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1598
;  :datatype-accessor-ax    805
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8143
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2023
;  :propagations            599
;  :quant-instantiations    231
;  :rlimit-count            560703)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21484
;  :arith-add-rows          266
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      910
;  :arith-conflicts         469
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         460
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1598
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8144
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2024
;  :propagations            599
;  :quant-instantiations    231
;  :rlimit-count            561013)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21484
;  :arith-add-rows          266
;  :arith-assert-diseq      220
;  :arith-assert-lower      733
;  :arith-assert-upper      911
;  :arith-conflicts         470
;  :arith-eq-adapter        306
;  :arith-fixed-eqs         461
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1599
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8145
;  :mk-clause               842
;  :num-allocs              10248348
;  :num-checks              2025
;  :propagations            599
;  :quant-instantiations    231
;  :rlimit-count            561151)
(declare-const $k@312@04 $Perm)
(assert ($Perm.isReadVar $k@312@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@312@04 $Perm.No) (< $Perm.No $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21484
;  :arith-add-rows          266
;  :arith-assert-diseq      221
;  :arith-assert-lower      735
;  :arith-assert-upper      912
;  :arith-conflicts         470
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         461
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1600
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8149
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2026
;  :propagations            600
;  :quant-instantiations    231
;  :rlimit-count            561350)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21485
;  :arith-add-rows          266
;  :arith-assert-diseq      221
;  :arith-assert-lower      735
;  :arith-assert-upper      913
;  :arith-conflicts         471
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         462
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1601
;  :datatype-accessor-ax    806
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8150
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2027
;  :propagations            601
;  :quant-instantiations    231
;  :rlimit-count            561424)
(declare-const $t@313@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04))
    (= $t@313@04 $t@289@04))
  (implies
    (< $Perm.No $k@312@04)
    (=
      $t@313@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)))
(assert (<=
  (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21495
;  :arith-add-rows          267
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      914
;  :arith-conflicts         471
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         462
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1601
;  :datatype-accessor-ax    807
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8157
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2028
;  :propagations            601
;  :quant-instantiations    232
;  :rlimit-count            562103)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21495
;  :arith-add-rows          267
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      915
;  :arith-conflicts         472
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         463
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1602
;  :datatype-accessor-ax    807
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8158
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2029
;  :propagations            601
;  :quant-instantiations    232
;  :rlimit-count            562241)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21496
;  :arith-add-rows          267
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      916
;  :arith-conflicts         473
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         464
;  :arith-pivots            390
;  :binary-propagations     22
;  :conflicts               1603
;  :datatype-accessor-ax    807
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8159
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2030
;  :propagations            602
;  :quant-instantiations    232
;  :rlimit-count            562315)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21496
;  :arith-add-rows          270
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      917
;  :arith-conflicts         474
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         465
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1604
;  :datatype-accessor-ax    807
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8160
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2031
;  :propagations            602
;  :quant-instantiations    232
;  :rlimit-count            562484)
(assert (not (= $t@313@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21501
;  :arith-add-rows          270
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      917
;  :arith-conflicts         474
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         465
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1604
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8161
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2032
;  :propagations            602
;  :quant-instantiations    232
;  :rlimit-count            562832)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21501
;  :arith-add-rows          270
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      918
;  :arith-conflicts         475
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         466
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1605
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8162
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2033
;  :propagations            602
;  :quant-instantiations    232
;  :rlimit-count            562970)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21502
;  :arith-add-rows          270
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      919
;  :arith-conflicts         476
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         467
;  :arith-pivots            392
;  :binary-propagations     22
;  :conflicts               1606
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8163
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2034
;  :propagations            603
;  :quant-instantiations    232
;  :rlimit-count            563044)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21502
;  :arith-add-rows          272
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      920
;  :arith-conflicts         477
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         468
;  :arith-pivots            396
;  :binary-propagations     22
;  :conflicts               1607
;  :datatype-accessor-ax    808
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8164
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2035
;  :propagations            603
;  :quant-instantiations    232
;  :rlimit-count            563214)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21507
;  :arith-add-rows          272
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      920
;  :arith-conflicts         477
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         468
;  :arith-pivots            396
;  :binary-propagations     22
;  :conflicts               1607
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8165
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2036
;  :propagations            603
;  :quant-instantiations    232
;  :rlimit-count            563554)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21507
;  :arith-add-rows          272
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      921
;  :arith-conflicts         478
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         469
;  :arith-pivots            396
;  :binary-propagations     22
;  :conflicts               1608
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8166
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2037
;  :propagations            603
;  :quant-instantiations    232
;  :rlimit-count            563692)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21508
;  :arith-add-rows          272
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      922
;  :arith-conflicts         479
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         470
;  :arith-pivots            396
;  :binary-propagations     22
;  :conflicts               1609
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8167
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2038
;  :propagations            604
;  :quant-instantiations    232
;  :rlimit-count            563766)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21508
;  :arith-add-rows          274
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      923
;  :arith-conflicts         480
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         471
;  :arith-pivots            398
;  :binary-propagations     22
;  :conflicts               1610
;  :datatype-accessor-ax    809
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8168
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2039
;  :propagations            604
;  :quant-instantiations    232
;  :rlimit-count            563927)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21513
;  :arith-add-rows          274
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      923
;  :arith-conflicts         480
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         471
;  :arith-pivots            398
;  :binary-propagations     22
;  :conflicts               1610
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8169
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2040
;  :propagations            604
;  :quant-instantiations    232
;  :rlimit-count            564277)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21513
;  :arith-add-rows          274
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      924
;  :arith-conflicts         481
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         472
;  :arith-pivots            398
;  :binary-propagations     22
;  :conflicts               1611
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8170
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2041
;  :propagations            604
;  :quant-instantiations    232
;  :rlimit-count            564415)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21514
;  :arith-add-rows          274
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      925
;  :arith-conflicts         482
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         473
;  :arith-pivots            398
;  :binary-propagations     22
;  :conflicts               1612
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8171
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2042
;  :propagations            605
;  :quant-instantiations    232
;  :rlimit-count            564489)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21514
;  :arith-add-rows          276
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      926
;  :arith-conflicts         483
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         474
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1613
;  :datatype-accessor-ax    810
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8172
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2043
;  :propagations            605
;  :quant-instantiations    232
;  :rlimit-count            564659)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21519
;  :arith-add-rows          276
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      926
;  :arith-conflicts         483
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         474
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1613
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8173
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2044
;  :propagations            605
;  :quant-instantiations    232
;  :rlimit-count            565019)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21519
;  :arith-add-rows          276
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      927
;  :arith-conflicts         484
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         475
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1614
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8174
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2045
;  :propagations            605
;  :quant-instantiations    232
;  :rlimit-count            565157)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21520
;  :arith-add-rows          276
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      928
;  :arith-conflicts         485
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         476
;  :arith-pivots            402
;  :binary-propagations     22
;  :conflicts               1615
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8175
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2046
;  :propagations            606
;  :quant-instantiations    232
;  :rlimit-count            565231)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21520
;  :arith-add-rows          278
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      929
;  :arith-conflicts         486
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         477
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1616
;  :datatype-accessor-ax    811
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8176
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2047
;  :propagations            606
;  :quant-instantiations    232
;  :rlimit-count            565392)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21525
;  :arith-add-rows          278
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      929
;  :arith-conflicts         486
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         477
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1616
;  :datatype-accessor-ax    812
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8177
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2048
;  :propagations            606
;  :quant-instantiations    232
;  :rlimit-count            565762)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21525
;  :arith-add-rows          278
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      930
;  :arith-conflicts         487
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         478
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1617
;  :datatype-accessor-ax    812
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8178
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2049
;  :propagations            606
;  :quant-instantiations    232
;  :rlimit-count            565900)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21526
;  :arith-add-rows          278
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      931
;  :arith-conflicts         488
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         479
;  :arith-pivots            404
;  :binary-propagations     22
;  :conflicts               1618
;  :datatype-accessor-ax    812
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8179
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2050
;  :propagations            607
;  :quant-instantiations    232
;  :rlimit-count            565974)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21526
;  :arith-add-rows          280
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      932
;  :arith-conflicts         489
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         480
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1619
;  :datatype-accessor-ax    812
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8180
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2051
;  :propagations            607
;  :quant-instantiations    232
;  :rlimit-count            566144)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21531
;  :arith-add-rows          280
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      932
;  :arith-conflicts         489
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         480
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1619
;  :datatype-accessor-ax    813
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8181
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2052
;  :propagations            607
;  :quant-instantiations    232
;  :rlimit-count            566524)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21531
;  :arith-add-rows          280
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      933
;  :arith-conflicts         490
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         481
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1620
;  :datatype-accessor-ax    813
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8182
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2053
;  :propagations            607
;  :quant-instantiations    232
;  :rlimit-count            566662)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21532
;  :arith-add-rows          280
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      934
;  :arith-conflicts         491
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         482
;  :arith-pivots            408
;  :binary-propagations     22
;  :conflicts               1621
;  :datatype-accessor-ax    813
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8183
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2054
;  :propagations            608
;  :quant-instantiations    232
;  :rlimit-count            566736)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21532
;  :arith-add-rows          282
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      935
;  :arith-conflicts         492
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         483
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    813
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8184
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2055
;  :propagations            608
;  :quant-instantiations    232
;  :rlimit-count            566897)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21537
;  :arith-add-rows          282
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      935
;  :arith-conflicts         492
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         483
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1622
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8185
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2056
;  :propagations            608
;  :quant-instantiations    232
;  :rlimit-count            567287)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21537
;  :arith-add-rows          282
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      936
;  :arith-conflicts         493
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         484
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1623
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8186
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2057
;  :propagations            608
;  :quant-instantiations    232
;  :rlimit-count            567425)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21538
;  :arith-add-rows          282
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      937
;  :arith-conflicts         494
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         485
;  :arith-pivots            410
;  :binary-propagations     22
;  :conflicts               1624
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8187
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2058
;  :propagations            609
;  :quant-instantiations    232
;  :rlimit-count            567499)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21538
;  :arith-add-rows          284
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      938
;  :arith-conflicts         495
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         486
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1625
;  :datatype-accessor-ax    814
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8188
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2059
;  :propagations            609
;  :quant-instantiations    232
;  :rlimit-count            567669)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21543
;  :arith-add-rows          284
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      938
;  :arith-conflicts         495
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         486
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1625
;  :datatype-accessor-ax    815
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8189
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2060
;  :propagations            609
;  :quant-instantiations    232
;  :rlimit-count            568069)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21543
;  :arith-add-rows          284
;  :arith-assert-diseq      221
;  :arith-assert-lower      736
;  :arith-assert-upper      939
;  :arith-conflicts         496
;  :arith-eq-adapter        307
;  :arith-fixed-eqs         487
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1626
;  :datatype-accessor-ax    815
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8190
;  :mk-clause               844
;  :num-allocs              10248348
;  :num-checks              2061
;  :propagations            609
;  :quant-instantiations    232
;  :rlimit-count            568207)
(declare-const $k@314@04 $Perm)
(assert ($Perm.isReadVar $k@314@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@314@04 $Perm.No) (< $Perm.No $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21543
;  :arith-add-rows          284
;  :arith-assert-diseq      222
;  :arith-assert-lower      738
;  :arith-assert-upper      940
;  :arith-conflicts         496
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         487
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1627
;  :datatype-accessor-ax    815
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8194
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2062
;  :propagations            610
;  :quant-instantiations    232
;  :rlimit-count            568405)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21544
;  :arith-add-rows          284
;  :arith-assert-diseq      222
;  :arith-assert-lower      738
;  :arith-assert-upper      941
;  :arith-conflicts         497
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         488
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1628
;  :datatype-accessor-ax    815
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8195
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2063
;  :propagations            611
;  :quant-instantiations    232
;  :rlimit-count            568479)
(declare-const $t@315@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04))
    (= $t@315@04 $t@291@04))
  (implies
    (< $Perm.No $k@314@04)
    (=
      $t@315@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)))
(assert (<=
  (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21554
;  :arith-add-rows          286
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      942
;  :arith-conflicts         497
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         488
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1628
;  :datatype-accessor-ax    816
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8202
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2064
;  :propagations            611
;  :quant-instantiations    233
;  :rlimit-count            569243)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21554
;  :arith-add-rows          286
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      943
;  :arith-conflicts         498
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         489
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1629
;  :datatype-accessor-ax    816
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8203
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2065
;  :propagations            611
;  :quant-instantiations    233
;  :rlimit-count            569381)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21555
;  :arith-add-rows          286
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      944
;  :arith-conflicts         499
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         490
;  :arith-pivots            414
;  :binary-propagations     22
;  :conflicts               1630
;  :datatype-accessor-ax    816
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8204
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2066
;  :propagations            612
;  :quant-instantiations    233
;  :rlimit-count            569455)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21555
;  :arith-add-rows          288
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      945
;  :arith-conflicts         500
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         491
;  :arith-pivots            416
;  :binary-propagations     22
;  :conflicts               1631
;  :datatype-accessor-ax    816
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8205
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2067
;  :propagations            612
;  :quant-instantiations    233
;  :rlimit-count            569603)
(assert (not (= $t@315@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21560
;  :arith-add-rows          288
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      945
;  :arith-conflicts         500
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         491
;  :arith-pivots            416
;  :binary-propagations     22
;  :conflicts               1631
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8206
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2068
;  :propagations            612
;  :quant-instantiations    233
;  :rlimit-count            570041)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21560
;  :arith-add-rows          288
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      946
;  :arith-conflicts         501
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         492
;  :arith-pivots            416
;  :binary-propagations     22
;  :conflicts               1632
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8207
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2069
;  :propagations            612
;  :quant-instantiations    233
;  :rlimit-count            570179)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21561
;  :arith-add-rows          288
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      947
;  :arith-conflicts         502
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         493
;  :arith-pivots            416
;  :binary-propagations     22
;  :conflicts               1633
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8208
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2070
;  :propagations            613
;  :quant-instantiations    233
;  :rlimit-count            570253)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21561
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      948
;  :arith-conflicts         503
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         494
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1634
;  :datatype-accessor-ax    817
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8209
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2071
;  :propagations            613
;  :quant-instantiations    233
;  :rlimit-count            570423)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21566
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      948
;  :arith-conflicts         503
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         494
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1634
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8210
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2072
;  :propagations            613
;  :quant-instantiations    233
;  :rlimit-count            570853)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21566
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      949
;  :arith-conflicts         504
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         495
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1635
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8211
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2073
;  :propagations            613
;  :quant-instantiations    233
;  :rlimit-count            570991)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21567
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      950
;  :arith-conflicts         505
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         496
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1636
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8212
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2074
;  :propagations            614
;  :quant-instantiations    233
;  :rlimit-count            571065)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21567
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      951
;  :arith-conflicts         506
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         497
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1637
;  :datatype-accessor-ax    818
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8213
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2075
;  :propagations            614
;  :quant-instantiations    233
;  :rlimit-count            571167)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21572
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      951
;  :arith-conflicts         506
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         497
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1637
;  :datatype-accessor-ax    819
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8214
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2076
;  :propagations            614
;  :quant-instantiations    233
;  :rlimit-count            571607)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21572
;  :arith-add-rows          291
;  :arith-assert-diseq      222
;  :arith-assert-lower      739
;  :arith-assert-upper      952
;  :arith-conflicts         507
;  :arith-eq-adapter        308
;  :arith-fixed-eqs         498
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1638
;  :datatype-accessor-ax    819
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8215
;  :mk-clause               846
;  :num-allocs              10248348
;  :num-checks              2077
;  :propagations            614
;  :quant-instantiations    233
;  :rlimit-count            571745)
(declare-const $k@316@04 $Perm)
(assert ($Perm.isReadVar $k@316@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@316@04 $Perm.No) (< $Perm.No $k@316@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21572
;  :arith-add-rows          291
;  :arith-assert-diseq      223
;  :arith-assert-lower      741
;  :arith-assert-upper      953
;  :arith-conflicts         507
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         498
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1639
;  :datatype-accessor-ax    819
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8219
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2078
;  :propagations            615
;  :quant-instantiations    233
;  :rlimit-count            571943)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21573
;  :arith-add-rows          291
;  :arith-assert-diseq      223
;  :arith-assert-lower      741
;  :arith-assert-upper      954
;  :arith-conflicts         508
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         499
;  :arith-pivots            418
;  :binary-propagations     22
;  :conflicts               1640
;  :datatype-accessor-ax    819
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8220
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2079
;  :propagations            616
;  :quant-instantiations    233
;  :rlimit-count            572017)
(declare-const $t@317@04 $Ref)
(assert (and
  (implies
    (< $Perm.No (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04))
    (= $t@317@04 $t@293@04))
  (implies
    (< $Perm.No $k@316@04)
    (=
      $t@317@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)))
(assert (<=
  (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
  $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21583
;  :arith-add-rows          293
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      955
;  :arith-conflicts         508
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         499
;  :arith-pivots            419
;  :binary-propagations     22
;  :conflicts               1640
;  :datatype-accessor-ax    820
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8227
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2080
;  :propagations            616
;  :quant-instantiations    234
;  :rlimit-count            572818)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21583
;  :arith-add-rows          293
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      956
;  :arith-conflicts         509
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         500
;  :arith-pivots            419
;  :binary-propagations     22
;  :conflicts               1641
;  :datatype-accessor-ax    820
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8228
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2081
;  :propagations            616
;  :quant-instantiations    234
;  :rlimit-count            572956)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21584
;  :arith-add-rows          293
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      957
;  :arith-conflicts         510
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         501
;  :arith-pivots            419
;  :binary-propagations     22
;  :conflicts               1642
;  :datatype-accessor-ax    820
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8229
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2082
;  :propagations            617
;  :quant-instantiations    234
;  :rlimit-count            573030)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21584
;  :arith-add-rows          295
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      958
;  :arith-conflicts         511
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         502
;  :arith-pivots            421
;  :binary-propagations     22
;  :conflicts               1643
;  :datatype-accessor-ax    820
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8230
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2083
;  :propagations            617
;  :quant-instantiations    234
;  :rlimit-count            573180)
(assert (not (= $t@317@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21589
;  :arith-add-rows          295
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      958
;  :arith-conflicts         511
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         502
;  :arith-pivots            421
;  :binary-propagations     22
;  :conflicts               1643
;  :datatype-accessor-ax    821
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8231
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2084
;  :propagations            617
;  :quant-instantiations    234
;  :rlimit-count            573658)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21589
;  :arith-add-rows          295
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      959
;  :arith-conflicts         512
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         503
;  :arith-pivots            421
;  :binary-propagations     22
;  :conflicts               1644
;  :datatype-accessor-ax    821
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8232
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2085
;  :propagations            617
;  :quant-instantiations    234
;  :rlimit-count            573796)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21590
;  :arith-add-rows          295
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      960
;  :arith-conflicts         513
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         504
;  :arith-pivots            421
;  :binary-propagations     22
;  :conflicts               1645
;  :datatype-accessor-ax    821
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8233
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2086
;  :propagations            618
;  :quant-instantiations    234
;  :rlimit-count            573870)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21590
;  :arith-add-rows          296
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      961
;  :arith-conflicts         514
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         505
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               1646
;  :datatype-accessor-ax    821
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8234
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2087
;  :propagations            618
;  :quant-instantiations    234
;  :rlimit-count            573999)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21595
;  :arith-add-rows          296
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      961
;  :arith-conflicts         514
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         505
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               1646
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8235
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2088
;  :propagations            618
;  :quant-instantiations    234
;  :rlimit-count            574469)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
        $k@298@04)
      $k@304@04)
    $k@307@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21595
;  :arith-add-rows          296
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      962
;  :arith-conflicts         515
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         506
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               1647
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8236
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2089
;  :propagations            618
;  :quant-instantiations    234
;  :rlimit-count            574607)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@308@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21596
;  :arith-add-rows          296
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      963
;  :arith-conflicts         516
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         507
;  :arith-pivots            422
;  :binary-propagations     22
;  :conflicts               1648
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8237
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2090
;  :propagations            619
;  :quant-instantiations    234
;  :rlimit-count            574681)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21596
;  :arith-add-rows          297
;  :arith-assert-diseq      223
;  :arith-assert-lower      742
;  :arith-assert-upper      964
;  :arith-conflicts         517
;  :arith-eq-adapter        309
;  :arith-fixed-eqs         508
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1649
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8238
;  :mk-clause               848
;  :num-allocs              10248348
;  :num-checks              2091
;  :propagations            619
;  :quant-instantiations    234
;  :rlimit-count            574810)
(declare-const $k@318@04 $Perm)
(assert ($Perm.isReadVar $k@318@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@318@04 $Perm.No) (< $Perm.No $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21596
;  :arith-add-rows          297
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      965
;  :arith-conflicts         517
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         508
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1650
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8242
;  :mk-clause               850
;  :num-allocs              10248348
;  :num-checks              2092
;  :propagations            620
;  :quant-instantiations    234
;  :rlimit-count            575009)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21596
;  :arith-add-rows          297
;  :arith-assert-diseq      224
;  :arith-assert-lower      744
;  :arith-assert-upper      965
;  :arith-conflicts         517
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         508
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1650
;  :datatype-accessor-ax    822
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8242
;  :mk-clause               850
;  :num-allocs              10248348
;  :num-checks              2093
;  :propagations            620
;  :quant-instantiations    234
;  :rlimit-count            575020)
(declare-const $t@319@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04))
    (= $t@319@04 $t@308@04))
  (implies
    (< $Perm.No $k@318@04)
    (=
      $t@319@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04)))
(assert (<=
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04)
      $k@318@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21604
;  :arith-add-rows          301
;  :arith-assert-diseq      224
;  :arith-assert-lower      745
;  :arith-assert-upper      966
;  :arith-conflicts         517
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         508
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1650
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8250
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2094
;  :propagations            620
;  :quant-instantiations    235
;  :rlimit-count            575921)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21604
;  :arith-add-rows          301
;  :arith-assert-diseq      224
;  :arith-assert-lower      745
;  :arith-assert-upper      967
;  :arith-conflicts         518
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         509
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1651
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5685
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5499
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8251
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2095
;  :propagations            620
;  :quant-instantiations    235
;  :rlimit-count            576063)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          301
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      969
;  :arith-conflicts         520
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         511
;  :arith-pivots            423
;  :binary-propagations     22
;  :conflicts               1655
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8252
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2096
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576209)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      970
;  :arith-conflicts         521
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         512
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1656
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8253
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2097
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576339)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      970
;  :arith-conflicts         521
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         512
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1656
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8253
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2098
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576350)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      971
;  :arith-conflicts         522
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         513
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1657
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8254
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2099
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576492)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      971
;  :arith-conflicts         522
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         513
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1657
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8254
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2100
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576503)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21625
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      972
;  :arith-conflicts         523
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         514
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8255
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2101
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            576645)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@287@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21627
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      972
;  :arith-conflicts         523
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         514
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1658
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8256
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2102
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            577074)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21627
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      746
;  :arith-assert-upper      973
;  :arith-conflicts         524
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         515
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1659
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5687
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5502
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8257
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2103
;  :propagations            625
;  :quant-instantiations    235
;  :rlimit-count            577216)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21649
;  :arith-add-rows          302
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      975
;  :arith-conflicts         526
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         517
;  :arith-pivots            424
;  :binary-propagations     22
;  :conflicts               1663
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5689
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5505
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8258
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2104
;  :propagations            630
;  :quant-instantiations    235
;  :rlimit-count            577363)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21649
;  :arith-add-rows          303
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      976
;  :arith-conflicts         527
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         518
;  :arith-pivots            425
;  :binary-propagations     22
;  :conflicts               1664
;  :datatype-accessor-ax    823
;  :datatype-constructor-ax 5689
;  :datatype-occurs-check   1001
;  :datatype-splits         4604
;  :decisions               5505
;  :del-clause              749
;  :final-checks            176
;  :max-generation          2
;  :max-memory              5.94
;  :memory                  5.94
;  :mk-bool-var             8259
;  :mk-clause               851
;  :num-allocs              10248348
;  :num-checks              2105
;  :propagations            630
;  :quant-instantiations    235
;  :rlimit-count            577492)
(assert (= $t@311@04 $t@287@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_146__190 := Rng_xor__EncodedGlobalVariables_Integer_Integer_Integer_Integer(__flatten_147__191.Main_rn, globals__176, __flatten_148__192.Rng_number_o, diz.Combinate_i, __flatten_153__197, __flatten_157__201)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) __flatten_147__191@268@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          303
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      976
;  :arith-conflicts         527
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         518
;  :arith-pivots            425
;  :binary-propagations     22
;  :conflicts               1665
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8419
;  :mk-clause               852
;  :num-allocs              11585147
;  :num-checks              2107
;  :propagations            635
;  :quant-instantiations    235
;  :rlimit-count            582404)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          304
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      977
;  :arith-conflicts         528
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1666
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8420
;  :mk-clause               852
;  :num-allocs              11585147
;  :num-checks              2108
;  :propagations            635
;  :quant-instantiations    235
;  :rlimit-count            582534)
(push) ; 13
(assert (not (= $t@311@04 __flatten_148__192@270@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          304
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      977
;  :arith-conflicts         528
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1666
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8420
;  :mk-clause               852
;  :num-allocs              11585147
;  :num-checks              2109
;  :propagations            635
;  :quant-instantiations    235
;  :rlimit-count            582545)
(push) ; 13
(assert (not (= $t@317@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          304
;  :arith-assert-diseq      224
;  :arith-assert-lower      747
;  :arith-assert-upper      977
;  :arith-conflicts         528
;  :arith-eq-adapter        310
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1666
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8420
;  :mk-clause               852
;  :num-allocs              11585147
;  :num-checks              2110
;  :propagations            635
;  :quant-instantiations    235
;  :rlimit-count            582556)
; [eval] diz != null
(declare-const $k@320@04 $Perm)
(assert ($Perm.isReadVar $k@320@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@320@04 $Perm.No) (< $Perm.No $k@320@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          304
;  :arith-assert-diseq      225
;  :arith-assert-lower      749
;  :arith-assert-upper      978
;  :arith-conflicts         528
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1667
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8424
;  :mk-clause               854
;  :num-allocs              11585147
;  :num-checks              2111
;  :propagations            636
;  :quant-instantiations    235
;  :rlimit-count            582755)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22606
;  :arith-add-rows          304
;  :arith-assert-diseq      225
;  :arith-assert-lower      749
;  :arith-assert-upper      978
;  :arith-conflicts         528
;  :arith-eq-adapter        311
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1667
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              773
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8424
;  :mk-clause               854
;  :num-allocs              11585147
;  :num-checks              2112
;  :propagations            636
;  :quant-instantiations    235
;  :rlimit-count            582766)
(push) ; 13
(assert (not (not
  (=
    (+
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04)
      $k@318@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22607
;  :arith-add-rows          304
;  :arith-assert-diseq      225
;  :arith-assert-lower      749
;  :arith-assert-upper      979
;  :arith-conflicts         529
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1668
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8426
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2113
;  :propagations            637
;  :quant-instantiations    235
;  :rlimit-count            582908)
(assert (<
  $k@320@04
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04)
      $k@318@04)
    $k@320@04)))
(assert (<=
  (-
    (+
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04)
      $k@318@04)
    $k@320@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+
          (-
            (-
              (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
              $k@298@04)
            $k@304@04)
          $k@307@04)
        $k@318@04)
      $k@320@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22607
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      980
;  :arith-conflicts         529
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         519
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1668
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8429
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2114
;  :propagations            637
;  :quant-instantiations    235
;  :rlimit-count            583173)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22607
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      981
;  :arith-conflicts         530
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         520
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1669
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8430
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2115
;  :propagations            637
;  :quant-instantiations    235
;  :rlimit-count            583315)
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= $t@319@04 $Ref.null))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22609
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      982
;  :arith-conflicts         531
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         521
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1670
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8431
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2116
;  :propagations            638
;  :quant-instantiations    235
;  :rlimit-count            583372)
(assert (not (= $t@319@04 $Ref.null)))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22609
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      982
;  :arith-conflicts         531
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         521
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1670
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8432
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2117
;  :propagations            638
;  :quant-instantiations    235
;  :rlimit-count            583438)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22609
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      983
;  :arith-conflicts         532
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         522
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1671
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8433
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2118
;  :propagations            638
;  :quant-instantiations    235
;  :rlimit-count            583580)
(push) ; 13
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22610
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      984
;  :arith-conflicts         533
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         523
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1672
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8434
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2119
;  :propagations            639
;  :quant-instantiations    235
;  :rlimit-count            583651)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22610
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      984
;  :arith-conflicts         533
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         523
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1672
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8434
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2120
;  :propagations            639
;  :quant-instantiations    235
;  :rlimit-count            583662)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22610
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      985
;  :arith-conflicts         534
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         524
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1673
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8435
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2121
;  :propagations            639
;  :quant-instantiations    235
;  :rlimit-count            583804)
(push) ; 13
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22611
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      986
;  :arith-conflicts         535
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         525
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1674
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8436
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2122
;  :propagations            640
;  :quant-instantiations    235
;  :rlimit-count            583875)
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22611
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      986
;  :arith-conflicts         535
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         525
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1674
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8436
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2123
;  :propagations            640
;  :quant-instantiations    235
;  :rlimit-count            583886)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22611
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      987
;  :arith-conflicts         536
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         526
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1675
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8437
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2124
;  :propagations            640
;  :quant-instantiations    235
;  :rlimit-count            584028)
(push) ; 13
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22612
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      988
;  :arith-conflicts         537
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         527
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1676
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8438
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2125
;  :propagations            641
;  :quant-instantiations    235
;  :rlimit-count            584099)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22612
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      988
;  :arith-conflicts         537
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         527
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1676
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8438
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2126
;  :propagations            641
;  :quant-instantiations    235
;  :rlimit-count            584110)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22612
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      989
;  :arith-conflicts         538
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         528
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1677
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8439
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2127
;  :propagations            641
;  :quant-instantiations    235
;  :rlimit-count            584252)
(push) ; 13
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22613
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      990
;  :arith-conflicts         539
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         529
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1678
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8440
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2128
;  :propagations            642
;  :quant-instantiations    235
;  :rlimit-count            584323)
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22613
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      990
;  :arith-conflicts         539
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         529
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1678
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8440
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2129
;  :propagations            642
;  :quant-instantiations    235
;  :rlimit-count            584334)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22613
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      991
;  :arith-conflicts         540
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         530
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1679
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8441
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2130
;  :propagations            642
;  :quant-instantiations    235
;  :rlimit-count            584476)
(push) ; 13
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22614
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      751
;  :arith-assert-upper      992
;  :arith-conflicts         541
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         531
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1680
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8442
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2131
;  :propagations            643
;  :quant-instantiations    235
;  :rlimit-count            584547)
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@321@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 100 | 0 <= i@321@04 | live]
; [else-branch: 100 | !(0 <= i@321@04) | live]
(push) ; 15
; [then-branch: 100 | 0 <= i@321@04]
(assert (<= 0 i@321@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22614
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      752
;  :arith-assert-upper      992
;  :arith-conflicts         541
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         531
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1680
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8443
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2132
;  :propagations            643
;  :quant-instantiations    235
;  :rlimit-count            584610)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22614
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      752
;  :arith-assert-upper      993
;  :arith-conflicts         542
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         532
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1681
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8444
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2133
;  :propagations            643
;  :quant-instantiations    235
;  :rlimit-count            584752)
(push) ; 16
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22615
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      752
;  :arith-assert-upper      994
;  :arith-conflicts         543
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         533
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1682
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8445
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2134
;  :propagations            644
;  :quant-instantiations    235
;  :rlimit-count            584823)
(pop) ; 15
(push) ; 15
; [else-branch: 100 | !(0 <= i@321@04)]
(assert (not (<= 0 i@321@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 101 | i@321@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@321@04 | live]
; [else-branch: 101 | !(i@321@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@321@04) | live]
(push) ; 15
; [then-branch: 101 | i@321@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@321@04]
(assert (and
  (<
    i@321@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
  (<= 0 i@321@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22615
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      995
;  :arith-conflicts         543
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         533
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1682
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8447
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2135
;  :propagations            644
;  :quant-instantiations    235
;  :rlimit-count            584943)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22615
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      996
;  :arith-conflicts         544
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         534
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1683
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8448
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2136
;  :propagations            644
;  :quant-instantiations    235
;  :rlimit-count            585085)
(push) ; 16
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22616
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      997
;  :arith-conflicts         545
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         535
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1684
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8449
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2137
;  :propagations            645
;  :quant-instantiations    235
;  :rlimit-count            585156)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@321@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22616
;  :arith-add-rows          308
;  :arith-assert-diseq      225
;  :arith-assert-lower      753
;  :arith-assert-upper      997
;  :arith-conflicts         545
;  :arith-eq-adapter        312
;  :arith-fixed-eqs         535
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1684
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8449
;  :mk-clause               856
;  :num-allocs              11585147
;  :num-checks              2138
;  :propagations            645
;  :quant-instantiations    235
;  :rlimit-count            585165)
; [eval] -1
(push) ; 16
; [then-branch: 102 | First:(Second:(Second:(Second:($t@306@04))))[i@321@04] == -1 | live]
; [else-branch: 102 | First:(Second:(Second:(Second:($t@306@04))))[i@321@04] != -1 | live]
(push) ; 17
; [then-branch: 102 | First:(Second:(Second:(Second:($t@306@04))))[i@321@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@321@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 102 | First:(Second:(Second:(Second:($t@306@04))))[i@321@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
      i@321@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22616
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      998
;  :arith-conflicts         545
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         535
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1684
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8455
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2139
;  :propagations            647
;  :quant-instantiations    236
;  :rlimit-count            585399)
(push) ; 18
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22616
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      999
;  :arith-conflicts         546
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         536
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1685
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8456
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2140
;  :propagations            647
;  :quant-instantiations    236
;  :rlimit-count            585541)
(push) ; 18
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22617
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1000
;  :arith-conflicts         547
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         537
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1686
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8457
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2141
;  :propagations            648
;  :quant-instantiations    236
;  :rlimit-count            585612)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@321@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22617
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1000
;  :arith-conflicts         547
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         537
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1686
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8457
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2142
;  :propagations            648
;  :quant-instantiations    236
;  :rlimit-count            585621)
(push) ; 18
; [then-branch: 103 | 0 <= First:(Second:(Second:(Second:($t@306@04))))[i@321@04] | live]
; [else-branch: 103 | !(0 <= First:(Second:(Second:(Second:($t@306@04))))[i@321@04]) | live]
(push) ; 19
; [then-branch: 103 | 0 <= First:(Second:(Second:(Second:($t@306@04))))[i@321@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@321@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22617
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1000
;  :arith-conflicts         547
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         537
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1686
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8457
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2143
;  :propagations            648
;  :quant-instantiations    236
;  :rlimit-count            585737)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22617
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1001
;  :arith-conflicts         548
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         538
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1687
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8458
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2144
;  :propagations            648
;  :quant-instantiations    236
;  :rlimit-count            585879)
(push) ; 20
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22618
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1002
;  :arith-conflicts         549
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         539
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1688
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8459
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2145
;  :propagations            649
;  :quant-instantiations    236
;  :rlimit-count            585950)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@321@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22618
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1002
;  :arith-conflicts         549
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         539
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1688
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8459
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2146
;  :propagations            649
;  :quant-instantiations    236
;  :rlimit-count            585959)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22618
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1002
;  :arith-conflicts         549
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         539
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1688
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8459
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2147
;  :propagations            649
;  :quant-instantiations    236
;  :rlimit-count            585970)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22618
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1003
;  :arith-conflicts         550
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         540
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1689
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8460
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2148
;  :propagations            649
;  :quant-instantiations    236
;  :rlimit-count            586112)
(push) ; 20
(assert (not (= $t@308@04 $t@319@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22619
;  :arith-add-rows          308
;  :arith-assert-diseq      226
;  :arith-assert-lower      756
;  :arith-assert-upper      1004
;  :arith-conflicts         551
;  :arith-eq-adapter        313
;  :arith-fixed-eqs         541
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1690
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              775
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8461
;  :mk-clause               860
;  :num-allocs              11585147
;  :num-checks              2149
;  :propagations            650
;  :quant-instantiations    236
;  :rlimit-count            586183)
(pop) ; 19
(push) ; 19
; [else-branch: 103 | !(0 <= First:(Second:(Second:(Second:($t@306@04))))[i@321@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
      i@321@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 101 | !(i@321@04 < |First:(Second:(Second:(Second:($t@306@04))))| && 0 <= i@321@04)]
(assert (not
  (and
    (<
      i@321@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
    (<= 0 i@321@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i@321@04 Int)) (!
  (implies
    (and
      (<
        i@321@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
      (<= 0 i@321@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
          i@321@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@321@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@321@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@321@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22619
;  :arith-add-rows          308
;  :arith-assert-diseq      228
;  :arith-assert-lower      757
;  :arith-assert-upper      1005
;  :arith-conflicts         551
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         541
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1691
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              793
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8469
;  :mk-clause               874
;  :num-allocs              11585147
;  :num-checks              2150
;  :propagations            652
;  :quant-instantiations    237
;  :rlimit-count            586629)
(assert (forall ((i@321@04 Int)) (!
  (implies
    (and
      (<
        i@321@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))
      (<= 0 i@321@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
          i@321@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@321@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
            i@321@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@306@04)))))
    i@321@04))
  :qid |prog.l<no position>|)))
(declare-const $k@322@04 $Perm)
(assert ($Perm.isReadVar $k@322@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22619
;  :arith-add-rows          308
;  :arith-assert-diseq      229
;  :arith-assert-lower      759
;  :arith-assert-upper      1006
;  :arith-conflicts         551
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         541
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1691
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              793
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8474
;  :mk-clause               876
;  :num-allocs              11585147
;  :num-checks              2151
;  :propagations            653
;  :quant-instantiations    237
;  :rlimit-count            587150)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22619
;  :arith-add-rows          308
;  :arith-assert-diseq      229
;  :arith-assert-lower      759
;  :arith-assert-upper      1007
;  :arith-conflicts         552
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         542
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1692
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              793
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8475
;  :mk-clause               876
;  :num-allocs              11585147
;  :num-checks              2152
;  :propagations            653
;  :quant-instantiations    237
;  :rlimit-count            587292)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@322@04 $Perm.No) (< $Perm.No $k@322@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22619
;  :arith-add-rows          308
;  :arith-assert-diseq      229
;  :arith-assert-lower      759
;  :arith-assert-upper      1007
;  :arith-conflicts         552
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         542
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1693
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5971
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5783
;  :del-clause              793
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8475
;  :mk-clause               876
;  :num-allocs              11585147
;  :num-checks              2153
;  :propagations            653
;  :quant-instantiations    237
;  :rlimit-count            587342)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22643
;  :arith-add-rows          308
;  :arith-assert-diseq      229
;  :arith-assert-lower      760
;  :arith-assert-upper      1009
;  :arith-conflicts         554
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         544
;  :arith-pivots            426
;  :binary-propagations     22
;  :conflicts               1697
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5973
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5786
;  :del-clause              793
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8476
;  :mk-clause               876
;  :num-allocs              11585147
;  :num-checks              2154
;  :propagations            658
;  :quant-instantiations    237
;  :rlimit-count            587491)
(push) ; 13
(assert (not (not
  (= (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22644
;  :arith-add-rows          309
;  :arith-assert-diseq      229
;  :arith-assert-lower      760
;  :arith-assert-upper      1010
;  :arith-conflicts         555
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         544
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1698
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5973
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5786
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8478
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2155
;  :propagations            659
;  :quant-instantiations    237
;  :rlimit-count            587620)
(assert (< $k@322@04 (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04) $k@322@04)))
(assert (<=
  (- (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04) $k@322@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22644
;  :arith-add-rows          311
;  :arith-assert-diseq      229
;  :arith-assert-lower      762
;  :arith-assert-upper      1011
;  :arith-conflicts         555
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         544
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1698
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5973
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5786
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8481
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2156
;  :propagations            659
;  :quant-instantiations    237
;  :rlimit-count            587841)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22644
;  :arith-add-rows          311
;  :arith-assert-diseq      229
;  :arith-assert-lower      762
;  :arith-assert-upper      1012
;  :arith-conflicts         556
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         545
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1699
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5973
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5786
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8482
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2157
;  :propagations            659
;  :quant-instantiations    237
;  :rlimit-count            587983)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22668
;  :arith-add-rows          311
;  :arith-assert-diseq      229
;  :arith-assert-lower      763
;  :arith-assert-upper      1014
;  :arith-conflicts         558
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         547
;  :arith-pivots            427
;  :binary-propagations     22
;  :conflicts               1703
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5975
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5789
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8483
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2158
;  :propagations            664
;  :quant-instantiations    237
;  :rlimit-count            588132)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22668
;  :arith-add-rows          312
;  :arith-assert-diseq      229
;  :arith-assert-lower      763
;  :arith-assert-upper      1015
;  :arith-conflicts         559
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         548
;  :arith-pivots            428
;  :binary-propagations     22
;  :conflicts               1704
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5975
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5789
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8484
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2159
;  :propagations            664
;  :quant-instantiations    237
;  :rlimit-count            588263)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22668
;  :arith-add-rows          312
;  :arith-assert-diseq      229
;  :arith-assert-lower      763
;  :arith-assert-upper      1015
;  :arith-conflicts         559
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         548
;  :arith-pivots            428
;  :binary-propagations     22
;  :conflicts               1704
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5975
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5789
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8484
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2160
;  :propagations            664
;  :quant-instantiations    237
;  :rlimit-count            588274)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22668
;  :arith-add-rows          312
;  :arith-assert-diseq      229
;  :arith-assert-lower      763
;  :arith-assert-upper      1016
;  :arith-conflicts         560
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         549
;  :arith-pivots            428
;  :binary-propagations     22
;  :conflicts               1705
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5975
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5789
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8485
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2161
;  :propagations            664
;  :quant-instantiations    237
;  :rlimit-count            588416)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22692
;  :arith-add-rows          312
;  :arith-assert-diseq      229
;  :arith-assert-lower      764
;  :arith-assert-upper      1018
;  :arith-conflicts         562
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         551
;  :arith-pivots            428
;  :binary-propagations     22
;  :conflicts               1709
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5977
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5792
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8486
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2162
;  :propagations            669
;  :quant-instantiations    237
;  :rlimit-count            588565)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22692
;  :arith-add-rows          313
;  :arith-assert-diseq      229
;  :arith-assert-lower      764
;  :arith-assert-upper      1019
;  :arith-conflicts         563
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         552
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               1710
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5977
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5792
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8487
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2163
;  :propagations            669
;  :quant-instantiations    237
;  :rlimit-count            588695)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22692
;  :arith-add-rows          313
;  :arith-assert-diseq      229
;  :arith-assert-lower      764
;  :arith-assert-upper      1019
;  :arith-conflicts         563
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         552
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               1710
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5977
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5792
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8487
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2164
;  :propagations            669
;  :quant-instantiations    237
;  :rlimit-count            588706)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22692
;  :arith-add-rows          313
;  :arith-assert-diseq      229
;  :arith-assert-lower      764
;  :arith-assert-upper      1020
;  :arith-conflicts         564
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         553
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               1711
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5977
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5792
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8488
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2165
;  :propagations            669
;  :quant-instantiations    237
;  :rlimit-count            588848)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22716
;  :arith-add-rows          313
;  :arith-assert-diseq      229
;  :arith-assert-lower      765
;  :arith-assert-upper      1022
;  :arith-conflicts         566
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         555
;  :arith-pivots            429
;  :binary-propagations     22
;  :conflicts               1715
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5979
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5795
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8489
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2166
;  :propagations            674
;  :quant-instantiations    237
;  :rlimit-count            588997)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22716
;  :arith-add-rows          314
;  :arith-assert-diseq      229
;  :arith-assert-lower      765
;  :arith-assert-upper      1023
;  :arith-conflicts         567
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         556
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1716
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5979
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5795
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8490
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2167
;  :propagations            674
;  :quant-instantiations    237
;  :rlimit-count            589128)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22716
;  :arith-add-rows          314
;  :arith-assert-diseq      229
;  :arith-assert-lower      765
;  :arith-assert-upper      1023
;  :arith-conflicts         567
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         556
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1716
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5979
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5795
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8490
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2168
;  :propagations            674
;  :quant-instantiations    237
;  :rlimit-count            589139)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22716
;  :arith-add-rows          314
;  :arith-assert-diseq      229
;  :arith-assert-lower      765
;  :arith-assert-upper      1024
;  :arith-conflicts         568
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         557
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1717
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5979
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5795
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8491
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2169
;  :propagations            674
;  :quant-instantiations    237
;  :rlimit-count            589281)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22740
;  :arith-add-rows          314
;  :arith-assert-diseq      229
;  :arith-assert-lower      766
;  :arith-assert-upper      1026
;  :arith-conflicts         570
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         559
;  :arith-pivots            430
;  :binary-propagations     22
;  :conflicts               1721
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5981
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5798
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8492
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2170
;  :propagations            679
;  :quant-instantiations    237
;  :rlimit-count            589430)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22740
;  :arith-add-rows          315
;  :arith-assert-diseq      229
;  :arith-assert-lower      766
;  :arith-assert-upper      1027
;  :arith-conflicts         571
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         560
;  :arith-pivots            431
;  :binary-propagations     22
;  :conflicts               1722
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5981
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5798
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8493
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2171
;  :propagations            679
;  :quant-instantiations    237
;  :rlimit-count            589560)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22740
;  :arith-add-rows          315
;  :arith-assert-diseq      229
;  :arith-assert-lower      766
;  :arith-assert-upper      1027
;  :arith-conflicts         571
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         560
;  :arith-pivots            431
;  :binary-propagations     22
;  :conflicts               1722
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5981
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5798
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8493
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2172
;  :propagations            679
;  :quant-instantiations    237
;  :rlimit-count            589571)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22740
;  :arith-add-rows          315
;  :arith-assert-diseq      229
;  :arith-assert-lower      766
;  :arith-assert-upper      1028
;  :arith-conflicts         572
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         561
;  :arith-pivots            431
;  :binary-propagations     22
;  :conflicts               1723
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5981
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5798
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8494
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2173
;  :propagations            679
;  :quant-instantiations    237
;  :rlimit-count            589713)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22764
;  :arith-add-rows          315
;  :arith-assert-diseq      229
;  :arith-assert-lower      767
;  :arith-assert-upper      1030
;  :arith-conflicts         574
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         563
;  :arith-pivots            431
;  :binary-propagations     22
;  :conflicts               1727
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5983
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5801
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8495
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2174
;  :propagations            684
;  :quant-instantiations    237
;  :rlimit-count            589862)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22764
;  :arith-add-rows          316
;  :arith-assert-diseq      229
;  :arith-assert-lower      767
;  :arith-assert-upper      1031
;  :arith-conflicts         575
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         564
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1728
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5983
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5801
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8496
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2175
;  :propagations            684
;  :quant-instantiations    237
;  :rlimit-count            589993)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22764
;  :arith-add-rows          316
;  :arith-assert-diseq      229
;  :arith-assert-lower      767
;  :arith-assert-upper      1031
;  :arith-conflicts         575
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         564
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1728
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5983
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5801
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8496
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2176
;  :propagations            684
;  :quant-instantiations    237
;  :rlimit-count            590004
;  :time                    0.00)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22764
;  :arith-add-rows          316
;  :arith-assert-diseq      229
;  :arith-assert-lower      767
;  :arith-assert-upper      1032
;  :arith-conflicts         576
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         565
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1729
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5983
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5801
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8497
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2177
;  :propagations            684
;  :quant-instantiations    237
;  :rlimit-count            590146)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22788
;  :arith-add-rows          316
;  :arith-assert-diseq      229
;  :arith-assert-lower      768
;  :arith-assert-upper      1034
;  :arith-conflicts         578
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         567
;  :arith-pivots            432
;  :binary-propagations     22
;  :conflicts               1733
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5985
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5804
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8498
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2178
;  :propagations            689
;  :quant-instantiations    237
;  :rlimit-count            590295)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22788
;  :arith-add-rows          317
;  :arith-assert-diseq      229
;  :arith-assert-lower      768
;  :arith-assert-upper      1035
;  :arith-conflicts         579
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         568
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1734
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5985
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5804
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8499
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2179
;  :propagations            689
;  :quant-instantiations    237
;  :rlimit-count            590425)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22788
;  :arith-add-rows          317
;  :arith-assert-diseq      229
;  :arith-assert-lower      768
;  :arith-assert-upper      1035
;  :arith-conflicts         579
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         568
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1734
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5985
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5804
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8499
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2180
;  :propagations            689
;  :quant-instantiations    237
;  :rlimit-count            590436)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22788
;  :arith-add-rows          317
;  :arith-assert-diseq      229
;  :arith-assert-lower      768
;  :arith-assert-upper      1036
;  :arith-conflicts         580
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         569
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1735
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5985
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5804
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8500
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2181
;  :propagations            689
;  :quant-instantiations    237
;  :rlimit-count            590578)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22812
;  :arith-add-rows          317
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      1038
;  :arith-conflicts         582
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         571
;  :arith-pivots            433
;  :binary-propagations     22
;  :conflicts               1739
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5987
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5807
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8501
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2182
;  :propagations            694
;  :quant-instantiations    237
;  :rlimit-count            590727)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22812
;  :arith-add-rows          318
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      1039
;  :arith-conflicts         583
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         572
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               1740
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5987
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5807
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8502
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2183
;  :propagations            694
;  :quant-instantiations    237
;  :rlimit-count            590858)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22812
;  :arith-add-rows          318
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      1039
;  :arith-conflicts         583
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         572
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               1740
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5987
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5807
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8502
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2184
;  :propagations            694
;  :quant-instantiations    237
;  :rlimit-count            590869)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22812
;  :arith-add-rows          318
;  :arith-assert-diseq      229
;  :arith-assert-lower      769
;  :arith-assert-upper      1040
;  :arith-conflicts         584
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         573
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               1741
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5987
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5807
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8503
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2185
;  :propagations            694
;  :quant-instantiations    237
;  :rlimit-count            591011)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22836
;  :arith-add-rows          318
;  :arith-assert-diseq      229
;  :arith-assert-lower      770
;  :arith-assert-upper      1042
;  :arith-conflicts         586
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         575
;  :arith-pivots            434
;  :binary-propagations     22
;  :conflicts               1745
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5989
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5810
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8504
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2186
;  :propagations            699
;  :quant-instantiations    237
;  :rlimit-count            591160)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22836
;  :arith-add-rows          319
;  :arith-assert-diseq      229
;  :arith-assert-lower      770
;  :arith-assert-upper      1043
;  :arith-conflicts         587
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         576
;  :arith-pivots            435
;  :binary-propagations     22
;  :conflicts               1746
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5989
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5810
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8505
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2187
;  :propagations            699
;  :quant-instantiations    237
;  :rlimit-count            591290)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22836
;  :arith-add-rows          319
;  :arith-assert-diseq      229
;  :arith-assert-lower      770
;  :arith-assert-upper      1043
;  :arith-conflicts         587
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         576
;  :arith-pivots            435
;  :binary-propagations     22
;  :conflicts               1746
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5989
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5810
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8505
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2188
;  :propagations            699
;  :quant-instantiations    237
;  :rlimit-count            591301)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22836
;  :arith-add-rows          319
;  :arith-assert-diseq      229
;  :arith-assert-lower      770
;  :arith-assert-upper      1044
;  :arith-conflicts         588
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         577
;  :arith-pivots            435
;  :binary-propagations     22
;  :conflicts               1747
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5989
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5810
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8506
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2189
;  :propagations            699
;  :quant-instantiations    237
;  :rlimit-count            591443)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22860
;  :arith-add-rows          319
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      1046
;  :arith-conflicts         590
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         579
;  :arith-pivots            435
;  :binary-propagations     22
;  :conflicts               1751
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5991
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5813
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8507
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2190
;  :propagations            704
;  :quant-instantiations    237
;  :rlimit-count            591592)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22860
;  :arith-add-rows          320
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      1047
;  :arith-conflicts         591
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         580
;  :arith-pivots            436
;  :binary-propagations     22
;  :conflicts               1752
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5991
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5813
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8508
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2191
;  :propagations            704
;  :quant-instantiations    237
;  :rlimit-count            591723)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22860
;  :arith-add-rows          320
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      1047
;  :arith-conflicts         591
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         580
;  :arith-pivots            436
;  :binary-propagations     22
;  :conflicts               1752
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5991
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5813
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8508
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2192
;  :propagations            704
;  :quant-instantiations    237
;  :rlimit-count            591734)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22860
;  :arith-add-rows          320
;  :arith-assert-diseq      229
;  :arith-assert-lower      771
;  :arith-assert-upper      1048
;  :arith-conflicts         592
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         581
;  :arith-pivots            436
;  :binary-propagations     22
;  :conflicts               1753
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5991
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5813
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8509
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2193
;  :propagations            704
;  :quant-instantiations    237
;  :rlimit-count            591876)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22884
;  :arith-add-rows          320
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      1050
;  :arith-conflicts         594
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         583
;  :arith-pivots            436
;  :binary-propagations     22
;  :conflicts               1757
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5993
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5816
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8510
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2194
;  :propagations            709
;  :quant-instantiations    237
;  :rlimit-count            592025)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22884
;  :arith-add-rows          321
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      1051
;  :arith-conflicts         595
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         584
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               1758
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5993
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5816
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8511
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2195
;  :propagations            709
;  :quant-instantiations    237
;  :rlimit-count            592155)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22884
;  :arith-add-rows          321
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      1051
;  :arith-conflicts         595
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         584
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               1758
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5993
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5816
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8511
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2196
;  :propagations            709
;  :quant-instantiations    237
;  :rlimit-count            592166)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22884
;  :arith-add-rows          321
;  :arith-assert-diseq      229
;  :arith-assert-lower      772
;  :arith-assert-upper      1052
;  :arith-conflicts         596
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         585
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               1759
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5993
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5816
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8512
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2197
;  :propagations            709
;  :quant-instantiations    237
;  :rlimit-count            592308)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22908
;  :arith-add-rows          321
;  :arith-assert-diseq      229
;  :arith-assert-lower      773
;  :arith-assert-upper      1054
;  :arith-conflicts         598
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         587
;  :arith-pivots            437
;  :binary-propagations     22
;  :conflicts               1763
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5995
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5819
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8513
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2198
;  :propagations            714
;  :quant-instantiations    237
;  :rlimit-count            592457)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22908
;  :arith-add-rows          322
;  :arith-assert-diseq      229
;  :arith-assert-lower      773
;  :arith-assert-upper      1055
;  :arith-conflicts         599
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         588
;  :arith-pivots            438
;  :binary-propagations     22
;  :conflicts               1764
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5995
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5819
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8514
;  :mk-clause               878
;  :num-allocs              11585147
;  :num-checks              2199
;  :propagations            714
;  :quant-instantiations    237
;  :rlimit-count            592588)
(declare-const $k@323@04 $Perm)
(assert ($Perm.isReadVar $k@323@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22908
;  :arith-add-rows          322
;  :arith-assert-diseq      230
;  :arith-assert-lower      775
;  :arith-assert-upper      1056
;  :arith-conflicts         599
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         588
;  :arith-pivots            438
;  :binary-propagations     22
;  :conflicts               1764
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5995
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5819
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8518
;  :mk-clause               880
;  :num-allocs              11585147
;  :num-checks              2200
;  :propagations            715
;  :quant-instantiations    237
;  :rlimit-count            592748)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22908
;  :arith-add-rows          322
;  :arith-assert-diseq      230
;  :arith-assert-lower      775
;  :arith-assert-upper      1057
;  :arith-conflicts         600
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         589
;  :arith-pivots            438
;  :binary-propagations     22
;  :conflicts               1765
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5995
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5819
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8519
;  :mk-clause               880
;  :num-allocs              11585147
;  :num-checks              2201
;  :propagations            715
;  :quant-instantiations    237
;  :rlimit-count            592890)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@323@04 $Perm.No) (< $Perm.No $k@323@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22908
;  :arith-add-rows          322
;  :arith-assert-diseq      230
;  :arith-assert-lower      775
;  :arith-assert-upper      1057
;  :arith-conflicts         600
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         589
;  :arith-pivots            438
;  :binary-propagations     22
;  :conflicts               1766
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5995
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5819
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8519
;  :mk-clause               880
;  :num-allocs              11585147
;  :num-checks              2202
;  :propagations            715
;  :quant-instantiations    237
;  :rlimit-count            592940)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22932
;  :arith-add-rows          322
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      1059
;  :arith-conflicts         602
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         591
;  :arith-pivots            438
;  :binary-propagations     22
;  :conflicts               1770
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5997
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5822
;  :del-clause              795
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8520
;  :mk-clause               880
;  :num-allocs              11585147
;  :num-checks              2203
;  :propagations            720
;  :quant-instantiations    237
;  :rlimit-count            593089)
(push) ; 13
(assert (not (not
  (= (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22933
;  :arith-add-rows          324
;  :arith-assert-diseq      230
;  :arith-assert-lower      776
;  :arith-assert-upper      1060
;  :arith-conflicts         603
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         591
;  :arith-pivots            440
;  :binary-propagations     22
;  :conflicts               1771
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5997
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5822
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8522
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2204
;  :propagations            721
;  :quant-instantiations    237
;  :rlimit-count            593250)
(assert (< $k@323@04 (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04) $k@323@04)))
(assert (<=
  (- (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04) $k@323@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22933
;  :arith-add-rows          325
;  :arith-assert-diseq      230
;  :arith-assert-lower      778
;  :arith-assert-upper      1061
;  :arith-conflicts         603
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         591
;  :arith-pivots            440
;  :binary-propagations     22
;  :conflicts               1771
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5997
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5822
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8525
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2205
;  :propagations            721
;  :quant-instantiations    237
;  :rlimit-count            593470)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22933
;  :arith-add-rows          325
;  :arith-assert-diseq      230
;  :arith-assert-lower      778
;  :arith-assert-upper      1062
;  :arith-conflicts         604
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         592
;  :arith-pivots            440
;  :binary-propagations     22
;  :conflicts               1772
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5997
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5822
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8526
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2206
;  :propagations            721
;  :quant-instantiations    237
;  :rlimit-count            593612)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22957
;  :arith-add-rows          325
;  :arith-assert-diseq      230
;  :arith-assert-lower      779
;  :arith-assert-upper      1064
;  :arith-conflicts         606
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         594
;  :arith-pivots            440
;  :binary-propagations     22
;  :conflicts               1776
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5999
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5825
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8527
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2207
;  :propagations            726
;  :quant-instantiations    237
;  :rlimit-count            593761)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22957
;  :arith-add-rows          327
;  :arith-assert-diseq      230
;  :arith-assert-lower      779
;  :arith-assert-upper      1065
;  :arith-conflicts         607
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         595
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1777
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5999
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5825
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8528
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2208
;  :propagations            726
;  :quant-instantiations    237
;  :rlimit-count            593932)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22957
;  :arith-add-rows          327
;  :arith-assert-diseq      230
;  :arith-assert-lower      779
;  :arith-assert-upper      1065
;  :arith-conflicts         607
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         595
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1777
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5999
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5825
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8528
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2209
;  :propagations            726
;  :quant-instantiations    237
;  :rlimit-count            593943)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22957
;  :arith-add-rows          327
;  :arith-assert-diseq      230
;  :arith-assert-lower      779
;  :arith-assert-upper      1066
;  :arith-conflicts         608
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         596
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1778
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 5999
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5825
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8529
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2210
;  :propagations            726
;  :quant-instantiations    237
;  :rlimit-count            594085)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22981
;  :arith-add-rows          327
;  :arith-assert-diseq      230
;  :arith-assert-lower      780
;  :arith-assert-upper      1068
;  :arith-conflicts         610
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         598
;  :arith-pivots            444
;  :binary-propagations     22
;  :conflicts               1782
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6001
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5828
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8530
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2211
;  :propagations            731
;  :quant-instantiations    237
;  :rlimit-count            594234)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22981
;  :arith-add-rows          329
;  :arith-assert-diseq      230
;  :arith-assert-lower      780
;  :arith-assert-upper      1069
;  :arith-conflicts         611
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         599
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               1783
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6001
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5828
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8531
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2212
;  :propagations            731
;  :quant-instantiations    237
;  :rlimit-count            594396)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22981
;  :arith-add-rows          329
;  :arith-assert-diseq      230
;  :arith-assert-lower      780
;  :arith-assert-upper      1069
;  :arith-conflicts         611
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         599
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               1783
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6001
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5828
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8531
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2213
;  :propagations            731
;  :quant-instantiations    237
;  :rlimit-count            594407)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22981
;  :arith-add-rows          329
;  :arith-assert-diseq      230
;  :arith-assert-lower      780
;  :arith-assert-upper      1070
;  :arith-conflicts         612
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         600
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               1784
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6001
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5828
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8532
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2214
;  :propagations            731
;  :quant-instantiations    237
;  :rlimit-count            594549)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23005
;  :arith-add-rows          329
;  :arith-assert-diseq      230
;  :arith-assert-lower      781
;  :arith-assert-upper      1072
;  :arith-conflicts         614
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         602
;  :arith-pivots            446
;  :binary-propagations     22
;  :conflicts               1788
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6003
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5831
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8533
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2215
;  :propagations            736
;  :quant-instantiations    237
;  :rlimit-count            594698)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23005
;  :arith-add-rows          331
;  :arith-assert-diseq      230
;  :arith-assert-lower      781
;  :arith-assert-upper      1073
;  :arith-conflicts         615
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         603
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1789
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6003
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5831
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8534
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2216
;  :propagations            736
;  :quant-instantiations    237
;  :rlimit-count            594869)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23005
;  :arith-add-rows          331
;  :arith-assert-diseq      230
;  :arith-assert-lower      781
;  :arith-assert-upper      1073
;  :arith-conflicts         615
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         603
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1789
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6003
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5831
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8534
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2217
;  :propagations            736
;  :quant-instantiations    237
;  :rlimit-count            594880)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23005
;  :arith-add-rows          331
;  :arith-assert-diseq      230
;  :arith-assert-lower      781
;  :arith-assert-upper      1074
;  :arith-conflicts         616
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         604
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1790
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6003
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5831
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8535
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2218
;  :propagations            736
;  :quant-instantiations    237
;  :rlimit-count            595022)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23029
;  :arith-add-rows          331
;  :arith-assert-diseq      230
;  :arith-assert-lower      782
;  :arith-assert-upper      1076
;  :arith-conflicts         618
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         606
;  :arith-pivots            450
;  :binary-propagations     22
;  :conflicts               1794
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6005
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5834
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8536
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2219
;  :propagations            741
;  :quant-instantiations    237
;  :rlimit-count            595171)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23029
;  :arith-add-rows          333
;  :arith-assert-diseq      230
;  :arith-assert-lower      782
;  :arith-assert-upper      1077
;  :arith-conflicts         619
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         607
;  :arith-pivots            452
;  :binary-propagations     22
;  :conflicts               1795
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6005
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5834
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8537
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2220
;  :propagations            741
;  :quant-instantiations    237
;  :rlimit-count            595333)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23029
;  :arith-add-rows          333
;  :arith-assert-diseq      230
;  :arith-assert-lower      782
;  :arith-assert-upper      1077
;  :arith-conflicts         619
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         607
;  :arith-pivots            452
;  :binary-propagations     22
;  :conflicts               1795
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6005
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5834
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8537
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2221
;  :propagations            741
;  :quant-instantiations    237
;  :rlimit-count            595344)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23029
;  :arith-add-rows          333
;  :arith-assert-diseq      230
;  :arith-assert-lower      782
;  :arith-assert-upper      1078
;  :arith-conflicts         620
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         608
;  :arith-pivots            452
;  :binary-propagations     22
;  :conflicts               1796
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6005
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5834
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8538
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2222
;  :propagations            741
;  :quant-instantiations    237
;  :rlimit-count            595486)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23053
;  :arith-add-rows          333
;  :arith-assert-diseq      230
;  :arith-assert-lower      783
;  :arith-assert-upper      1080
;  :arith-conflicts         622
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         610
;  :arith-pivots            452
;  :binary-propagations     22
;  :conflicts               1800
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6007
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5837
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8539
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2223
;  :propagations            746
;  :quant-instantiations    237
;  :rlimit-count            595635)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23053
;  :arith-add-rows          335
;  :arith-assert-diseq      230
;  :arith-assert-lower      783
;  :arith-assert-upper      1081
;  :arith-conflicts         623
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         611
;  :arith-pivots            456
;  :binary-propagations     22
;  :conflicts               1801
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6007
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5837
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8540
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2224
;  :propagations            746
;  :quant-instantiations    237
;  :rlimit-count            595806)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23053
;  :arith-add-rows          335
;  :arith-assert-diseq      230
;  :arith-assert-lower      783
;  :arith-assert-upper      1081
;  :arith-conflicts         623
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         611
;  :arith-pivots            456
;  :binary-propagations     22
;  :conflicts               1801
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6007
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5837
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8540
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2225
;  :propagations            746
;  :quant-instantiations    237
;  :rlimit-count            595817)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23053
;  :arith-add-rows          335
;  :arith-assert-diseq      230
;  :arith-assert-lower      783
;  :arith-assert-upper      1082
;  :arith-conflicts         624
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         612
;  :arith-pivots            456
;  :binary-propagations     22
;  :conflicts               1802
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6007
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5837
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8541
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2226
;  :propagations            746
;  :quant-instantiations    237
;  :rlimit-count            595959)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23077
;  :arith-add-rows          335
;  :arith-assert-diseq      230
;  :arith-assert-lower      784
;  :arith-assert-upper      1084
;  :arith-conflicts         626
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         614
;  :arith-pivots            456
;  :binary-propagations     22
;  :conflicts               1806
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6009
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5840
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8542
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2227
;  :propagations            751
;  :quant-instantiations    237
;  :rlimit-count            596108)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23077
;  :arith-add-rows          337
;  :arith-assert-diseq      230
;  :arith-assert-lower      784
;  :arith-assert-upper      1085
;  :arith-conflicts         627
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         615
;  :arith-pivots            458
;  :binary-propagations     22
;  :conflicts               1807
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6009
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5840
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8543
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2228
;  :propagations            751
;  :quant-instantiations    237
;  :rlimit-count            596270)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23077
;  :arith-add-rows          337
;  :arith-assert-diseq      230
;  :arith-assert-lower      784
;  :arith-assert-upper      1085
;  :arith-conflicts         627
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         615
;  :arith-pivots            458
;  :binary-propagations     22
;  :conflicts               1807
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6009
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5840
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8543
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2229
;  :propagations            751
;  :quant-instantiations    237
;  :rlimit-count            596281)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23077
;  :arith-add-rows          337
;  :arith-assert-diseq      230
;  :arith-assert-lower      784
;  :arith-assert-upper      1086
;  :arith-conflicts         628
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         616
;  :arith-pivots            458
;  :binary-propagations     22
;  :conflicts               1808
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6009
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5840
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8544
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2230
;  :propagations            751
;  :quant-instantiations    237
;  :rlimit-count            596423)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23101
;  :arith-add-rows          337
;  :arith-assert-diseq      230
;  :arith-assert-lower      785
;  :arith-assert-upper      1088
;  :arith-conflicts         630
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         618
;  :arith-pivots            458
;  :binary-propagations     22
;  :conflicts               1812
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6011
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5843
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8545
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2231
;  :propagations            756
;  :quant-instantiations    237
;  :rlimit-count            596572)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23101
;  :arith-add-rows          339
;  :arith-assert-diseq      230
;  :arith-assert-lower      785
;  :arith-assert-upper      1089
;  :arith-conflicts         631
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         619
;  :arith-pivots            462
;  :binary-propagations     22
;  :conflicts               1813
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6011
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5843
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8546
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2232
;  :propagations            756
;  :quant-instantiations    237
;  :rlimit-count            596743)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23101
;  :arith-add-rows          339
;  :arith-assert-diseq      230
;  :arith-assert-lower      785
;  :arith-assert-upper      1089
;  :arith-conflicts         631
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         619
;  :arith-pivots            462
;  :binary-propagations     22
;  :conflicts               1813
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6011
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5843
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8546
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2233
;  :propagations            756
;  :quant-instantiations    237
;  :rlimit-count            596754)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23101
;  :arith-add-rows          339
;  :arith-assert-diseq      230
;  :arith-assert-lower      785
;  :arith-assert-upper      1090
;  :arith-conflicts         632
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         620
;  :arith-pivots            462
;  :binary-propagations     22
;  :conflicts               1814
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6011
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5843
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8547
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2234
;  :propagations            756
;  :quant-instantiations    237
;  :rlimit-count            596896)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23125
;  :arith-add-rows          339
;  :arith-assert-diseq      230
;  :arith-assert-lower      786
;  :arith-assert-upper      1092
;  :arith-conflicts         634
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         622
;  :arith-pivots            462
;  :binary-propagations     22
;  :conflicts               1818
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6013
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5846
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8548
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2235
;  :propagations            761
;  :quant-instantiations    237
;  :rlimit-count            597045)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23125
;  :arith-add-rows          341
;  :arith-assert-diseq      230
;  :arith-assert-lower      786
;  :arith-assert-upper      1093
;  :arith-conflicts         635
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         623
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1819
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6013
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5846
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8549
;  :mk-clause               882
;  :num-allocs              11585147
;  :num-checks              2236
;  :propagations            761
;  :quant-instantiations    237
;  :rlimit-count            597207)
(declare-const $k@324@04 $Perm)
(assert ($Perm.isReadVar $k@324@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23125
;  :arith-add-rows          341
;  :arith-assert-diseq      231
;  :arith-assert-lower      788
;  :arith-assert-upper      1094
;  :arith-conflicts         635
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         623
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1819
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6013
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5846
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8553
;  :mk-clause               884
;  :num-allocs              11585147
;  :num-checks              2237
;  :propagations            762
;  :quant-instantiations    237
;  :rlimit-count            597367)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23125
;  :arith-add-rows          341
;  :arith-assert-diseq      231
;  :arith-assert-lower      788
;  :arith-assert-upper      1095
;  :arith-conflicts         636
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         624
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1820
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6013
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5846
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8554
;  :mk-clause               884
;  :num-allocs              11585147
;  :num-checks              2238
;  :propagations            762
;  :quant-instantiations    237
;  :rlimit-count            597509)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@324@04 $Perm.No) (< $Perm.No $k@324@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23125
;  :arith-add-rows          341
;  :arith-assert-diseq      231
;  :arith-assert-lower      788
;  :arith-assert-upper      1095
;  :arith-conflicts         636
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         624
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1821
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6013
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5846
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8554
;  :mk-clause               884
;  :num-allocs              11585147
;  :num-checks              2239
;  :propagations            762
;  :quant-instantiations    237
;  :rlimit-count            597559)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23149
;  :arith-add-rows          341
;  :arith-assert-diseq      231
;  :arith-assert-lower      789
;  :arith-assert-upper      1097
;  :arith-conflicts         638
;  :arith-eq-adapter        319
;  :arith-fixed-eqs         626
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1825
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6015
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5849
;  :del-clause              797
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8555
;  :mk-clause               884
;  :num-allocs              11585147
;  :num-checks              2240
;  :propagations            767
;  :quant-instantiations    237
;  :rlimit-count            597708)
(push) ; 13
(assert (not (not
  (= (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23150
;  :arith-add-rows          341
;  :arith-assert-diseq      231
;  :arith-assert-lower      789
;  :arith-assert-upper      1098
;  :arith-conflicts         639
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         626
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1826
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6015
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5849
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8557
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2241
;  :propagations            768
;  :quant-instantiations    237
;  :rlimit-count            597810)
(assert (< $k@324@04 (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04) $k@324@04)))
(assert (<=
  (- (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04) $k@324@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23150
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      791
;  :arith-assert-upper      1099
;  :arith-conflicts         639
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         626
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1826
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6015
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5849
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8560
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2242
;  :propagations            768
;  :quant-instantiations    237
;  :rlimit-count            598032)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23150
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      791
;  :arith-assert-upper      1100
;  :arith-conflicts         640
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         627
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1827
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6015
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5849
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8561
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2243
;  :propagations            768
;  :quant-instantiations    237
;  :rlimit-count            598174)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23174
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      792
;  :arith-assert-upper      1102
;  :arith-conflicts         642
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         629
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1831
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6017
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5852
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8562
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2244
;  :propagations            773
;  :quant-instantiations    237
;  :rlimit-count            598323)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23174
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      792
;  :arith-assert-upper      1103
;  :arith-conflicts         643
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         630
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1832
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6017
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5852
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8563
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2245
;  :propagations            773
;  :quant-instantiations    237
;  :rlimit-count            598426)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23174
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      792
;  :arith-assert-upper      1103
;  :arith-conflicts         643
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         630
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1832
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6017
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5852
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8563
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2246
;  :propagations            773
;  :quant-instantiations    237
;  :rlimit-count            598437)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23174
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      792
;  :arith-assert-upper      1104
;  :arith-conflicts         644
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         631
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1833
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6017
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5852
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8564
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2247
;  :propagations            773
;  :quant-instantiations    237
;  :rlimit-count            598579)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23198
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      793
;  :arith-assert-upper      1106
;  :arith-conflicts         646
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         633
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1837
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6019
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5855
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8565
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2248
;  :propagations            778
;  :quant-instantiations    237
;  :rlimit-count            598728)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23198
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      793
;  :arith-assert-upper      1107
;  :arith-conflicts         647
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         634
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6019
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5855
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8566
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2249
;  :propagations            778
;  :quant-instantiations    237
;  :rlimit-count            598831)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23198
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      793
;  :arith-assert-upper      1107
;  :arith-conflicts         647
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         634
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1838
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6019
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5855
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8566
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2250
;  :propagations            778
;  :quant-instantiations    237
;  :rlimit-count            598842)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23198
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      793
;  :arith-assert-upper      1108
;  :arith-conflicts         648
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         635
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1839
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6019
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5855
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8567
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2251
;  :propagations            778
;  :quant-instantiations    237
;  :rlimit-count            598984)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23222
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      794
;  :arith-assert-upper      1110
;  :arith-conflicts         650
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         637
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1843
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6021
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5858
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8568
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2252
;  :propagations            783
;  :quant-instantiations    237
;  :rlimit-count            599133)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23222
;  :arith-add-rows          344
;  :arith-assert-diseq      231
;  :arith-assert-lower      794
;  :arith-assert-upper      1111
;  :arith-conflicts         651
;  :arith-eq-adapter        320
;  :arith-fixed-eqs         638
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1844
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6021
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5858
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8569
;  :mk-clause               886
;  :num-allocs              11585147
;  :num-checks              2253
;  :propagations            783
;  :quant-instantiations    237
;  :rlimit-count            599236)
(declare-const $k@325@04 $Perm)
(assert ($Perm.isReadVar $k@325@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23222
;  :arith-add-rows          344
;  :arith-assert-diseq      232
;  :arith-assert-lower      796
;  :arith-assert-upper      1112
;  :arith-conflicts         651
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         638
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1844
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6021
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5858
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8573
;  :mk-clause               888
;  :num-allocs              11585147
;  :num-checks              2254
;  :propagations            784
;  :quant-instantiations    237
;  :rlimit-count            599395)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23222
;  :arith-add-rows          344
;  :arith-assert-diseq      232
;  :arith-assert-lower      796
;  :arith-assert-upper      1113
;  :arith-conflicts         652
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         639
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1845
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6021
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5858
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8574
;  :mk-clause               888
;  :num-allocs              11585147
;  :num-checks              2255
;  :propagations            784
;  :quant-instantiations    237
;  :rlimit-count            599537)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@325@04 $Perm.No) (< $Perm.No $k@325@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23222
;  :arith-add-rows          344
;  :arith-assert-diseq      232
;  :arith-assert-lower      796
;  :arith-assert-upper      1113
;  :arith-conflicts         652
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         639
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1846
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6021
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5858
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8574
;  :mk-clause               888
;  :num-allocs              11585147
;  :num-checks              2256
;  :propagations            784
;  :quant-instantiations    237
;  :rlimit-count            599587)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23246
;  :arith-add-rows          344
;  :arith-assert-diseq      232
;  :arith-assert-lower      797
;  :arith-assert-upper      1115
;  :arith-conflicts         654
;  :arith-eq-adapter        321
;  :arith-fixed-eqs         641
;  :arith-pivots            464
;  :binary-propagations     22
;  :conflicts               1850
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6023
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5861
;  :del-clause              799
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8575
;  :mk-clause               888
;  :num-allocs              11585147
;  :num-checks              2257
;  :propagations            789
;  :quant-instantiations    237
;  :rlimit-count            599736)
(push) ; 13
(assert (not (not
  (= (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23247
;  :arith-add-rows          345
;  :arith-assert-diseq      232
;  :arith-assert-lower      797
;  :arith-assert-upper      1116
;  :arith-conflicts         655
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         641
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               1851
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6023
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5861
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8577
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2258
;  :propagations            790
;  :quant-instantiations    237
;  :rlimit-count            599866)
(assert (< $k@325@04 (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04) $k@325@04)))
(assert (<=
  (- (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04) $k@325@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23247
;  :arith-add-rows          347
;  :arith-assert-diseq      232
;  :arith-assert-lower      799
;  :arith-assert-upper      1117
;  :arith-conflicts         655
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         641
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               1851
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6023
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5861
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8580
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2259
;  :propagations            790
;  :quant-instantiations    237
;  :rlimit-count            600087)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23247
;  :arith-add-rows          347
;  :arith-assert-diseq      232
;  :arith-assert-lower      799
;  :arith-assert-upper      1118
;  :arith-conflicts         656
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         642
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               1852
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6023
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5861
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8581
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2260
;  :propagations            790
;  :quant-instantiations    237
;  :rlimit-count            600229)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23271
;  :arith-add-rows          347
;  :arith-assert-diseq      232
;  :arith-assert-lower      800
;  :arith-assert-upper      1120
;  :arith-conflicts         658
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         644
;  :arith-pivots            465
;  :binary-propagations     22
;  :conflicts               1856
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6025
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5864
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8582
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2261
;  :propagations            795
;  :quant-instantiations    237
;  :rlimit-count            600378)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23271
;  :arith-add-rows          348
;  :arith-assert-diseq      232
;  :arith-assert-lower      800
;  :arith-assert-upper      1121
;  :arith-conflicts         659
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         645
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               1857
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6025
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5864
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8583
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2262
;  :propagations            795
;  :quant-instantiations    237
;  :rlimit-count            600508)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23271
;  :arith-add-rows          348
;  :arith-assert-diseq      232
;  :arith-assert-lower      800
;  :arith-assert-upper      1121
;  :arith-conflicts         659
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         645
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               1857
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6025
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5864
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8583
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2263
;  :propagations            795
;  :quant-instantiations    237
;  :rlimit-count            600519)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23271
;  :arith-add-rows          348
;  :arith-assert-diseq      232
;  :arith-assert-lower      800
;  :arith-assert-upper      1122
;  :arith-conflicts         660
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         646
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               1858
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6025
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5864
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8584
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2264
;  :propagations            795
;  :quant-instantiations    237
;  :rlimit-count            600661)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23295
;  :arith-add-rows          348
;  :arith-assert-diseq      232
;  :arith-assert-lower      801
;  :arith-assert-upper      1124
;  :arith-conflicts         662
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         648
;  :arith-pivots            466
;  :binary-propagations     22
;  :conflicts               1862
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6027
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5867
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8585
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2265
;  :propagations            800
;  :quant-instantiations    237
;  :rlimit-count            600810)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23295
;  :arith-add-rows          349
;  :arith-assert-diseq      232
;  :arith-assert-lower      801
;  :arith-assert-upper      1125
;  :arith-conflicts         663
;  :arith-eq-adapter        322
;  :arith-fixed-eqs         649
;  :arith-pivots            467
;  :binary-propagations     22
;  :conflicts               1863
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6027
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5867
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8586
;  :mk-clause               890
;  :num-allocs              11585147
;  :num-checks              2266
;  :propagations            800
;  :quant-instantiations    237
;  :rlimit-count            600941)
(declare-const $k@326@04 $Perm)
(assert ($Perm.isReadVar $k@326@04 $Perm.Write))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23295
;  :arith-add-rows          349
;  :arith-assert-diseq      233
;  :arith-assert-lower      803
;  :arith-assert-upper      1126
;  :arith-conflicts         663
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         649
;  :arith-pivots            467
;  :binary-propagations     22
;  :conflicts               1863
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6027
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5867
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8590
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2267
;  :propagations            801
;  :quant-instantiations    237
;  :rlimit-count            601100)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23295
;  :arith-add-rows          349
;  :arith-assert-diseq      233
;  :arith-assert-lower      803
;  :arith-assert-upper      1127
;  :arith-conflicts         664
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         650
;  :arith-pivots            467
;  :binary-propagations     22
;  :conflicts               1864
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6027
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5867
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8591
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2268
;  :propagations            801
;  :quant-instantiations    237
;  :rlimit-count            601242)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          349
;  :arith-assert-diseq      233
;  :arith-assert-lower      804
;  :arith-assert-upper      1129
;  :arith-conflicts         666
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         652
;  :arith-pivots            467
;  :binary-propagations     22
;  :conflicts               1868
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8592
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2269
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            601391)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          350
;  :arith-assert-diseq      233
;  :arith-assert-lower      804
;  :arith-assert-upper      1130
;  :arith-conflicts         667
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         653
;  :arith-pivots            468
;  :binary-propagations     22
;  :conflicts               1869
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8593
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2270
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            601521)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@326@04 $Perm.No) (< $Perm.No $k@326@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          350
;  :arith-assert-diseq      233
;  :arith-assert-lower      804
;  :arith-assert-upper      1130
;  :arith-conflicts         667
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         653
;  :arith-pivots            468
;  :binary-propagations     22
;  :conflicts               1870
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8593
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2271
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            601571)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          350
;  :arith-assert-diseq      233
;  :arith-assert-lower      804
;  :arith-assert-upper      1130
;  :arith-conflicts         667
;  :arith-eq-adapter        323
;  :arith-fixed-eqs         653
;  :arith-pivots            468
;  :binary-propagations     22
;  :conflicts               1870
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8593
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2272
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            601582)
(push) ; 13
(assert (not (not
  (=
    (-
      (+
        (+
          (-
            (-
              (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
              $k@298@04)
            $k@304@04)
          $k@307@04)
        $k@318@04)
      $k@320@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          350
;  :arith-assert-diseq      233
;  :arith-assert-lower      804
;  :arith-assert-upper      1130
;  :arith-conflicts         667
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         653
;  :arith-pivots            468
;  :binary-propagations     22
;  :conflicts               1871
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8594
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2273
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            601738)
(assert (<
  $k@326@04
  (-
    (+
      (+
        (-
          (-
            (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
            $k@298@04)
          $k@304@04)
        $k@307@04)
      $k@318@04)
    $k@320@04)))
(assert (<=
  $Perm.No
  (-
    (-
      (+
        (+
          (-
            (-
              (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
              $k@298@04)
            $k@304@04)
          $k@307@04)
        $k@318@04)
      $k@320@04)
    $k@326@04)))
(assert (<=
  (-
    (-
      (+
        (+
          (-
            (-
              (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
              $k@298@04)
            $k@304@04)
          $k@307@04)
        $k@318@04)
      $k@320@04)
    $k@326@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          354
;  :arith-assert-diseq      233
;  :arith-assert-lower      806
;  :arith-assert-upper      1131
;  :arith-conflicts         667
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         653
;  :arith-pivots            469
;  :binary-propagations     22
;  :conflicts               1871
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8597
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2274
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            602034)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23319
;  :arith-add-rows          354
;  :arith-assert-diseq      233
;  :arith-assert-lower      806
;  :arith-assert-upper      1132
;  :arith-conflicts         668
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         654
;  :arith-pivots            469
;  :binary-propagations     22
;  :conflicts               1872
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6029
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5870
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8598
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2275
;  :propagations            806
;  :quant-instantiations    237
;  :rlimit-count            602176)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          354
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1134
;  :arith-conflicts         670
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         656
;  :arith-pivots            469
;  :binary-propagations     22
;  :conflicts               1876
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8599
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2276
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602325)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1135
;  :arith-conflicts         671
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         657
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1877
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8600
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2277
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602456)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1135
;  :arith-conflicts         671
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         657
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1877
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8600
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2278
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602467)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1136
;  :arith-conflicts         672
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         658
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1878
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8601
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2279
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602609)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1136
;  :arith-conflicts         672
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         658
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1878
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8601
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2280
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602620)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1137
;  :arith-conflicts         673
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         659
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1879
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8602
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2281
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602762)
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1137
;  :arith-conflicts         673
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         659
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1879
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8602
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2282
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602773)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
          $k@298@04)
        $k@304@04)
      $k@307@04)
    $k@318@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23343
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      807
;  :arith-assert-upper      1138
;  :arith-conflicts         674
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         660
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1880
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6031
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5873
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8603
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2283
;  :propagations            811
;  :quant-instantiations    237
;  :rlimit-count            602915)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@319@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23367
;  :arith-add-rows          355
;  :arith-assert-diseq      233
;  :arith-assert-lower      808
;  :arith-assert-upper      1140
;  :arith-conflicts         676
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         662
;  :arith-pivots            470
;  :binary-propagations     22
;  :conflicts               1884
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8604
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2284
;  :propagations            816
;  :quant-instantiations    237
;  :rlimit-count            603064)
(push) ; 13
(assert (not (< $Perm.No (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23367
;  :arith-add-rows          356
;  :arith-assert-diseq      233
;  :arith-assert-lower      808
;  :arith-assert-upper      1141
;  :arith-conflicts         677
;  :arith-eq-adapter        324
;  :arith-fixed-eqs         663
;  :arith-pivots            471
;  :binary-propagations     22
;  :conflicts               1885
;  :datatype-accessor-ax    829
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8605
;  :mk-clause               892
;  :num-allocs              11585147
;  :num-checks              2285
;  :propagations            816
;  :quant-instantiations    237
;  :rlimit-count            603194)
(declare-const sys__result@327@04 Int)
(declare-const $t@328@04 $Snap)
(assert (= $t@328@04 ($Snap.combine ($Snap.first $t@328@04) ($Snap.second $t@328@04))))
(declare-const $k@329@04 $Perm)
(assert ($Perm.isReadVar $k@329@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@329@04 $Perm.No) (< $Perm.No $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23372
;  :arith-add-rows          356
;  :arith-assert-diseq      234
;  :arith-assert-lower      810
;  :arith-assert-upper      1142
;  :arith-conflicts         677
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         663
;  :arith-pivots            471
;  :binary-propagations     22
;  :conflicts               1886
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8610
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2286
;  :propagations            817
;  :quant-instantiations    237
;  :rlimit-count            603480)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23372
;  :arith-add-rows          356
;  :arith-assert-diseq      234
;  :arith-assert-lower      810
;  :arith-assert-upper      1142
;  :arith-conflicts         677
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         663
;  :arith-pivots            471
;  :binary-propagations     22
;  :conflicts               1886
;  :datatype-accessor-ax    830
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8610
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2287
;  :propagations            817
;  :quant-instantiations    237
;  :rlimit-count            603491)
(declare-const $t@330@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04))
    (= $t@330@04 $t@319@04))
  (implies
    (< $Perm.No $k@329@04)
    (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@328@04))))))
(assert (<=
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04)))
(assert (<=
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second $t@328@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@328@04))
    ($Snap.second ($Snap.second $t@328@04)))))
(assert (= ($Snap.first ($Snap.second $t@328@04)) $Snap.unit))
; [eval] diz.Rng_m != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23382
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1143
;  :arith-conflicts         677
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         663
;  :arith-pivots            471
;  :binary-propagations     22
;  :conflicts               1886
;  :datatype-accessor-ax    831
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8617
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2288
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604034)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23382
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1144
;  :arith-conflicts         678
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         664
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1887
;  :datatype-accessor-ax    831
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8618
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2289
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604222)
(assert (not (= $t@330@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@328@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@328@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23387
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1144
;  :arith-conflicts         678
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         664
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1887
;  :datatype-accessor-ax    832
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8619
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2290
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604370)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23387
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1145
;  :arith-conflicts         679
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         665
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1888
;  :datatype-accessor-ax    832
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8620
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2291
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604554)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@328@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23392
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1145
;  :arith-conflicts         679
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         665
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1888
;  :datatype-accessor-ax    833
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8621
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2292
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604694)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23392
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1146
;  :arith-conflicts         680
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         666
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1889
;  :datatype-accessor-ax    833
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8622
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2293
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            604878)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_process_state| == 3
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1146
;  :arith-conflicts         680
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         666
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1889
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8624
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2294
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            605060)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23398
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      811
;  :arith-assert-upper      1147
;  :arith-conflicts         681
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         667
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1890
;  :datatype-accessor-ax    834
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8625
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2295
;  :propagations            817
;  :quant-instantiations    238
;  :rlimit-count            605244)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))
  3))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23405
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      813
;  :arith-assert-upper      1148
;  :arith-conflicts         681
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         667
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1890
;  :datatype-accessor-ax    835
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8631
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2296
;  :propagations            817
;  :quant-instantiations    240
;  :rlimit-count            605537)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23405
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      813
;  :arith-assert-upper      1149
;  :arith-conflicts         682
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         668
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1891
;  :datatype-accessor-ax    835
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8632
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2297
;  :propagations            817
;  :quant-instantiations    240
;  :rlimit-count            605721)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
  $Snap.unit))
; [eval] |diz.Rng_m.Main_event_state| == 6
; [eval] |diz.Rng_m.Main_event_state|
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23411
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      813
;  :arith-assert-upper      1149
;  :arith-conflicts         682
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         668
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1891
;  :datatype-accessor-ax    836
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8634
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2298
;  :propagations            817
;  :quant-instantiations    240
;  :rlimit-count            605923)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23411
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      813
;  :arith-assert-upper      1150
;  :arith-conflicts         683
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         669
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1892
;  :datatype-accessor-ax    836
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8635
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2299
;  :propagations            817
;  :quant-instantiations    240
;  :rlimit-count            606107)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))
  6))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Rng_m.Main_process_state[i] } 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|)
(declare-const i@331@04 Int)
(push) ; 13
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state| ==> diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= i && i < |diz.Rng_m.Main_process_state|
; [eval] 0 <= i
(push) ; 14
; [then-branch: 104 | 0 <= i@331@04 | live]
; [else-branch: 104 | !(0 <= i@331@04) | live]
(push) ; 15
; [then-branch: 104 | 0 <= i@331@04]
(assert (<= 0 i@331@04))
; [eval] i < |diz.Rng_m.Main_process_state|
; [eval] |diz.Rng_m.Main_process_state|
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      816
;  :arith-assert-upper      1151
;  :arith-conflicts         683
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         669
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1892
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8643
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2300
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            606509)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      816
;  :arith-assert-upper      1152
;  :arith-conflicts         684
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         670
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1893
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8644
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2301
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            606693)
(pop) ; 15
(push) ; 15
; [else-branch: 104 | !(0 <= i@331@04)]
(assert (not (<= 0 i@331@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 105 | i@331@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i@331@04 | live]
; [else-branch: 105 | !(i@331@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i@331@04) | live]
(push) ; 15
; [then-branch: 105 | i@331@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i@331@04]
(assert (and
  (<
    i@331@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
  (<= 0 i@331@04)))
; [eval] diz.Rng_m.Main_process_state[i] == -1 || 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i] == -1
; [eval] diz.Rng_m.Main_process_state[i]
(push) ; 16
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1153
;  :arith-conflicts         684
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         670
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1893
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8646
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2302
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            606813)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1154
;  :arith-conflicts         685
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         671
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1894
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8647
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2303
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            606997)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@331@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1154
;  :arith-conflicts         685
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         671
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1894
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8647
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2304
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607006)
; [eval] -1
(push) ; 16
; [then-branch: 106 | First:(Second:(Second:(Second:($t@328@04))))[i@331@04] == -1 | live]
; [else-branch: 106 | First:(Second:(Second:(Second:($t@328@04))))[i@331@04] != -1 | live]
(push) ; 17
; [then-branch: 106 | First:(Second:(Second:(Second:($t@328@04))))[i@331@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i@331@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 106 | First:(Second:(Second:(Second:($t@328@04))))[i@331@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
      i@331@04)
    (- 0 1))))
; [eval] 0 <= diz.Rng_m.Main_process_state[i] && diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] 0 <= diz.Rng_m.Main_process_state[i]
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1154
;  :arith-conflicts         685
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         671
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1894
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8648
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2305
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607183)
(push) ; 18
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1155
;  :arith-conflicts         686
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         672
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1895
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8649
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2306
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607367)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@331@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      234
;  :arith-assert-lower      817
;  :arith-assert-upper      1155
;  :arith-conflicts         686
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         672
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1895
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8649
;  :mk-clause               894
;  :num-allocs              11585147
;  :num-checks              2307
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607376)
(push) ; 18
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@328@04))))[i@331@04] | live]
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@328@04))))[i@331@04]) | live]
(push) ; 19
; [then-branch: 107 | 0 <= First:(Second:(Second:(Second:($t@328@04))))[i@331@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i@331@04)))
; [eval] diz.Rng_m.Main_process_state[i] < |diz.Rng_m.Main_event_state|
; [eval] diz.Rng_m.Main_process_state[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1155
;  :arith-conflicts         686
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         672
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1895
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8652
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2308
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607501)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1156
;  :arith-conflicts         687
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         673
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8653
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2309
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607685)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@331@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1156
;  :arith-conflicts         687
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         673
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8653
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2310
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607694)
; [eval] |diz.Rng_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1156
;  :arith-conflicts         687
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         673
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1896
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8653
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2311
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607705)
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23419
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1157
;  :arith-conflicts         688
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         674
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1897
;  :datatype-accessor-ax    837
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              801
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8654
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2312
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            607889)
(pop) ; 19
(push) ; 19
; [else-branch: 107 | !(0 <= First:(Second:(Second:(Second:($t@328@04))))[i@331@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
      i@331@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 105 | !(i@331@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i@331@04)]
(assert (not
  (and
    (<
      i@331@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
    (<= 0 i@331@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@331@04 Int)) (!
  (implies
    (and
      (<
        i@331@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
      (<= 0 i@331@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
          i@331@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i@331@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i@331@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i@331@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23424
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1157
;  :arith-conflicts         688
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         674
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1897
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8656
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2313
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            608477)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23424
;  :arith-add-rows          361
;  :arith-assert-diseq      235
;  :arith-assert-lower      820
;  :arith-assert-upper      1158
;  :arith-conflicts         689
;  :arith-eq-adapter        328
;  :arith-fixed-eqs         675
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1898
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8657
;  :mk-clause               895
;  :num-allocs              11585147
;  :num-checks              2314
;  :propagations            817
;  :quant-instantiations    242
;  :rlimit-count            608661)
(declare-const $k@332@04 $Perm)
(assert ($Perm.isReadVar $k@332@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@332@04 $Perm.No) (< $Perm.No $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23424
;  :arith-add-rows          361
;  :arith-assert-diseq      236
;  :arith-assert-lower      822
;  :arith-assert-upper      1159
;  :arith-conflicts         689
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         675
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1899
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6033
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5876
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8661
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2315
;  :propagations            818
;  :quant-instantiations    242
;  :rlimit-count            608860)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23448
;  :arith-add-rows          361
;  :arith-assert-diseq      236
;  :arith-assert-lower      823
;  :arith-assert-upper      1161
;  :arith-conflicts         691
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         677
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1903
;  :datatype-accessor-ax    838
;  :datatype-constructor-ax 6035
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5879
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8662
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2316
;  :propagations            823
;  :quant-instantiations    242
;  :rlimit-count            609009)
(declare-const $t@333@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
        $k@322@04))
    (= $t@333@04 $t@311@04))
  (implies
    (< $Perm.No $k@332@04)
    (=
      $t@333@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04)))
(assert (<=
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
        $k@322@04)
      $k@332@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23458
;  :arith-add-rows          363
;  :arith-assert-diseq      236
;  :arith-assert-lower      824
;  :arith-assert-upper      1162
;  :arith-conflicts         691
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         677
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1903
;  :datatype-accessor-ax    839
;  :datatype-constructor-ax 6035
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5879
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8669
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2317
;  :propagations            823
;  :quant-instantiations    243
;  :rlimit-count            609573)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23458
;  :arith-add-rows          363
;  :arith-assert-diseq      236
;  :arith-assert-lower      824
;  :arith-assert-upper      1163
;  :arith-conflicts         692
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         678
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1904
;  :datatype-accessor-ax    839
;  :datatype-constructor-ax 6035
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5879
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8670
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2318
;  :propagations            823
;  :quant-instantiations    243
;  :rlimit-count            609757)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23482
;  :arith-add-rows          363
;  :arith-assert-diseq      236
;  :arith-assert-lower      825
;  :arith-assert-upper      1165
;  :arith-conflicts         694
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         680
;  :arith-pivots            472
;  :binary-propagations     22
;  :conflicts               1908
;  :datatype-accessor-ax    839
;  :datatype-constructor-ax 6037
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5882
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8671
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2319
;  :propagations            828
;  :quant-instantiations    243
;  :rlimit-count            609906)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23482
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      825
;  :arith-assert-upper      1166
;  :arith-conflicts         695
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         681
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1909
;  :datatype-accessor-ax    839
;  :datatype-constructor-ax 6037
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5882
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.14
;  :memory                  6.05
;  :mk-bool-var             8672
;  :mk-clause               897
;  :num-allocs              11585147
;  :num-checks              2320
;  :propagations            828
;  :quant-instantiations    243
;  :rlimit-count            610092)
(assert (not (= $t@333@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23487
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      825
;  :arith-assert-upper      1166
;  :arith-conflicts         695
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         681
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1909
;  :datatype-accessor-ax    840
;  :datatype-constructor-ax 6037
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5882
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8673
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2321
;  :propagations            828
;  :quant-instantiations    243
;  :rlimit-count            610320)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23487
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      825
;  :arith-assert-upper      1167
;  :arith-conflicts         696
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         682
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1910
;  :datatype-accessor-ax    840
;  :datatype-constructor-ax 6037
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5882
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8674
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2322
;  :propagations            828
;  :quant-instantiations    243
;  :rlimit-count            610504)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23511
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      826
;  :arith-assert-upper      1169
;  :arith-conflicts         698
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         684
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1914
;  :datatype-accessor-ax    840
;  :datatype-constructor-ax 6039
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5885
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8675
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2323
;  :propagations            833
;  :quant-instantiations    243
;  :rlimit-count            610653)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23511
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      826
;  :arith-assert-upper      1170
;  :arith-conflicts         699
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         685
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1915
;  :datatype-accessor-ax    840
;  :datatype-constructor-ax 6039
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5885
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8676
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2324
;  :propagations            833
;  :quant-instantiations    243
;  :rlimit-count            610780)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23516
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      826
;  :arith-assert-upper      1170
;  :arith-conflicts         699
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         685
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1915
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 6039
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5885
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8677
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2325
;  :propagations            833
;  :quant-instantiations    243
;  :rlimit-count            611000)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23516
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      826
;  :arith-assert-upper      1171
;  :arith-conflicts         700
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         686
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1916
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 6039
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5885
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8678
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2326
;  :propagations            833
;  :quant-instantiations    243
;  :rlimit-count            611184)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23540
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      827
;  :arith-assert-upper      1173
;  :arith-conflicts         702
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         688
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1920
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 6041
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5888
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8679
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2327
;  :propagations            838
;  :quant-instantiations    243
;  :rlimit-count            611333)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23540
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      827
;  :arith-assert-upper      1174
;  :arith-conflicts         703
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         689
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1921
;  :datatype-accessor-ax    841
;  :datatype-constructor-ax 6041
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5888
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8680
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2328
;  :propagations            838
;  :quant-instantiations    243
;  :rlimit-count            611460)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23545
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      827
;  :arith-assert-upper      1174
;  :arith-conflicts         703
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         689
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1921
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6041
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5888
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8681
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2329
;  :propagations            838
;  :quant-instantiations    243
;  :rlimit-count            611690)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23545
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      827
;  :arith-assert-upper      1175
;  :arith-conflicts         704
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         690
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1922
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6041
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5888
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8682
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2330
;  :propagations            838
;  :quant-instantiations    243
;  :rlimit-count            611874)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23569
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      828
;  :arith-assert-upper      1177
;  :arith-conflicts         706
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         692
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1926
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6043
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5891
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8683
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2331
;  :propagations            843
;  :quant-instantiations    243
;  :rlimit-count            612023)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23569
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      828
;  :arith-assert-upper      1178
;  :arith-conflicts         707
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         693
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1927
;  :datatype-accessor-ax    842
;  :datatype-constructor-ax 6043
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5891
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8684
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2332
;  :propagations            843
;  :quant-instantiations    243
;  :rlimit-count            612150)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      828
;  :arith-assert-upper      1178
;  :arith-conflicts         707
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         693
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1927
;  :datatype-accessor-ax    843
;  :datatype-constructor-ax 6043
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5891
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8685
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2333
;  :propagations            843
;  :quant-instantiations    243
;  :rlimit-count            612390)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23574
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      828
;  :arith-assert-upper      1179
;  :arith-conflicts         708
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         694
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1928
;  :datatype-accessor-ax    843
;  :datatype-constructor-ax 6043
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5891
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8686
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2334
;  :propagations            843
;  :quant-instantiations    243
;  :rlimit-count            612574)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23598
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      829
;  :arith-assert-upper      1181
;  :arith-conflicts         710
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         696
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1932
;  :datatype-accessor-ax    843
;  :datatype-constructor-ax 6045
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5894
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8687
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2335
;  :propagations            848
;  :quant-instantiations    243
;  :rlimit-count            612723)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23598
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      829
;  :arith-assert-upper      1182
;  :arith-conflicts         711
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         697
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1933
;  :datatype-accessor-ax    843
;  :datatype-constructor-ax 6045
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5894
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8688
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2336
;  :propagations            848
;  :quant-instantiations    243
;  :rlimit-count            612850)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23603
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      829
;  :arith-assert-upper      1182
;  :arith-conflicts         711
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         697
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1933
;  :datatype-accessor-ax    844
;  :datatype-constructor-ax 6045
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5894
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8689
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2337
;  :propagations            848
;  :quant-instantiations    243
;  :rlimit-count            613100)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23603
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      829
;  :arith-assert-upper      1183
;  :arith-conflicts         712
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         698
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1934
;  :datatype-accessor-ax    844
;  :datatype-constructor-ax 6045
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5894
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8690
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2338
;  :propagations            848
;  :quant-instantiations    243
;  :rlimit-count            613284)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23627
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      830
;  :arith-assert-upper      1185
;  :arith-conflicts         714
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         700
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1938
;  :datatype-accessor-ax    844
;  :datatype-constructor-ax 6047
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5897
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8691
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2339
;  :propagations            853
;  :quant-instantiations    243
;  :rlimit-count            613433)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23627
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      830
;  :arith-assert-upper      1186
;  :arith-conflicts         715
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         701
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1939
;  :datatype-accessor-ax    844
;  :datatype-constructor-ax 6047
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5897
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8692
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2340
;  :propagations            853
;  :quant-instantiations    243
;  :rlimit-count            613560)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23632
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      830
;  :arith-assert-upper      1186
;  :arith-conflicts         715
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         701
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1939
;  :datatype-accessor-ax    845
;  :datatype-constructor-ax 6047
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5897
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8693
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2341
;  :propagations            853
;  :quant-instantiations    243
;  :rlimit-count            613820)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23632
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      830
;  :arith-assert-upper      1187
;  :arith-conflicts         716
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         702
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1940
;  :datatype-accessor-ax    845
;  :datatype-constructor-ax 6047
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5897
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8694
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2342
;  :propagations            853
;  :quant-instantiations    243
;  :rlimit-count            614004)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23656
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      831
;  :arith-assert-upper      1189
;  :arith-conflicts         718
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         704
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1944
;  :datatype-accessor-ax    845
;  :datatype-constructor-ax 6049
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5900
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8695
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2343
;  :propagations            858
;  :quant-instantiations    243
;  :rlimit-count            614153)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23656
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      831
;  :arith-assert-upper      1190
;  :arith-conflicts         719
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         705
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1945
;  :datatype-accessor-ax    845
;  :datatype-constructor-ax 6049
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5900
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8696
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2344
;  :propagations            858
;  :quant-instantiations    243
;  :rlimit-count            614280)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23661
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      831
;  :arith-assert-upper      1190
;  :arith-conflicts         719
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         705
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1945
;  :datatype-accessor-ax    846
;  :datatype-constructor-ax 6049
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5900
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8697
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2345
;  :propagations            858
;  :quant-instantiations    243
;  :rlimit-count            614550)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23661
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      831
;  :arith-assert-upper      1191
;  :arith-conflicts         720
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         706
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1946
;  :datatype-accessor-ax    846
;  :datatype-constructor-ax 6049
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5900
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8698
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2346
;  :propagations            858
;  :quant-instantiations    243
;  :rlimit-count            614734)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23685
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      832
;  :arith-assert-upper      1193
;  :arith-conflicts         722
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         708
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1950
;  :datatype-accessor-ax    846
;  :datatype-constructor-ax 6051
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5903
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8699
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2347
;  :propagations            863
;  :quant-instantiations    243
;  :rlimit-count            614883)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23685
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      832
;  :arith-assert-upper      1194
;  :arith-conflicts         723
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         709
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1951
;  :datatype-accessor-ax    846
;  :datatype-constructor-ax 6051
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5903
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8700
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2348
;  :propagations            863
;  :quant-instantiations    243
;  :rlimit-count            615010)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23690
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      832
;  :arith-assert-upper      1194
;  :arith-conflicts         723
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         709
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1951
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 6051
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5903
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8701
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2349
;  :propagations            863
;  :quant-instantiations    243
;  :rlimit-count            615290)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23690
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      832
;  :arith-assert-upper      1195
;  :arith-conflicts         724
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         710
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1952
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 6051
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5903
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8702
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2350
;  :propagations            863
;  :quant-instantiations    243
;  :rlimit-count            615474)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23714
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      833
;  :arith-assert-upper      1197
;  :arith-conflicts         726
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         712
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1956
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 6053
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5906
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8703
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2351
;  :propagations            868
;  :quant-instantiations    243
;  :rlimit-count            615623)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23714
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      833
;  :arith-assert-upper      1198
;  :arith-conflicts         727
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         713
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1957
;  :datatype-accessor-ax    847
;  :datatype-constructor-ax 6053
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5906
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8704
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2352
;  :propagations            868
;  :quant-instantiations    243
;  :rlimit-count            615750)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23719
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      833
;  :arith-assert-upper      1198
;  :arith-conflicts         727
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         713
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1957
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 6053
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5906
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8705
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2353
;  :propagations            868
;  :quant-instantiations    243
;  :rlimit-count            616040)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23719
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      833
;  :arith-assert-upper      1199
;  :arith-conflicts         728
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         714
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1958
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 6053
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5906
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8706
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2354
;  :propagations            868
;  :quant-instantiations    243
;  :rlimit-count            616224)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23743
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      834
;  :arith-assert-upper      1201
;  :arith-conflicts         730
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         716
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1962
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 6055
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5909
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8707
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2355
;  :propagations            873
;  :quant-instantiations    243
;  :rlimit-count            616373)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23743
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      834
;  :arith-assert-upper      1202
;  :arith-conflicts         731
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         717
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1963
;  :datatype-accessor-ax    848
;  :datatype-constructor-ax 6055
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5909
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8708
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2356
;  :propagations            873
;  :quant-instantiations    243
;  :rlimit-count            616500)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23748
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      834
;  :arith-assert-upper      1202
;  :arith-conflicts         731
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         717
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1963
;  :datatype-accessor-ax    849
;  :datatype-constructor-ax 6055
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5909
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8709
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2357
;  :propagations            873
;  :quant-instantiations    243
;  :rlimit-count            616800)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23748
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      834
;  :arith-assert-upper      1203
;  :arith-conflicts         732
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         718
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1964
;  :datatype-accessor-ax    849
;  :datatype-constructor-ax 6055
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5909
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8710
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2358
;  :propagations            873
;  :quant-instantiations    243
;  :rlimit-count            616984)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23772
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      835
;  :arith-assert-upper      1205
;  :arith-conflicts         734
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         720
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1968
;  :datatype-accessor-ax    849
;  :datatype-constructor-ax 6057
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5912
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8711
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2359
;  :propagations            878
;  :quant-instantiations    243
;  :rlimit-count            617133)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23772
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      835
;  :arith-assert-upper      1206
;  :arith-conflicts         735
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         721
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1969
;  :datatype-accessor-ax    849
;  :datatype-constructor-ax 6057
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5912
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8712
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2360
;  :propagations            878
;  :quant-instantiations    243
;  :rlimit-count            617260)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23777
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      835
;  :arith-assert-upper      1206
;  :arith-conflicts         735
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         721
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1969
;  :datatype-accessor-ax    850
;  :datatype-constructor-ax 6057
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5912
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8713
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2361
;  :propagations            878
;  :quant-instantiations    243
;  :rlimit-count            617570)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23777
;  :arith-add-rows          366
;  :arith-assert-diseq      236
;  :arith-assert-lower      835
;  :arith-assert-upper      1207
;  :arith-conflicts         736
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         722
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1970
;  :datatype-accessor-ax    850
;  :datatype-constructor-ax 6057
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5912
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8714
;  :mk-clause               897
;  :num-allocs              12051158
;  :num-checks              2362
;  :propagations            878
;  :quant-instantiations    243
;  :rlimit-count            617754)
(declare-const $k@334@04 $Perm)
(assert ($Perm.isReadVar $k@334@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@334@04 $Perm.No) (< $Perm.No $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23777
;  :arith-add-rows          366
;  :arith-assert-diseq      237
;  :arith-assert-lower      837
;  :arith-assert-upper      1208
;  :arith-conflicts         736
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         722
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1971
;  :datatype-accessor-ax    850
;  :datatype-constructor-ax 6057
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5912
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8718
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2363
;  :propagations            879
;  :quant-instantiations    243
;  :rlimit-count            617953)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23801
;  :arith-add-rows          366
;  :arith-assert-diseq      237
;  :arith-assert-lower      838
;  :arith-assert-upper      1210
;  :arith-conflicts         738
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         724
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1975
;  :datatype-accessor-ax    850
;  :datatype-constructor-ax 6059
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5915
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8719
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2364
;  :propagations            884
;  :quant-instantiations    243
;  :rlimit-count            618102)
(declare-const $t@335@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
        $k@323@04))
    (= $t@335@04 $t@313@04))
  (implies
    (< $Perm.No $k@334@04)
    (=
      $t@335@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04)))
(assert (<=
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
        $k@323@04)
      $k@334@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_casr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23811
;  :arith-add-rows          367
;  :arith-assert-diseq      237
;  :arith-assert-lower      839
;  :arith-assert-upper      1211
;  :arith-conflicts         738
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         724
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1975
;  :datatype-accessor-ax    851
;  :datatype-constructor-ax 6059
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5915
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8726
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2365
;  :propagations            884
;  :quant-instantiations    244
;  :rlimit-count            618803)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23811
;  :arith-add-rows          367
;  :arith-assert-diseq      237
;  :arith-assert-lower      839
;  :arith-assert-upper      1212
;  :arith-conflicts         739
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         725
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1976
;  :datatype-accessor-ax    851
;  :datatype-constructor-ax 6059
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5915
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8727
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2366
;  :propagations            884
;  :quant-instantiations    244
;  :rlimit-count            618987)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23835
;  :arith-add-rows          367
;  :arith-assert-diseq      237
;  :arith-assert-lower      840
;  :arith-assert-upper      1214
;  :arith-conflicts         741
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         727
;  :arith-pivots            473
;  :binary-propagations     22
;  :conflicts               1980
;  :datatype-accessor-ax    851
;  :datatype-constructor-ax 6061
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5918
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8728
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2367
;  :propagations            889
;  :quant-instantiations    244
;  :rlimit-count            619136)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23835
;  :arith-add-rows          372
;  :arith-assert-diseq      237
;  :arith-assert-lower      840
;  :arith-assert-upper      1215
;  :arith-conflicts         742
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         728
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1981
;  :datatype-accessor-ax    851
;  :datatype-constructor-ax 6061
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5918
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8729
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2368
;  :propagations            889
;  :quant-instantiations    244
;  :rlimit-count            619375)
(assert (not (= $t@335@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23840
;  :arith-add-rows          372
;  :arith-assert-diseq      237
;  :arith-assert-lower      840
;  :arith-assert-upper      1215
;  :arith-conflicts         742
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         728
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1981
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 6061
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5918
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8730
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2369
;  :propagations            889
;  :quant-instantiations    244
;  :rlimit-count            619723)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23840
;  :arith-add-rows          372
;  :arith-assert-diseq      237
;  :arith-assert-lower      840
;  :arith-assert-upper      1216
;  :arith-conflicts         743
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         729
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1982
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 6061
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5918
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8731
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2370
;  :propagations            889
;  :quant-instantiations    244
;  :rlimit-count            619907)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23864
;  :arith-add-rows          372
;  :arith-assert-diseq      237
;  :arith-assert-lower      841
;  :arith-assert-upper      1218
;  :arith-conflicts         745
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         731
;  :arith-pivots            475
;  :binary-propagations     22
;  :conflicts               1986
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 6063
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5921
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8732
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2371
;  :propagations            894
;  :quant-instantiations    244
;  :rlimit-count            620056)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23864
;  :arith-add-rows          376
;  :arith-assert-diseq      237
;  :arith-assert-lower      841
;  :arith-assert-upper      1219
;  :arith-conflicts         746
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         732
;  :arith-pivots            480
;  :binary-propagations     22
;  :conflicts               1987
;  :datatype-accessor-ax    852
;  :datatype-constructor-ax 6063
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5921
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8733
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2372
;  :propagations            894
;  :quant-instantiations    244
;  :rlimit-count            620308)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23869
;  :arith-add-rows          376
;  :arith-assert-diseq      237
;  :arith-assert-lower      841
;  :arith-assert-upper      1219
;  :arith-conflicts         746
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         732
;  :arith-pivots            480
;  :binary-propagations     22
;  :conflicts               1987
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 6063
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5921
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8734
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2373
;  :propagations            894
;  :quant-instantiations    244
;  :rlimit-count            620648)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23869
;  :arith-add-rows          376
;  :arith-assert-diseq      237
;  :arith-assert-lower      841
;  :arith-assert-upper      1220
;  :arith-conflicts         747
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         733
;  :arith-pivots            480
;  :binary-propagations     22
;  :conflicts               1988
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 6063
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5921
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8735
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2374
;  :propagations            894
;  :quant-instantiations    244
;  :rlimit-count            620832)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23893
;  :arith-add-rows          376
;  :arith-assert-diseq      237
;  :arith-assert-lower      842
;  :arith-assert-upper      1222
;  :arith-conflicts         749
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         735
;  :arith-pivots            480
;  :binary-propagations     22
;  :conflicts               1992
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 6065
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5924
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8736
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2375
;  :propagations            899
;  :quant-instantiations    244
;  :rlimit-count            620981)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23893
;  :arith-add-rows          378
;  :arith-assert-diseq      237
;  :arith-assert-lower      842
;  :arith-assert-upper      1223
;  :arith-conflicts         750
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         736
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               1993
;  :datatype-accessor-ax    853
;  :datatype-constructor-ax 6065
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5924
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8737
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2376
;  :propagations            899
;  :quant-instantiations    244
;  :rlimit-count            621158)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23898
;  :arith-add-rows          378
;  :arith-assert-diseq      237
;  :arith-assert-lower      842
;  :arith-assert-upper      1223
;  :arith-conflicts         750
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         736
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               1993
;  :datatype-accessor-ax    854
;  :datatype-constructor-ax 6065
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5924
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8738
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2377
;  :propagations            899
;  :quant-instantiations    244
;  :rlimit-count            621508)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23898
;  :arith-add-rows          378
;  :arith-assert-diseq      237
;  :arith-assert-lower      842
;  :arith-assert-upper      1224
;  :arith-conflicts         751
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         737
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               1994
;  :datatype-accessor-ax    854
;  :datatype-constructor-ax 6065
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5924
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8739
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2378
;  :propagations            899
;  :quant-instantiations    244
;  :rlimit-count            621692)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23922
;  :arith-add-rows          378
;  :arith-assert-diseq      237
;  :arith-assert-lower      843
;  :arith-assert-upper      1226
;  :arith-conflicts         753
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         739
;  :arith-pivots            481
;  :binary-propagations     22
;  :conflicts               1998
;  :datatype-accessor-ax    854
;  :datatype-constructor-ax 6067
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5927
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8740
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2379
;  :propagations            904
;  :quant-instantiations    244
;  :rlimit-count            621841)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23922
;  :arith-add-rows          385
;  :arith-assert-diseq      237
;  :arith-assert-lower      843
;  :arith-assert-upper      1227
;  :arith-conflicts         754
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         740
;  :arith-pivots            485
;  :binary-propagations     22
;  :conflicts               1999
;  :datatype-accessor-ax    854
;  :datatype-constructor-ax 6067
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5927
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8741
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2380
;  :propagations            904
;  :quant-instantiations    244
;  :rlimit-count            622153)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23927
;  :arith-add-rows          385
;  :arith-assert-diseq      237
;  :arith-assert-lower      843
;  :arith-assert-upper      1227
;  :arith-conflicts         754
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         740
;  :arith-pivots            485
;  :binary-propagations     22
;  :conflicts               1999
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 6067
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5927
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8742
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2381
;  :propagations            904
;  :quant-instantiations    244
;  :rlimit-count            622513)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23927
;  :arith-add-rows          385
;  :arith-assert-diseq      237
;  :arith-assert-lower      843
;  :arith-assert-upper      1228
;  :arith-conflicts         755
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         741
;  :arith-pivots            485
;  :binary-propagations     22
;  :conflicts               2000
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 6067
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5927
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8743
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2382
;  :propagations            904
;  :quant-instantiations    244
;  :rlimit-count            622697)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23951
;  :arith-add-rows          385
;  :arith-assert-diseq      237
;  :arith-assert-lower      844
;  :arith-assert-upper      1230
;  :arith-conflicts         757
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         743
;  :arith-pivots            485
;  :binary-propagations     22
;  :conflicts               2004
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 6069
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5930
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8744
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2383
;  :propagations            909
;  :quant-instantiations    244
;  :rlimit-count            622846)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23951
;  :arith-add-rows          389
;  :arith-assert-diseq      237
;  :arith-assert-lower      844
;  :arith-assert-upper      1231
;  :arith-conflicts         758
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         744
;  :arith-pivots            487
;  :binary-propagations     22
;  :conflicts               2005
;  :datatype-accessor-ax    855
;  :datatype-constructor-ax 6069
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5930
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8745
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2384
;  :propagations            909
;  :quant-instantiations    244
;  :rlimit-count            623084)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23956
;  :arith-add-rows          389
;  :arith-assert-diseq      237
;  :arith-assert-lower      844
;  :arith-assert-upper      1231
;  :arith-conflicts         758
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         744
;  :arith-pivots            487
;  :binary-propagations     22
;  :conflicts               2005
;  :datatype-accessor-ax    856
;  :datatype-constructor-ax 6069
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5930
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8746
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2385
;  :propagations            909
;  :quant-instantiations    244
;  :rlimit-count            623454)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23956
;  :arith-add-rows          389
;  :arith-assert-diseq      237
;  :arith-assert-lower      844
;  :arith-assert-upper      1232
;  :arith-conflicts         759
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         745
;  :arith-pivots            487
;  :binary-propagations     22
;  :conflicts               2006
;  :datatype-accessor-ax    856
;  :datatype-constructor-ax 6069
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5930
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8747
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2386
;  :propagations            909
;  :quant-instantiations    244
;  :rlimit-count            623638)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23980
;  :arith-add-rows          389
;  :arith-assert-diseq      237
;  :arith-assert-lower      845
;  :arith-assert-upper      1234
;  :arith-conflicts         761
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         747
;  :arith-pivots            487
;  :binary-propagations     22
;  :conflicts               2010
;  :datatype-accessor-ax    856
;  :datatype-constructor-ax 6071
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5933
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8748
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2387
;  :propagations            914
;  :quant-instantiations    244
;  :rlimit-count            623787)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23980
;  :arith-add-rows          396
;  :arith-assert-diseq      237
;  :arith-assert-lower      845
;  :arith-assert-upper      1235
;  :arith-conflicts         762
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         748
;  :arith-pivots            491
;  :binary-propagations     22
;  :conflicts               2011
;  :datatype-accessor-ax    856
;  :datatype-constructor-ax 6071
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5933
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8749
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2388
;  :propagations            914
;  :quant-instantiations    244
;  :rlimit-count            624103)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23985
;  :arith-add-rows          396
;  :arith-assert-diseq      237
;  :arith-assert-lower      845
;  :arith-assert-upper      1235
;  :arith-conflicts         762
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         748
;  :arith-pivots            491
;  :binary-propagations     22
;  :conflicts               2011
;  :datatype-accessor-ax    857
;  :datatype-constructor-ax 6071
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5933
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8750
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2389
;  :propagations            914
;  :quant-instantiations    244
;  :rlimit-count            624483)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23985
;  :arith-add-rows          396
;  :arith-assert-diseq      237
;  :arith-assert-lower      845
;  :arith-assert-upper      1236
;  :arith-conflicts         763
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         749
;  :arith-pivots            491
;  :binary-propagations     22
;  :conflicts               2012
;  :datatype-accessor-ax    857
;  :datatype-constructor-ax 6071
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5933
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8751
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2390
;  :propagations            914
;  :quant-instantiations    244
;  :rlimit-count            624667)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24009
;  :arith-add-rows          396
;  :arith-assert-diseq      237
;  :arith-assert-lower      846
;  :arith-assert-upper      1238
;  :arith-conflicts         765
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         751
;  :arith-pivots            491
;  :binary-propagations     22
;  :conflicts               2016
;  :datatype-accessor-ax    857
;  :datatype-constructor-ax 6073
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5936
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8752
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2391
;  :propagations            919
;  :quant-instantiations    244
;  :rlimit-count            624816)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24009
;  :arith-add-rows          400
;  :arith-assert-diseq      237
;  :arith-assert-lower      846
;  :arith-assert-upper      1239
;  :arith-conflicts         766
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         752
;  :arith-pivots            493
;  :binary-propagations     22
;  :conflicts               2017
;  :datatype-accessor-ax    857
;  :datatype-constructor-ax 6073
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5936
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8753
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2392
;  :propagations            919
;  :quant-instantiations    244
;  :rlimit-count            625060)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24014
;  :arith-add-rows          400
;  :arith-assert-diseq      237
;  :arith-assert-lower      846
;  :arith-assert-upper      1239
;  :arith-conflicts         766
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         752
;  :arith-pivots            493
;  :binary-propagations     22
;  :conflicts               2017
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 6073
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5936
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8754
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2393
;  :propagations            919
;  :quant-instantiations    244
;  :rlimit-count            625450)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24014
;  :arith-add-rows          400
;  :arith-assert-diseq      237
;  :arith-assert-lower      846
;  :arith-assert-upper      1240
;  :arith-conflicts         767
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         753
;  :arith-pivots            493
;  :binary-propagations     22
;  :conflicts               2018
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 6073
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5936
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8755
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2394
;  :propagations            919
;  :quant-instantiations    244
;  :rlimit-count            625634)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24038
;  :arith-add-rows          400
;  :arith-assert-diseq      237
;  :arith-assert-lower      847
;  :arith-assert-upper      1242
;  :arith-conflicts         769
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         755
;  :arith-pivots            493
;  :binary-propagations     22
;  :conflicts               2022
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 6075
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5939
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8756
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2395
;  :propagations            924
;  :quant-instantiations    244
;  :rlimit-count            625783)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24038
;  :arith-add-rows          404
;  :arith-assert-diseq      237
;  :arith-assert-lower      847
;  :arith-assert-upper      1243
;  :arith-conflicts         770
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         756
;  :arith-pivots            498
;  :binary-propagations     22
;  :conflicts               2023
;  :datatype-accessor-ax    858
;  :datatype-constructor-ax 6075
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5939
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8757
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2396
;  :propagations            924
;  :quant-instantiations    244
;  :rlimit-count            626035)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24043
;  :arith-add-rows          404
;  :arith-assert-diseq      237
;  :arith-assert-lower      847
;  :arith-assert-upper      1243
;  :arith-conflicts         770
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         756
;  :arith-pivots            498
;  :binary-propagations     22
;  :conflicts               2023
;  :datatype-accessor-ax    859
;  :datatype-constructor-ax 6075
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5939
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8758
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2397
;  :propagations            924
;  :quant-instantiations    244
;  :rlimit-count            626435)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24043
;  :arith-add-rows          404
;  :arith-assert-diseq      237
;  :arith-assert-lower      847
;  :arith-assert-upper      1244
;  :arith-conflicts         771
;  :arith-eq-adapter        330
;  :arith-fixed-eqs         757
;  :arith-pivots            498
;  :binary-propagations     22
;  :conflicts               2024
;  :datatype-accessor-ax    859
;  :datatype-constructor-ax 6075
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5939
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8759
;  :mk-clause               899
;  :num-allocs              12051158
;  :num-checks              2398
;  :propagations            924
;  :quant-instantiations    244
;  :rlimit-count            626619)
(declare-const $k@336@04 $Perm)
(assert ($Perm.isReadVar $k@336@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@336@04 $Perm.No) (< $Perm.No $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24043
;  :arith-add-rows          404
;  :arith-assert-diseq      238
;  :arith-assert-lower      849
;  :arith-assert-upper      1245
;  :arith-conflicts         771
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         757
;  :arith-pivots            498
;  :binary-propagations     22
;  :conflicts               2025
;  :datatype-accessor-ax    859
;  :datatype-constructor-ax 6075
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5939
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8763
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2399
;  :propagations            925
;  :quant-instantiations    244
;  :rlimit-count            626817)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24067
;  :arith-add-rows          404
;  :arith-assert-diseq      238
;  :arith-assert-lower      850
;  :arith-assert-upper      1247
;  :arith-conflicts         773
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         759
;  :arith-pivots            498
;  :binary-propagations     22
;  :conflicts               2029
;  :datatype-accessor-ax    859
;  :datatype-constructor-ax 6077
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5942
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8764
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2400
;  :propagations            930
;  :quant-instantiations    244
;  :rlimit-count            626966)
(declare-const $t@337@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
        $k@324@04))
    (= $t@337@04 $t@315@04))
  (implies
    (< $Perm.No $k@336@04)
    (=
      $t@337@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04)))
(assert (<=
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
        $k@324@04)
      $k@336@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24077
;  :arith-add-rows          407
;  :arith-assert-diseq      238
;  :arith-assert-lower      851
;  :arith-assert-upper      1248
;  :arith-conflicts         773
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         759
;  :arith-pivots            499
;  :binary-propagations     22
;  :conflicts               2029
;  :datatype-accessor-ax    860
;  :datatype-constructor-ax 6077
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5942
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8771
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2401
;  :propagations            930
;  :quant-instantiations    245
;  :rlimit-count            627760)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24077
;  :arith-add-rows          407
;  :arith-assert-diseq      238
;  :arith-assert-lower      851
;  :arith-assert-upper      1249
;  :arith-conflicts         774
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         760
;  :arith-pivots            499
;  :binary-propagations     22
;  :conflicts               2030
;  :datatype-accessor-ax    860
;  :datatype-constructor-ax 6077
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5942
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8772
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2402
;  :propagations            930
;  :quant-instantiations    245
;  :rlimit-count            627944)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24101
;  :arith-add-rows          407
;  :arith-assert-diseq      238
;  :arith-assert-lower      852
;  :arith-assert-upper      1251
;  :arith-conflicts         776
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         762
;  :arith-pivots            499
;  :binary-propagations     22
;  :conflicts               2034
;  :datatype-accessor-ax    860
;  :datatype-constructor-ax 6079
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5945
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8773
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2403
;  :propagations            935
;  :quant-instantiations    245
;  :rlimit-count            628093)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24101
;  :arith-add-rows          409
;  :arith-assert-diseq      238
;  :arith-assert-lower      852
;  :arith-assert-upper      1252
;  :arith-conflicts         777
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         763
;  :arith-pivots            501
;  :binary-propagations     22
;  :conflicts               2035
;  :datatype-accessor-ax    860
;  :datatype-constructor-ax 6079
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5945
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8774
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2404
;  :propagations            935
;  :quant-instantiations    245
;  :rlimit-count            628265)
(assert (not (= $t@337@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24106
;  :arith-add-rows          409
;  :arith-assert-diseq      238
;  :arith-assert-lower      852
;  :arith-assert-upper      1252
;  :arith-conflicts         777
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         763
;  :arith-pivots            501
;  :binary-propagations     22
;  :conflicts               2035
;  :datatype-accessor-ax    861
;  :datatype-constructor-ax 6079
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5945
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8775
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2405
;  :propagations            935
;  :quant-instantiations    245
;  :rlimit-count            628703)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24106
;  :arith-add-rows          409
;  :arith-assert-diseq      238
;  :arith-assert-lower      852
;  :arith-assert-upper      1253
;  :arith-conflicts         778
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         764
;  :arith-pivots            501
;  :binary-propagations     22
;  :conflicts               2036
;  :datatype-accessor-ax    861
;  :datatype-constructor-ax 6079
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5945
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8776
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2406
;  :propagations            935
;  :quant-instantiations    245
;  :rlimit-count            628887)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24130
;  :arith-add-rows          409
;  :arith-assert-diseq      238
;  :arith-assert-lower      853
;  :arith-assert-upper      1255
;  :arith-conflicts         780
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         766
;  :arith-pivots            501
;  :binary-propagations     22
;  :conflicts               2040
;  :datatype-accessor-ax    861
;  :datatype-constructor-ax 6081
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5948
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8777
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2407
;  :propagations            940
;  :quant-instantiations    245
;  :rlimit-count            629036)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24130
;  :arith-add-rows          410
;  :arith-assert-diseq      238
;  :arith-assert-lower      853
;  :arith-assert-upper      1256
;  :arith-conflicts         781
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         767
;  :arith-pivots            502
;  :binary-propagations     22
;  :conflicts               2041
;  :datatype-accessor-ax    861
;  :datatype-constructor-ax 6081
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5948
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8778
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2408
;  :propagations            940
;  :quant-instantiations    245
;  :rlimit-count            629187)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24135
;  :arith-add-rows          410
;  :arith-assert-diseq      238
;  :arith-assert-lower      853
;  :arith-assert-upper      1256
;  :arith-conflicts         781
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         767
;  :arith-pivots            502
;  :binary-propagations     22
;  :conflicts               2041
;  :datatype-accessor-ax    862
;  :datatype-constructor-ax 6081
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5948
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8779
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2409
;  :propagations            940
;  :quant-instantiations    245
;  :rlimit-count            629617)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24135
;  :arith-add-rows          410
;  :arith-assert-diseq      238
;  :arith-assert-lower      853
;  :arith-assert-upper      1257
;  :arith-conflicts         782
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         768
;  :arith-pivots            502
;  :binary-propagations     22
;  :conflicts               2042
;  :datatype-accessor-ax    862
;  :datatype-constructor-ax 6081
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5948
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8780
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2410
;  :propagations            940
;  :quant-instantiations    245
;  :rlimit-count            629801)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24159
;  :arith-add-rows          410
;  :arith-assert-diseq      238
;  :arith-assert-lower      854
;  :arith-assert-upper      1259
;  :arith-conflicts         784
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         770
;  :arith-pivots            502
;  :binary-propagations     22
;  :conflicts               2046
;  :datatype-accessor-ax    862
;  :datatype-constructor-ax 6083
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5951
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8781
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2411
;  :propagations            945
;  :quant-instantiations    245
;  :rlimit-count            629950)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24159
;  :arith-add-rows          411
;  :arith-assert-diseq      238
;  :arith-assert-lower      854
;  :arith-assert-upper      1260
;  :arith-conflicts         785
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         771
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2047
;  :datatype-accessor-ax    862
;  :datatype-constructor-ax 6083
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5951
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8782
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2412
;  :propagations            945
;  :quant-instantiations    245
;  :rlimit-count            630102)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24164
;  :arith-add-rows          411
;  :arith-assert-diseq      238
;  :arith-assert-lower      854
;  :arith-assert-upper      1260
;  :arith-conflicts         785
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         771
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2047
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6083
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5951
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8783
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2413
;  :propagations            945
;  :quant-instantiations    245
;  :rlimit-count            630542)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24164
;  :arith-add-rows          411
;  :arith-assert-diseq      238
;  :arith-assert-lower      854
;  :arith-assert-upper      1261
;  :arith-conflicts         786
;  :arith-eq-adapter        331
;  :arith-fixed-eqs         772
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2048
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6083
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5951
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8784
;  :mk-clause               901
;  :num-allocs              12051158
;  :num-checks              2414
;  :propagations            945
;  :quant-instantiations    245
;  :rlimit-count            630726)
(declare-const $k@338@04 $Perm)
(assert ($Perm.isReadVar $k@338@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@338@04 $Perm.No) (< $Perm.No $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24164
;  :arith-add-rows          411
;  :arith-assert-diseq      239
;  :arith-assert-lower      856
;  :arith-assert-upper      1262
;  :arith-conflicts         786
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         772
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2049
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6083
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5951
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8788
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2415
;  :propagations            946
;  :quant-instantiations    245
;  :rlimit-count            630924)
(set-option :timeout 10)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24188
;  :arith-add-rows          411
;  :arith-assert-diseq      239
;  :arith-assert-lower      857
;  :arith-assert-upper      1264
;  :arith-conflicts         788
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         774
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2053
;  :datatype-accessor-ax    863
;  :datatype-constructor-ax 6085
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5954
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8789
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2416
;  :propagations            951
;  :quant-instantiations    245
;  :rlimit-count            631073
;  :time                    0.00)
(declare-const $t@339@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (-
        (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
        $k@325@04))
    (= $t@339@04 $t@317@04))
  (implies
    (< $Perm.No $k@338@04)
    (=
      $t@339@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04)))
(assert (<=
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
        $k@325@04)
      $k@338@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn_combinate != null
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24198
;  :arith-add-rows          413
;  :arith-assert-diseq      239
;  :arith-assert-lower      858
;  :arith-assert-upper      1265
;  :arith-conflicts         788
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         774
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2053
;  :datatype-accessor-ax    864
;  :datatype-constructor-ax 6085
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5954
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8796
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2417
;  :propagations            951
;  :quant-instantiations    246
;  :rlimit-count            631889)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24198
;  :arith-add-rows          413
;  :arith-assert-diseq      239
;  :arith-assert-lower      858
;  :arith-assert-upper      1266
;  :arith-conflicts         789
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         775
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2054
;  :datatype-accessor-ax    864
;  :datatype-constructor-ax 6085
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5954
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8797
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2418
;  :propagations            951
;  :quant-instantiations    246
;  :rlimit-count            632073)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24222
;  :arith-add-rows          413
;  :arith-assert-diseq      239
;  :arith-assert-lower      859
;  :arith-assert-upper      1268
;  :arith-conflicts         791
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         777
;  :arith-pivots            503
;  :binary-propagations     22
;  :conflicts               2058
;  :datatype-accessor-ax    864
;  :datatype-constructor-ax 6087
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5957
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8798
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2419
;  :propagations            956
;  :quant-instantiations    246
;  :rlimit-count            632222)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24222
;  :arith-add-rows          417
;  :arith-assert-diseq      239
;  :arith-assert-lower      859
;  :arith-assert-upper      1269
;  :arith-conflicts         792
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         778
;  :arith-pivots            505
;  :binary-propagations     22
;  :conflicts               2059
;  :datatype-accessor-ax    864
;  :datatype-constructor-ax 6087
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5957
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8799
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2420
;  :propagations            956
;  :quant-instantiations    246
;  :rlimit-count            632436)
(assert (not (= $t@339@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24227
;  :arith-add-rows          417
;  :arith-assert-diseq      239
;  :arith-assert-lower      859
;  :arith-assert-upper      1269
;  :arith-conflicts         792
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         778
;  :arith-pivots            505
;  :binary-propagations     22
;  :conflicts               2059
;  :datatype-accessor-ax    865
;  :datatype-constructor-ax 6087
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5957
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8800
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2421
;  :propagations            956
;  :quant-instantiations    246
;  :rlimit-count            632914)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24227
;  :arith-add-rows          417
;  :arith-assert-diseq      239
;  :arith-assert-lower      859
;  :arith-assert-upper      1270
;  :arith-conflicts         793
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         779
;  :arith-pivots            505
;  :binary-propagations     22
;  :conflicts               2060
;  :datatype-accessor-ax    865
;  :datatype-constructor-ax 6087
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5957
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8801
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2422
;  :propagations            956
;  :quant-instantiations    246
;  :rlimit-count            633098)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24251
;  :arith-add-rows          417
;  :arith-assert-diseq      239
;  :arith-assert-lower      860
;  :arith-assert-upper      1272
;  :arith-conflicts         795
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         781
;  :arith-pivots            505
;  :binary-propagations     22
;  :conflicts               2064
;  :datatype-accessor-ax    865
;  :datatype-constructor-ax 6089
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5960
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8802
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2423
;  :propagations            961
;  :quant-instantiations    246
;  :rlimit-count            633247)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24251
;  :arith-add-rows          422
;  :arith-assert-diseq      239
;  :arith-assert-lower      860
;  :arith-assert-upper      1273
;  :arith-conflicts         796
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         782
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2065
;  :datatype-accessor-ax    865
;  :datatype-constructor-ax 6089
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5960
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8803
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2424
;  :propagations            961
;  :quant-instantiations    246
;  :rlimit-count            633491)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))))
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24256
;  :arith-add-rows          422
;  :arith-assert-diseq      239
;  :arith-assert-lower      860
;  :arith-assert-upper      1273
;  :arith-conflicts         796
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         782
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2065
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6089
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5960
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8804
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2425
;  :propagations            961
;  :quant-instantiations    246
;  :rlimit-count            633961)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (-
        (+
          (+
            (-
              (-
                (+ (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04) $k@294@04)
                $k@298@04)
              $k@304@04)
            $k@307@04)
          $k@318@04)
        $k@320@04)
      $k@326@04)
    $k@329@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24256
;  :arith-add-rows          422
;  :arith-assert-diseq      239
;  :arith-assert-lower      860
;  :arith-assert-upper      1274
;  :arith-conflicts         797
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         783
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2066
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6089
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5960
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8805
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2426
;  :propagations            961
;  :quant-instantiations    246
;  :rlimit-count            634145)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@330@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24280
;  :arith-add-rows          422
;  :arith-assert-diseq      239
;  :arith-assert-lower      861
;  :arith-assert-upper      1276
;  :arith-conflicts         799
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         785
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2070
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8806
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2427
;  :propagations            966
;  :quant-instantiations    246
;  :rlimit-count            634294)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24280
;  :arith-add-rows          422
;  :arith-assert-diseq      239
;  :arith-assert-lower      861
;  :arith-assert-upper      1277
;  :arith-conflicts         800
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         786
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2071
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8807
;  :mk-clause               903
;  :num-allocs              12051158
;  :num-checks              2428
;  :propagations            966
;  :quant-instantiations    246
;  :rlimit-count            634421)
(declare-const $k@340@04 $Perm)
(assert ($Perm.isReadVar $k@340@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@340@04 $Perm.No) (< $Perm.No $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24280
;  :arith-add-rows          422
;  :arith-assert-diseq      240
;  :arith-assert-lower      863
;  :arith-assert-upper      1278
;  :arith-conflicts         800
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         786
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2072
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8811
;  :mk-clause               905
;  :num-allocs              12051158
;  :num-checks              2429
;  :propagations            967
;  :quant-instantiations    246
;  :rlimit-count            634620)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@333@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24280
;  :arith-add-rows          422
;  :arith-assert-diseq      240
;  :arith-assert-lower      863
;  :arith-assert-upper      1278
;  :arith-conflicts         800
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         786
;  :arith-pivots            508
;  :binary-propagations     22
;  :conflicts               2072
;  :datatype-accessor-ax    866
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8811
;  :mk-clause               905
;  :num-allocs              12051158
;  :num-checks              2430
;  :propagations            967
;  :quant-instantiations    246
;  :rlimit-count            634631)
(declare-const $t@341@04 $Ref)
(assert (and
  (implies
    (<
      $Perm.No
      (+
        (-
          (-
            (+
              (+
                (-
                  (-
                    (+
                      (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                      $k@294@04)
                    $k@298@04)
                  $k@304@04)
                $k@307@04)
              $k@318@04)
            $k@320@04)
          $k@326@04)
        $k@329@04))
    (= $t@341@04 $t@330@04))
  (implies
    (< $Perm.No $k@340@04)
    (=
      $t@341@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))))))
(assert (<=
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04)))
(assert (<=
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (+
        (-
          (-
            (+
              (+
                (-
                  (-
                    (+
                      (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                      $k@294@04)
                    $k@298@04)
                  $k@304@04)
                $k@307@04)
              $k@318@04)
            $k@320@04)
          $k@326@04)
        $k@329@04)
      $k@340@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn.Rng_m == diz.Rng_m
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24288
;  :arith-add-rows          429
;  :arith-assert-diseq      240
;  :arith-assert-lower      864
;  :arith-assert-upper      1279
;  :arith-conflicts         800
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         786
;  :arith-pivots            509
;  :binary-propagations     22
;  :conflicts               2072
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8819
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2431
;  :propagations            967
;  :quant-instantiations    247
;  :rlimit-count            635599)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24288
;  :arith-add-rows          429
;  :arith-assert-diseq      240
;  :arith-assert-lower      864
;  :arith-assert-upper      1280
;  :arith-conflicts         801
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         787
;  :arith-pivots            509
;  :binary-propagations     22
;  :conflicts               2073
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6091
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5963
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8820
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2432
;  :propagations            967
;  :quant-instantiations    247
;  :rlimit-count            635788)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@341@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          430
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1283
;  :arith-conflicts         804
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         790
;  :arith-pivots            510
;  :binary-propagations     22
;  :conflicts               2078
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8821
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2433
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            635991)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          430
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1284
;  :arith-conflicts         805
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         791
;  :arith-pivots            510
;  :binary-propagations     22
;  :conflicts               2079
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8822
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2434
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636118)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@333@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          430
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1284
;  :arith-conflicts         805
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         791
;  :arith-pivots            510
;  :binary-propagations     22
;  :conflicts               2079
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8822
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2435
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636129)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          431
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1285
;  :arith-conflicts         806
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         792
;  :arith-pivots            511
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8823
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2436
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636338)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          431
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1285
;  :arith-conflicts         806
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         792
;  :arith-pivots            511
;  :binary-propagations     22
;  :conflicts               2080
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8823
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2437
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636349)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24319
;  :arith-add-rows          431
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1286
;  :arith-conflicts         807
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         793
;  :arith-pivots            511
;  :binary-propagations     22
;  :conflicts               2081
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8824
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2438
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636538)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Rng_m.Main_rn == diz
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@311@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24321
;  :arith-add-rows          431
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1286
;  :arith-conflicts         807
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         793
;  :arith-pivots            511
;  :binary-propagations     22
;  :conflicts               2081
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8825
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2439
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            636967)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24321
;  :arith-add-rows          431
;  :arith-assert-diseq      240
;  :arith-assert-lower      866
;  :arith-assert-upper      1287
;  :arith-conflicts         808
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         794
;  :arith-pivots            511
;  :binary-propagations     22
;  :conflicts               2082
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6093
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5967
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8826
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2440
;  :propagations            976
;  :quant-instantiations    247
;  :rlimit-count            637156)
(push) ; 13
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $t@341@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24354
;  :arith-add-rows          432
;  :arith-assert-diseq      240
;  :arith-assert-lower      868
;  :arith-assert-upper      1290
;  :arith-conflicts         811
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         797
;  :arith-pivots            512
;  :binary-propagations     22
;  :conflicts               2087
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6095
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5971
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8827
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2441
;  :propagations            985
;  :quant-instantiations    247
;  :rlimit-count            637361)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24354
;  :arith-add-rows          432
;  :arith-assert-diseq      240
;  :arith-assert-lower      868
;  :arith-assert-upper      1291
;  :arith-conflicts         812
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         798
;  :arith-pivots            512
;  :binary-propagations     22
;  :conflicts               2088
;  :datatype-accessor-ax    867
;  :datatype-constructor-ax 6095
;  :datatype-occurs-check   1019
;  :datatype-splits         4763
;  :decisions               5971
;  :del-clause              802
;  :final-checks            179
;  :max-generation          2
;  :max-memory              6.15
;  :memory                  6.15
;  :mk-bool-var             8828
;  :mk-clause               906
;  :num-allocs              12051158
;  :num-checks              2442
;  :propagations            985
;  :quant-instantiations    247
;  :rlimit-count            637488)
(assert (= $t@333@04 $t@311@04))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_144__188.Rng_number_o := __flatten_146__190
(set-option :timeout 10)
(push) ; 13
(assert (not (= $t@333@04 __flatten_144__188@267@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25482
;  :arith-add-rows          432
;  :arith-assert-diseq      240
;  :arith-assert-lower      868
;  :arith-assert-upper      1291
;  :arith-conflicts         812
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         798
;  :arith-pivots            512
;  :binary-propagations     22
;  :conflicts               2089
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9013
;  :mk-clause               907
;  :num-allocs              13975518
;  :num-checks              2444
;  :propagations            991
;  :quant-instantiations    247
;  :rlimit-count            643191)
(assert (not (= __flatten_144__188@267@04 $Ref.null)))
; [exec]
; __flatten_159__202 := 1 + diz.Combinate_i
; [eval] 1 + diz.Combinate_i
(push) ; 13
(assert (not (= $t@339@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25482
;  :arith-add-rows          432
;  :arith-assert-diseq      240
;  :arith-assert-lower      868
;  :arith-assert-upper      1291
;  :arith-conflicts         812
;  :arith-eq-adapter        333
;  :arith-fixed-eqs         798
;  :arith-pivots            512
;  :binary-propagations     22
;  :conflicts               2089
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9013
;  :mk-clause               907
;  :num-allocs              13975518
;  :num-checks              2445
;  :propagations            991
;  :quant-instantiations    247
;  :rlimit-count            643205)
(declare-const __flatten_159__202@342@04 Int)
(assert (=
  __flatten_159__202@342@04
  (+
    1
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04))))))))))))))))))))))))))))))))))))))))
; [exec]
; diz.Combinate_i := __flatten_159__202
(push) ; 13
(assert (not (= $t@339@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25484
;  :arith-add-rows          432
;  :arith-assert-diseq      240
;  :arith-assert-lower      869
;  :arith-assert-upper      1292
;  :arith-conflicts         812
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         798
;  :arith-pivots            513
;  :binary-propagations     22
;  :conflicts               2089
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9017
;  :mk-clause               910
;  :num-allocs              13975518
;  :num-checks              2446
;  :propagations            993
;  :quant-instantiations    248
;  :rlimit-count            643702)
; Loop head block: Re-establish invariant
(declare-const $k@343@04 $Perm)
(assert ($Perm.isReadVar $k@343@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@343@04 $Perm.No) (< $Perm.No $k@343@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25484
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      871
;  :arith-assert-upper      1293
;  :arith-conflicts         812
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         798
;  :arith-pivots            513
;  :binary-propagations     22
;  :conflicts               2090
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9021
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2447
;  :propagations            994
;  :quant-instantiations    248
;  :rlimit-count            643900)
(set-option :timeout 10)
(push) ; 13
(assert (not (not (= $k@252@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25484
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      871
;  :arith-assert-upper      1293
;  :arith-conflicts         812
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         798
;  :arith-pivots            513
;  :binary-propagations     22
;  :conflicts               2090
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9021
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2448
;  :propagations            994
;  :quant-instantiations    248
;  :rlimit-count            643911)
(assert (< $k@343@04 $k@252@04))
(assert (<= $Perm.No (- $k@252@04 $k@343@04)))
(assert (<= (- $k@252@04 $k@343@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@252@04 $k@343@04)) (not (= diz@30@04 $Ref.null))))
; [eval] diz.Combinate_m != null
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25484
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      873
;  :arith-assert-upper      1294
;  :arith-conflicts         812
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         798
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2091
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9024
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2449
;  :propagations            994
;  :quant-instantiations    248
;  :rlimit-count            644131)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25484
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      873
;  :arith-assert-upper      1294
;  :arith-conflicts         812
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         798
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2092
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6424
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6296
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9024
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2450
;  :propagations            994
;  :quant-instantiations    248
;  :rlimit-count            644179)
(push) ; 13
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25508
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      874
;  :arith-assert-upper      1296
;  :arith-conflicts         814
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         800
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2096
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6426
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6299
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9025
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2451
;  :propagations            999
;  :quant-instantiations    248
;  :rlimit-count            644328)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25508
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      874
;  :arith-assert-upper      1296
;  :arith-conflicts         814
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         800
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2097
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6426
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6299
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9025
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2452
;  :propagations            999
;  :quant-instantiations    248
;  :rlimit-count            644376)
(push) ; 13
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25532
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      875
;  :arith-assert-upper      1298
;  :arith-conflicts         816
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         802
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2101
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6428
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6302
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9026
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2453
;  :propagations            1004
;  :quant-instantiations    248
;  :rlimit-count            644525)
; [eval] |diz.Combinate_m.Main_process_state| == 3
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25532
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      875
;  :arith-assert-upper      1298
;  :arith-conflicts         816
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         802
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2102
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6428
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6302
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9026
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2454
;  :propagations            1004
;  :quant-instantiations    248
;  :rlimit-count            644573)
(push) ; 13
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25556
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      876
;  :arith-assert-upper      1300
;  :arith-conflicts         818
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         804
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2106
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6430
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6305
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9027
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2455
;  :propagations            1009
;  :quant-instantiations    248
;  :rlimit-count            644722)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25556
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      876
;  :arith-assert-upper      1300
;  :arith-conflicts         818
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         804
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2107
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6430
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6305
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9027
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2456
;  :propagations            1009
;  :quant-instantiations    248
;  :rlimit-count            644770)
(push) ; 13
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25580
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      877
;  :arith-assert-upper      1302
;  :arith-conflicts         820
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         806
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2111
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6432
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6308
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9028
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2457
;  :propagations            1014
;  :quant-instantiations    248
;  :rlimit-count            644919)
; [eval] |diz.Combinate_m.Main_event_state| == 6
; [eval] |diz.Combinate_m.Main_event_state|
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25580
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      877
;  :arith-assert-upper      1302
;  :arith-conflicts         820
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         806
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2112
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6432
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6308
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9028
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2458
;  :propagations            1014
;  :quant-instantiations    248
;  :rlimit-count            644967)
(push) ; 13
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25604
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      878
;  :arith-assert-upper      1304
;  :arith-conflicts         822
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         808
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2116
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6434
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6311
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9029
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2459
;  :propagations            1019
;  :quant-instantiations    248
;  :rlimit-count            645116)
; [eval] (forall i__210: Int :: { diz.Combinate_m.Main_process_state[i__210] } 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|)
(declare-const i__210@344@04 Int)
(push) ; 13
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state| ==> diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= i__210 && i__210 < |diz.Combinate_m.Main_process_state|
; [eval] 0 <= i__210
(push) ; 14
; [then-branch: 108 | 0 <= i__210@344@04 | live]
; [else-branch: 108 | !(0 <= i__210@344@04) | live]
(push) ; 15
; [then-branch: 108 | 0 <= i__210@344@04]
(assert (<= 0 i__210@344@04))
; [eval] i__210 < |diz.Combinate_m.Main_process_state|
; [eval] |diz.Combinate_m.Main_process_state|
(push) ; 16
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25604
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      879
;  :arith-assert-upper      1304
;  :arith-conflicts         822
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         808
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2117
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6434
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6311
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9030
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2460
;  :propagations            1019
;  :quant-instantiations    248
;  :rlimit-count            645217)
(push) ; 16
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25628
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      880
;  :arith-assert-upper      1306
;  :arith-conflicts         824
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         810
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2121
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6436
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6314
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9031
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2461
;  :propagations            1024
;  :quant-instantiations    248
;  :rlimit-count            645366)
(pop) ; 15
(push) ; 15
; [else-branch: 108 | !(0 <= i__210@344@04)]
(assert (not (<= 0 i__210@344@04)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 109 | i__210@344@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i__210@344@04 | live]
; [else-branch: 109 | !(i__210@344@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i__210@344@04) | live]
(push) ; 15
; [then-branch: 109 | i__210@344@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i__210@344@04]
(assert (and
  (<
    i__210@344@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
  (<= 0 i__210@344@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1 || 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210] == -1
; [eval] diz.Combinate_m.Main_process_state[i__210]
(push) ; 16
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25628
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      881
;  :arith-assert-upper      1307
;  :arith-conflicts         824
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         810
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2122
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6436
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6314
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9033
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2462
;  :propagations            1024
;  :quant-instantiations    248
;  :rlimit-count            645523)
(push) ; 16
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25652
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      882
;  :arith-assert-upper      1309
;  :arith-conflicts         826
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         812
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2126
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6438
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6317
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9034
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2463
;  :propagations            1029
;  :quant-instantiations    248
;  :rlimit-count            645672)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i__210@344@04 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25652
;  :arith-add-rows          432
;  :arith-assert-diseq      241
;  :arith-assert-lower      882
;  :arith-assert-upper      1309
;  :arith-conflicts         826
;  :arith-eq-adapter        335
;  :arith-fixed-eqs         812
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2126
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6438
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6317
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9034
;  :mk-clause               912
;  :num-allocs              13975518
;  :num-checks              2464
;  :propagations            1029
;  :quant-instantiations    248
;  :rlimit-count            645681)
; [eval] -1
(push) ; 16
; [then-branch: 110 | First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04] == -1 | live]
; [else-branch: 110 | First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04] != -1 | live]
(push) ; 17
; [then-branch: 110 | First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i__210@344@04)
  (- 0 1)))
(pop) ; 17
(push) ; 17
; [else-branch: 110 | First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
      i__210@344@04)
    (- 0 1))))
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210] && diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] 0 <= diz.Combinate_m.Main_process_state[i__210]
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25652
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      885
;  :arith-assert-upper      1310
;  :arith-conflicts         826
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         812
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2127
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6438
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6317
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9040
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2465
;  :propagations            1031
;  :quant-instantiations    249
;  :rlimit-count            645952)
(push) ; 18
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25676
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      886
;  :arith-assert-upper      1312
;  :arith-conflicts         828
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         814
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2131
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6440
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6320
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9041
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2466
;  :propagations            1036
;  :quant-instantiations    249
;  :rlimit-count            646101)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i__210@344@04 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25676
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      886
;  :arith-assert-upper      1312
;  :arith-conflicts         828
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         814
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2131
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6440
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6320
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9041
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2467
;  :propagations            1036
;  :quant-instantiations    249
;  :rlimit-count            646110)
(push) ; 18
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04] | live]
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04]) | live]
(push) ; 19
; [then-branch: 111 | 0 <= First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i__210@344@04)))
; [eval] diz.Combinate_m.Main_process_state[i__210] < |diz.Combinate_m.Main_event_state|
; [eval] diz.Combinate_m.Main_process_state[i__210]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25676
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      886
;  :arith-assert-upper      1312
;  :arith-conflicts         828
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         814
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2132
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6440
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6320
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9041
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2468
;  :propagations            1036
;  :quant-instantiations    249
;  :rlimit-count            646263)
(push) ; 20
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25700
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      887
;  :arith-assert-upper      1314
;  :arith-conflicts         830
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         816
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2136
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6442
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6323
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9042
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2469
;  :propagations            1041
;  :quant-instantiations    249
;  :rlimit-count            646412)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i__210@344@04 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25700
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      887
;  :arith-assert-upper      1314
;  :arith-conflicts         830
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         816
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2136
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6442
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6323
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9042
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2470
;  :propagations            1041
;  :quant-instantiations    249
;  :rlimit-count            646421)
; [eval] |diz.Combinate_m.Main_event_state|
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25700
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      887
;  :arith-assert-upper      1314
;  :arith-conflicts         830
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         816
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2137
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6442
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6323
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9042
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2471
;  :propagations            1041
;  :quant-instantiations    249
;  :rlimit-count            646469)
(push) ; 20
(assert (not (= $t@330@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25724
;  :arith-add-rows          432
;  :arith-assert-diseq      242
;  :arith-assert-lower      888
;  :arith-assert-upper      1316
;  :arith-conflicts         832
;  :arith-eq-adapter        336
;  :arith-fixed-eqs         818
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2141
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              826
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9043
;  :mk-clause               916
;  :num-allocs              13975518
;  :num-checks              2472
;  :propagations            1046
;  :quant-instantiations    249
;  :rlimit-count            646618)
(pop) ; 19
(push) ; 19
; [else-branch: 111 | !(0 <= First:(Second:(Second:(Second:($t@328@04))))[i__210@344@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
      i__210@344@04))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 109 | !(i__210@344@04 < |First:(Second:(Second:(Second:($t@328@04))))| && 0 <= i__210@344@04)]
(assert (not
  (and
    (<
      i__210@344@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
    (<= 0 i__210@344@04))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 13
(assert (not (forall ((i__210@344@04 Int)) (!
  (implies
    (and
      (<
        i__210@344@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
      (<= 0 i__210@344@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
          i__210@344@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i__210@344@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i__210@344@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i__210@344@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25724
;  :arith-add-rows          432
;  :arith-assert-diseq      244
;  :arith-assert-lower      889
;  :arith-assert-upper      1317
;  :arith-conflicts         832
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         818
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2142
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              844
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9051
;  :mk-clause               930
;  :num-allocs              13975518
;  :num-checks              2473
;  :propagations            1048
;  :quant-instantiations    250
;  :rlimit-count            647064)
(assert (forall ((i__210@344@04 Int)) (!
  (implies
    (and
      (<
        i__210@344@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))
      (<= 0 i__210@344@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
          i__210@344@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i__210@344@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
            i__210@344@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))
    i__210@344@04))
  :qid |prog.l<no position>|)))
(declare-const $k@345@04 $Perm)
(assert ($Perm.isReadVar $k@345@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25724
;  :arith-add-rows          432
;  :arith-assert-diseq      245
;  :arith-assert-lower      891
;  :arith-assert-upper      1318
;  :arith-conflicts         832
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         818
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2143
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              844
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9056
;  :mk-clause               932
;  :num-allocs              13975518
;  :num-checks              2474
;  :propagations            1049
;  :quant-instantiations    250
;  :rlimit-count            647622)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@345@04 $Perm.No) (< $Perm.No $k@345@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25724
;  :arith-add-rows          432
;  :arith-assert-diseq      245
;  :arith-assert-lower      891
;  :arith-assert-upper      1318
;  :arith-conflicts         832
;  :arith-eq-adapter        338
;  :arith-fixed-eqs         818
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2144
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              844
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9056
;  :mk-clause               932
;  :num-allocs              13975518
;  :num-checks              2475
;  :propagations            1049
;  :quant-instantiations    250
;  :rlimit-count            647672)
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (=
    (+
      (-
        (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
        $k@322@04)
      $k@332@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          432
;  :arith-assert-diseq      245
;  :arith-assert-lower      891
;  :arith-assert-upper      1319
;  :arith-conflicts         833
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         818
;  :arith-pivots            515
;  :binary-propagations     22
;  :conflicts               2145
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9058
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2476
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            647799)
(assert (<
  $k@345@04
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
        $k@322@04)
      $k@332@04)
    $k@345@04)))
(assert (<=
  (-
    (+
      (-
        (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
        $k@322@04)
      $k@332@04)
    $k@345@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
          $k@322@04)
        $k@332@04)
      $k@345@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn != null
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1320
;  :arith-conflicts         833
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         818
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2146
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9061
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2477
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648085)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1321
;  :arith-conflicts         834
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         819
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2147
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9062
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2478
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648213)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1321
;  :arith-conflicts         834
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         819
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2148
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9062
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2479
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648261)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1322
;  :arith-conflicts         835
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         820
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2149
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9063
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2480
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648389)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1322
;  :arith-conflicts         835
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         820
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2150
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9063
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2481
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648437)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1323
;  :arith-conflicts         836
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         821
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2151
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9064
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2482
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648565)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1323
;  :arith-conflicts         836
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         821
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2152
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9064
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2483
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648613)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1324
;  :arith-conflicts         837
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         822
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2153
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9065
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2484
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648741)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1324
;  :arith-conflicts         837
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         822
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2154
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9065
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2485
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648789)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1325
;  :arith-conflicts         838
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         823
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2155
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9066
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2486
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648917)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1325
;  :arith-conflicts         838
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         823
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2156
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9066
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2487
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            648965)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1326
;  :arith-conflicts         839
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         824
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2157
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9067
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2488
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649093)
(push) ; 13
(assert (not (= __flatten_144__188@267@04 $t@333@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1326
;  :arith-conflicts         839
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         824
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2157
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9067
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2489
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649104)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1326
;  :arith-conflicts         839
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         824
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2158
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9067
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2490
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649152)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1327
;  :arith-conflicts         840
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         825
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2159
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9068
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2491
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649280)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1327
;  :arith-conflicts         840
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         825
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2160
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9068
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2492
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649328)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1328
;  :arith-conflicts         841
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         826
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2161
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9069
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2493
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649456)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1328
;  :arith-conflicts         841
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         826
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2162
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9069
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2494
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649504)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1329
;  :arith-conflicts         842
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         827
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2163
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9070
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2495
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649632)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1329
;  :arith-conflicts         842
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         827
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2164
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9070
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2496
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649680)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1330
;  :arith-conflicts         843
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         828
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2165
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9071
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2497
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649808)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1330
;  :arith-conflicts         843
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         828
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2166
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9071
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2498
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649856)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      245
;  :arith-assert-lower      893
;  :arith-assert-upper      1331
;  :arith-conflicts         844
;  :arith-eq-adapter        339
;  :arith-fixed-eqs         829
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2167
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9072
;  :mk-clause               934
;  :num-allocs              13975518
;  :num-checks              2499
;  :propagations            1050
;  :quant-instantiations    250
;  :rlimit-count            649984)
(declare-const $k@346@04 $Perm)
(assert ($Perm.isReadVar $k@346@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      246
;  :arith-assert-lower      895
;  :arith-assert-upper      1332
;  :arith-conflicts         844
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         829
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2168
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9076
;  :mk-clause               936
;  :num-allocs              13975518
;  :num-checks              2500
;  :propagations            1051
;  :quant-instantiations    250
;  :rlimit-count            650181)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@346@04 $Perm.No) (< $Perm.No $k@346@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25725
;  :arith-add-rows          434
;  :arith-assert-diseq      246
;  :arith-assert-lower      895
;  :arith-assert-upper      1332
;  :arith-conflicts         844
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         829
;  :arith-pivots            516
;  :binary-propagations     22
;  :conflicts               2169
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              846
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9076
;  :mk-clause               936
;  :num-allocs              13975518
;  :num-checks              2501
;  :propagations            1051
;  :quant-instantiations    250
;  :rlimit-count            650231)
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (=
    (+
      (-
        (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
        $k@323@04)
      $k@334@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          436
;  :arith-assert-diseq      246
;  :arith-assert-lower      895
;  :arith-assert-upper      1333
;  :arith-conflicts         845
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         829
;  :arith-pivots            517
;  :binary-propagations     22
;  :conflicts               2170
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9078
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2502
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            650408)
(assert (<
  $k@346@04
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
        $k@323@04)
      $k@334@04)
    $k@346@04)))
(assert (<=
  (-
    (+
      (-
        (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
        $k@323@04)
      $k@334@04)
    $k@346@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
          $k@323@04)
        $k@334@04)
      $k@346@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_casr != null
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          438
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1334
;  :arith-conflicts         845
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         829
;  :arith-pivots            517
;  :binary-propagations     22
;  :conflicts               2171
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9081
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2503
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            650688)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          445
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1335
;  :arith-conflicts         846
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         830
;  :arith-pivots            521
;  :binary-propagations     22
;  :conflicts               2172
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9082
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2504
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651001)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          445
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1335
;  :arith-conflicts         846
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         830
;  :arith-pivots            521
;  :binary-propagations     22
;  :conflicts               2173
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9082
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2505
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651049)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          449
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1336
;  :arith-conflicts         847
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         831
;  :arith-pivots            523
;  :binary-propagations     22
;  :conflicts               2174
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9083
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2506
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651288)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          449
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1336
;  :arith-conflicts         847
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         831
;  :arith-pivots            523
;  :binary-propagations     22
;  :conflicts               2175
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9083
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2507
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651336)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          456
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1337
;  :arith-conflicts         848
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         832
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               2176
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9084
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2508
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651653)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          456
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1337
;  :arith-conflicts         848
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         832
;  :arith-pivots            527
;  :binary-propagations     22
;  :conflicts               2177
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9084
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2509
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651701)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          460
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1338
;  :arith-conflicts         849
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         833
;  :arith-pivots            529
;  :binary-propagations     22
;  :conflicts               2178
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9085
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2510
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651946)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          460
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1338
;  :arith-conflicts         849
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         833
;  :arith-pivots            529
;  :binary-propagations     22
;  :conflicts               2179
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9085
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2511
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            651994)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          464
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1339
;  :arith-conflicts         850
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         834
;  :arith-pivots            534
;  :binary-propagations     22
;  :conflicts               2180
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9086
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2512
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652247)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          464
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1339
;  :arith-conflicts         850
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         834
;  :arith-pivots            534
;  :binary-propagations     22
;  :conflicts               2181
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9086
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2513
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652295)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          466
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1340
;  :arith-conflicts         851
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         835
;  :arith-pivots            535
;  :binary-propagations     22
;  :conflicts               2182
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9087
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2514
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652473)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          466
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1340
;  :arith-conflicts         851
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         835
;  :arith-pivots            535
;  :binary-propagations     22
;  :conflicts               2183
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9087
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2515
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652521)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          473
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1341
;  :arith-conflicts         852
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         836
;  :arith-pivots            539
;  :binary-propagations     22
;  :conflicts               2184
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9088
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2516
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652834)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          473
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1341
;  :arith-conflicts         852
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         836
;  :arith-pivots            539
;  :binary-propagations     22
;  :conflicts               2185
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9088
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2517
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            652882)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@255@04 $k@277@04) $k@288@04) $k@301@04) $k@312@04)
      $k@323@04)
    $k@334@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          477
;  :arith-assert-diseq      246
;  :arith-assert-lower      897
;  :arith-assert-upper      1342
;  :arith-conflicts         853
;  :arith-eq-adapter        341
;  :arith-fixed-eqs         837
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               2186
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9089
;  :mk-clause               938
;  :num-allocs              13975518
;  :num-checks              2518
;  :propagations            1052
;  :quant-instantiations    250
;  :rlimit-count            653127)
(declare-const $k@347@04 $Perm)
(assert ($Perm.isReadVar $k@347@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          477
;  :arith-assert-diseq      247
;  :arith-assert-lower      899
;  :arith-assert-upper      1343
;  :arith-conflicts         853
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         837
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               2187
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9093
;  :mk-clause               940
;  :num-allocs              13975518
;  :num-checks              2519
;  :propagations            1053
;  :quant-instantiations    250
;  :rlimit-count            653323)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@347@04 $Perm.No) (< $Perm.No $k@347@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25726
;  :arith-add-rows          477
;  :arith-assert-diseq      247
;  :arith-assert-lower      899
;  :arith-assert-upper      1343
;  :arith-conflicts         853
;  :arith-eq-adapter        342
;  :arith-fixed-eqs         837
;  :arith-pivots            541
;  :binary-propagations     22
;  :conflicts               2188
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              848
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9093
;  :mk-clause               940
;  :num-allocs              13975518
;  :num-checks              2520
;  :propagations            1053
;  :quant-instantiations    250
;  :rlimit-count            653373)
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (=
    (+
      (-
        (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
        $k@324@04)
      $k@336@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          478
;  :arith-assert-diseq      247
;  :arith-assert-lower      899
;  :arith-assert-upper      1344
;  :arith-conflicts         854
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         837
;  :arith-pivots            542
;  :binary-propagations     22
;  :conflicts               2189
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9095
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2521
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            653524)
(assert (<
  $k@347@04
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
        $k@324@04)
      $k@336@04)
    $k@347@04)))
(assert (<=
  (-
    (+
      (-
        (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
        $k@324@04)
      $k@336@04)
    $k@347@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
          $k@324@04)
        $k@336@04)
      $k@347@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_lfsr != null
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          481
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1345
;  :arith-conflicts         854
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         837
;  :arith-pivots            542
;  :binary-propagations     22
;  :conflicts               2190
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9098
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2522
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            653805)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          482
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1346
;  :arith-conflicts         855
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         838
;  :arith-pivots            543
;  :binary-propagations     22
;  :conflicts               2191
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9099
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2523
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            653958)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          482
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1346
;  :arith-conflicts         855
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         838
;  :arith-pivots            543
;  :binary-propagations     22
;  :conflicts               2192
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9099
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2524
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            654006)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          483
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1347
;  :arith-conflicts         856
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         839
;  :arith-pivots            544
;  :binary-propagations     22
;  :conflicts               2193
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9100
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2525
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            654158)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          483
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1347
;  :arith-conflicts         856
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         839
;  :arith-pivots            544
;  :binary-propagations     22
;  :conflicts               2194
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9100
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2526
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            654206)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@256@04 $k@278@04) $k@290@04) $k@302@04) $k@314@04)
      $k@324@04)
    $k@336@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          484
;  :arith-assert-diseq      247
;  :arith-assert-lower      901
;  :arith-assert-upper      1348
;  :arith-conflicts         857
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         840
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2195
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9101
;  :mk-clause               942
;  :num-allocs              13975518
;  :num-checks              2527
;  :propagations            1054
;  :quant-instantiations    250
;  :rlimit-count            654359)
(declare-const $k@348@04 $Perm)
(assert ($Perm.isReadVar $k@348@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          484
;  :arith-assert-diseq      248
;  :arith-assert-lower      903
;  :arith-assert-upper      1349
;  :arith-conflicts         857
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         840
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2196
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9105
;  :mk-clause               944
;  :num-allocs              13975518
;  :num-checks              2528
;  :propagations            1055
;  :quant-instantiations    250
;  :rlimit-count            654556)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@348@04 $Perm.No) (< $Perm.No $k@348@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25727
;  :arith-add-rows          484
;  :arith-assert-diseq      248
;  :arith-assert-lower      903
;  :arith-assert-upper      1349
;  :arith-conflicts         857
;  :arith-eq-adapter        344
;  :arith-fixed-eqs         840
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2197
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              850
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9105
;  :mk-clause               944
;  :num-allocs              13975518
;  :num-checks              2529
;  :propagations            1055
;  :quant-instantiations    250
;  :rlimit-count            654606)
(set-option :timeout 10)
(push) ; 13
(assert (not (not
  (=
    (+
      (-
        (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
        $k@325@04)
      $k@338@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          484
;  :arith-assert-diseq      248
;  :arith-assert-lower      903
;  :arith-assert-upper      1350
;  :arith-conflicts         858
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         840
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2198
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9107
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2530
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            654730)
(assert (<
  $k@348@04
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
        $k@325@04)
      $k@338@04)
    $k@348@04)))
(assert (<=
  (-
    (+
      (-
        (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
        $k@325@04)
      $k@338@04)
    $k@348@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
          $k@325@04)
        $k@338@04)
      $k@348@04))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)) $Ref.null))))
; [eval] diz.Combinate_m.Main_rn_combinate != null
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      248
;  :arith-assert-lower      905
;  :arith-assert-upper      1351
;  :arith-conflicts         858
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         840
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2199
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9110
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2531
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            655012)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      248
;  :arith-assert-lower      905
;  :arith-assert-upper      1352
;  :arith-conflicts         859
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         841
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2200
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9111
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2532
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            655137)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      248
;  :arith-assert-lower      905
;  :arith-assert-upper      1352
;  :arith-conflicts         859
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         841
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2201
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9111
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2533
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            655185)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      248
;  :arith-assert-lower      905
;  :arith-assert-upper      1353
;  :arith-conflicts         860
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         842
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2202
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9112
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2534
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            655310)
(push) ; 13
(assert (not (= diz@30@04 $t@339@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      248
;  :arith-assert-lower      905
;  :arith-assert-upper      1353
;  :arith-conflicts         860
;  :arith-eq-adapter        345
;  :arith-fixed-eqs         842
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2202
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9112
;  :mk-clause               946
;  :num-allocs              13975518
;  :num-checks              2535
;  :propagations            1056
;  :quant-instantiations    250
;  :rlimit-count            655321)
(declare-const $k@349@04 $Perm)
(assert ($Perm.isReadVar $k@349@04 $Perm.Write))
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      249
;  :arith-assert-lower      907
;  :arith-assert-upper      1354
;  :arith-conflicts         860
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         842
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2203
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9116
;  :mk-clause               948
;  :num-allocs              13975518
;  :num-checks              2536
;  :propagations            1057
;  :quant-instantiations    250
;  :rlimit-count            655517)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      249
;  :arith-assert-lower      907
;  :arith-assert-upper      1355
;  :arith-conflicts         861
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         843
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2204
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9117
;  :mk-clause               948
;  :num-allocs              13975518
;  :num-checks              2537
;  :propagations            1057
;  :quant-instantiations    250
;  :rlimit-count            655645)
(set-option :timeout 0)
(push) ; 13
(assert (not (or (= $k@349@04 $Perm.No) (< $Perm.No $k@349@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      249
;  :arith-assert-lower      907
;  :arith-assert-upper      1355
;  :arith-conflicts         861
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         843
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2205
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9117
;  :mk-clause               948
;  :num-allocs              13975518
;  :num-checks              2538
;  :propagations            1057
;  :quant-instantiations    250
;  :rlimit-count            655695)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@333@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25728
;  :arith-add-rows          488
;  :arith-assert-diseq      249
;  :arith-assert-lower      907
;  :arith-assert-upper      1355
;  :arith-conflicts         861
;  :arith-eq-adapter        346
;  :arith-fixed-eqs         843
;  :arith-pivots            545
;  :binary-propagations     22
;  :conflicts               2205
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              852
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9117
;  :mk-clause               948
;  :num-allocs              13975518
;  :num-checks              2539
;  :propagations            1057
;  :quant-instantiations    250
;  :rlimit-count            655706)
(push) ; 13
(assert (not (not
  (=
    (+
      (+
        (-
          (-
            (+
              (+
                (-
                  (-
                    (+
                      (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                      $k@294@04)
                    $k@298@04)
                  $k@304@04)
                $k@307@04)
              $k@318@04)
            $k@320@04)
          $k@326@04)
        $k@329@04)
      $k@340@04)
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          489
;  :arith-assert-diseq      249
;  :arith-assert-lower      907
;  :arith-assert-upper      1356
;  :arith-conflicts         862
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         843
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2206
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9119
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2540
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            655915)
(assert (<
  $k@349@04
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04)))
(assert (<=
  $Perm.No
  (-
    (+
      (+
        (-
          (-
            (+
              (+
                (-
                  (-
                    (+
                      (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                      $k@294@04)
                    $k@298@04)
                  $k@304@04)
                $k@307@04)
              $k@318@04)
            $k@320@04)
          $k@326@04)
        $k@329@04)
      $k@340@04)
    $k@349@04)))
(assert (<=
  (-
    (+
      (+
        (-
          (-
            (+
              (+
                (-
                  (-
                    (+
                      (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                      $k@294@04)
                    $k@298@04)
                  $k@304@04)
                $k@307@04)
              $k@318@04)
            $k@320@04)
          $k@326@04)
        $k@329@04)
      $k@340@04)
    $k@349@04)
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (+
          (-
            (-
              (+
                (+
                  (-
                    (-
                      (+
                        (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                        $k@294@04)
                      $k@298@04)
                    $k@304@04)
                  $k@307@04)
                $k@318@04)
              $k@320@04)
            $k@326@04)
          $k@329@04)
        $k@340@04)
      $k@349@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
      $Ref.null))))
; [eval] diz.Combinate_m.Main_rn.Rng_m == diz.Combinate_m
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          495
;  :arith-assert-diseq      249
;  :arith-assert-lower      909
;  :arith-assert-upper      1357
;  :arith-conflicts         862
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         843
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2207
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9122
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2541
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            656263)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          495
;  :arith-assert-diseq      249
;  :arith-assert-lower      909
;  :arith-assert-upper      1358
;  :arith-conflicts         863
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         844
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2208
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9123
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2542
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            656391)
(push) ; 13
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@04))))))))))
  $t@333@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          495
;  :arith-assert-diseq      249
;  :arith-assert-lower      909
;  :arith-assert-upper      1358
;  :arith-conflicts         863
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         844
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2208
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9123
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2543
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            656402)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (+
      (-
        (-
          (+
            (+
              (-
                (-
                  (+
                    (+ (- (- $k@258@04 $k@274@04) $k@280@04) $k@283@04)
                    $k@294@04)
                  $k@298@04)
                $k@304@04)
              $k@307@04)
            $k@318@04)
          $k@320@04)
        $k@326@04)
      $k@329@04)
    $k@340@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          495
;  :arith-assert-diseq      249
;  :arith-assert-lower      909
;  :arith-assert-upper      1359
;  :arith-conflicts         864
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         845
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2209
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9124
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2544
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            656592)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25729
;  :arith-add-rows          495
;  :arith-assert-diseq      249
;  :arith-assert-lower      909
;  :arith-assert-upper      1359
;  :arith-conflicts         864
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         845
;  :arith-pivots            546
;  :binary-propagations     22
;  :conflicts               2210
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6444
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6326
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9124
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2545
;  :propagations            1058
;  :quant-instantiations    250
;  :rlimit-count            656640)
(set-option :timeout 0)
(push) ; 13
(assert (not (= $t@341@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25762
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1362
;  :arith-conflicts         867
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         848
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2215
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9125
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2546
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            656845)
(assert (= $t@341@04 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@251@04))))
; [eval] diz.Combinate_m.Main_rn_combinate == diz
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25764
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1362
;  :arith-conflicts         867
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         848
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2216
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9126
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2547
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            656931)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@257@04 $k@279@04) $k@292@04) $k@303@04) $k@316@04)
      $k@325@04)
    $k@338@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25764
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1363
;  :arith-conflicts         868
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         849
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2217
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9127
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2548
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            657056)
(set-option :timeout 0)
(push) ; 13
(assert (not (= $t@339@04 diz@30@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25764
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1363
;  :arith-conflicts         868
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         849
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2217
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9127
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2549
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            657067)
(assert (= $t@339@04 diz@30@04))
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25764
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1363
;  :arith-conflicts         868
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         849
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2218
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9127
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2550
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            657118)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25764
;  :arith-add-rows          496
;  :arith-assert-diseq      249
;  :arith-assert-lower      911
;  :arith-assert-upper      1364
;  :arith-conflicts         869
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         850
;  :arith-pivots            547
;  :binary-propagations     22
;  :conflicts               2219
;  :datatype-accessor-ax    874
;  :datatype-constructor-ax 6446
;  :datatype-occurs-check   1039
;  :datatype-splits         4947
;  :decisions               6330
;  :del-clause              854
;  :final-checks            182
;  :max-generation          2
;  :max-memory              6.49
;  :memory                  6.40
;  :mk-bool-var             9128
;  :mk-clause               950
;  :num-allocs              13975518
;  :num-checks              2551
;  :propagations            1067
;  :quant-instantiations    250
;  :rlimit-count            657246)
(set-option :timeout 0)
(push) ; 13
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26754
;  :arith-add-rows          498
;  :arith-assert-diseq      249
;  :arith-assert-lower      912
;  :arith-assert-upper      1365
;  :arith-conflicts         869
;  :arith-eq-adapter        348
;  :arith-fixed-eqs         851
;  :arith-pivots            549
;  :binary-propagations     22
;  :conflicts               2220
;  :datatype-accessor-ax    882
;  :datatype-constructor-ax 6728
;  :datatype-occurs-check   1060
;  :datatype-splits         5133
;  :decisions               6606
;  :del-clause              856
;  :final-checks            185
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.54
;  :mk-bool-var             9322
;  :mk-clause               952
;  :num-allocs              15462414
;  :num-checks              2552
;  :propagations            1074
;  :quant-instantiations    252
;  :rlimit-count            662616
;  :time                    0.00)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27415
;  :arith-add-rows          500
;  :arith-assert-diseq      249
;  :arith-assert-lower      913
;  :arith-assert-upper      1366
;  :arith-conflicts         869
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         852
;  :arith-pivots            551
;  :binary-propagations     22
;  :conflicts               2221
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 6914
;  :datatype-occurs-check   1080
;  :datatype-splits         5317
;  :decisions               6787
;  :del-clause              872
;  :final-checks            188
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.54
;  :mk-bool-var             9508
;  :mk-clause               953
;  :num-allocs              17453931
;  :num-checks              2554
;  :propagations            1081
;  :quant-instantiations    252
;  :rlimit-count            666489)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               27415
;  :arith-add-rows          500
;  :arith-assert-diseq      249
;  :arith-assert-lower      913
;  :arith-assert-upper      1367
;  :arith-conflicts         870
;  :arith-eq-adapter        349
;  :arith-fixed-eqs         853
;  :arith-pivots            551
;  :binary-propagations     22
;  :conflicts               2222
;  :datatype-accessor-ax    889
;  :datatype-constructor-ax 6914
;  :datatype-occurs-check   1080
;  :datatype-splits         5317
;  :decisions               6787
;  :del-clause              872
;  :final-checks            188
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.54
;  :mk-bool-var             9509
;  :mk-clause               953
;  :num-allocs              17453931
;  :num-checks              2555
;  :propagations            1081
;  :quant-instantiations    252
;  :rlimit-count            666617)
(set-option :timeout 0)
(push) ; 13
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               28405
;  :arith-add-rows          502
;  :arith-assert-diseq      249
;  :arith-assert-lower      914
;  :arith-assert-upper      1368
;  :arith-conflicts         870
;  :arith-eq-adapter        350
;  :arith-fixed-eqs         854
;  :arith-pivots            553
;  :binary-propagations     22
;  :conflicts               2223
;  :datatype-accessor-ax    897
;  :datatype-constructor-ax 7196
;  :datatype-occurs-check   1101
;  :datatype-splits         5503
;  :decisions               7063
;  :del-clause              874
;  :final-checks            191
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.54
;  :mk-bool-var             9703
;  :mk-clause               955
;  :num-allocs              19456412
;  :num-checks              2556
;  :propagations            1088
;  :quant-instantiations    254
;  :rlimit-count            671976
;  :time                    0.00)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29066
;  :arith-add-rows          504
;  :arith-assert-diseq      249
;  :arith-assert-lower      915
;  :arith-assert-upper      1369
;  :arith-conflicts         870
;  :arith-eq-adapter        351
;  :arith-fixed-eqs         855
;  :arith-pivots            555
;  :binary-propagations     22
;  :conflicts               2224
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7382
;  :datatype-occurs-check   1121
;  :datatype-splits         5687
;  :decisions               7244
;  :del-clause              875
;  :final-checks            194
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.55
;  :mk-bool-var             9889
;  :mk-clause               956
;  :num-allocs              20461764
;  :num-checks              2558
;  :propagations            1095
;  :quant-instantiations    254
;  :rlimit-count            675849)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               29066
;  :arith-add-rows          504
;  :arith-assert-diseq      249
;  :arith-assert-lower      915
;  :arith-assert-upper      1370
;  :arith-conflicts         871
;  :arith-eq-adapter        351
;  :arith-fixed-eqs         856
;  :arith-pivots            555
;  :binary-propagations     22
;  :conflicts               2225
;  :datatype-accessor-ax    904
;  :datatype-constructor-ax 7382
;  :datatype-occurs-check   1121
;  :datatype-splits         5687
;  :decisions               7244
;  :del-clause              875
;  :final-checks            194
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.55
;  :mk-bool-var             9890
;  :mk-clause               956
;  :num-allocs              20461764
;  :num-checks              2559
;  :propagations            1095
;  :quant-instantiations    254
;  :rlimit-count            675977)
(set-option :timeout 0)
(push) ; 13
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30056
;  :arith-add-rows          506
;  :arith-assert-diseq      249
;  :arith-assert-lower      916
;  :arith-assert-upper      1371
;  :arith-conflicts         871
;  :arith-eq-adapter        352
;  :arith-fixed-eqs         857
;  :arith-pivots            557
;  :binary-propagations     22
;  :conflicts               2226
;  :datatype-accessor-ax    912
;  :datatype-constructor-ax 7664
;  :datatype-occurs-check   1142
;  :datatype-splits         5873
;  :decisions               7520
;  :del-clause              877
;  :final-checks            197
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.55
;  :mk-bool-var             10084
;  :mk-clause               958
;  :num-allocs              21472583
;  :num-checks              2560
;  :propagations            1102
;  :quant-instantiations    256
;  :rlimit-count            681332
;  :time                    0.00)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] !!diz.Combinate_m.Main_rn.Rng_reset
; [eval] !diz.Combinate_m.Main_rn.Rng_reset
(push) ; 13
(assert (not (< $Perm.No $k@252@04)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30717
;  :arith-add-rows          508
;  :arith-assert-diseq      249
;  :arith-assert-lower      917
;  :arith-assert-upper      1372
;  :arith-conflicts         871
;  :arith-eq-adapter        353
;  :arith-fixed-eqs         858
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               2227
;  :datatype-accessor-ax    919
;  :datatype-constructor-ax 7850
;  :datatype-occurs-check   1162
;  :datatype-splits         6057
;  :decisions               7701
;  :del-clause              878
;  :final-checks            200
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.46
;  :mk-bool-var             10270
;  :mk-clause               959
;  :num-allocs              22997315
;  :num-checks              2562
;  :propagations            1109
;  :quant-instantiations    256
;  :rlimit-count            685205)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (- (+ (- $k@254@04 $k@276@04) $k@286@04) $k@300@04) $k@310@04)
      $k@322@04)
    $k@332@04))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               30717
;  :arith-add-rows          508
;  :arith-assert-diseq      249
;  :arith-assert-lower      917
;  :arith-assert-upper      1373
;  :arith-conflicts         872
;  :arith-eq-adapter        353
;  :arith-fixed-eqs         859
;  :arith-pivots            559
;  :binary-propagations     22
;  :conflicts               2228
;  :datatype-accessor-ax    919
;  :datatype-constructor-ax 7850
;  :datatype-occurs-check   1162
;  :datatype-splits         6057
;  :decisions               7701
;  :del-clause              878
;  :final-checks            200
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.46
;  :mk-bool-var             10271
;  :mk-clause               959
;  :num-allocs              22997315
;  :num-checks              2563
;  :propagations            1109
;  :quant-instantiations    256
;  :rlimit-count            685333)
(set-option :timeout 0)
(push) ; 13
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@328@04)))))))))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               31707
;  :arith-add-rows          510
;  :arith-assert-diseq      249
;  :arith-assert-lower      918
;  :arith-assert-upper      1374
;  :arith-conflicts         872
;  :arith-eq-adapter        354
;  :arith-fixed-eqs         860
;  :arith-pivots            561
;  :binary-propagations     22
;  :conflicts               2229
;  :datatype-accessor-ax    927
;  :datatype-constructor-ax 8132
;  :datatype-occurs-check   1183
;  :datatype-splits         6243
;  :decisions               7977
;  :del-clause              880
;  :final-checks            203
;  :max-generation          2
;  :max-memory              6.64
;  :memory                  6.46
;  :mk-bool-var             10465
;  :mk-clause               961
;  :num-allocs              24020482
;  :num-checks              2564
;  :propagations            1116
;  :quant-instantiations    258
;  :rlimit-count            690688
;  :time                    0.00)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
