(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-15 15:44:38
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Monitor<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- ALU___contract_unsatisfiable__set_bit_EncodedGlobalVariables_Integer_Integer_Integer ----------
(declare-const diz@0@04 $Ref)
(declare-const globals@1@04 $Ref)
(declare-const value@2@04 Int)
(declare-const pos@3@04 Int)
(declare-const bit@4@04 Int)
(declare-const sys__result@5@04 Int)
(declare-const diz@6@04 $Ref)
(declare-const globals@7@04 $Ref)
(declare-const value@8@04 Int)
(declare-const pos@9@04 Int)
(declare-const bit@10@04 Int)
(declare-const sys__result@11@04 Int)
(push) ; 1
(declare-const $t@12@04 $Snap)
(assert (= $t@12@04 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@6@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && (acc(diz.ALU_m, wildcard) && diz.ALU_m != null && acc(Main_lock_held_EncodedGlobalVariables(diz.ALU_m, globals), write) && (true && (true && acc(diz.ALU_m.Main_process_state, write) && |diz.ALU_m.Main_process_state| == 1 && acc(diz.ALU_m.Main_event_state, write) && |diz.ALU_m.Main_event_state| == 2 && (forall i__11: Int :: { diz.ALU_m.Main_process_state[i__11] } 0 <= i__11 && i__11 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__11] == -1 || 0 <= diz.ALU_m.Main_process_state[i__11] && diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|)) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu != null && acc(diz.ALU_m.Main_alu.ALU_OPCODE, write) && acc(diz.ALU_m.Main_alu.ALU_OP1, write) && acc(diz.ALU_m.Main_alu.ALU_OP2, write) && acc(diz.ALU_m.Main_alu.ALU_CARRY, write) && acc(diz.ALU_m.Main_alu.ALU_ZERO, write) && acc(diz.ALU_m.Main_alu.ALU_RESULT, write) && 0 <= diz.ALU_m.Main_alu.ALU_RESULT && diz.ALU_m.Main_alu.ALU_RESULT <= 16 && acc(diz.ALU_m.Main_dr, wildcard) && diz.ALU_m.Main_dr != null && acc(diz.ALU_m.Main_dr.Driver_init, 1 / 2) && acc(diz.ALU_m.Main_dr.Driver_z, write) && acc(diz.ALU_m.Main_dr.Driver_x, write) && acc(diz.ALU_m.Main_dr.Driver_y, write) && acc(diz.ALU_m.Main_dr.Driver_a, write) && acc(diz.ALU_m.Main_mon, wildcard) && diz.ALU_m.Main_mon != null && acc(diz.ALU_m.Main_mon.Monitor_init, 1 / 2) && acc(diz.ALU_m.Main_alu.ALU_m, wildcard) && diz.ALU_m.Main_alu.ALU_m == diz.ALU_m) && acc(diz.ALU_m.Main_alu, wildcard) && diz.ALU_m.Main_alu == diz)
(declare-const $t@13@04 $Snap)
(assert (= $t@13@04 ($Snap.combine ($Snap.first $t@13@04) ($Snap.second $t@13@04))))
(assert (= ($Snap.first $t@13@04) $Snap.unit))
(assert (=
  ($Snap.second $t@13@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@13@04))
    ($Snap.second ($Snap.second $t@13@04)))))
(declare-const $k@14@04 $Perm)
(assert ($Perm.isReadVar $k@14@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@14@04 $Perm.No) (< $Perm.No $k@14@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             18
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    2
;  :arith-eq-adapter      2
;  :binary-propagations   16
;  :conflicts             1
;  :datatype-accessor-ax  3
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.78
;  :mk-bool-var           265
;  :mk-clause             3
;  :num-allocs            3508183
;  :num-checks            2
;  :propagations          17
;  :quant-instantiations  1
;  :rlimit-count          112053)
(assert (<= $Perm.No $k@14@04))
(assert (<= $k@14@04 $Perm.Write))
(assert (implies (< $Perm.No $k@14@04) (not (= diz@6@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@13@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@13@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@13@04))) $Snap.unit))
; [eval] diz.ALU_m != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             24
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   16
;  :conflicts             2
;  :datatype-accessor-ax  4
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.78
;  :mk-bool-var           268
;  :mk-clause             3
;  :num-allocs            3508183
;  :num-checks            3
;  :propagations          17
;  :quant-instantiations  1
;  :rlimit-count          112306)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@13@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             30
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   16
;  :conflicts             3
;  :datatype-accessor-ax  5
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.78
;  :mk-bool-var           271
;  :mk-clause             3
;  :num-allocs            3508183
;  :num-checks            4
;  :propagations          17
;  :quant-instantiations  2
;  :rlimit-count          112590)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             47
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   16
;  :conflicts             4
;  :datatype-accessor-ax  8
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.78
;  :mk-bool-var           276
;  :mk-clause             3
;  :num-allocs            3508183
;  :num-checks            5
;  :propagations          17
;  :quant-instantiations  2
;  :rlimit-count          113030)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_process_state| == 1
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             53
;  :arith-assert-diseq    1
;  :arith-assert-lower    3
;  :arith-assert-upper    3
;  :arith-eq-adapter      2
;  :binary-propagations   16
;  :conflicts             5
;  :datatype-accessor-ax  9
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           278
;  :mk-clause             3
;  :num-allocs            3626212
;  :num-checks            6
;  :propagations          17
;  :quant-instantiations  2
;  :rlimit-count          113279
;  :time                  0.00)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             60
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    4
;  :arith-eq-adapter      4
;  :binary-propagations   16
;  :conflicts             6
;  :datatype-accessor-ax  10
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           287
;  :mk-clause             6
;  :num-allocs            3626212
;  :num-checks            7
;  :propagations          18
;  :quant-instantiations  5
;  :rlimit-count          113664)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
  $Snap.unit))
; [eval] |diz.ALU_m.Main_event_state| == 2
; [eval] |diz.ALU_m.Main_event_state|
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             66
;  :arith-assert-diseq    2
;  :arith-assert-lower    6
;  :arith-assert-upper    4
;  :arith-eq-adapter      4
;  :binary-propagations   16
;  :conflicts             7
;  :datatype-accessor-ax  11
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           289
;  :mk-clause             6
;  :num-allocs            3626212
;  :num-checks            8
;  :propagations          18
;  :quant-instantiations  5
;  :rlimit-count          113933)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))
  $Snap.unit))
; [eval] (forall i__11: Int :: { diz.ALU_m.Main_process_state[i__11] } 0 <= i__11 && i__11 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__11] == -1 || 0 <= diz.ALU_m.Main_process_state[i__11] && diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|)
(declare-const i__11@15@04 Int)
(push) ; 3
; [eval] 0 <= i__11 && i__11 < |diz.ALU_m.Main_process_state| ==> diz.ALU_m.Main_process_state[i__11] == -1 || 0 <= diz.ALU_m.Main_process_state[i__11] && diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= i__11 && i__11 < |diz.ALU_m.Main_process_state|
; [eval] 0 <= i__11
(push) ; 4
; [then-branch: 0 | 0 <= i__11@15@04 | live]
; [else-branch: 0 | !(0 <= i__11@15@04) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i__11@15@04]
(assert (<= 0 i__11@15@04))
; [eval] i__11 < |diz.ALU_m.Main_process_state|
; [eval] |diz.ALU_m.Main_process_state|
(push) ; 6
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             74
;  :arith-assert-diseq    3
;  :arith-assert-lower    10
;  :arith-assert-upper    5
;  :arith-eq-adapter      6
;  :binary-propagations   16
;  :conflicts             8
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           300
;  :mk-clause             9
;  :num-allocs            3626212
;  :num-checks            9
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          114425)
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i__11@15@04)]
(assert (not (<= 0 i__11@15@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i__11@15@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))| && 0 <= i__11@15@04 | live]
; [else-branch: 1 | !(i__11@15@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))| && 0 <= i__11@15@04) | live]
(push) ; 5
; [then-branch: 1 | i__11@15@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))| && 0 <= i__11@15@04]
(assert (and
  (<
    i__11@15@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
  (<= 0 i__11@15@04)))
; [eval] diz.ALU_m.Main_process_state[i__11] == -1 || 0 <= diz.ALU_m.Main_process_state[i__11] && diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__11] == -1
; [eval] diz.ALU_m.Main_process_state[i__11]
(push) ; 6
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             9
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           302
;  :mk-clause             9
;  :num-allocs            3626212
;  :num-checks            10
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          114586)
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i__11@15@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             9
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           302
;  :mk-clause             9
;  :num-allocs            3626212
;  :num-checks            11
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          114595)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
    i__11@15@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
      i__11@15@04)
    (- 0 1))))
; [eval] 0 <= diz.ALU_m.Main_process_state[i__11] && diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|
; [eval] 0 <= diz.ALU_m.Main_process_state[i__11]
; [eval] diz.ALU_m.Main_process_state[i__11]
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             10
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           303
;  :mk-clause             9
;  :num-allocs            3626212
;  :num-checks            12
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          114845
;  :time                  0.00)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= i__11@15@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    3
;  :arith-assert-lower    11
;  :arith-assert-upper    6
;  :arith-eq-adapter      6
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             10
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           303
;  :mk-clause             9
;  :num-allocs            3626212
;  :num-checks            13
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          114854)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
    i__11@15@04)))
; [eval] diz.ALU_m.Main_process_state[i__11] < |diz.ALU_m.Main_event_state|
; [eval] diz.ALU_m.Main_process_state[i__11]
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             11
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           306
;  :mk-clause             10
;  :num-allocs            3626212
;  :num-checks            14
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          115047)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i__11@15@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             11
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           306
;  :mk-clause             10
;  :num-allocs            3626212
;  :num-checks            15
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          115056)
; [eval] |diz.ALU_m.Main_event_state|
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             75
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             12
;  :datatype-accessor-ax  12
;  :datatype-occurs-check 1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           306
;  :mk-clause             10
;  :num-allocs            3626212
;  :num-checks            16
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          115104)
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))[i__11@15@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
      i__11@15@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i__11@15@04 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@13@04)))))))| && 0 <= i__11@15@04)]
(assert (not
  (and
    (<
      i__11@15@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
    (<= 0 i__11@15@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__11@15@04 Int)) (!
  (implies
    (and
      (<
        i__11@15@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))
      (<= 0 i__11@15@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
          i__11@15@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
            i__11@15@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
            i__11@15@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))
    i__11@15@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             80
;  :arith-assert-diseq    4
;  :arith-assert-lower    14
;  :arith-assert-upper    6
;  :arith-eq-adapter      7
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             13
;  :datatype-accessor-ax  13
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           308
;  :mk-clause             10
;  :num-allocs            3626212
;  :num-checks            17
;  :propagations          19
;  :quant-instantiations  8
;  :rlimit-count          115819)
(declare-const $k@16@04 $Perm)
(assert ($Perm.isReadVar $k@16@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@16@04 $Perm.No) (< $Perm.No $k@16@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             80
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    7
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             14
;  :datatype-accessor-ax  13
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           312
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            18
;  :propagations          20
;  :quant-instantiations  8
;  :rlimit-count          116017)
(assert (<= $Perm.No $k@16@04))
(assert (<= $k@16@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@16@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             86
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             15
;  :datatype-accessor-ax  14
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           315
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            19
;  :propagations          20
;  :quant-instantiations  8
;  :rlimit-count          116370)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             86
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             16
;  :datatype-accessor-ax  14
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           315
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            20
;  :propagations          20
;  :quant-instantiations  8
;  :rlimit-count          116418
;  :time                  0.00)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             92
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             17
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           318
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            21
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          116804)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             92
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             18
;  :datatype-accessor-ax  15
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           318
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            22
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          116852)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             97
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             19
;  :datatype-accessor-ax  16
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           319
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            23
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117139)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             97
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             20
;  :datatype-accessor-ax  16
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           319
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            24
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117187)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             102
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             21
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           320
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            25
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117484)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             102
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             22
;  :datatype-accessor-ax  17
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           320
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            26
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117532)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             23
;  :datatype-accessor-ax  18
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           321
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            27
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117839)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             107
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             24
;  :datatype-accessor-ax  18
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           321
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            28
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          117887)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             112
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             25
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           322
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            29
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          118204)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             112
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             26
;  :datatype-accessor-ax  19
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           322
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            30
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          118252)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             117
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             27
;  :datatype-accessor-ax  20
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           323
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            31
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          118579)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             117
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             28
;  :datatype-accessor-ax  20
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           323
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            32
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          118627)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.ALU_m.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             123
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             29
;  :datatype-accessor-ax  21
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           325
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            33
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          118996)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             123
;  :arith-assert-diseq    5
;  :arith-assert-lower    16
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             30
;  :datatype-accessor-ax  21
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           325
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            34
;  :propagations          20
;  :quant-instantiations  9
;  :rlimit-count          119044)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             130
;  :arith-assert-diseq    5
;  :arith-assert-lower    17
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             31
;  :datatype-accessor-ax  22
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           329
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            35
;  :propagations          20
;  :quant-instantiations  10
;  :rlimit-count          119522)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             130
;  :arith-assert-diseq    5
;  :arith-assert-lower    17
;  :arith-assert-upper    8
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             32
;  :datatype-accessor-ax  22
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           329
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            36
;  :propagations          20
;  :quant-instantiations  10
;  :rlimit-count          119570)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             135
;  :arith-assert-diseq    5
;  :arith-assert-lower    17
;  :arith-assert-upper    9
;  :arith-eq-adapter      8
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             33
;  :datatype-accessor-ax  23
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           331
;  :mk-clause             12
;  :num-allocs            3626212
;  :num-checks            37
;  :propagations          20
;  :quant-instantiations  10
;  :rlimit-count          119973)
(declare-const $k@17@04 $Perm)
(assert ($Perm.isReadVar $k@17@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@17@04 $Perm.No) (< $Perm.No $k@17@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             135
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    10
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             34
;  :datatype-accessor-ax  23
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           335
;  :mk-clause             14
;  :num-allocs            3626212
;  :num-checks            38
;  :propagations          21
;  :quant-instantiations  10
;  :rlimit-count          120172)
(assert (<= $Perm.No $k@17@04))
(assert (<= $k@17@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@17@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             141
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             35
;  :datatype-accessor-ax  24
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           338
;  :mk-clause             14
;  :num-allocs            3626212
;  :num-checks            39
;  :propagations          21
;  :quant-instantiations  10
;  :rlimit-count          120625)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             141
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             36
;  :datatype-accessor-ax  24
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.87
;  :mk-bool-var           338
;  :mk-clause             14
;  :num-allocs            3626212
;  :num-checks            40
;  :propagations          21
;  :quant-instantiations  10
;  :rlimit-count          120673)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             147
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             37
;  :datatype-accessor-ax  25
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           341
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            41
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          121159)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             147
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             38
;  :datatype-accessor-ax  25
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           341
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            42
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          121207)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             147
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             38
;  :datatype-accessor-ax  25
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           341
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            43
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          121220)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             152
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             39
;  :datatype-accessor-ax  26
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           342
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            44
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          121607)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             152
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             40
;  :datatype-accessor-ax  26
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           342
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            45
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          121655)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             157
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             41
;  :datatype-accessor-ax  27
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           343
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            46
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          122052)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             157
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             42
;  :datatype-accessor-ax  27
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           343
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            47
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          122100)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             162
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             43
;  :datatype-accessor-ax  28
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           344
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            48
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          122507)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             162
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             44
;  :datatype-accessor-ax  28
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           344
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            49
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          122555)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             167
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             45
;  :datatype-accessor-ax  29
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           345
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            50
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          122972)
(push) ; 3
(assert (not (< $Perm.No $k@17@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             167
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             46
;  :datatype-accessor-ax  29
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           345
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            51
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          123020)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             172
;  :arith-assert-diseq    6
;  :arith-assert-lower    19
;  :arith-assert-upper    11
;  :arith-eq-adapter      9
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             47
;  :datatype-accessor-ax  30
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           346
;  :mk-clause             14
;  :num-allocs            3750004
;  :num-checks            52
;  :propagations          21
;  :quant-instantiations  11
;  :rlimit-count          123447)
(declare-const $k@18@04 $Perm)
(assert ($Perm.isReadVar $k@18@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@18@04 $Perm.No) (< $Perm.No $k@18@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             172
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    12
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             48
;  :datatype-accessor-ax  30
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           350
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            53
;  :propagations          22
;  :quant-instantiations  11
;  :rlimit-count          123645)
(assert (<= $Perm.No $k@18@04))
(assert (<= $k@18@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@18@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             178
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             49
;  :datatype-accessor-ax  31
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           353
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            54
;  :propagations          22
;  :quant-instantiations  11
;  :rlimit-count          124168)
(push) ; 3
(assert (not (< $Perm.No $k@18@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             178
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             50
;  :datatype-accessor-ax  31
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           353
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            55
;  :propagations          22
;  :quant-instantiations  11
;  :rlimit-count          124216)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             184
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             51
;  :datatype-accessor-ax  32
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           356
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            56
;  :propagations          22
;  :quant-instantiations  12
;  :rlimit-count          124780)
(push) ; 3
(assert (not (< $Perm.No $k@18@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             184
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             52
;  :datatype-accessor-ax  32
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           356
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            57
;  :propagations          22
;  :quant-instantiations  12
;  :rlimit-count          124828)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             184
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             52
;  :datatype-accessor-ax  32
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           356
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            58
;  :propagations          22
;  :quant-instantiations  12
;  :rlimit-count          124841)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             189
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             53
;  :datatype-accessor-ax  33
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           357
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            59
;  :propagations          22
;  :quant-instantiations  12
;  :rlimit-count          125298)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             189
;  :arith-assert-diseq    7
;  :arith-assert-lower    21
;  :arith-assert-upper    13
;  :arith-eq-adapter      10
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             54
;  :datatype-accessor-ax  33
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           357
;  :mk-clause             16
;  :num-allocs            3750004
;  :num-checks            60
;  :propagations          22
;  :quant-instantiations  12
;  :rlimit-count          125346)
(declare-const $k@19@04 $Perm)
(assert ($Perm.isReadVar $k@19@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@19@04 $Perm.No) (< $Perm.No $k@19@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs             189
;  :arith-assert-diseq    8
;  :arith-assert-lower    23
;  :arith-assert-upper    14
;  :arith-eq-adapter      11
;  :arith-fixed-eqs       1
;  :binary-propagations   16
;  :conflicts             55
;  :datatype-accessor-ax  33
;  :datatype-occurs-check 1
;  :del-clause            1
;  :final-checks          1
;  :max-generation        1
;  :max-memory            4.12
;  :memory                3.97
;  :mk-bool-var           361
;  :mk-clause             18
;  :num-allocs            3750004
;  :num-checks            61
;  :propagations          23
;  :quant-instantiations  12
;  :rlimit-count          125545)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@6@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               249
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               56
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             386
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              62
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            126398
;  :time                    0.00)
(assert (<= $Perm.No $k@19@04))
(assert (<= $k@19@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@19@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu.ALU_m == diz.ALU_m
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               57
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             389
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              63
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            126951)
(push) ; 3
(assert (not (< $Perm.No $k@16@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               58
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             389
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              64
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            126999)
(push) ; 3
(assert (not (< $Perm.No $k@19@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               59
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             389
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              65
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127047)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               255
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             389
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              66
;  :propagations            23
;  :quant-instantiations    12
;  :rlimit-count            127095)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               263
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      15
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               61
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             392
;  :mk-clause               19
;  :num-allocs              3750004
;  :num-checks              67
;  :propagations            23
;  :quant-instantiations    13
;  :rlimit-count            127686)
(declare-const $k@20@04 $Perm)
(assert ($Perm.isReadVar $k@20@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@20@04 $Perm.No) (< $Perm.No $k@20@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               263
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      16
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             396
;  :mk-clause               21
;  :num-allocs              3750004
;  :num-checks              68
;  :propagations            24
;  :quant-instantiations    13
;  :rlimit-count            127885)
(declare-const $t@21@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@16@04)
    (=
      $t@21@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))
  (implies
    (< $Perm.No $k@20@04)
    (=
      $t@21@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@16@04 $k@20@04)))
(assert (<= (+ $k@16@04 $k@20@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@16@04 $k@20@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04))))))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.ALU_m.Main_alu == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@14@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      17
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             402
;  :mk-clause               21
;  :num-allocs              3878699
;  :num-checks              69
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            128604)
(push) ; 3
(assert (not (< $Perm.No (+ $k@16@04 $k@20@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 24
;  :datatype-occurs-check   7
;  :datatype-splits         23
;  :decisions               23
;  :del-clause              2
;  :final-checks            4
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             403
;  :mk-clause               21
;  :num-allocs              3878699
;  :num-checks              70
;  :propagations            24
;  :quant-instantiations    14
;  :rlimit-count            128670)
(assert (= $t@21@04 diz@6@04))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
  diz@6@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               430
;  :arith-assert-diseq      9
;  :arith-assert-lower      26
;  :arith-assert-upper      18
;  :arith-conflicts         1
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         2
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 88
;  :datatype-occurs-check   21
;  :datatype-splits         48
;  :decisions               84
;  :del-clause              20
;  :final-checks            11
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             433
;  :mk-clause               22
;  :num-allocs              3878699
;  :num-checks              74
;  :propagations            26
;  :quant-instantiations    14
;  :rlimit-count            130766)
(declare-const $t@22@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@19@04)
    (=
      $t@22@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@14@04)
    (=
      $t@22@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@13@04)))))))
(assert (<= $Perm.No (+ $k@19@04 $k@14@04)))
(assert (<= (+ $k@19@04 $k@14@04) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@19@04 $k@14@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@04)))))))))))))
      $Ref.null))))
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main___contract_unsatisfiable__Main_EncodedGlobalVariables ----------
(declare-const diz@23@04 $Ref)
(declare-const globals@24@04 $Ref)
(declare-const diz@25@04 $Ref)
(declare-const globals@26@04 $Ref)
(push) ; 1
(declare-const $t@27@04 $Snap)
(assert (= $t@27@04 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@25@04 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@28@04 $Snap)
(assert (= $t@28@04 ($Snap.combine ($Snap.first $t@28@04) ($Snap.second $t@28@04))))
(assert (= ($Snap.first $t@28@04) $Snap.unit))
(assert (= ($Snap.second $t@28@04) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Main_main_EncodedGlobalVariables ----------
(declare-const diz@29@04 $Ref)
(declare-const globals@30@04 $Ref)
(declare-const diz@31@04 $Ref)
(declare-const globals@32@04 $Ref)
(push) ; 1
(declare-const $t@33@04 $Snap)
(assert (= $t@33@04 ($Snap.combine ($Snap.first $t@33@04) ($Snap.second $t@33@04))))
(assert (= ($Snap.first $t@33@04) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@31@04 $Ref.null)))
(assert (=
  ($Snap.second $t@33@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@33@04))
    ($Snap.second ($Snap.second $t@33@04)))))
(declare-const $k@34@04 $Perm)
(assert ($Perm.isReadVar $k@34@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@34@04 $Perm.No) (< $Perm.No $k@34@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               502
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      20
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             452
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              81
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            133657)
(assert (<= $Perm.No $k@34@04))
(assert (<= $k@34@04 $Perm.Write))
(assert (implies (< $Perm.No $k@34@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@33@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@33@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@33@04))) $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               508
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             455
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              82
;  :propagations            28
;  :quant-instantiations    14
;  :rlimit-count            133910)
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@33@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               514
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               69
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             458
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              83
;  :propagations            28
;  :quant-instantiations    15
;  :rlimit-count            134194)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               514
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               69
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             458
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              84
;  :propagations            28
;  :quant-instantiations    15
;  :rlimit-count            134207)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
  $Snap.unit))
; [eval] diz.Main_dr.Driver_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               520
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             460
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              85
;  :propagations            28
;  :quant-instantiations    15
;  :rlimit-count            134426)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
  diz@31@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               527
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             463
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              86
;  :propagations            28
;  :quant-instantiations    16
;  :rlimit-count            134712)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               527
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             463
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              87
;  :propagations            28
;  :quant-instantiations    16
;  :rlimit-count            134725)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))
  $Snap.unit))
; [eval] !diz.Main_dr.Driver_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               533
;  :arith-assert-diseq      10
;  :arith-assert-lower      29
;  :arith-assert-upper      21
;  :arith-conflicts         1
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             465
;  :mk-clause               24
;  :num-allocs              3878699
;  :num-checks              88
;  :propagations            28
;  :quant-instantiations    16
;  :rlimit-count            134964)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
(declare-const $k@35@04 $Perm)
(assert ($Perm.isReadVar $k@35@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 2
(assert (not (or (= $k@35@04 $Perm.No) (< $Perm.No $k@35@04))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               542
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      22
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             473
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              89
;  :propagations            29
;  :quant-instantiations    18
;  :rlimit-count            135433)
(assert (<= $Perm.No $k@35@04))
(assert (<= $k@35@04 $Perm.Write))
(assert (implies (< $Perm.No $k@35@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               548
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             476
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              90
;  :propagations            29
;  :quant-instantiations    18
;  :rlimit-count            135746)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               554
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             479
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              91
;  :propagations            29
;  :quant-instantiations    19
;  :rlimit-count            136090)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               554
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    53
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             479
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              92
;  :propagations            29
;  :quant-instantiations    19
;  :rlimit-count            136103)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
  $Snap.unit))
; [eval] diz.Main_mon.Monitor_m == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               560
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             481
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              93
;  :propagations            29
;  :quant-instantiations    19
;  :rlimit-count            136382)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
  diz@31@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             484
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              94
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            136727)
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               568
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             484
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              95
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            136740)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))
  $Snap.unit))
; [eval] !diz.Main_mon.Monitor_init
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               574
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    56
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             486
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              96
;  :propagations            29
;  :quant-instantiations    20
;  :rlimit-count            137039)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))))))
(push) ; 2
(assert (not (< $Perm.No $k@34@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               582
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             489
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              97
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            137405)
(push) ; 2
(assert (not (< $Perm.No $k@35@04)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               582
;  :arith-assert-diseq      11
;  :arith-assert-lower      31
;  :arith-assert-upper      23
;  :arith-conflicts         1
;  :arith-eq-adapter        14
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    57
;  :datatype-constructor-ax 109
;  :datatype-occurs-check   34
;  :datatype-splits         50
;  :decisions               104
;  :del-clause              21
;  :final-checks            18
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             489
;  :mk-clause               26
;  :num-allocs              3878699
;  :num-checks              98
;  :propagations            29
;  :quant-instantiations    21
;  :rlimit-count            137453)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@36@04 $Snap)
(assert (= $t@36@04 ($Snap.combine ($Snap.first $t@36@04) ($Snap.second $t@36@04))))
(declare-const $k@37@04 $Perm)
(assert ($Perm.isReadVar $k@37@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@37@04 $Perm.No) (< $Perm.No $k@37@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      24
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    58
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             500
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              100
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            138123)
(assert (<= $Perm.No $k@37@04))
(assert (<= $k@37@04 $Perm.Write))
(assert (implies (< $Perm.No $k@37@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second $t@36@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@04))
    ($Snap.second ($Snap.second $t@36@04)))))
(assert (= ($Snap.first ($Snap.second $t@36@04)) $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               609
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    59
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             503
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              101
;  :propagations            30
;  :quant-instantiations    21
;  :rlimit-count            138366)
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@36@04)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@36@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               615
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             506
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              102
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            138638)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               615
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    60
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             506
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              103
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            138651)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@36@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@04))))
  $Snap.unit))
; [eval] diz.Main_dr.Driver_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               621
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    61
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             508
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              104
;  :propagations            30
;  :quant-instantiations    22
;  :rlimit-count            138860)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@36@04))))
  diz@31@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               629
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             511
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              105
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            139135)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               629
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             511
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              106
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            139148)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))
  $Snap.unit))
; [eval] !diz.Main_dr.Driver_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               635
;  :arith-assert-diseq      12
;  :arith-assert-lower      33
;  :arith-assert-upper      25
;  :arith-conflicts         1
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             513
;  :mk-clause               28
;  :num-allocs              3878699
;  :num-checks              107
;  :propagations            30
;  :quant-instantiations    23
;  :rlimit-count            139377)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))
(declare-const $k@38@04 $Perm)
(assert ($Perm.isReadVar $k@38@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@38@04 $Perm.No) (< $Perm.No $k@38@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               643
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      26
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             520
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              108
;  :propagations            31
;  :quant-instantiations    24
;  :rlimit-count            139816)
(assert (<= $Perm.No $k@38@04))
(assert (<= $k@38@04 $Perm.Write))
(assert (implies (< $Perm.No $k@38@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               649
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             523
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              109
;  :propagations            31
;  :quant-instantiations    24
;  :rlimit-count            140119)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             526
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              110
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            140453)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               655
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             526
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              111
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            140466)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))
  $Snap.unit))
; [eval] diz.Main_mon.Monitor_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               661
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             528
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              112
;  :propagations            31
;  :quant-instantiations    25
;  :rlimit-count            140735)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))
  diz@31@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               669
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             531
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              113
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            141070)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               669
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             531
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              114
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            141083)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))
  $Snap.unit))
; [eval] !diz.Main_mon.Monitor_init
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               675
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             533
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              115
;  :propagations            31
;  :quant-instantiations    26
;  :rlimit-count            141372)
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@04))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@37@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               683
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               93
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             536
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              116
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            141728)
(push) ; 3
(assert (not (< $Perm.No $k@38@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               683
;  :arith-assert-diseq      13
;  :arith-assert-lower      35
;  :arith-assert-upper      27
;  :arith-conflicts         1
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         2
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 115
;  :datatype-occurs-check   36
;  :datatype-splits         56
;  :decisions               110
;  :del-clause              25
;  :final-checks            20
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             536
;  :mk-clause               30
;  :num-allocs              3878699
;  :num-checks              117
;  :propagations            31
;  :quant-instantiations    27
;  :rlimit-count            141776)
(pop) ; 2
(push) ; 2
; [exec]
; var min_advance__90: Int
(declare-const min_advance__90@39@04 Int)
; [exec]
; var __flatten_63__88: Seq[Int]
(declare-const __flatten_63__88@40@04 Seq<Int>)
; [exec]
; var __flatten_64__89: Seq[Int]
(declare-const __flatten_64__89@41@04 Seq<Int>)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@42@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@42@04 ($Snap.combine ($Snap.first $t@42@04) ($Snap.second $t@42@04))))
(assert (= ($Snap.first $t@42@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@42@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@42@04))
    ($Snap.second ($Snap.second $t@42@04)))))
(assert (= ($Snap.first ($Snap.second $t@42@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@42@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@42@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@42@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@42@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@43@04 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 4 | 0 <= i@43@04 | live]
; [else-branch: 4 | !(0 <= i@43@04) | live]
(push) ; 5
; [then-branch: 4 | 0 <= i@43@04]
(assert (<= 0 i@43@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= i@43@04)]
(assert (not (<= 0 i@43@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 5 | i@43@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@43@04 | live]
; [else-branch: 5 | !(i@43@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@43@04) | live]
(push) ; 5
; [then-branch: 5 | i@43@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@43@04]
(assert (and
  (<
    i@43@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
  (<= 0 i@43@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@43@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               750
;  :arith-assert-diseq      15
;  :arith-assert-lower      42
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              29
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             568
;  :mk-clause               36
;  :num-allocs              3878699
;  :num-checks              119
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            143498)
; [eval] -1
(push) ; 6
; [then-branch: 6 | First:(Second:(Second:(Second:($t@42@04))))[i@43@04] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@42@04))))[i@43@04] != -1 | live]
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@42@04))))[i@43@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@43@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 6 | First:(Second:(Second:(Second:($t@42@04))))[i@43@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
      i@43@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@43@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               750
;  :arith-assert-diseq      15
;  :arith-assert-lower      42
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              29
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             569
;  :mk-clause               36
;  :num-allocs              3878699
;  :num-checks              120
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            143673)
(push) ; 8
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@42@04))))[i@43@04] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@42@04))))[i@43@04]) | live]
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@42@04))))[i@43@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@43@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@43@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               750
;  :arith-assert-diseq      16
;  :arith-assert-lower      45
;  :arith-assert-upper      30
;  :arith-conflicts         1
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              29
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             572
;  :mk-clause               37
;  :num-allocs              3878699
;  :num-checks              121
;  :propagations            33
;  :quant-instantiations    33
;  :rlimit-count            143797)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@42@04))))[i@43@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
      i@43@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(i@43@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@43@04)]
(assert (not
  (and
    (<
      i@43@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
    (<= 0 i@43@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@43@04 Int)) (!
  (implies
    (and
      (<
        i@43@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
      (<= 0 i@43@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
          i@43@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@43@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@43@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@43@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))
(declare-const $k@44@04 $Perm)
(assert ($Perm.isReadVar $k@44@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@44@04 $Perm.No) (< $Perm.No $k@44@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               755
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      31
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             578
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              122
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            144566)
(assert (<= $Perm.No $k@44@04))
(assert (<= $k@44@04 $Perm.Write))
(assert (implies (< $Perm.No $k@44@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
  $Snap.unit))
; [eval] diz.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               761
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             581
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              123
;  :propagations            34
;  :quant-instantiations    33
;  :rlimit-count            144889)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               767
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             584
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              124
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            145245)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               772
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             585
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              125
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            145502)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               777
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             586
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              126
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            145769)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               782
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             587
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              127
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            146046)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               787
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             588
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              128
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            146333)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               792
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             589
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              129
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            146630)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               798
;  :arith-assert-diseq      17
;  :arith-assert-lower      47
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             591
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              130
;  :propagations            34
;  :quant-instantiations    34
;  :rlimit-count            146969)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               805
;  :arith-assert-diseq      17
;  :arith-assert-lower      48
;  :arith-assert-upper      32
;  :arith-conflicts         1
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    88
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             595
;  :mk-clause               39
;  :num-allocs              3878699
;  :num-checks              131
;  :propagations            34
;  :quant-instantiations    35
;  :rlimit-count            147417)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))
(declare-const $k@45@04 $Perm)
(assert ($Perm.isReadVar $k@45@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@45@04 $Perm.No) (< $Perm.No $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               810
;  :arith-assert-diseq      18
;  :arith-assert-lower      50
;  :arith-assert-upper      34
;  :arith-conflicts         1
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         3
;  :arith-pivots            2
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    89
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             601
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              132
;  :propagations            35
;  :quant-instantiations    35
;  :rlimit-count            147933)
(declare-const $t@46@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@34@04)
    (=
      $t@46@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04)))))
  (implies
    (< $Perm.No $k@45@04)
    (=
      $t@46@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@34@04 $k@45@04)))
(assert (<= (+ $k@34@04 $k@45@04) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@34@04 $k@45@04)) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               820
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      36
;  :arith-conflicts         2
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         4
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    90
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             609
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              133
;  :propagations            35
;  :quant-instantiations    36
;  :rlimit-count            148646)
(assert (not (= $t@46@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               826
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      37
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             612
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              134
;  :propagations            35
;  :quant-instantiations    36
;  :rlimit-count            149052)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               826
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      37
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             612
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              135
;  :propagations            35
;  :quant-instantiations    36
;  :rlimit-count            149065)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               826
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      37
;  :arith-conflicts         3
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         5
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    91
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             613
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              136
;  :propagations            35
;  :quant-instantiations    36
;  :rlimit-count            149155)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               834
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      38
;  :arith-conflicts         4
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         6
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    92
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             617
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              137
;  :propagations            35
;  :quant-instantiations    37
;  :rlimit-count            149615)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               839
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      39
;  :arith-conflicts         5
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         7
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    93
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             619
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              138
;  :propagations            35
;  :quant-instantiations    37
;  :rlimit-count            149996)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               844
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      40
;  :arith-conflicts         6
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         8
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    94
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             621
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              139
;  :propagations            35
;  :quant-instantiations    37
;  :rlimit-count            150387)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               849
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      41
;  :arith-conflicts         7
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         9
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    95
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             623
;  :mk-clause               41
;  :num-allocs              3878699
;  :num-checks              140
;  :propagations            35
;  :quant-instantiations    37
;  :rlimit-count            150788)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))
(declare-const $k@47@04 $Perm)
(assert ($Perm.isReadVar $k@47@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@47@04 $Perm.No) (< $Perm.No $k@47@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               854
;  :arith-assert-diseq      19
;  :arith-assert-lower      53
;  :arith-assert-upper      42
;  :arith-conflicts         7
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         9
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    96
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             628
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              141
;  :propagations            36
;  :quant-instantiations    37
;  :rlimit-count            151329)
(declare-const $t@48@04 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@35@04)
    (=
      $t@48@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
  (implies
    (< $Perm.No $k@47@04)
    (=
      $t@48@04
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@35@04 $k@47@04)))
(assert (<= (+ $k@35@04 $k@47@04) $Perm.Write))
(assert (implies (< $Perm.No (+ $k@35@04 $k@47@04)) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@04 $k@47@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               864
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      44
;  :arith-conflicts         8
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         10
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    97
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             636
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              142
;  :propagations            36
;  :quant-instantiations    38
;  :rlimit-count            152168)
(assert (not (= $t@48@04 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@04 $k@47@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               870
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      45
;  :arith-conflicts         9
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             639
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              143
;  :propagations            36
;  :quant-instantiations    38
;  :rlimit-count            152644)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               870
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      45
;  :arith-conflicts         9
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             639
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              144
;  :propagations            36
;  :quant-instantiations    38
;  :rlimit-count            152657)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               870
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      45
;  :arith-conflicts         9
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    98
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             640
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              145
;  :propagations            36
;  :quant-instantiations    38
;  :rlimit-count            152807)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               878
;  :arith-assert-diseq      19
;  :arith-assert-lower      54
;  :arith-assert-upper      45
;  :arith-conflicts         9
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             643
;  :mk-clause               43
;  :num-allocs              3878699
;  :num-checks              146
;  :propagations            36
;  :quant-instantiations    39
;  :rlimit-count            153323)
(declare-const $k@49@04 $Perm)
(assert ($Perm.isReadVar $k@49@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@49@04 $Perm.No) (< $Perm.No $k@49@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               878
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      46
;  :arith-conflicts         9
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             647
;  :mk-clause               45
;  :num-allocs              3878699
;  :num-checks              147
;  :propagations            37
;  :quant-instantiations    39
;  :rlimit-count            153521)
(assert (<= $Perm.No $k@49@04))
(assert (<= $k@49@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@49@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               879
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      47
;  :arith-conflicts         9
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             649
;  :mk-clause               45
;  :num-allocs              3878699
;  :num-checks              148
;  :propagations            37
;  :quant-instantiations    39
;  :rlimit-count            153957)
(push) ; 3
(assert (not (< $Perm.No $k@49@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               879
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      47
;  :arith-conflicts         9
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    99
;  :datatype-constructor-ax 121
;  :datatype-occurs-check   37
;  :datatype-splits         56
;  :decisions               116
;  :del-clause              30
;  :final-checks            21
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             649
;  :mk-clause               45
;  :num-allocs              3878699
;  :num-checks              149
;  :propagations            37
;  :quant-instantiations    39
;  :rlimit-count            154005)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))))))))
  diz@31@04))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@42@04 diz@31@04 globals@32@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@50@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Driver_forkOperator_EncodedGlobalVariables(diz.Main_dr, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      48
;  :arith-conflicts         10
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             685
;  :mk-clause               46
;  :num-allocs              4026327
;  :num-checks              152
;  :propagations            38
;  :quant-instantiations    40
;  :rlimit-count            155829)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      48
;  :arith-conflicts         10
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             685
;  :mk-clause               46
;  :num-allocs              4026327
;  :num-checks              153
;  :propagations            38
;  :quant-instantiations    40
;  :rlimit-count            155842)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      48
;  :arith-conflicts         10
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             686
;  :mk-clause               46
;  :num-allocs              4026327
;  :num-checks              154
;  :propagations            38
;  :quant-instantiations    40
;  :rlimit-count            155932)
; [eval] diz.Driver_m != null
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      48
;  :arith-conflicts         10
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             687
;  :mk-clause               46
;  :num-allocs              4026327
;  :num-checks              155
;  :propagations            38
;  :quant-instantiations    40
;  :rlimit-count            156022)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      20
;  :arith-assert-lower      56
;  :arith-assert-upper      48
;  :arith-conflicts         10
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             687
;  :mk-clause               46
;  :num-allocs              4026327
;  :num-checks              156
;  :propagations            38
;  :quant-instantiations    40
;  :rlimit-count            156040)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))
    $Ref.null)))
(declare-const $k@51@04 $Perm)
(assert ($Perm.isReadVar $k@51@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      49
;  :arith-conflicts         10
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             692
;  :mk-clause               48
;  :num-allocs              4026327
;  :num-checks              157
;  :propagations            39
;  :quant-instantiations    40
;  :rlimit-count            156305)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@51@04 $Perm.No) (< $Perm.No $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      49
;  :arith-conflicts         10
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             692
;  :mk-clause               48
;  :num-allocs              4026327
;  :num-checks              158
;  :propagations            39
;  :quant-instantiations    40
;  :rlimit-count            156355)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@31@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1018
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      49
;  :arith-conflicts         10
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              44
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             692
;  :mk-clause               48
;  :num-allocs              4026327
;  :num-checks              159
;  :propagations            39
;  :quant-instantiations    40
;  :rlimit-count            156366)
(push) ; 3
(assert (not (not (= (+ $k@34@04 $k@45@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-assert-diseq      21
;  :arith-assert-lower      58
;  :arith-assert-upper      50
;  :arith-conflicts         11
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             694
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              160
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156428)
(assert (< $k@51@04 (+ $k@34@04 $k@45@04)))
(assert (<= $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04)))
(assert (<= (- (+ $k@34@04 $k@45@04) $k@51@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))
  (not (= diz@31@04 $Ref.null))))
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         11
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             698
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              161
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156687)
(push) ; 3
(assert (not (=
  diz@31@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      51
;  :arith-conflicts         11
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         12
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             698
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              162
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156698)
(push) ; 3
(assert (not (< $Perm.No (+ $k@34@04 $k@45@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             699
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              163
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156761)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             699
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              164
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156774)
(set-option :timeout 10)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1019
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    101
;  :datatype-constructor-ax 164
;  :datatype-occurs-check   53
;  :datatype-splits         86
;  :decisions               157
;  :del-clause              46
;  :final-checks            27
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             700
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              165
;  :propagations            40
;  :quant-instantiations    40
;  :rlimit-count            156864)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1085
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   61
;  :datatype-splits         101
;  :decisions               177
;  :del-clause              46
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             714
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              166
;  :propagations            41
;  :quant-instantiations    40
;  :rlimit-count            157548
;  :time                    0.00)
; [eval] !diz.Driver_init
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1085
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   61
;  :datatype-splits         101
;  :decisions               177
;  :del-clause              46
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             715
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              167
;  :propagations            41
;  :quant-instantiations    40
;  :rlimit-count            157638)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1085
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      52
;  :arith-conflicts         12
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         13
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    102
;  :datatype-constructor-ax 185
;  :datatype-occurs-check   61
;  :datatype-splits         101
;  :decisions               177
;  :del-clause              46
;  :final-checks            30
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             716
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              168
;  :propagations            41
;  :quant-instantiations    40
;  :rlimit-count            157728)
(declare-const $t@52@04 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Monitor_forkOperator_EncodedGlobalVariables(diz.Main_mon, globals)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@04 $k@47@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             731
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              170
;  :propagations            42
;  :quant-instantiations    40
;  :rlimit-count            158458)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             731
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              171
;  :propagations            42
;  :quant-instantiations    40
;  :rlimit-count            158471)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             732
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              172
;  :propagations            42
;  :quant-instantiations    40
;  :rlimit-count            158621)
; [eval] diz.Monitor_m != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             733
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              173
;  :propagations            42
;  :quant-instantiations    40
;  :rlimit-count            158771)
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      21
;  :arith-assert-lower      60
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             733
;  :mk-clause               50
;  :num-allocs              4026327
;  :num-checks              174
;  :propagations            42
;  :quant-instantiations    40
;  :rlimit-count            158789)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))))
    $Ref.null)))
(declare-const $k@53@04 $Perm)
(assert ($Perm.isReadVar $k@53@04 $Perm.Write))
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      62
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             738
;  :mk-clause               52
;  :num-allocs              4026327
;  :num-checks              175
;  :propagations            43
;  :quant-instantiations    40
;  :rlimit-count            159114)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@53@04 $Perm.No) (< $Perm.No $k@53@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      62
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             738
;  :mk-clause               52
;  :num-allocs              4026327
;  :num-checks              176
;  :propagations            43
;  :quant-instantiations    40
;  :rlimit-count            159164)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  diz@31@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1151
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      62
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              48
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             738
;  :mk-clause               52
;  :num-allocs              4026327
;  :num-checks              177
;  :propagations            43
;  :quant-instantiations    40
;  :rlimit-count            159175)
(push) ; 3
(assert (not (not (= (+ $k@35@04 $k@47@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          1
;  :arith-assert-diseq      22
;  :arith-assert-lower      62
;  :arith-assert-upper      55
;  :arith-conflicts         14
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             740
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              178
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159237)
(assert (< $k@53@04 (+ $k@35@04 $k@47@04)))
(assert (<= $Perm.No (- (+ $k@35@04 $k@47@04) $k@53@04)))
(assert (<= (- (+ $k@35@04 $k@47@04) $k@53@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@35@04 $k@47@04) $k@53@04))
  (not (= diz@31@04 $Ref.null))))
; [eval] diz.Monitor_m.Main_mon == diz
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      56
;  :arith-conflicts         14
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             744
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              179
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159556)
(push) ; 3
(assert (not (=
  diz@31@04
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      56
;  :arith-conflicts         14
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         14
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             744
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              180
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159567)
(push) ; 3
(assert (not (< $Perm.No (+ $k@35@04 $k@47@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             745
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              181
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159630)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             745
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              182
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159643)
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1152
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    103
;  :datatype-constructor-ax 206
;  :datatype-occurs-check   69
;  :datatype-splits         116
;  :decisions               197
;  :del-clause              50
;  :final-checks            33
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             746
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              183
;  :propagations            44
;  :quant-instantiations    40
;  :rlimit-count            159793)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 227
;  :datatype-occurs-check   77
;  :datatype-splits         131
;  :decisions               217
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             760
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              184
;  :propagations            45
;  :quant-instantiations    40
;  :rlimit-count            160483)
; [eval] !diz.Monitor_init
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 227
;  :datatype-occurs-check   77
;  :datatype-splits         131
;  :decisions               217
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             761
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              185
;  :propagations            45
;  :quant-instantiations    40
;  :rlimit-count            160633)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1218
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      64
;  :arith-assert-upper      57
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         15
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    104
;  :datatype-constructor-ax 227
;  :datatype-occurs-check   77
;  :datatype-splits         131
;  :decisions               217
;  :del-clause              50
;  :final-checks            36
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             762
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              186
;  :propagations            45
;  :quant-instantiations    40
;  :rlimit-count            160783)
(declare-const $t@54@04 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@55@04 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 8 | 0 <= i@55@04 | live]
; [else-branch: 8 | !(0 <= i@55@04) | live]
(push) ; 5
; [then-branch: 8 | 0 <= i@55@04]
(assert (<= 0 i@55@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(0 <= i@55@04)]
(assert (not (<= 0 i@55@04)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 9 | i@55@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@55@04 | live]
; [else-branch: 9 | !(i@55@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@55@04) | live]
(push) ; 5
; [then-branch: 9 | i@55@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@55@04]
(assert (and
  (<
    i@55@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
  (<= 0 i@55@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@55@04 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1285
;  :arith-add-rows          2
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      58
;  :arith-conflicts         15
;  :arith-eq-adapter        29
;  :arith-fixed-eqs         16
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              52
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             778
;  :mk-clause               54
;  :num-allocs              4026327
;  :num-checks              188
;  :propagations            46
;  :quant-instantiations    40
;  :rlimit-count            161597)
; [eval] -1
(push) ; 6
; [then-branch: 10 | First:(Second:(Second:(Second:($t@42@04))))[i@55@04] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@42@04))))[i@55@04] != -1 | live]
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@42@04))))[i@55@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@55@04)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 10 | First:(Second:(Second:(Second:($t@42@04))))[i@55@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
      i@55@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@55@04 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1287
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      68
;  :arith-assert-upper      59
;  :arith-conflicts         15
;  :arith-eq-adapter        30
;  :arith-fixed-eqs         16
;  :arith-pivots            5
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              52
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             785
;  :mk-clause               66
;  :num-allocs              4026327
;  :num-checks              189
;  :propagations            51
;  :quant-instantiations    41
;  :rlimit-count            161833)
(push) ; 8
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@42@04))))[i@55@04] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@42@04))))[i@55@04]) | live]
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@42@04))))[i@55@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@55@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@55@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      24
;  :arith-assert-lower      70
;  :arith-assert-upper      60
;  :arith-conflicts         15
;  :arith-eq-adapter        31
;  :arith-fixed-eqs         17
;  :arith-pivots            6
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              52
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             789
;  :mk-clause               66
;  :num-allocs              4026327
;  :num-checks              190
;  :propagations            51
;  :quant-instantiations    41
;  :rlimit-count            161968)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@42@04))))[i@55@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
      i@55@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(i@55@04 < |First:(Second:(Second:(Second:($t@42@04))))| && 0 <= i@55@04)]
(assert (not
  (and
    (<
      i@55@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
    (<= 0 i@55@04))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 3
(assert (not (forall ((i@55@04 Int)) (!
  (implies
    (and
      (<
        i@55@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
      (<= 0 i@55@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
          i@55@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@55@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@55@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@55@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      26
;  :arith-assert-lower      71
;  :arith-assert-upper      61
;  :arith-conflicts         15
;  :arith-eq-adapter        32
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             797
;  :mk-clause               80
;  :num-allocs              4026327
;  :num-checks              191
;  :propagations            53
;  :quant-instantiations    42
;  :rlimit-count            162417)
(assert (forall ((i@55@04 Int)) (!
  (implies
    (and
      (<
        i@55@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))
      (<= 0 i@55@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
          i@55@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@55@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
            i@55@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))
    i@55@04))
  :qid |prog.l<no position>|)))
(declare-const $k@56@04 $Perm)
(assert ($Perm.isReadVar $k@56@04 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@56@04 $Perm.No) (< $Perm.No $k@56@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      73
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             802
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              192
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            162977)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@44@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      73
;  :arith-assert-upper      62
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            7
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             802
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              193
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            162988)
(assert (< $k@56@04 $k@44@04))
(assert (<= $Perm.No (- $k@44@04 $k@56@04)))
(assert (<= (- $k@44@04 $k@56@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@44@04 $k@56@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_alu != null
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              194
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163208)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              195
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163256)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              196
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163304)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              197
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163352)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              198
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163400)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              199
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163448)
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              200
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163496)
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              201
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163544)
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      27
;  :arith-assert-lower      75
;  :arith-assert-upper      63
;  :arith-conflicts         15
;  :arith-eq-adapter        33
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             805
;  :mk-clause               82
;  :num-allocs              4026327
;  :num-checks              202
;  :propagations            54
;  :quant-instantiations    42
;  :rlimit-count            163592)
(declare-const $k@57@04 $Perm)
(assert ($Perm.isReadVar $k@57@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@57@04 $Perm.No) (< $Perm.No $k@57@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      28
;  :arith-assert-lower      77
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        34
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             809
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              203
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            163791)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@34@04 $k@45@04) $k@51@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          2
;  :arith-assert-diseq      28
;  :arith-assert-lower      77
;  :arith-assert-upper      64
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             810
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              204
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            163865)
(assert (< $k@57@04 (- (+ $k@34@04 $k@45@04) $k@51@04)))
(assert (<= $Perm.No (- (- (+ $k@34@04 $k@45@04) $k@51@04) $k@57@04)))
(assert (<= (- (- (+ $k@34@04 $k@45@04) $k@51@04) $k@57@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@34@04 $k@45@04) $k@51@04) $k@57@04))
  (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_dr != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             813
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              205
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164077)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             813
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              206
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164090)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             813
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              207
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164111)
(push) ; 3
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@33@04))) $t@46@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             814
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              208
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164201)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             814
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              209
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164222)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             814
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              210
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164243)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             814
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              211
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164264)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@34@04 $k@45@04) $k@51@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      28
;  :arith-assert-lower      79
;  :arith-assert-upper      65
;  :arith-conflicts         15
;  :arith-eq-adapter        35
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             814
;  :mk-clause               84
;  :num-allocs              4026327
;  :num-checks              212
;  :propagations            55
;  :quant-instantiations    42
;  :rlimit-count            164285)
(declare-const $k@58@04 $Perm)
(assert ($Perm.isReadVar $k@58@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@58@04 $Perm.No) (< $Perm.No $k@58@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        36
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             818
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              213
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164484)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= (- (+ $k@35@04 $k@47@04) $k@53@04) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          3
;  :arith-assert-diseq      29
;  :arith-assert-lower      81
;  :arith-assert-upper      66
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             819
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              214
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164558)
(assert (< $k@58@04 (- (+ $k@35@04 $k@47@04) $k@53@04)))
(assert (<= $Perm.No (- (- (+ $k@35@04 $k@47@04) $k@53@04) $k@58@04)))
(assert (<= (- (- (+ $k@35@04 $k@47@04) $k@53@04) $k@58@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- (- (+ $k@35@04 $k@47@04) $k@53@04) $k@58@04))
  (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_mon != null
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@04 $k@47@04) $k@53@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      83
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             822
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              215
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164770)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      83
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             822
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              216
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164783)
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (- (+ $k@35@04 $k@47@04) $k@53@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      83
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             822
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              217
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164804)
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04)))))))))
  $t@48@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      29
;  :arith-assert-lower      83
;  :arith-assert-upper      67
;  :arith-conflicts         15
;  :arith-eq-adapter        37
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             823
;  :mk-clause               86
;  :num-allocs              4026327
;  :num-checks              218
;  :propagations            56
;  :quant-instantiations    42
;  :rlimit-count            164954)
(declare-const $k@59@04 $Perm)
(assert ($Perm.isReadVar $k@59@04 $Perm.Write))
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      85
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             827
;  :mk-clause               88
;  :num-allocs              4026327
;  :num-checks              219
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            165151)
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@59@04 $Perm.No) (< $Perm.No $k@59@04))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      85
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             827
;  :mk-clause               88
;  :num-allocs              4026327
;  :num-checks              220
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            165201)
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= $k@49@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      85
;  :arith-assert-upper      68
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             827
;  :mk-clause               88
;  :num-allocs              4026327
;  :num-checks              221
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            165212)
(assert (< $k@59@04 $k@49@04))
(assert (<= $Perm.No (- $k@49@04 $k@59@04)))
(assert (<= (- $k@49@04 $k@59@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@49@04 $k@59@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))
      $Ref.null))))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 3
(assert (not (< $Perm.No $k@44@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             830
;  :mk-clause               88
;  :num-allocs              4026327
;  :num-checks              222
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            165420)
(push) ; 3
(assert (not (< $Perm.No $k@49@04)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1289
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    105
;  :datatype-constructor-ax 248
;  :datatype-occurs-check   85
;  :datatype-splits         146
;  :decisions               237
;  :del-clause              78
;  :final-checks            39
;  :max-generation          2
;  :max-memory              4.16
;  :memory                  4.16
;  :mk-bool-var             830
;  :mk-clause               88
;  :num-allocs              4026327
;  :num-checks              223
;  :propagations            57
;  :quant-instantiations    42
;  :rlimit-count            165468)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@04))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($SortWrappers.$RefTo$Snap $t@46@04)
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($SortWrappers.$RefTo$Snap $t@48@04)
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@33@04))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@04)))))))))))))))))))))))))))))
                                                          $Snap.unit))))))))))))))))))))))))))))) diz@31@04 globals@32@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const min_advance__90@60@04 Int)
(declare-const __flatten_64__89@61@04 Seq<Int>)
(declare-const __flatten_63__88@62@04 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1579
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      87
;  :arith-assert-upper      69
;  :arith-conflicts         15
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         18
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    137
;  :datatype-constructor-ax 311
;  :datatype-occurs-check   103
;  :datatype-splits         191
;  :decisions               297
;  :del-clause              78
;  :final-checks            48
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             873
;  :mk-clause               88
;  :num-allocs              4184859
;  :num-checks              226
;  :propagations            60
;  :quant-instantiations    42
;  :rlimit-count            168874)
; [then-branch: 12 | True | live]
; [else-branch: 12 | False | dead]
(push) ; 5
; [then-branch: 12 | True]
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@63@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
(assert (= $t@63@04 ($Snap.combine ($Snap.first $t@63@04) ($Snap.second $t@63@04))))
(assert (= ($Snap.first $t@63@04) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@63@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@63@04))
    ($Snap.second ($Snap.second $t@63@04)))))
(assert (= ($Snap.first ($Snap.second $t@63@04)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@63@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@63@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@63@04))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@63@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@64@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 13 | 0 <= i@64@04 | live]
; [else-branch: 13 | !(0 <= i@64@04) | live]
(push) ; 8
; [then-branch: 13 | 0 <= i@64@04]
(assert (<= 0 i@64@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 13 | !(0 <= i@64@04)]
(assert (not (<= 0 i@64@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 14 | i@64@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@64@04 | live]
; [else-branch: 14 | !(i@64@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@64@04) | live]
(push) ; 8
; [then-branch: 14 | i@64@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@64@04]
(assert (and
  (<
    i@64@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
  (<= 0 i@64@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@64@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      72
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              78
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             913
;  :mk-clause               88
;  :num-allocs              4184859
;  :num-checks              228
;  :propagations            61
;  :quant-instantiations    46
;  :rlimit-count            170887)
; [eval] -1
(push) ; 9
; [then-branch: 15 | First:(Second:(Second:(Second:($t@63@04))))[i@64@04] == -1 | live]
; [else-branch: 15 | First:(Second:(Second:(Second:($t@63@04))))[i@64@04] != -1 | live]
(push) ; 10
; [then-branch: 15 | First:(Second:(Second:(Second:($t@63@04))))[i@64@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@64@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 15 | First:(Second:(Second:(Second:($t@63@04))))[i@64@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      i@64@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@64@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          4
;  :arith-assert-diseq      30
;  :arith-assert-lower      92
;  :arith-assert-upper      72
;  :arith-conflicts         15
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              78
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             914
;  :mk-clause               88
;  :num-allocs              4184859
;  :num-checks              229
;  :propagations            61
;  :quant-instantiations    46
;  :rlimit-count            171062)
(push) ; 11
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[i@64@04] | live]
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[i@64@04]) | live]
(push) ; 12
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[i@64@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@64@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@64@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1696
;  :arith-add-rows          4
;  :arith-assert-diseq      31
;  :arith-assert-lower      95
;  :arith-assert-upper      72
;  :arith-conflicts         15
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              78
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             917
;  :mk-clause               89
;  :num-allocs              4184859
;  :num-checks              230
;  :propagations            61
;  :quant-instantiations    46
;  :rlimit-count            171185)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[i@64@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      i@64@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 14 | !(i@64@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@64@04)]
(assert (not
  (and
    (<
      i@64@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
    (<= 0 i@64@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@64@04 Int)) (!
  (implies
    (and
      (<
        i@64@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (<= 0 i@64@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          i@64@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@64@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@64@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@64@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
(declare-const $k@65@04 $Perm)
(assert ($Perm.isReadVar $k@65@04 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@65@04 $Perm.No) (< $Perm.No $k@65@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1701
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      73
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             923
;  :mk-clause               91
;  :num-allocs              4184859
;  :num-checks              231
;  :propagations            62
;  :quant-instantiations    46
;  :rlimit-count            171954)
(assert (<= $Perm.No $k@65@04))
(assert (<= $k@65@04 $Perm.Write))
(assert (implies (< $Perm.No $k@65@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
  $Snap.unit))
; [eval] diz.Main_alu != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1707
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             926
;  :mk-clause               91
;  :num-allocs              4184859
;  :num-checks              232
;  :propagations            62
;  :quant-instantiations    46
;  :rlimit-count            172277)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1713
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             929
;  :mk-clause               91
;  :num-allocs              4184859
;  :num-checks              233
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            172633)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1718
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             930
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              234
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            172890)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1723
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             931
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              235
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            173157)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1728
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             932
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              236
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            173434)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1733
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             933
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              237
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            173721)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1738
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             934
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              238
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            174018)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1744
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      97
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             936
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              239
;  :propagations            62
;  :quant-instantiations    47
;  :rlimit-count            174357)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1751
;  :arith-add-rows          4
;  :arith-assert-diseq      32
;  :arith-assert-lower      98
;  :arith-assert-upper      74
;  :arith-conflicts         15
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             940
;  :mk-clause               91
;  :num-allocs              4348379
;  :num-checks              240
;  :propagations            62
;  :quant-instantiations    48
;  :rlimit-count            174805)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
(declare-const $k@66@04 $Perm)
(assert ($Perm.isReadVar $k@66@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@66@04 $Perm.No) (< $Perm.No $k@66@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1756
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      76
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             946
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              241
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            175321)
(assert (<= $Perm.No $k@66@04))
(assert (<= $k@66@04 $Perm.Write))
(assert (implies (< $Perm.No $k@66@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1762
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             949
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              242
;  :propagations            63
;  :quant-instantiations    48
;  :rlimit-count            175744)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1768
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             952
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              243
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            176200)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1768
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             952
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              244
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            176213)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1773
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             953
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              245
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            176570)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1778
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             954
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              246
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            176937)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1783
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             955
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              247
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            177314)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1788
;  :arith-add-rows          4
;  :arith-assert-diseq      33
;  :arith-assert-lower      100
;  :arith-assert-upper      77
;  :arith-conflicts         15
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    163
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             956
;  :mk-clause               93
;  :num-allocs              4348379
;  :num-checks              248
;  :propagations            63
;  :quant-instantiations    49
;  :rlimit-count            177701)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
(declare-const $k@67@04 $Perm)
(assert ($Perm.isReadVar $k@67@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@67@04 $Perm.No) (< $Perm.No $k@67@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1793
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      102
;  :arith-assert-upper      78
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    164
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             961
;  :mk-clause               95
;  :num-allocs              4348379
;  :num-checks              249
;  :propagations            64
;  :quant-instantiations    49
;  :rlimit-count            178242)
(assert (<= $Perm.No $k@67@04))
(assert (<= $k@67@04 $Perm.Write))
(assert (implies (< $Perm.No $k@67@04) (not (= diz@31@04 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1799
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      102
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             964
;  :mk-clause               95
;  :num-allocs              4348379
;  :num-checks              250
;  :propagations            64
;  :quant-instantiations    49
;  :rlimit-count            178735)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1805
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      102
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             967
;  :mk-clause               95
;  :num-allocs              4348379
;  :num-checks              251
;  :propagations            64
;  :quant-instantiations    50
;  :rlimit-count            179269)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1805
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      102
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    166
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             967
;  :mk-clause               95
;  :num-allocs              4348379
;  :num-checks              252
;  :propagations            64
;  :quant-instantiations    50
;  :rlimit-count            179282)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1810
;  :arith-add-rows          4
;  :arith-assert-diseq      34
;  :arith-assert-lower      102
;  :arith-assert-upper      79
;  :arith-conflicts         15
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             968
;  :mk-clause               95
;  :num-allocs              4348379
;  :num-checks              253
;  :propagations            64
;  :quant-instantiations    50
;  :rlimit-count            179709)
(declare-const $k@68@04 $Perm)
(assert ($Perm.isReadVar $k@68@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 6
(assert (not (or (= $k@68@04 $Perm.No) (< $Perm.No $k@68@04))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1810
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      80
;  :arith-conflicts         15
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             972
;  :mk-clause               97
;  :num-allocs              4348379
;  :num-checks              254
;  :propagations            65
;  :quant-instantiations    50
;  :rlimit-count            179908)
(assert (<= $Perm.No $k@68@04))
(assert (<= $k@68@04 $Perm.Write))
(assert (implies
  (< $Perm.No $k@68@04)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_m == diz
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1811
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             974
;  :mk-clause               97
;  :num-allocs              4348379
;  :num-checks              255
;  :propagations            65
;  :quant-instantiations    50
;  :rlimit-count            180344)
(push) ; 6
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1811
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      104
;  :arith-assert-upper      81
;  :arith-conflicts         15
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         19
;  :arith-pivots            9
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    167
;  :datatype-constructor-ax 332
;  :datatype-occurs-check   109
;  :datatype-splits         206
;  :decisions               317
;  :del-clause              79
;  :final-checks            51
;  :max-generation          2
;  :max-memory              4.35
;  :memory                  4.35
;  :mk-bool-var             974
;  :mk-clause               97
;  :num-allocs              4348379
;  :num-checks              256
;  :propagations            65
;  :quant-instantiations    50
;  :rlimit-count            180392)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))))
  diz@31@04))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@63@04 diz@31@04 globals@32@04))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
(declare-const $t@69@04 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; Main_immediate_wakeup_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@70@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 17 | 0 <= i@70@04 | live]
; [else-branch: 17 | !(0 <= i@70@04) | live]
(push) ; 8
; [then-branch: 17 | 0 <= i@70@04]
(assert (<= 0 i@70@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 17 | !(0 <= i@70@04)]
(assert (not (<= 0 i@70@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 18 | i@70@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@70@04 | live]
; [else-branch: 18 | !(i@70@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@70@04) | live]
(push) ; 8
; [then-branch: 18 | i@70@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@70@04]
(assert (and
  (<
    i@70@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
  (<= 0 i@70@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@70@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2152
;  :arith-add-rows          4
;  :arith-assert-diseq      35
;  :arith-assert-lower      107
;  :arith-assert-upper      84
;  :arith-conflicts         15
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              89
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1053
;  :mk-clause               100
;  :num-allocs              4516502
;  :num-checks              259
;  :propagations            68
;  :quant-instantiations    51
;  :rlimit-count            183256)
; [eval] -1
(push) ; 9
; [then-branch: 19 | First:(Second:(Second:(Second:($t@63@04))))[i@70@04] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@63@04))))[i@70@04] != -1 | live]
(push) ; 10
; [then-branch: 19 | First:(Second:(Second:(Second:($t@63@04))))[i@70@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@70@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 19 | First:(Second:(Second:(Second:($t@63@04))))[i@70@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      i@70@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@70@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2154
;  :arith-add-rows          4
;  :arith-assert-diseq      37
;  :arith-assert-lower      110
;  :arith-assert-upper      85
;  :arith-conflicts         15
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         22
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              89
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1060
;  :mk-clause               110
;  :num-allocs              4516502
;  :num-checks              260
;  :propagations            73
;  :quant-instantiations    52
;  :rlimit-count            183487)
(push) ; 11
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[i@70@04] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[i@70@04]) | live]
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[i@70@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@70@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@70@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-add-rows          4
;  :arith-assert-diseq      37
;  :arith-assert-lower      112
;  :arith-assert-upper      86
;  :arith-conflicts         15
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         23
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              89
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1064
;  :mk-clause               110
;  :num-allocs              4516502
;  :num-checks              261
;  :propagations            73
;  :quant-instantiations    52
;  :rlimit-count            183618)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[i@70@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      i@70@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 18 | !(i@70@04 < |First:(Second:(Second:(Second:($t@63@04))))| && 0 <= i@70@04)]
(assert (not
  (and
    (<
      i@70@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
    (<= 0 i@70@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@70@04 Int)) (!
  (implies
    (and
      (<
        i@70@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (<= 0 i@70@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          i@70@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@70@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@70@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@70@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2156
;  :arith-add-rows          4
;  :arith-assert-diseq      39
;  :arith-assert-lower      113
;  :arith-assert-upper      87
;  :arith-conflicts         15
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         24
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    171
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              113
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1072
;  :mk-clause               124
;  :num-allocs              4516502
;  :num-checks              262
;  :propagations            75
;  :quant-instantiations    53
;  :rlimit-count            184064)
(assert (forall ((i@70@04 Int)) (!
  (implies
    (and
      (<
        i@70@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (<= 0 i@70@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          i@70@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@70@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            i@70@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    i@70@04))
  :qid |prog.l<no position>|)))
(declare-const $t@71@04 $Snap)
(assert (= $t@71@04 ($Snap.combine ($Snap.first $t@71@04) ($Snap.second $t@71@04))))
(assert (=
  ($Snap.second $t@71@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@71@04))
    ($Snap.second ($Snap.second $t@71@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@71@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@71@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@71@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@71@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@72@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 21 | 0 <= i@72@04 | live]
; [else-branch: 21 | !(0 <= i@72@04) | live]
(push) ; 8
; [then-branch: 21 | 0 <= i@72@04]
(assert (<= 0 i@72@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(0 <= i@72@04)]
(assert (not (<= 0 i@72@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 22 | i@72@04 < |First:(Second:($t@71@04))| && 0 <= i@72@04 | live]
; [else-branch: 22 | !(i@72@04 < |First:(Second:($t@71@04))| && 0 <= i@72@04) | live]
(push) ; 8
; [then-branch: 22 | i@72@04 < |First:(Second:($t@71@04))| && 0 <= i@72@04]
(assert (and
  (<
    i@72@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
  (<= 0 i@72@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@72@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2194
;  :arith-add-rows          4
;  :arith-assert-diseq      39
;  :arith-assert-lower      118
;  :arith-assert-upper      90
;  :arith-conflicts         15
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         25
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              113
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1094
;  :mk-clause               124
;  :num-allocs              4516502
;  :num-checks              263
;  :propagations            75
;  :quant-instantiations    57
;  :rlimit-count            185496)
; [eval] -1
(push) ; 9
; [then-branch: 23 | First:(Second:($t@71@04))[i@72@04] == -1 | live]
; [else-branch: 23 | First:(Second:($t@71@04))[i@72@04] != -1 | live]
(push) ; 10
; [then-branch: 23 | First:(Second:($t@71@04))[i@72@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@72@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 23 | First:(Second:($t@71@04))[i@72@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      i@72@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@72@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2194
;  :arith-add-rows          4
;  :arith-assert-diseq      39
;  :arith-assert-lower      118
;  :arith-assert-upper      90
;  :arith-conflicts         15
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         25
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              113
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1095
;  :mk-clause               124
;  :num-allocs              4516502
;  :num-checks              264
;  :propagations            75
;  :quant-instantiations    57
;  :rlimit-count            185647)
(push) ; 11
; [then-branch: 24 | 0 <= First:(Second:($t@71@04))[i@72@04] | live]
; [else-branch: 24 | !(0 <= First:(Second:($t@71@04))[i@72@04]) | live]
(push) ; 12
; [then-branch: 24 | 0 <= First:(Second:($t@71@04))[i@72@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@72@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@72@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2194
;  :arith-add-rows          4
;  :arith-assert-diseq      40
;  :arith-assert-lower      121
;  :arith-assert-upper      90
;  :arith-conflicts         15
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         25
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    177
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              113
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1098
;  :mk-clause               125
;  :num-allocs              4516502
;  :num-checks              265
;  :propagations            75
;  :quant-instantiations    57
;  :rlimit-count            185750)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 24 | !(0 <= First:(Second:($t@71@04))[i@72@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      i@72@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 22 | !(i@72@04 < |First:(Second:($t@71@04))| && 0 <= i@72@04)]
(assert (not
  (and
    (<
      i@72@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
    (<= 0 i@72@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@72@04 Int)) (!
  (implies
    (and
      (<
        i@72@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
      (<= 0 i@72@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
          i@72@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@72@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@72@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@72@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2212
;  :arith-add-rows          4
;  :arith-assert-diseq      40
;  :arith-assert-lower      122
;  :arith-assert-upper      91
;  :arith-conflicts         15
;  :arith-eq-adapter        54
;  :arith-fixed-eqs         26
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              114
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1118
;  :mk-clause               135
;  :num-allocs              4516502
;  :num-checks              266
;  :propagations            79
;  :quant-instantiations    59
;  :rlimit-count            186823)
(push) ; 6
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[0] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[0]) | live]
(push) ; 7
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2212
;  :arith-add-rows          4
;  :arith-assert-diseq      40
;  :arith-assert-lower      123
;  :arith-assert-upper      91
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         26
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              114
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1124
;  :mk-clause               142
;  :num-allocs              4516502
;  :num-checks              267
;  :propagations            79
;  :quant-instantiations    61
;  :rlimit-count            187001)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2212
;  :arith-add-rows          4
;  :arith-assert-diseq      40
;  :arith-assert-lower      123
;  :arith-assert-upper      91
;  :arith-conflicts         15
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         26
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              114
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1124
;  :mk-clause               142
;  :num-allocs              4516502
;  :num-checks              268
;  :propagations            79
;  :quant-instantiations    61
;  :rlimit-count            187010)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2213
;  :arith-add-rows          4
;  :arith-assert-diseq      40
;  :arith-assert-lower      124
;  :arith-assert-upper      92
;  :arith-conflicts         16
;  :arith-eq-adapter        55
;  :arith-fixed-eqs         26
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    179
;  :datatype-constructor-ax 425
;  :datatype-occurs-check   125
;  :datatype-splits         274
;  :decisions               406
;  :del-clause              114
;  :final-checks            57
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1124
;  :mk-clause               142
;  :num-allocs              4516502
;  :num-checks              269
;  :propagations            83
;  :quant-instantiations    61
;  :rlimit-count            187128)
(pop) ; 7
(push) ; 7
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2383
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      136
;  :arith-assert-upper      98
;  :arith-conflicts         16
;  :arith-eq-adapter        61
;  :arith-fixed-eqs         29
;  :arith-pivots            19
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    181
;  :datatype-constructor-ax 468
;  :datatype-occurs-check   136
;  :datatype-splits         311
;  :decisions               447
;  :del-clause              144
;  :final-checks            60
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1189
;  :mk-clause               165
;  :num-allocs              4689596
;  :num-checks              270
;  :propagations            94
;  :quant-instantiations    66
;  :rlimit-count            188730
;  :time                    0.00)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2543
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      138
;  :arith-assert-upper      101
;  :arith-conflicts         16
;  :arith-eq-adapter        63
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              151
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1235
;  :mk-clause               172
;  :num-allocs              4689596
;  :num-checks              271
;  :propagations            99
;  :quant-instantiations    68
;  :rlimit-count            190145
;  :time                    0.00)
; [then-branch: 26 | First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0] | live]
; [else-branch: 26 | !(First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]) | live]
(push) ; 7
; [then-branch: 26 | First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2544
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      101
;  :arith-conflicts         16
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              151
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1242
;  :mk-clause               179
;  :num-allocs              4689596
;  :num-checks              272
;  :propagations            99
;  :quant-instantiations    70
;  :rlimit-count            190361)
; [eval] -1
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@04))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0)
; [eval] 0 <= old(diz.Main_process_state[0]) && old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      139
;  :arith-assert-upper      101
;  :arith-conflicts         16
;  :arith-eq-adapter        64
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              158
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1246
;  :mk-clause               180
;  :num-allocs              4689596
;  :num-checks              273
;  :propagations            99
;  :quant-instantiations    70
;  :rlimit-count            190769)
(push) ; 6
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[0] | live]
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[0]) | live]
(push) ; 7
; [then-branch: 27 | 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      140
;  :arith-assert-upper      101
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              158
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1251
;  :mk-clause               187
;  :num-allocs              4689596
;  :num-checks              274
;  :propagations            99
;  :quant-instantiations    72
;  :rlimit-count            190898)
(push) ; 8
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2545
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      140
;  :arith-assert-upper      101
;  :arith-conflicts         16
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              158
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1251
;  :mk-clause               187
;  :num-allocs              4689596
;  :num-checks              275
;  :propagations            99
;  :quant-instantiations    72
;  :rlimit-count            190907)
(push) ; 8
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
    0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2546
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      141
;  :arith-assert-upper      102
;  :arith-conflicts         17
;  :arith-eq-adapter        65
;  :arith-fixed-eqs         30
;  :arith-pivots            21
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    183
;  :datatype-constructor-ax 510
;  :datatype-occurs-check   147
;  :datatype-splits         347
;  :decisions               489
;  :del-clause              158
;  :final-checks            64
;  :interface-eqs           1
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1251
;  :mk-clause               187
;  :num-allocs              4689596
;  :num-checks              276
;  :propagations            103
;  :quant-instantiations    72
;  :rlimit-count            191024)
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(0 <= First:(Second:(Second:(Second:($t@63@04))))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2708
;  :arith-add-rows          4
;  :arith-assert-diseq      43
;  :arith-assert-lower      143
;  :arith-assert-upper      106
;  :arith-conflicts         17
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         30
;  :arith-offset-eqs        1
;  :arith-pivots            23
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    185
;  :datatype-constructor-ax 552
;  :datatype-occurs-check   158
;  :datatype-splits         383
;  :decisions               531
;  :del-clause              171
;  :final-checks            68
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1297
;  :mk-clause               193
;  :num-allocs              4689596
;  :num-checks              277
;  :propagations            107
;  :quant-instantiations    74
;  :rlimit-count            192463
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2961
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      152
;  :arith-assert-upper      112
;  :arith-conflicts         17
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 616
;  :datatype-occurs-check   172
;  :datatype-splits         423
;  :decisions               592
;  :del-clause              195
;  :final-checks            73
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1374
;  :mk-clause               217
;  :num-allocs              4689596
;  :num-checks              278
;  :propagations            117
;  :quant-instantiations    78
;  :rlimit-count            194311
;  :time                    0.00)
; [then-branch: 28 | !(First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]) | live]
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0] | live]
(push) ; 7
; [then-branch: 28 | !(First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0])]
(assert (not
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))
      0)
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2961
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      152
;  :arith-assert-upper      112
;  :arith-conflicts         17
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 616
;  :datatype-occurs-check   172
;  :datatype-splits         423
;  :decisions               592
;  :del-clause              195
;  :final-checks            73
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1374
;  :mk-clause               218
;  :num-allocs              4689596
;  :num-checks              279
;  :propagations            117
;  :quant-instantiations    78
;  :rlimit-count            194510)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2961
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      152
;  :arith-assert-upper      112
;  :arith-conflicts         17
;  :arith-eq-adapter        75
;  :arith-fixed-eqs         32
;  :arith-offset-eqs        2
;  :arith-pivots            29
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    189
;  :datatype-constructor-ax 616
;  :datatype-occurs-check   172
;  :datatype-splits         423
;  :decisions               592
;  :del-clause              195
;  :final-checks            73
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1374
;  :mk-clause               218
;  :num-allocs              4689596
;  :num-checks              280
;  :propagations            117
;  :quant-instantiations    78
;  :rlimit-count            194525)
(pop) ; 7
(push) ; 7
; [else-branch: 28 | First:(Second:(Second:(Second:(Second:(Second:($t@63@04))))))[First:(Second:(Second:(Second:($t@63@04))))[0]] == 0 && 0 <= First:(Second:(Second:(Second:($t@63@04))))[0]]
(assert (and
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
        0))
    0)
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
            0))
        0)
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))
      0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_events_no_delta_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@73@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 29 | 0 <= i@73@04 | live]
; [else-branch: 29 | !(0 <= i@73@04) | live]
(push) ; 8
; [then-branch: 29 | 0 <= i@73@04]
(assert (<= 0 i@73@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 29 | !(0 <= i@73@04)]
(assert (not (<= 0 i@73@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 30 | i@73@04 < |First:(Second:($t@71@04))| && 0 <= i@73@04 | live]
; [else-branch: 30 | !(i@73@04 < |First:(Second:($t@71@04))| && 0 <= i@73@04) | live]
(push) ; 8
; [then-branch: 30 | i@73@04 < |First:(Second:($t@71@04))| && 0 <= i@73@04]
(assert (and
  (<
    i@73@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
  (<= 0 i@73@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= i@73@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3127
;  :arith-add-rows          4
;  :arith-assert-diseq      45
;  :arith-assert-lower      156
;  :arith-assert-upper      117
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        78
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              215
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1432
;  :mk-clause               235
;  :num-allocs              4689596
;  :num-checks              282
;  :propagations            123
;  :quant-instantiations    81
;  :rlimit-count            196214)
; [eval] -1
(push) ; 9
; [then-branch: 31 | First:(Second:($t@71@04))[i@73@04] == -1 | live]
; [else-branch: 31 | First:(Second:($t@71@04))[i@73@04] != -1 | live]
(push) ; 10
; [then-branch: 31 | First:(Second:($t@71@04))[i@73@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@73@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 31 | First:(Second:($t@71@04))[i@73@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      i@73@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@73@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3129
;  :arith-add-rows          4
;  :arith-assert-diseq      47
;  :arith-assert-lower      159
;  :arith-assert-upper      118
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        79
;  :arith-fixed-eqs         35
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              215
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1436
;  :mk-clause               243
;  :num-allocs              4689596
;  :num-checks              283
;  :propagations            127
;  :quant-instantiations    82
;  :rlimit-count            196382)
(push) ; 11
; [then-branch: 32 | 0 <= First:(Second:($t@71@04))[i@73@04] | live]
; [else-branch: 32 | !(0 <= First:(Second:($t@71@04))[i@73@04]) | live]
(push) ; 12
; [then-branch: 32 | 0 <= First:(Second:($t@71@04))[i@73@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@73@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@73@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3131
;  :arith-add-rows          4
;  :arith-assert-diseq      47
;  :arith-assert-lower      161
;  :arith-assert-upper      119
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         36
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              215
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1440
;  :mk-clause               243
;  :num-allocs              4689596
;  :num-checks              284
;  :propagations            127
;  :quant-instantiations    82
;  :rlimit-count            196493)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 32 | !(0 <= First:(Second:($t@71@04))[i@73@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
      i@73@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 30 | !(i@73@04 < |First:(Second:($t@71@04))| && 0 <= i@73@04)]
(assert (not
  (and
    (<
      i@73@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
    (<= 0 i@73@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@73@04 Int)) (!
  (implies
    (and
      (<
        i@73@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
      (<= 0 i@73@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
          i@73@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@73@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@73@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@73@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3131
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      162
;  :arith-assert-upper      120
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        81
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    191
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              235
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1448
;  :mk-clause               255
;  :num-allocs              4689596
;  :num-checks              285
;  :propagations            129
;  :quant-instantiations    83
;  :rlimit-count            196915)
(assert (forall ((i@73@04 Int)) (!
  (implies
    (and
      (<
        i@73@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
      (<= 0 i@73@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
          i@73@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@73@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
            i@73@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))
    i@73@04))
  :qid |prog.l<no position>|)))
(declare-const $t@74@04 $Snap)
(assert (= $t@74@04 ($Snap.combine ($Snap.first $t@74@04) ($Snap.second $t@74@04))))
(assert (=
  ($Snap.second $t@74@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@74@04))
    ($Snap.second ($Snap.second $t@74@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@74@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@74@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@74@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@74@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@75@04 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 33 | 0 <= i@75@04 | live]
; [else-branch: 33 | !(0 <= i@75@04) | live]
(push) ; 8
; [then-branch: 33 | 0 <= i@75@04]
(assert (<= 0 i@75@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 8
(push) ; 8
; [else-branch: 33 | !(0 <= i@75@04)]
(assert (not (<= 0 i@75@04)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 34 | i@75@04 < |First:(Second:($t@74@04))| && 0 <= i@75@04 | live]
; [else-branch: 34 | !(i@75@04 < |First:(Second:($t@74@04))| && 0 <= i@75@04) | live]
(push) ; 8
; [then-branch: 34 | i@75@04 < |First:(Second:($t@74@04))| && 0 <= i@75@04]
(assert (and
  (<
    i@75@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
  (<= 0 i@75@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 9
(assert (not (>= i@75@04 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3169
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      167
;  :arith-assert-upper      123
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              235
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1470
;  :mk-clause               255
;  :num-allocs              4689596
;  :num-checks              286
;  :propagations            129
;  :quant-instantiations    87
;  :rlimit-count            198306)
; [eval] -1
(push) ; 9
; [then-branch: 35 | First:(Second:($t@74@04))[i@75@04] == -1 | live]
; [else-branch: 35 | First:(Second:($t@74@04))[i@75@04] != -1 | live]
(push) ; 10
; [then-branch: 35 | First:(Second:($t@74@04))[i@75@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@75@04)
  (- 0 1)))
(pop) ; 10
(push) ; 10
; [else-branch: 35 | First:(Second:($t@74@04))[i@75@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@75@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@75@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3169
;  :arith-add-rows          4
;  :arith-assert-diseq      48
;  :arith-assert-lower      167
;  :arith-assert-upper      123
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              235
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1471
;  :mk-clause               255
;  :num-allocs              4689596
;  :num-checks              287
;  :propagations            129
;  :quant-instantiations    87
;  :rlimit-count            198457)
(push) ; 11
; [then-branch: 36 | 0 <= First:(Second:($t@74@04))[i@75@04] | live]
; [else-branch: 36 | !(0 <= First:(Second:($t@74@04))[i@75@04]) | live]
(push) ; 12
; [then-branch: 36 | 0 <= First:(Second:($t@74@04))[i@75@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@75@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@75@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3169
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      170
;  :arith-assert-upper      123
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         38
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    197
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              235
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1474
;  :mk-clause               256
;  :num-allocs              4689596
;  :num-checks              288
;  :propagations            129
;  :quant-instantiations    87
;  :rlimit-count            198560)
; [eval] |diz.Main_event_state|
(pop) ; 12
(push) ; 12
; [else-branch: 36 | !(0 <= First:(Second:($t@74@04))[i@75@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@75@04))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 34 | !(i@75@04 < |First:(Second:($t@74@04))| && 0 <= i@75@04)]
(assert (not
  (and
    (<
      i@75@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
    (<= 0 i@75@04))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@75@04 Int)) (!
  (implies
    (and
      (<
        i@75@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@75@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@75@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@75@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@75@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@75@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@71@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3187
;  :arith-add-rows          4
;  :arith-assert-diseq      49
;  :arith-assert-lower      171
;  :arith-assert-upper      124
;  :arith-bound-prop        2
;  :arith-conflicts         17
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            33
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    199
;  :datatype-constructor-ax 658
;  :datatype-occurs-check   183
;  :datatype-splits         459
;  :decisions               633
;  :del-clause              236
;  :final-checks            76
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              4.56
;  :memory                  4.56
;  :mk-bool-var             1494
;  :mk-clause               266
;  :num-allocs              4689596
;  :num-checks              289
;  :propagations            133
;  :quant-instantiations    89
;  :rlimit-count            199575)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3490
;  :arith-add-rows          6
;  :arith-assert-diseq      49
;  :arith-assert-lower      176
;  :arith-assert-upper      131
;  :arith-bound-prop        4
;  :arith-conflicts         17
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        4
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    202
;  :datatype-constructor-ax 736
;  :datatype-occurs-check   196
;  :datatype-splits         500
;  :decisions               710
;  :del-clause              257
;  :final-checks            80
;  :interface-eqs           4
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1563
;  :mk-clause               287
;  :num-allocs              4870909
;  :num-checks              290
;  :propagations            145
;  :quant-instantiations    94
;  :rlimit-count            201639
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3791
;  :arith-add-rows          8
;  :arith-assert-diseq      49
;  :arith-assert-lower      181
;  :arith-assert-upper      137
;  :arith-bound-prop        6
;  :arith-conflicts         17
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        4
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 814
;  :datatype-occurs-check   209
;  :datatype-splits         541
;  :decisions               786
;  :del-clause              276
;  :final-checks            83
;  :interface-eqs           4
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1630
;  :mk-clause               306
;  :num-allocs              4870909
;  :num-checks              291
;  :propagations            156
;  :quant-instantiations    99
;  :rlimit-count            203669
;  :time                    0.00)
; [then-branch: 37 | First:(Second:(Second:(Second:($t@71@04))))[0] == 0 | live]
; [else-branch: 37 | First:(Second:(Second:(Second:($t@71@04))))[0] != 0 | live]
(push) ; 7
; [then-branch: 37 | First:(Second:(Second:(Second:($t@71@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    0)
  0))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3792
;  :arith-add-rows          8
;  :arith-assert-diseq      49
;  :arith-assert-lower      181
;  :arith-assert-upper      137
;  :arith-bound-prop        6
;  :arith-conflicts         17
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        4
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    205
;  :datatype-constructor-ax 814
;  :datatype-occurs-check   209
;  :datatype-splits         541
;  :decisions               786
;  :del-clause              276
;  :final-checks            83
;  :interface-eqs           4
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1631
;  :mk-clause               306
;  :num-allocs              4870909
;  :num-checks              292
;  :propagations            156
;  :quant-instantiations    99
;  :rlimit-count            203797)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 37 | First:(Second:(Second:(Second:($t@71@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3798
;  :arith-add-rows          8
;  :arith-assert-diseq      49
;  :arith-assert-lower      181
;  :arith-assert-upper      137
;  :arith-bound-prop        6
;  :arith-conflicts         17
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         45
;  :arith-offset-eqs        4
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    206
;  :datatype-constructor-ax 814
;  :datatype-occurs-check   209
;  :datatype-splits         541
;  :decisions               786
;  :del-clause              276
;  :final-checks            83
;  :interface-eqs           4
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1635
;  :mk-clause               307
;  :num-allocs              4870909
;  :num-checks              293
;  :propagations            156
;  :quant-instantiations    99
;  :rlimit-count            204232)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4099
;  :arith-add-rows          10
;  :arith-assert-diseq      49
;  :arith-assert-lower      186
;  :arith-assert-upper      144
;  :arith-bound-prop        8
;  :arith-conflicts         17
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         47
;  :arith-offset-eqs        6
;  :arith-pivots            52
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 892
;  :datatype-occurs-check   223
;  :datatype-splits         582
;  :decisions               864
;  :del-clause              297
;  :final-checks            87
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1704
;  :mk-clause               328
;  :num-allocs              4870909
;  :num-checks              294
;  :propagations            168
;  :quant-instantiations    104
;  :rlimit-count            206278
;  :time                    0.00)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4398
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-bound-prop        10
;  :arith-conflicts         17
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        6
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 970
;  :datatype-occurs-check   237
;  :datatype-splits         623
;  :decisions               941
;  :del-clause              316
;  :final-checks            90
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1771
;  :mk-clause               347
;  :num-allocs              4870909
;  :num-checks              295
;  :propagations            179
;  :quant-instantiations    109
;  :rlimit-count            208324
;  :time                    0.00)
; [then-branch: 38 | First:(Second:(Second:(Second:($t@71@04))))[1] == 0 | live]
; [else-branch: 38 | First:(Second:(Second:(Second:($t@71@04))))[1] != 0 | live]
(push) ; 7
; [then-branch: 38 | First:(Second:(Second:(Second:($t@71@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    1)
  0))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4399
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-bound-prop        10
;  :arith-conflicts         17
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        6
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    212
;  :datatype-constructor-ax 970
;  :datatype-occurs-check   237
;  :datatype-splits         623
;  :decisions               941
;  :del-clause              316
;  :final-checks            90
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1772
;  :mk-clause               347
;  :num-allocs              4870909
;  :num-checks              296
;  :propagations            179
;  :quant-instantiations    109
;  :rlimit-count            208452)
; [eval] -2
(pop) ; 7
(push) ; 7
; [else-branch: 38 | First:(Second:(Second:(Second:($t@71@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1)
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0)
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4405
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-bound-prop        10
;  :arith-conflicts         17
;  :arith-eq-adapter        107
;  :arith-fixed-eqs         51
;  :arith-offset-eqs        6
;  :arith-pivots            58
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 970
;  :datatype-occurs-check   237
;  :datatype-splits         623
;  :decisions               941
;  :del-clause              316
;  :final-checks            90
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1776
;  :mk-clause               348
;  :num-allocs              4870909
;  :num-checks              297
;  :propagations            179
;  :quant-instantiations    109
;  :rlimit-count            208893)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    0)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4706
;  :arith-add-rows          14
;  :arith-assert-diseq      49
;  :arith-assert-lower      196
;  :arith-assert-upper      156
;  :arith-bound-prop        12
;  :arith-conflicts         17
;  :arith-eq-adapter        112
;  :arith-fixed-eqs         55
;  :arith-offset-eqs        6
;  :arith-pivots            64
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    216
;  :datatype-constructor-ax 1048
;  :datatype-occurs-check   251
;  :datatype-splits         664
;  :decisions               1018
;  :del-clause              335
;  :final-checks            93
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1842
;  :mk-clause               367
;  :num-allocs              4870909
;  :num-checks              298
;  :propagations            190
;  :quant-instantiations    114
;  :rlimit-count            210932
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5019
;  :arith-add-rows          16
;  :arith-assert-diseq      49
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        14
;  :arith-conflicts         17
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        6
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 1129
;  :datatype-occurs-check   269
;  :datatype-splits         707
;  :decisions               1097
;  :del-clause              355
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1920
;  :mk-clause               387
;  :num-allocs              4870909
;  :num-checks              299
;  :propagations            202
;  :quant-instantiations    119
;  :rlimit-count            213024
;  :time                    0.00)
; [then-branch: 39 | First:(Second:(Second:(Second:($t@71@04))))[0] != 0 | live]
; [else-branch: 39 | First:(Second:(Second:(Second:($t@71@04))))[0] == 0 | live]
(push) ; 7
; [then-branch: 39 | First:(Second:(Second:(Second:($t@71@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0)
    0)))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5019
;  :arith-add-rows          16
;  :arith-assert-diseq      49
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        14
;  :arith-conflicts         17
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        6
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 1129
;  :datatype-occurs-check   269
;  :datatype-splits         707
;  :decisions               1097
;  :del-clause              355
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1920
;  :mk-clause               387
;  :num-allocs              4870909
;  :num-checks              300
;  :propagations            202
;  :quant-instantiations    119
;  :rlimit-count            213154)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5019
;  :arith-add-rows          16
;  :arith-assert-diseq      49
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        14
;  :arith-conflicts         17
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        6
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 1129
;  :datatype-occurs-check   269
;  :datatype-splits         707
;  :decisions               1097
;  :del-clause              355
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1920
;  :mk-clause               387
;  :num-allocs              4870909
;  :num-checks              301
;  :propagations            202
;  :quant-instantiations    119
;  :rlimit-count            213169)
(pop) ; 7
(push) ; 7
; [else-branch: 39 | First:(Second:(Second:(Second:($t@71@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    0)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
        0)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0)
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 6
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5024
;  :arith-add-rows          16
;  :arith-assert-diseq      49
;  :arith-assert-lower      201
;  :arith-assert-upper      162
;  :arith-bound-prop        14
;  :arith-conflicts         17
;  :arith-eq-adapter        117
;  :arith-fixed-eqs         59
;  :arith-offset-eqs        6
;  :arith-pivots            70
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    220
;  :datatype-constructor-ax 1129
;  :datatype-occurs-check   269
;  :datatype-splits         707
;  :decisions               1097
;  :del-clause              355
;  :final-checks            97
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1922
;  :mk-clause               388
;  :num-allocs              4870909
;  :num-checks              302
;  :propagations            202
;  :quant-instantiations    119
;  :rlimit-count            213489)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    1)
  0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5321
;  :arith-add-rows          18
;  :arith-assert-diseq      49
;  :arith-assert-lower      206
;  :arith-assert-upper      168
;  :arith-bound-prop        16
;  :arith-conflicts         17
;  :arith-eq-adapter        122
;  :arith-fixed-eqs         63
;  :arith-offset-eqs        6
;  :arith-pivots            76
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 1206
;  :datatype-occurs-check   285
;  :datatype-splits         747
;  :decisions               1173
;  :del-clause              374
;  :final-checks            100
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             1987
;  :mk-clause               407
;  :num-allocs              4870909
;  :num-checks              303
;  :propagations            214
;  :quant-instantiations    124
;  :rlimit-count            215523
;  :time                    0.00)
(push) ; 7
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1)
    0))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          20
;  :arith-assert-diseq      49
;  :arith-assert-lower      211
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         17
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        6
;  :arith-pivots            82
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1286
;  :datatype-occurs-check   306
;  :datatype-splits         789
;  :decisions               1251
;  :del-clause              394
;  :final-checks            104
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             2064
;  :mk-clause               427
;  :num-allocs              4870909
;  :num-checks              304
;  :propagations            227
;  :quant-instantiations    129
;  :rlimit-count            217607
;  :time                    0.00)
; [then-branch: 40 | First:(Second:(Second:(Second:($t@71@04))))[1] != 0 | live]
; [else-branch: 40 | First:(Second:(Second:(Second:($t@71@04))))[1] == 0 | live]
(push) ; 7
; [then-branch: 40 | First:(Second:(Second:(Second:($t@71@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1)
    0)))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          20
;  :arith-assert-diseq      49
;  :arith-assert-lower      211
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         17
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        6
;  :arith-pivots            82
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1286
;  :datatype-occurs-check   306
;  :datatype-splits         789
;  :decisions               1251
;  :del-clause              394
;  :final-checks            104
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             2064
;  :mk-clause               427
;  :num-allocs              4870909
;  :num-checks              305
;  :propagations            227
;  :quant-instantiations    129
;  :rlimit-count            217737)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          20
;  :arith-assert-diseq      49
;  :arith-assert-lower      211
;  :arith-assert-upper      174
;  :arith-bound-prop        18
;  :arith-conflicts         17
;  :arith-eq-adapter        127
;  :arith-fixed-eqs         67
;  :arith-offset-eqs        6
;  :arith-pivots            82
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 1286
;  :datatype-occurs-check   306
;  :datatype-splits         789
;  :decisions               1251
;  :del-clause              394
;  :final-checks            104
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             2064
;  :mk-clause               427
;  :num-allocs              4870909
;  :num-checks              306
;  :propagations            227
;  :quant-instantiations    129
;  :rlimit-count            217752)
(pop) ; 7
(push) ; 7
; [else-branch: 40 | First:(Second:(Second:(Second:($t@71@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
    1)
  0))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
        1)
      0))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@04)))))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5929
;  :arith-add-rows          22
;  :arith-assert-diseq      49
;  :arith-assert-lower      216
;  :arith-assert-upper      180
;  :arith-bound-prop        20
;  :arith-conflicts         17
;  :arith-eq-adapter        133
;  :arith-fixed-eqs         71
;  :arith-offset-eqs        6
;  :arith-pivots            88
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 1363
;  :datatype-occurs-check   322
;  :datatype-splits         829
;  :decisions               1328
;  :del-clause              420
;  :final-checks            107
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             2132
;  :mk-clause               448
;  :num-allocs              4870909
;  :num-checks              308
;  :propagations            240
;  :quant-instantiations    134
;  :rlimit-count            219906)
; [eval] -1
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6120
;  :arith-add-rows          26
;  :arith-assert-diseq      53
;  :arith-assert-lower      233
;  :arith-assert-upper      189
;  :arith-bound-prop        20
;  :arith-conflicts         17
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         75
;  :arith-offset-eqs        6
;  :arith-pivots            95
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 1409
;  :datatype-occurs-check   338
;  :datatype-splits         869
;  :decisions               1375
;  :del-clause              453
;  :final-checks            111
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :mk-bool-var             2202
;  :mk-clause               481
;  :num-allocs              4870909
;  :num-checks              309
;  :propagations            265
;  :quant-instantiations    141
;  :rlimit-count            221665
;  :time                    0.00)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6562
;  :arith-add-rows          27
;  :arith-assert-diseq      59
;  :arith-assert-lower      253
;  :arith-assert-upper      200
;  :arith-bound-prop        24
;  :arith-conflicts         17
;  :arith-eq-adapter        156
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        6
;  :arith-pivots            105
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    244
;  :datatype-constructor-ax 1518
;  :datatype-occurs-check   369
;  :datatype-splits         951
;  :decisions               1478
;  :del-clause              511
;  :final-checks            119
;  :interface-eqs           8
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          1
;  :mk-bool-var             2355
;  :mk-clause               539
;  :num-allocs              4870909
;  :num-checks              310
;  :propagations            295
;  :quant-instantiations    147
;  :rlimit-count            224311
;  :time                    0.00)
; [then-branch: 41 | First:(Second:($t@74@04))[0] != -1 | live]
; [else-branch: 41 | First:(Second:($t@74@04))[0] == -1 | live]
(push) ; 6
; [then-branch: 41 | First:(Second:($t@74@04))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)
    (- 0 1))))
; [exec]
; min_advance__90 := Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
; [eval] Main_find_minimum_advance_Sequence$Integer$(diz, diz.Main_event_state)
(push) ; 7
; [eval] diz != null
; [eval] |vals| == 2
; [eval] |vals|
(pop) ; 7
; Joined path conditions
(declare-const min_advance__90@76@04 Int)
(assert (=
  min_advance__90@76@04
  (Main_find_minimum_advance_Sequence$Integer$ ($Snap.combine
    $Snap.unit
    $Snap.unit) diz@31@04 ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04))))))))
; [eval] min_advance__90 == -1
; [eval] -1
(push) ; 7
(assert (not (not (= min_advance__90@76@04 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6775
;  :arith-add-rows          30
;  :arith-assert-diseq      77
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-bound-prop        26
;  :arith-conflicts         18
;  :arith-eq-adapter        173
;  :arith-fixed-eqs         88
;  :arith-offset-eqs        6
;  :arith-pivots            112
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    248
;  :datatype-constructor-ax 1564
;  :datatype-occurs-check   385
;  :datatype-splits         991
;  :decisions               1529
;  :del-clause              547
;  :final-checks            123
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2465
;  :mk-clause               625
;  :num-allocs              4870909
;  :num-checks              311
;  :propagations            336
;  :quant-instantiations    157
;  :rlimit-count            226587
;  :time                    0.00)
(push) ; 7
(assert (not (= min_advance__90@76@04 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6975
;  :arith-add-rows          33
;  :arith-assert-diseq      96
;  :arith-assert-lower      301
;  :arith-assert-upper      230
;  :arith-bound-prop        33
;  :arith-conflicts         18
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        6
;  :arith-pivots            122
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1610
;  :datatype-occurs-check   401
;  :datatype-splits         1031
;  :decisions               1580
;  :del-clause              601
;  :final-checks            127
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2550
;  :mk-clause               679
;  :num-allocs              4870909
;  :num-checks              312
;  :propagations            374
;  :quant-instantiations    161
;  :rlimit-count            228411
;  :time                    0.00)
; [then-branch: 42 | min_advance__90@76@04 == -1 | live]
; [else-branch: 42 | min_advance__90@76@04 != -1 | live]
(push) ; 7
; [then-branch: 42 | min_advance__90@76@04 == -1]
(assert (= min_advance__90@76@04 (- 0 1)))
; [exec]
; min_advance__90 := 0
; [exec]
; __flatten_64__89 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6977
;  :arith-add-rows          33
;  :arith-assert-diseq      96
;  :arith-assert-lower      302
;  :arith-assert-upper      231
;  :arith-bound-prop        33
;  :arith-conflicts         18
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         92
;  :arith-offset-eqs        6
;  :arith-pivots            122
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    251
;  :datatype-constructor-ax 1610
;  :datatype-occurs-check   401
;  :datatype-splits         1031
;  :decisions               1580
;  :del-clause              601
;  :final-checks            127
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2554
;  :mk-clause               679
;  :num-allocs              4870909
;  :num-checks              313
;  :propagations            374
;  :quant-instantiations    161
;  :rlimit-count            228486)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7173
;  :arith-add-rows          33
;  :arith-assert-diseq      110
;  :arith-assert-lower      313
;  :arith-assert-upper      247
;  :arith-bound-prop        37
;  :arith-conflicts         18
;  :arith-eq-adapter        197
;  :arith-fixed-eqs         95
;  :arith-offset-eqs        7
;  :arith-pivots            127
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    254
;  :datatype-constructor-ax 1656
;  :datatype-occurs-check   417
;  :datatype-splits         1071
;  :decisions               1628
;  :del-clause              631
;  :final-checks            131
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2627
;  :mk-clause               709
;  :num-allocs              4870909
;  :num-checks              314
;  :propagations            407
;  :quant-instantiations    165
;  :rlimit-count            230207
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7368
;  :arith-add-rows          33
;  :arith-assert-diseq      122
;  :arith-assert-lower      328
;  :arith-assert-upper      258
;  :arith-bound-prop        41
;  :arith-conflicts         18
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1702
;  :datatype-occurs-check   433
;  :datatype-splits         1111
;  :decisions               1677
;  :del-clause              665
;  :final-checks            135
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2701
;  :mk-clause               743
;  :num-allocs              4870909
;  :num-checks              315
;  :propagations            434
;  :quant-instantiations    169
;  :rlimit-count            231903
;  :time                    0.00)
; [then-branch: 43 | First:(Second:(Second:(Second:($t@74@04))))[0] < -1 | live]
; [else-branch: 43 | !(First:(Second:(Second:(Second:($t@74@04))))[0] < -1) | live]
(push) ; 9
; [then-branch: 43 | First:(Second:(Second:(Second:($t@74@04))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 43 | !(First:(Second:(Second:(Second:($t@74@04))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__90
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7368
;  :arith-add-rows          33
;  :arith-assert-diseq      122
;  :arith-assert-lower      330
;  :arith-assert-upper      258
;  :arith-bound-prop        41
;  :arith-conflicts         18
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1702
;  :datatype-occurs-check   433
;  :datatype-splits         1111
;  :decisions               1677
;  :del-clause              665
;  :final-checks            135
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2701
;  :mk-clause               743
;  :num-allocs              4870909
;  :num-checks              316
;  :propagations            436
;  :quant-instantiations    169
;  :rlimit-count            232066)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7368
;  :arith-add-rows          33
;  :arith-assert-diseq      122
;  :arith-assert-lower      330
;  :arith-assert-upper      258
;  :arith-bound-prop        41
;  :arith-conflicts         18
;  :arith-eq-adapter        207
;  :arith-fixed-eqs         98
;  :arith-offset-eqs        8
;  :arith-pivots            132
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    257
;  :datatype-constructor-ax 1702
;  :datatype-occurs-check   433
;  :datatype-splits         1111
;  :decisions               1677
;  :del-clause              665
;  :final-checks            135
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2701
;  :mk-clause               743
;  :num-allocs              4870909
;  :num-checks              317
;  :propagations            436
;  :quant-instantiations    169
;  :rlimit-count            232081)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7563
;  :arith-add-rows          33
;  :arith-assert-diseq      136
;  :arith-assert-lower      342
;  :arith-assert-upper      274
;  :arith-bound-prop        45
;  :arith-conflicts         18
;  :arith-eq-adapter        217
;  :arith-fixed-eqs         102
;  :arith-offset-eqs        8
;  :arith-pivots            136
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    260
;  :datatype-constructor-ax 1748
;  :datatype-occurs-check   449
;  :datatype-splits         1151
;  :decisions               1725
;  :del-clause              695
;  :final-checks            139
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          2
;  :mk-bool-var             2775
;  :mk-clause               773
;  :num-allocs              4870909
;  :num-checks              318
;  :propagations            469
;  :quant-instantiations    173
;  :rlimit-count            233800
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7761
;  :arith-add-rows          33
;  :arith-assert-diseq      152
;  :arith-assert-lower      363
;  :arith-assert-upper      287
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            142
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2852
;  :mk-clause               808
;  :num-allocs              4870909
;  :num-checks              319
;  :propagations            503
;  :quant-instantiations    177
;  :rlimit-count            235571
;  :time                    0.00)
; [then-branch: 44 | First:(Second:(Second:(Second:($t@74@04))))[1] < -1 | live]
; [else-branch: 44 | !(First:(Second:(Second:(Second:($t@74@04))))[1] < -1) | live]
(push) ; 9
; [then-branch: 44 | First:(Second:(Second:(Second:($t@74@04))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 44 | !(First:(Second:(Second:(Second:($t@74@04))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__90
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7761
;  :arith-add-rows          33
;  :arith-assert-diseq      152
;  :arith-assert-lower      365
;  :arith-assert-upper      287
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        229
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        9
;  :arith-pivots            142
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2852
;  :mk-clause               808
;  :num-allocs              4870909
;  :num-checks              320
;  :propagations            505
;  :quant-instantiations    177
;  :rlimit-count            235734)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            0)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          0)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            1)
          (- 0 1))
        (- 0 3)
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          1)))))
  2))
(declare-const __flatten_64__89@77@04 Seq<Int>)
(assert (Seq_equal
  __flatten_64__89@77@04
  (Seq_append
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          0)
        (- 0 1))
      (- 0 3)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
        0)))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          1)
        (- 0 1))
      (- 0 3)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
        1))))))
; [exec]
; __flatten_63__88 := __flatten_64__89
; [exec]
; diz.Main_event_state := __flatten_63__88
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_64__89@77@04) 2)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7768
;  :arith-add-rows          34
;  :arith-assert-diseq      152
;  :arith-assert-lower      368
;  :arith-assert-upper      289
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        233
;  :arith-fixed-eqs         106
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2883
;  :mk-clause               828
;  :num-allocs              4870909
;  :num-checks              321
;  :propagations            510
;  :quant-instantiations    181
;  :rlimit-count            236409)
(assert (= (Seq_length __flatten_64__89@77@04) 2))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@78@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 45 | 0 <= i@78@04 | live]
; [else-branch: 45 | !(0 <= i@78@04) | live]
(push) ; 10
; [then-branch: 45 | 0 <= i@78@04]
(assert (<= 0 i@78@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 45 | !(0 <= i@78@04)]
(assert (not (<= 0 i@78@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 46 | i@78@04 < |First:(Second:($t@74@04))| && 0 <= i@78@04 | live]
; [else-branch: 46 | !(i@78@04 < |First:(Second:($t@74@04))| && 0 <= i@78@04) | live]
(push) ; 10
; [then-branch: 46 | i@78@04 < |First:(Second:($t@74@04))| && 0 <= i@78@04]
(assert (and
  (<
    i@78@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
  (<= 0 i@78@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7770
;  :arith-add-rows          34
;  :arith-assert-diseq      152
;  :arith-assert-lower      370
;  :arith-assert-upper      291
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2888
;  :mk-clause               828
;  :num-allocs              4870909
;  :num-checks              322
;  :propagations            510
;  :quant-instantiations    181
;  :rlimit-count            236600)
; [eval] -1
(push) ; 11
; [then-branch: 47 | First:(Second:($t@74@04))[i@78@04] == -1 | live]
; [else-branch: 47 | First:(Second:($t@74@04))[i@78@04] != -1 | live]
(push) ; 12
; [then-branch: 47 | First:(Second:($t@74@04))[i@78@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@78@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 47 | First:(Second:($t@74@04))[i@78@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@78@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7772
;  :arith-add-rows          34
;  :arith-assert-diseq      153
;  :arith-assert-lower      370
;  :arith-assert-upper      291
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        234
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2889
;  :mk-clause               828
;  :num-allocs              4870909
;  :num-checks              323
;  :propagations            510
;  :quant-instantiations    181
;  :rlimit-count            236748)
(push) ; 13
; [then-branch: 48 | 0 <= First:(Second:($t@74@04))[i@78@04] | live]
; [else-branch: 48 | !(0 <= First:(Second:($t@74@04))[i@78@04]) | live]
(push) ; 14
; [then-branch: 48 | 0 <= First:(Second:($t@74@04))[i@78@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@78@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@78@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7774
;  :arith-add-rows          35
;  :arith-assert-diseq      153
;  :arith-assert-lower      372
;  :arith-assert-upper      292
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        235
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              730
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2893
;  :mk-clause               828
;  :num-allocs              4870909
;  :num-checks              324
;  :propagations            510
;  :quant-instantiations    181
;  :rlimit-count            236860)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 48 | !(0 <= First:(Second:($t@74@04))[i@78@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@78@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 46 | !(i@78@04 < |First:(Second:($t@74@04))| && 0 <= i@78@04)]
(assert (not
  (and
    (<
      i@78@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
    (<= 0 i@78@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@78@04 Int)) (!
  (implies
    (and
      (<
        i@78@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@78@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@78@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@78@04)
          (Seq_length __flatten_64__89@77@04))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@78@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@78@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7774
;  :arith-add-rows          35
;  :arith-assert-diseq      155
;  :arith-assert-lower      373
;  :arith-assert-upper      293
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    263
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              757
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2907
;  :mk-clause               855
;  :num-allocs              4870909
;  :num-checks              325
;  :propagations            512
;  :quant-instantiations    184
;  :rlimit-count            237348)
(assert (forall ((i@78@04 Int)) (!
  (implies
    (and
      (<
        i@78@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@78@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@78@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@78@04)
          (Seq_length __flatten_64__89@77@04))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@78@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@78@04))
  :qid |prog.l<no position>|)))
(declare-const $t@79@04 $Snap)
(assert (= $t@79@04 ($Snap.combine ($Snap.first $t@79@04) ($Snap.second $t@79@04))))
(assert (=
  ($Snap.second $t@79@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@79@04))
    ($Snap.second ($Snap.second $t@79@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@79@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@79@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@79@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@79@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@80@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 49 | 0 <= i@80@04 | live]
; [else-branch: 49 | !(0 <= i@80@04) | live]
(push) ; 10
; [then-branch: 49 | 0 <= i@80@04]
(assert (<= 0 i@80@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 49 | !(0 <= i@80@04)]
(assert (not (<= 0 i@80@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 50 | i@80@04 < |First:(Second:($t@79@04))| && 0 <= i@80@04 | live]
; [else-branch: 50 | !(i@80@04 < |First:(Second:($t@79@04))| && 0 <= i@80@04) | live]
(push) ; 10
; [then-branch: 50 | i@80@04 < |First:(Second:($t@79@04))| && 0 <= i@80@04]
(assert (and
  (<
    i@80@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
  (<= 0 i@80@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@80@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7812
;  :arith-add-rows          35
;  :arith-assert-diseq      155
;  :arith-assert-lower      378
;  :arith-assert-upper      296
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              757
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2929
;  :mk-clause               855
;  :num-allocs              4870909
;  :num-checks              326
;  :propagations            512
;  :quant-instantiations    189
;  :rlimit-count            238766)
; [eval] -1
(push) ; 11
; [then-branch: 51 | First:(Second:($t@79@04))[i@80@04] == -1 | live]
; [else-branch: 51 | First:(Second:($t@79@04))[i@80@04] != -1 | live]
(push) ; 12
; [then-branch: 51 | First:(Second:($t@79@04))[i@80@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@80@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 51 | First:(Second:($t@79@04))[i@80@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      i@80@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@80@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7812
;  :arith-add-rows          35
;  :arith-assert-diseq      155
;  :arith-assert-lower      378
;  :arith-assert-upper      296
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              757
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2930
;  :mk-clause               855
;  :num-allocs              4870909
;  :num-checks              327
;  :propagations            512
;  :quant-instantiations    189
;  :rlimit-count            238917)
(push) ; 13
; [then-branch: 52 | 0 <= First:(Second:($t@79@04))[i@80@04] | live]
; [else-branch: 52 | !(0 <= First:(Second:($t@79@04))[i@80@04]) | live]
(push) ; 14
; [then-branch: 52 | 0 <= First:(Second:($t@79@04))[i@80@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@80@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@80@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7812
;  :arith-add-rows          35
;  :arith-assert-diseq      156
;  :arith-assert-lower      381
;  :arith-assert-upper      296
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    269
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              757
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2933
;  :mk-clause               856
;  :num-allocs              4870909
;  :num-checks              328
;  :propagations            512
;  :quant-instantiations    189
;  :rlimit-count            239021)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 52 | !(0 <= First:(Second:($t@79@04))[i@80@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      i@80@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 50 | !(i@80@04 < |First:(Second:($t@79@04))| && 0 <= i@80@04)]
(assert (not
  (and
    (<
      i@80@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
    (<= 0 i@80@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@80@04 Int)) (!
  (implies
    (and
      (<
        i@80@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
      (<= 0 i@80@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
          i@80@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@80@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@80@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@80@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
  __flatten_64__89@77@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7833
;  :arith-add-rows          35
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2957
;  :mk-clause               872
;  :num-allocs              4870909
;  :num-checks              329
;  :propagations            518
;  :quant-instantiations    191
;  :rlimit-count            240046)
(push) ; 8
; [then-branch: 53 | 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 53 | !(0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 53 | 0 <= First:(Second:($t@74@04))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7833
;  :arith-add-rows          35
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2957
;  :mk-clause               872
;  :num-allocs              4870909
;  :num-checks              330
;  :propagations            518
;  :quant-instantiations    191
;  :rlimit-count            240146)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7833
;  :arith-add-rows          35
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2957
;  :mk-clause               872
;  :num-allocs              4870909
;  :num-checks              331
;  :propagations            518
;  :quant-instantiations    191
;  :rlimit-count            240155)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@77@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7833
;  :arith-add-rows          35
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2957
;  :mk-clause               872
;  :num-allocs              4870909
;  :num-checks              332
;  :propagations            518
;  :quant-instantiations    191
;  :rlimit-count            240243)
(push) ; 10
; [then-branch: 54 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 | live]
; [else-branch: 54 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] != 0 | live]
(push) ; 11
; [then-branch: 54 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_64__89@77@04
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 54 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_64__89@77@04
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7834
;  :arith-add-rows          36
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2962
;  :mk-clause               877
;  :num-allocs              4870909
;  :num-checks              333
;  :propagations            518
;  :quant-instantiations    192
;  :rlimit-count            240458)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7834
;  :arith-add-rows          36
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2962
;  :mk-clause               877
;  :num-allocs              4870909
;  :num-checks              334
;  :propagations            518
;  :quant-instantiations    192
;  :rlimit-count            240467)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@77@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7834
;  :arith-add-rows          36
;  :arith-assert-diseq      156
;  :arith-assert-lower      382
;  :arith-assert-upper      297
;  :arith-bound-prop        47
;  :arith-conflicts         19
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        9
;  :arith-pivots            143
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    271
;  :datatype-constructor-ax 1794
;  :datatype-occurs-check   465
;  :datatype-splits         1191
;  :decisions               1777
;  :del-clause              758
;  :final-checks            143
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              4.66
;  :memory                  4.66
;  :minimized-lits          3
;  :mk-bool-var             2962
;  :mk-clause               877
;  :num-allocs              4870909
;  :num-checks              335
;  :propagations            518
;  :quant-instantiations    192
;  :rlimit-count            240555)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 53 | !(0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8267
;  :arith-add-rows          44
;  :arith-assert-diseq      183
;  :arith-assert-lower      421
;  :arith-assert-upper      332
;  :arith-bound-prop        53
;  :arith-conflicts         20
;  :arith-eq-adapter        271
;  :arith-fixed-eqs         129
;  :arith-offset-eqs        13
;  :arith-pivots            158
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    275
;  :datatype-constructor-ax 1879
;  :datatype-occurs-check   483
;  :datatype-splits         1237
;  :decisions               1870
;  :del-clause              867
;  :final-checks            147
;  :interface-eqs           15
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          13
;  :mk-bool-var             3140
;  :mk-clause               981
;  :num-allocs              5285131
;  :num-checks              336
;  :propagations            584
;  :quant-instantiations    218
;  :rlimit-count            243943
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8679
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              961
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3305
;  :mk-clause               1075
;  :num-allocs              5285131
;  :num-checks              337
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247158
;  :time                    0.00)
; [then-branch: 55 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 55 | !(__flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 55 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8679
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              961
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3307
;  :mk-clause               1076
;  :num-allocs              5285131
;  :num-checks              338
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247326)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 55 | !(__flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@79@04))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8684
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3312
;  :mk-clause               1080
;  :num-allocs              5285131
;  :num-checks              339
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247708)
(push) ; 8
; [then-branch: 56 | 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 56 | !(0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 56 | 0 <= First:(Second:($t@74@04))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8684
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3312
;  :mk-clause               1080
;  :num-allocs              5285131
;  :num-checks              340
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247808)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8684
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3312
;  :mk-clause               1080
;  :num-allocs              5285131
;  :num-checks              341
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247817)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@77@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8684
;  :arith-add-rows          57
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3312
;  :mk-clause               1080
;  :num-allocs              5285131
;  :num-checks              342
;  :propagations            647
;  :quant-instantiations    241
;  :rlimit-count            247905)
(push) ; 10
; [then-branch: 57 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 | live]
; [else-branch: 57 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] != 0 | live]
(push) ; 11
; [then-branch: 57 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_64__89@77@04
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 57 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_64__89@77@04
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8685
;  :arith-add-rows          58
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3316
;  :mk-clause               1085
;  :num-allocs              5285131
;  :num-checks              343
;  :propagations            647
;  :quant-instantiations    242
;  :rlimit-count            248058)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8685
;  :arith-add-rows          58
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3316
;  :mk-clause               1085
;  :num-allocs              5285131
;  :num-checks              344
;  :propagations            647
;  :quant-instantiations    242
;  :rlimit-count            248067)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@77@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8685
;  :arith-add-rows          58
;  :arith-assert-diseq      207
;  :arith-assert-lower      458
;  :arith-assert-upper      365
;  :arith-bound-prop        58
;  :arith-conflicts         21
;  :arith-eq-adapter        299
;  :arith-fixed-eqs         144
;  :arith-offset-eqs        14
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    279
;  :datatype-constructor-ax 1964
;  :datatype-occurs-check   501
;  :datatype-splits         1283
;  :decisions               1961
;  :del-clause              962
;  :final-checks            151
;  :interface-eqs           16
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          16
;  :mk-bool-var             3316
;  :mk-clause               1085
;  :num-allocs              5285131
;  :num-checks              345
;  :propagations            647
;  :quant-instantiations    242
;  :rlimit-count            248155)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 56 | !(0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9091
;  :arith-add-rows          68
;  :arith-assert-diseq      231
;  :arith-assert-lower      495
;  :arith-assert-upper      398
;  :arith-bound-prop        63
;  :arith-conflicts         22
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         157
;  :arith-offset-eqs        15
;  :arith-pivots            180
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    283
;  :datatype-constructor-ax 2048
;  :datatype-occurs-check   519
;  :datatype-splits         1328
;  :decisions               2051
;  :del-clause              1054
;  :final-checks            155
;  :interface-eqs           17
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          19
;  :mk-bool-var             3475
;  :mk-clause               1172
;  :num-allocs              5285131
;  :num-checks              346
;  :propagations            708
;  :quant-instantiations    265
;  :rlimit-count            251328
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9748
;  :arith-add-rows          79
;  :arith-assert-diseq      257
;  :arith-assert-lower      532
;  :arith-assert-upper      434
;  :arith-bound-prop        69
;  :arith-conflicts         23
;  :arith-eq-adapter        358
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        21
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 2194
;  :datatype-occurs-check   550
;  :datatype-splits         1414
;  :decisions               2199
;  :del-clause              1168
;  :final-checks            162
;  :interface-eqs           19
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          29
;  :mk-bool-var             3714
;  :mk-clause               1286
;  :num-allocs              5285131
;  :num-checks              347
;  :propagations            783
;  :quant-instantiations    291
;  :rlimit-count            255465
;  :time                    0.00)
; [then-branch: 58 | !(__flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]) | live]
; [else-branch: 58 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0] | live]
(push) ; 9
; [then-branch: 58 | !(__flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@77@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9749
;  :arith-add-rows          80
;  :arith-assert-diseq      257
;  :arith-assert-lower      532
;  :arith-assert-upper      434
;  :arith-bound-prop        69
;  :arith-conflicts         23
;  :arith-eq-adapter        358
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        21
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 2194
;  :datatype-occurs-check   550
;  :datatype-splits         1414
;  :decisions               2199
;  :del-clause              1168
;  :final-checks            162
;  :interface-eqs           19
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          29
;  :mk-bool-var             3718
;  :mk-clause               1291
;  :num-allocs              5285131
;  :num-checks              348
;  :propagations            785
;  :quant-instantiations    292
;  :rlimit-count            255648)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9749
;  :arith-add-rows          80
;  :arith-assert-diseq      257
;  :arith-assert-lower      532
;  :arith-assert-upper      434
;  :arith-bound-prop        69
;  :arith-conflicts         23
;  :arith-eq-adapter        358
;  :arith-fixed-eqs         174
;  :arith-offset-eqs        21
;  :arith-pivots            192
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    295
;  :datatype-constructor-ax 2194
;  :datatype-occurs-check   550
;  :datatype-splits         1414
;  :decisions               2199
;  :del-clause              1168
;  :final-checks            162
;  :interface-eqs           19
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          29
;  :mk-bool-var             3718
;  :mk-clause               1291
;  :num-allocs              5285131
;  :num-checks              349
;  :propagations            785
;  :quant-instantiations    292
;  :rlimit-count            255663)
(pop) ; 9
(push) ; 9
; [else-branch: 58 | __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@77@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@77@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_64__89@77@04
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
              0))
          0)
        (=
          (Seq_index
            __flatten_64__89@77@04
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@81@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 59 | 0 <= i@81@04 | live]
; [else-branch: 59 | !(0 <= i@81@04) | live]
(push) ; 10
; [then-branch: 59 | 0 <= i@81@04]
(assert (<= 0 i@81@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 59 | !(0 <= i@81@04)]
(assert (not (<= 0 i@81@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 60 | i@81@04 < |First:(Second:($t@79@04))| && 0 <= i@81@04 | live]
; [else-branch: 60 | !(i@81@04 < |First:(Second:($t@79@04))| && 0 <= i@81@04) | live]
(push) ; 10
; [then-branch: 60 | i@81@04 < |First:(Second:($t@79@04))| && 0 <= i@81@04]
(assert (and
  (<
    i@81@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
  (<= 0 i@81@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@81@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10158
;  :arith-add-rows          94
;  :arith-assert-diseq      281
;  :arith-assert-lower      570
;  :arith-assert-upper      468
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         190
;  :arith-offset-eqs        22
;  :arith-pivots            202
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1270
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3883
;  :mk-clause               1393
;  :num-allocs              5285131
;  :num-checks              351
;  :propagations            849
;  :quant-instantiations    316
;  :rlimit-count            259097)
; [eval] -1
(push) ; 11
; [then-branch: 61 | First:(Second:($t@79@04))[i@81@04] == -1 | live]
; [else-branch: 61 | First:(Second:($t@79@04))[i@81@04] != -1 | live]
(push) ; 12
; [then-branch: 61 | First:(Second:($t@79@04))[i@81@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@81@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 61 | First:(Second:($t@79@04))[i@81@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      i@81@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@81@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10164
;  :arith-add-rows          95
;  :arith-assert-diseq      283
;  :arith-assert-lower      574
;  :arith-assert-upper      470
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        388
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        22
;  :arith-pivots            203
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1270
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3892
;  :mk-clause               1398
;  :num-allocs              5285131
;  :num-checks              352
;  :propagations            856
;  :quant-instantiations    318
;  :rlimit-count            259304)
(push) ; 13
; [then-branch: 62 | 0 <= First:(Second:($t@79@04))[i@81@04] | live]
; [else-branch: 62 | !(0 <= First:(Second:($t@79@04))[i@81@04]) | live]
(push) ; 14
; [then-branch: 62 | 0 <= First:(Second:($t@79@04))[i@81@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@81@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@81@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10166
;  :arith-add-rows          96
;  :arith-assert-diseq      283
;  :arith-assert-lower      576
;  :arith-assert-upper      471
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        389
;  :arith-fixed-eqs         192
;  :arith-offset-eqs        22
;  :arith-pivots            204
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1270
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3896
;  :mk-clause               1398
;  :num-allocs              5285131
;  :num-checks              353
;  :propagations            856
;  :quant-instantiations    318
;  :rlimit-count            259421)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 62 | !(0 <= First:(Second:($t@79@04))[i@81@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
      i@81@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 60 | !(i@81@04 < |First:(Second:($t@79@04))| && 0 <= i@81@04)]
(assert (not
  (and
    (<
      i@81@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
    (<= 0 i@81@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@81@04 Int)) (!
  (implies
    (and
      (<
        i@81@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
      (<= 0 i@81@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
          i@81@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@81@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@81@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@81@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10166
;  :arith-add-rows          96
;  :arith-assert-diseq      285
;  :arith-assert-lower      577
;  :arith-assert-upper      472
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        390
;  :arith-fixed-eqs         193
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    299
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1289
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3904
;  :mk-clause               1412
;  :num-allocs              5285131
;  :num-checks              354
;  :propagations            858
;  :quant-instantiations    319
;  :rlimit-count            259852)
(assert (forall ((i@81@04 Int)) (!
  (implies
    (and
      (<
        i@81@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
      (<= 0 i@81@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
          i@81@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@81@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
            i@81@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))
    i@81@04))
  :qid |prog.l<no position>|)))
(declare-const $t@82@04 $Snap)
(assert (= $t@82@04 ($Snap.combine ($Snap.first $t@82@04) ($Snap.second $t@82@04))))
(assert (=
  ($Snap.second $t@82@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@82@04))
    ($Snap.second ($Snap.second $t@82@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@82@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@82@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@82@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@82@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@83@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 63 | 0 <= i@83@04 | live]
; [else-branch: 63 | !(0 <= i@83@04) | live]
(push) ; 10
; [then-branch: 63 | 0 <= i@83@04]
(assert (<= 0 i@83@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 63 | !(0 <= i@83@04)]
(assert (not (<= 0 i@83@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 64 | i@83@04 < |First:(Second:($t@82@04))| && 0 <= i@83@04 | live]
; [else-branch: 64 | !(i@83@04 < |First:(Second:($t@82@04))| && 0 <= i@83@04) | live]
(push) ; 10
; [then-branch: 64 | i@83@04 < |First:(Second:($t@82@04))| && 0 <= i@83@04]
(assert (and
  (<
    i@83@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
  (<= 0 i@83@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@83@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10204
;  :arith-add-rows          96
;  :arith-assert-diseq      285
;  :arith-assert-lower      582
;  :arith-assert-upper      475
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         194
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1289
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3926
;  :mk-clause               1412
;  :num-allocs              5285131
;  :num-checks              355
;  :propagations            858
;  :quant-instantiations    323
;  :rlimit-count            261243)
; [eval] -1
(push) ; 11
; [then-branch: 65 | First:(Second:($t@82@04))[i@83@04] == -1 | live]
; [else-branch: 65 | First:(Second:($t@82@04))[i@83@04] != -1 | live]
(push) ; 12
; [then-branch: 65 | First:(Second:($t@82@04))[i@83@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@83@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 65 | First:(Second:($t@82@04))[i@83@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
      i@83@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@83@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10204
;  :arith-add-rows          96
;  :arith-assert-diseq      285
;  :arith-assert-lower      582
;  :arith-assert-upper      475
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         194
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1289
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3927
;  :mk-clause               1412
;  :num-allocs              5285131
;  :num-checks              356
;  :propagations            858
;  :quant-instantiations    323
;  :rlimit-count            261394)
(push) ; 13
; [then-branch: 66 | 0 <= First:(Second:($t@82@04))[i@83@04] | live]
; [else-branch: 66 | !(0 <= First:(Second:($t@82@04))[i@83@04]) | live]
(push) ; 14
; [then-branch: 66 | 0 <= First:(Second:($t@82@04))[i@83@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@83@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@83@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10204
;  :arith-add-rows          96
;  :arith-assert-diseq      286
;  :arith-assert-lower      585
;  :arith-assert-upper      475
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         194
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    305
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1289
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3930
;  :mk-clause               1413
;  :num-allocs              5285131
;  :num-checks              357
;  :propagations            858
;  :quant-instantiations    323
;  :rlimit-count            261497)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 66 | !(0 <= First:(Second:($t@82@04))[i@83@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
      i@83@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 64 | !(i@83@04 < |First:(Second:($t@82@04))| && 0 <= i@83@04)]
(assert (not
  (and
    (<
      i@83@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
    (<= 0 i@83@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@83@04 Int)) (!
  (implies
    (and
      (<
        i@83@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
      (<= 0 i@83@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
          i@83@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@83@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@83@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@83@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@79@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10222
;  :arith-add-rows          96
;  :arith-assert-diseq      286
;  :arith-assert-lower      586
;  :arith-assert-upper      476
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1290
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3950
;  :mk-clause               1423
;  :num-allocs              5285131
;  :num-checks              358
;  :propagations            862
;  :quant-instantiations    325
;  :rlimit-count            262512)
(push) ; 8
; [then-branch: 67 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 | live]
; [else-branch: 67 | First:(Second:(Second:(Second:($t@79@04))))[0] != 0 | live]
(push) ; 9
; [then-branch: 67 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 67 | First:(Second:(Second:(Second:($t@79@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10223
;  :arith-add-rows          96
;  :arith-assert-diseq      286
;  :arith-assert-lower      586
;  :arith-assert-upper      476
;  :arith-bound-prop        75
;  :arith-conflicts         24
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         195
;  :arith-offset-eqs        22
;  :arith-pivots            206
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    307
;  :datatype-constructor-ax 2278
;  :datatype-occurs-check   568
;  :datatype-splits         1459
;  :decisions               2290
;  :del-clause              1290
;  :final-checks            166
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.85
;  :memory                  4.85
;  :minimized-lits          32
;  :mk-bool-var             3954
;  :mk-clause               1428
;  :num-allocs              5285131
;  :num-checks              359
;  :propagations            862
;  :quant-instantiations    326
;  :rlimit-count            262724)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10758
;  :arith-add-rows          108
;  :arith-assert-diseq      334
;  :arith-assert-lower      646
;  :arith-assert-upper      530
;  :arith-bound-prop        78
;  :arith-conflicts         24
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         221
;  :arith-offset-eqs        23
;  :arith-pivots            223
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    312
;  :datatype-constructor-ax 2368
;  :datatype-occurs-check   588
;  :datatype-splits         1509
;  :decisions               2393
;  :del-clause              1416
;  :final-checks            169
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          45
;  :mk-bool-var             4163
;  :mk-clause               1549
;  :num-allocs              5503895
;  :num-checks              360
;  :propagations            978
;  :quant-instantiations    371
;  :rlimit-count            266857
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11188
;  :arith-add-rows          120
;  :arith-assert-diseq      363
;  :arith-assert-lower      679
;  :arith-assert-upper      558
;  :arith-bound-prop        80
;  :arith-conflicts         24
;  :arith-eq-adapter        461
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        27
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 2458
;  :datatype-occurs-check   608
;  :datatype-splits         1559
;  :decisions               2487
;  :del-clause              1489
;  :final-checks            172
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          45
;  :mk-bool-var             4310
;  :mk-clause               1622
;  :num-allocs              5503895
;  :num-checks              361
;  :propagations            1032
;  :quant-instantiations    392
;  :rlimit-count            270133
;  :time                    0.00)
; [then-branch: 68 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1 | live]
; [else-branch: 68 | !(First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1) | live]
(push) ; 9
; [then-branch: 68 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11188
;  :arith-add-rows          120
;  :arith-assert-diseq      363
;  :arith-assert-lower      679
;  :arith-assert-upper      558
;  :arith-bound-prop        80
;  :arith-conflicts         24
;  :arith-eq-adapter        461
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        27
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    317
;  :datatype-constructor-ax 2458
;  :datatype-occurs-check   608
;  :datatype-splits         1559
;  :decisions               2487
;  :del-clause              1489
;  :final-checks            172
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          45
;  :mk-bool-var             4312
;  :mk-clause               1623
;  :num-allocs              5503895
;  :num-checks              362
;  :propagations            1032
;  :quant-instantiations    392
;  :rlimit-count            270282)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 68 | !(First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11194
;  :arith-add-rows          120
;  :arith-assert-diseq      363
;  :arith-assert-lower      679
;  :arith-assert-upper      558
;  :arith-bound-prop        80
;  :arith-conflicts         24
;  :arith-eq-adapter        461
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        27
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    318
;  :datatype-constructor-ax 2458
;  :datatype-occurs-check   608
;  :datatype-splits         1559
;  :decisions               2487
;  :del-clause              1490
;  :final-checks            172
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          45
;  :mk-bool-var             4318
;  :mk-clause               1627
;  :num-allocs              5503895
;  :num-checks              363
;  :propagations            1032
;  :quant-instantiations    392
;  :rlimit-count            270765)
(push) ; 8
; [then-branch: 69 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 | live]
; [else-branch: 69 | First:(Second:(Second:(Second:($t@79@04))))[1] != 0 | live]
(push) ; 9
; [then-branch: 69 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 69 | First:(Second:(Second:(Second:($t@79@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11195
;  :arith-add-rows          120
;  :arith-assert-diseq      363
;  :arith-assert-lower      679
;  :arith-assert-upper      558
;  :arith-bound-prop        80
;  :arith-conflicts         24
;  :arith-eq-adapter        461
;  :arith-fixed-eqs         229
;  :arith-offset-eqs        27
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    318
;  :datatype-constructor-ax 2458
;  :datatype-occurs-check   608
;  :datatype-splits         1559
;  :decisions               2487
;  :del-clause              1490
;  :final-checks            172
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          45
;  :mk-bool-var             4323
;  :mk-clause               1633
;  :num-allocs              5503895
;  :num-checks              364
;  :propagations            1032
;  :quant-instantiations    393
;  :rlimit-count            270949)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11664
;  :arith-add-rows          126
;  :arith-assert-diseq      400
;  :arith-assert-lower      721
;  :arith-assert-upper      596
;  :arith-bound-prop        82
;  :arith-conflicts         24
;  :arith-eq-adapter        495
;  :arith-fixed-eqs         242
;  :arith-offset-eqs        32
;  :arith-pivots            251
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    323
;  :datatype-constructor-ax 2548
;  :datatype-occurs-check   629
;  :datatype-splits         1609
;  :decisions               2585
;  :del-clause              1590
;  :final-checks            175
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          47
;  :mk-bool-var             4500
;  :mk-clause               1727
;  :num-allocs              5503895
;  :num-checks              365
;  :propagations            1105
;  :quant-instantiations    422
;  :rlimit-count            274393
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12159
;  :arith-add-rows          131
;  :arith-assert-diseq      435
;  :arith-assert-lower      777
;  :arith-assert-upper      636
;  :arith-bound-prop        84
;  :arith-conflicts         24
;  :arith-eq-adapter        531
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        34
;  :arith-pivots            265
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 2641
;  :datatype-occurs-check   656
;  :datatype-splits         1661
;  :decisions               2685
;  :del-clause              1698
;  :final-checks            179
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          49
;  :mk-bool-var             4696
;  :mk-clause               1835
;  :num-allocs              5503895
;  :num-checks              366
;  :propagations            1203
;  :quant-instantiations    456
;  :rlimit-count            278050
;  :time                    0.01)
; [then-branch: 70 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1 | live]
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1) | live]
(push) ; 9
; [then-branch: 70 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12159
;  :arith-add-rows          131
;  :arith-assert-diseq      435
;  :arith-assert-lower      777
;  :arith-assert-upper      636
;  :arith-bound-prop        84
;  :arith-conflicts         24
;  :arith-eq-adapter        531
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        34
;  :arith-pivots            265
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    329
;  :datatype-constructor-ax 2641
;  :datatype-occurs-check   656
;  :datatype-splits         1661
;  :decisions               2685
;  :del-clause              1698
;  :final-checks            179
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          49
;  :mk-bool-var             4698
;  :mk-clause               1836
;  :num-allocs              5503895
;  :num-checks              367
;  :propagations            1203
;  :quant-instantiations    456
;  :rlimit-count            278199)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 70 | !(First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1)
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12165
;  :arith-add-rows          131
;  :arith-assert-diseq      435
;  :arith-assert-lower      777
;  :arith-assert-upper      636
;  :arith-bound-prop        84
;  :arith-conflicts         24
;  :arith-eq-adapter        531
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        34
;  :arith-pivots            265
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 2641
;  :datatype-occurs-check   656
;  :datatype-splits         1661
;  :decisions               2685
;  :del-clause              1699
;  :final-checks            179
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          49
;  :mk-bool-var             4704
;  :mk-clause               1840
;  :num-allocs              5503895
;  :num-checks              368
;  :propagations            1203
;  :quant-instantiations    456
;  :rlimit-count            278688)
(push) ; 8
; [then-branch: 71 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 | live]
; [else-branch: 71 | First:(Second:(Second:(Second:($t@79@04))))[0] != 0 | live]
(push) ; 9
; [then-branch: 71 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 71 | First:(Second:(Second:(Second:($t@79@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12166
;  :arith-add-rows          131
;  :arith-assert-diseq      435
;  :arith-assert-lower      777
;  :arith-assert-upper      636
;  :arith-bound-prop        84
;  :arith-conflicts         24
;  :arith-eq-adapter        531
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        34
;  :arith-pivots            265
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    330
;  :datatype-constructor-ax 2641
;  :datatype-occurs-check   656
;  :datatype-splits         1661
;  :decisions               2685
;  :del-clause              1699
;  :final-checks            179
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          49
;  :mk-bool-var             4707
;  :mk-clause               1845
;  :num-allocs              5503895
;  :num-checks              369
;  :propagations            1203
;  :quant-instantiations    457
;  :rlimit-count            278856)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12639
;  :arith-add-rows          145
;  :arith-assert-diseq      473
;  :arith-assert-lower      818
;  :arith-assert-upper      674
;  :arith-bound-prop        86
;  :arith-conflicts         24
;  :arith-eq-adapter        564
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        37
;  :arith-pivots            283
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    336
;  :datatype-constructor-ax 2734
;  :datatype-occurs-check   683
;  :datatype-splits         1713
;  :decisions               2785
;  :del-clause              1799
;  :final-checks            183
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          51
;  :mk-bool-var             4888
;  :mk-clause               1940
;  :num-allocs              5503895
;  :num-checks              370
;  :propagations            1278
;  :quant-instantiations    484
;  :rlimit-count            282469
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13220
;  :arith-add-rows          151
;  :arith-assert-diseq      521
;  :arith-assert-lower      878
;  :arith-assert-upper      728
;  :arith-bound-prop        89
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        39
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 2827
;  :datatype-occurs-check   710
;  :datatype-splits         1765
;  :decisions               2891
;  :del-clause              1927
;  :final-checks            187
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          64
;  :mk-bool-var             5116
;  :mk-clause               2068
;  :num-allocs              5503895
;  :num-checks              371
;  :propagations            1411
;  :quant-instantiations    532
;  :rlimit-count            286656
;  :time                    0.00)
; [then-branch: 72 | !(First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1) | live]
; [else-branch: 72 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1 | live]
(push) ; 9
; [then-branch: 72 | !(First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        0)
      (- 0 1)))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13221
;  :arith-add-rows          151
;  :arith-assert-diseq      521
;  :arith-assert-lower      878
;  :arith-assert-upper      728
;  :arith-bound-prop        89
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        39
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 2827
;  :datatype-occurs-check   710
;  :datatype-splits         1765
;  :decisions               2891
;  :del-clause              1927
;  :final-checks            187
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          64
;  :mk-bool-var             5119
;  :mk-clause               2073
;  :num-allocs              5503895
;  :num-checks              372
;  :propagations            1412
;  :quant-instantiations    533
;  :rlimit-count            286845)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13221
;  :arith-add-rows          151
;  :arith-assert-diseq      521
;  :arith-assert-lower      878
;  :arith-assert-upper      728
;  :arith-bound-prop        89
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        39
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 2827
;  :datatype-occurs-check   710
;  :datatype-splits         1765
;  :decisions               2891
;  :del-clause              1927
;  :final-checks            187
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          64
;  :mk-bool-var             5119
;  :mk-clause               2073
;  :num-allocs              5503895
;  :num-checks              373
;  :propagations            1412
;  :quant-instantiations    533
;  :rlimit-count            286860)
(pop) ; 9
(push) ; 9
; [else-branch: 72 | First:(Second:(Second:(Second:($t@79@04))))[0] == 0 || First:(Second:(Second:(Second:($t@79@04))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
          0)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
          0)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@82@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1)
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13228
;  :arith-add-rows          151
;  :arith-assert-diseq      521
;  :arith-assert-lower      878
;  :arith-assert-upper      728
;  :arith-bound-prop        89
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        39
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 2827
;  :datatype-occurs-check   710
;  :datatype-splits         1765
;  :decisions               2891
;  :del-clause              1932
;  :final-checks            187
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          64
;  :mk-bool-var             5121
;  :mk-clause               2074
;  :num-allocs              5503895
;  :num-checks              374
;  :propagations            1412
;  :quant-instantiations    533
;  :rlimit-count            287212)
(push) ; 8
; [then-branch: 73 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 | live]
; [else-branch: 73 | First:(Second:(Second:(Second:($t@79@04))))[1] != 0 | live]
(push) ; 9
; [then-branch: 73 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 73 | First:(Second:(Second:(Second:($t@79@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13229
;  :arith-add-rows          151
;  :arith-assert-diseq      521
;  :arith-assert-lower      878
;  :arith-assert-upper      728
;  :arith-bound-prop        89
;  :arith-conflicts         24
;  :arith-eq-adapter        604
;  :arith-fixed-eqs         314
;  :arith-offset-eqs        39
;  :arith-pivots            299
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    342
;  :datatype-constructor-ax 2827
;  :datatype-occurs-check   710
;  :datatype-splits         1765
;  :decisions               2891
;  :del-clause              1932
;  :final-checks            187
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          64
;  :mk-bool-var             5125
;  :mk-clause               2080
;  :num-allocs              5503895
;  :num-checks              375
;  :propagations            1412
;  :quant-instantiations    534
;  :rlimit-count            287380)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13723
;  :arith-add-rows          156
;  :arith-assert-diseq      556
;  :arith-assert-lower      934
;  :arith-assert-upper      768
;  :arith-bound-prop        91
;  :arith-conflicts         24
;  :arith-eq-adapter        640
;  :arith-fixed-eqs         337
;  :arith-offset-eqs        41
;  :arith-pivots            315
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 2919
;  :datatype-occurs-check   734
;  :datatype-splits         1816
;  :decisions               2990
;  :del-clause              2046
;  :final-checks            191
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          66
;  :mk-bool-var             5318
;  :mk-clause               2188
;  :num-allocs              5503895
;  :num-checks              376
;  :propagations            1512
;  :quant-instantiations    568
;  :rlimit-count            291044
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14204
;  :arith-add-rows          170
;  :arith-assert-diseq      593
;  :arith-assert-lower      976
;  :arith-assert-upper      806
;  :arith-bound-prop        93
;  :arith-conflicts         24
;  :arith-eq-adapter        674
;  :arith-fixed-eqs         350
;  :arith-offset-eqs        45
;  :arith-pivots            333
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 3011
;  :datatype-occurs-check   758
;  :datatype-splits         1867
;  :decisions               3090
;  :del-clause              2141
;  :final-checks            195
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          68
;  :mk-bool-var             5504
;  :mk-clause               2283
;  :num-allocs              5503895
;  :num-checks              377
;  :propagations            1591
;  :quant-instantiations    597
;  :rlimit-count            294710
;  :time                    0.00)
; [then-branch: 74 | !(First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1) | live]
; [else-branch: 74 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 74 | !(First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
        1)
      (- 0 1)))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14205
;  :arith-add-rows          170
;  :arith-assert-diseq      593
;  :arith-assert-lower      976
;  :arith-assert-upper      806
;  :arith-bound-prop        93
;  :arith-conflicts         24
;  :arith-eq-adapter        674
;  :arith-fixed-eqs         350
;  :arith-offset-eqs        45
;  :arith-pivots            333
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 3011
;  :datatype-occurs-check   758
;  :datatype-splits         1867
;  :decisions               3090
;  :del-clause              2141
;  :final-checks            195
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          68
;  :mk-bool-var             5508
;  :mk-clause               2289
;  :num-allocs              5503895
;  :num-checks              378
;  :propagations            1592
;  :quant-instantiations    598
;  :rlimit-count            294899)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14205
;  :arith-add-rows          170
;  :arith-assert-diseq      593
;  :arith-assert-lower      976
;  :arith-assert-upper      806
;  :arith-bound-prop        93
;  :arith-conflicts         24
;  :arith-eq-adapter        674
;  :arith-fixed-eqs         350
;  :arith-offset-eqs        45
;  :arith-pivots            333
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 3011
;  :datatype-occurs-check   758
;  :datatype-splits         1867
;  :decisions               3090
;  :del-clause              2141
;  :final-checks            195
;  :interface-eqs           20
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          68
;  :mk-bool-var             5508
;  :mk-clause               2289
;  :num-allocs              5503895
;  :num-checks              379
;  :propagations            1592
;  :quant-instantiations    598
;  :rlimit-count            294914)
(pop) ; 9
(push) ; 9
; [else-branch: 74 | First:(Second:(Second:(Second:($t@79@04))))[1] == 0 || First:(Second:(Second:(Second:($t@79@04))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
          1)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
          1)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@79@04)))))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@84@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 75 | 0 <= i@84@04 | live]
; [else-branch: 75 | !(0 <= i@84@04) | live]
(push) ; 10
; [then-branch: 75 | 0 <= i@84@04]
(assert (<= 0 i@84@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 75 | !(0 <= i@84@04)]
(assert (not (<= 0 i@84@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 76 | i@84@04 < |First:(Second:($t@82@04))| && 0 <= i@84@04 | live]
; [else-branch: 76 | !(i@84@04 < |First:(Second:($t@82@04))| && 0 <= i@84@04) | live]
(push) ; 10
; [then-branch: 76 | i@84@04 < |First:(Second:($t@82@04))| && 0 <= i@84@04]
(assert (and
  (<
    i@84@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
  (<= 0 i@84@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@84@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14688
;  :arith-add-rows          176
;  :arith-assert-diseq      630
;  :arith-assert-lower      1019
;  :arith-assert-upper      846
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        709
;  :arith-fixed-eqs         362
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2256
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5699
;  :mk-clause               2387
;  :num-allocs              5503895
;  :num-checks              381
;  :propagations            1672
;  :quant-instantiations    627
;  :rlimit-count            298660)
; [eval] -1
(push) ; 11
; [then-branch: 77 | First:(Second:($t@82@04))[i@84@04] == -1 | live]
; [else-branch: 77 | First:(Second:($t@82@04))[i@84@04] != -1 | live]
(push) ; 12
; [then-branch: 77 | First:(Second:($t@82@04))[i@84@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@84@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 77 | First:(Second:($t@82@04))[i@84@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
      i@84@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@84@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14698
;  :arith-add-rows          177
;  :arith-assert-diseq      633
;  :arith-assert-lower      1027
;  :arith-assert-upper      850
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        713
;  :arith-fixed-eqs         364
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2256
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5717
;  :mk-clause               2404
;  :num-allocs              5503895
;  :num-checks              382
;  :propagations            1684
;  :quant-instantiations    631
;  :rlimit-count            298893)
(push) ; 13
; [then-branch: 78 | 0 <= First:(Second:($t@82@04))[i@84@04] | live]
; [else-branch: 78 | !(0 <= First:(Second:($t@82@04))[i@84@04]) | live]
(push) ; 14
; [then-branch: 78 | 0 <= First:(Second:($t@82@04))[i@84@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@84@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@84@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      633
;  :arith-assert-lower      1029
;  :arith-assert-upper      851
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        714
;  :arith-fixed-eqs         365
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2256
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5721
;  :mk-clause               2404
;  :num-allocs              5503895
;  :num-checks              383
;  :propagations            1684
;  :quant-instantiations    631
;  :rlimit-count            299005)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 78 | !(0 <= First:(Second:($t@82@04))[i@84@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
      i@84@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 76 | !(i@84@04 < |First:(Second:($t@82@04))| && 0 <= i@84@04)]
(assert (not
  (and
    (<
      i@84@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
    (<= 0 i@84@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@84@04 Int)) (!
  (implies
    (and
      (<
        i@84@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
      (<= 0 i@84@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
          i@84@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@84@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@84@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@84@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      635
;  :arith-assert-lower      1030
;  :arith-assert-upper      852
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        715
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5733
;  :mk-clause               2424
;  :num-allocs              5503895
;  :num-checks              384
;  :propagations            1686
;  :quant-instantiations    634
;  :rlimit-count            299493)
(assert (forall ((i@84@04 Int)) (!
  (implies
    (and
      (<
        i@84@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))))
      (<= 0 i@84@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
          i@84@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@84@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
            i@84@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@82@04)))
    i@84@04))
  :qid |prog.l<no position>|)))
(declare-const $k@85@04 $Perm)
(assert ($Perm.isReadVar $k@85@04 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@85@04 $Perm.No) (< $Perm.No $k@85@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1032
;  :arith-assert-upper      853
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5738
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              385
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300017)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@65@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1032
;  :arith-assert-upper      853
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            347
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5738
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              386
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300028)
(assert (< $k@85@04 $k@65@04))
(assert (<= $Perm.No (- $k@65@04 $k@85@04)))
(assert (<= (- $k@65@04 $k@85@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@04 $k@85@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_alu != null
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               327
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              387
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300248)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              388
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300296)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              389
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300344)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              390
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300392)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              391
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300440)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              392
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300488)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              393
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300536)
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              394
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300584)
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      636
;  :arith-assert-lower      1034
;  :arith-assert-upper      854
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        716
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5741
;  :mk-clause               2426
;  :num-allocs              5503895
;  :num-checks              395
;  :propagations            1687
;  :quant-instantiations    634
;  :rlimit-count            300632)
(declare-const $k@86@04 $Perm)
(assert ($Perm.isReadVar $k@86@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@86@04 $Perm.No) (< $Perm.No $k@86@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1036
;  :arith-assert-upper      855
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5745
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              396
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            300830)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@66@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1036
;  :arith-assert-upper      855
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            349
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5745
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              397
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            300841)
(assert (< $k@86@04 $k@66@04))
(assert (<= $Perm.No (- $k@66@04 $k@86@04)))
(assert (<= (- $k@66@04 $k@86@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@04 $k@86@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_dr != null
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              398
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301055)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              399
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301068)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              400
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301116)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              401
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301164)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              402
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301212)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              403
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301260)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      637
;  :arith-assert-lower      1038
;  :arith-assert-upper      856
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        717
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5748
;  :mk-clause               2428
;  :num-allocs              5503895
;  :num-checks              404
;  :propagations            1688
;  :quant-instantiations    634
;  :rlimit-count            301308)
(declare-const $k@87@04 $Perm)
(assert ($Perm.isReadVar $k@87@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@87@04 $Perm.No) (< $Perm.No $k@87@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      638
;  :arith-assert-lower      1040
;  :arith-assert-upper      857
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5752
;  :mk-clause               2430
;  :num-allocs              5503895
;  :num-checks              405
;  :propagations            1689
;  :quant-instantiations    634
;  :rlimit-count            301507)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@67@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      638
;  :arith-assert-lower      1040
;  :arith-assert-upper      857
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            350
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5752
;  :mk-clause               2430
;  :num-allocs              5503895
;  :num-checks              406
;  :propagations            1689
;  :quant-instantiations    634
;  :rlimit-count            301518)
(assert (< $k@87@04 $k@67@04))
(assert (<= $Perm.No (- $k@67@04 $k@87@04)))
(assert (<= (- $k@67@04 $k@87@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@67@04 $k@87@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_mon != null
(push) ; 8
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      638
;  :arith-assert-lower      1042
;  :arith-assert-upper      858
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5755
;  :mk-clause               2430
;  :num-allocs              5503895
;  :num-checks              407
;  :propagations            1689
;  :quant-instantiations    634
;  :rlimit-count            301732)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      638
;  :arith-assert-lower      1042
;  :arith-assert-upper      858
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5755
;  :mk-clause               2430
;  :num-allocs              5503895
;  :num-checks              408
;  :propagations            1689
;  :quant-instantiations    634
;  :rlimit-count            301745)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      638
;  :arith-assert-lower      1042
;  :arith-assert-upper      858
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        718
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5755
;  :mk-clause               2430
;  :num-allocs              5503895
;  :num-checks              409
;  :propagations            1689
;  :quant-instantiations    634
;  :rlimit-count            301793)
(declare-const $k@88@04 $Perm)
(assert ($Perm.isReadVar $k@88@04 $Perm.Write))
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      639
;  :arith-assert-lower      1044
;  :arith-assert-upper      859
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5759
;  :mk-clause               2432
;  :num-allocs              5503895
;  :num-checks              410
;  :propagations            1690
;  :quant-instantiations    634
;  :rlimit-count            301990)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@88@04 $Perm.No) (< $Perm.No $k@88@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      639
;  :arith-assert-lower      1044
;  :arith-assert-upper      859
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5759
;  :mk-clause               2432
;  :num-allocs              5503895
;  :num-checks              411
;  :propagations            1690
;  :quant-instantiations    634
;  :rlimit-count            302040)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@68@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      639
;  :arith-assert-lower      1044
;  :arith-assert-upper      859
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            351
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5759
;  :mk-clause               2432
;  :num-allocs              5503895
;  :num-checks              412
;  :propagations            1690
;  :quant-instantiations    634
;  :rlimit-count            302051)
(assert (< $k@88@04 $k@68@04))
(assert (<= $Perm.No (- $k@68@04 $k@88@04)))
(assert (<= (- $k@68@04 $k@88@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@04 $k@88@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
      $Ref.null))))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      639
;  :arith-assert-lower      1046
;  :arith-assert-upper      860
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            352
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5762
;  :mk-clause               2432
;  :num-allocs              5503895
;  :num-checks              413
;  :propagations            1690
;  :quant-instantiations    634
;  :rlimit-count            302265)
(push) ; 8
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14700
;  :arith-add-rows          178
;  :arith-assert-diseq      639
;  :arith-assert-lower      1046
;  :arith-assert-upper      860
;  :arith-bound-prop        95
;  :arith-conflicts         24
;  :arith-eq-adapter        719
;  :arith-fixed-eqs         366
;  :arith-offset-eqs        52
;  :arith-pivots            352
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 3103
;  :datatype-occurs-check   782
;  :datatype-splits         1918
;  :decisions               3190
;  :del-clause              2293
;  :final-checks            200
;  :interface-eqs           21
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5762
;  :mk-clause               2432
;  :num-allocs              5503895
;  :num-checks              414
;  :propagations            1690
;  :quant-instantiations    634
;  :rlimit-count            302313)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@82@04))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@82@04))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
                                                          $Snap.unit))))))))))))))))))))))))))))) diz@31@04 globals@32@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 42 | min_advance__90@76@04 != -1]
(assert (not (= min_advance__90@76@04 (- 0 1))))
(pop) ; 7
; [eval] !(min_advance__90 == -1)
; [eval] min_advance__90 == -1
; [eval] -1
(push) ; 7
(assert (not (= min_advance__90@76@04 (- 0 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14900
;  :arith-add-rows          182
;  :arith-assert-diseq      658
;  :arith-assert-lower      1068
;  :arith-assert-upper      873
;  :arith-bound-prop        102
;  :arith-conflicts         24
;  :arith-eq-adapter        732
;  :arith-fixed-eqs         370
;  :arith-offset-eqs        52
;  :arith-pivots            367
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 3149
;  :datatype-occurs-check   798
;  :datatype-splits         1958
;  :decisions               3241
;  :del-clause              2408
;  :final-checks            204
;  :interface-eqs           22
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          70
;  :mk-bool-var             5847
;  :mk-clause               2486
;  :num-allocs              5503895
;  :num-checks              415
;  :propagations            1728
;  :quant-instantiations    638
;  :rlimit-count            304340
;  :time                    0.00)
(push) ; 7
(assert (not (not (= min_advance__90@76@04 (- 0 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15100
;  :arith-add-rows          182
;  :arith-assert-diseq      674
;  :arith-assert-lower      1087
;  :arith-assert-upper      887
;  :arith-bound-prop        104
;  :arith-conflicts         25
;  :arith-eq-adapter        745
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        53
;  :arith-pivots            372
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 3195
;  :datatype-occurs-check   814
;  :datatype-splits         1998
;  :decisions               3292
;  :del-clause              2444
;  :final-checks            208
;  :interface-eqs           23
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             5928
;  :mk-clause               2522
;  :num-allocs              5503895
;  :num-checks              416
;  :propagations            1759
;  :quant-instantiations    642
;  :rlimit-count            306036
;  :time                    0.00)
; [then-branch: 79 | min_advance__90@76@04 != -1 | live]
; [else-branch: 79 | min_advance__90@76@04 == -1 | live]
(push) ; 7
; [then-branch: 79 | min_advance__90@76@04 != -1]
(assert (not (= min_advance__90@76@04 (- 0 1))))
; [exec]
; __flatten_64__89 := Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90))
; [eval] Seq((diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90), (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90))
; [eval] (diz.Main_event_state[0] < -1 ? -3 : diz.Main_event_state[0] - min_advance__90)
; [eval] diz.Main_event_state[0] < -1
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15101
;  :arith-add-rows          182
;  :arith-assert-diseq      676
;  :arith-assert-lower      1087
;  :arith-assert-upper      887
;  :arith-bound-prop        104
;  :arith-conflicts         25
;  :arith-eq-adapter        746
;  :arith-fixed-eqs         373
;  :arith-offset-eqs        53
;  :arith-pivots            372
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 3195
;  :datatype-occurs-check   814
;  :datatype-splits         1998
;  :decisions               3292
;  :del-clause              2444
;  :final-checks            208
;  :interface-eqs           23
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             5932
;  :mk-clause               2526
;  :num-allocs              5503895
;  :num-checks              417
;  :propagations            1759
;  :quant-instantiations    642
;  :rlimit-count            306126)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15296
;  :arith-add-rows          182
;  :arith-assert-diseq      689
;  :arith-assert-lower      1100
;  :arith-assert-upper      904
;  :arith-bound-prop        108
;  :arith-conflicts         25
;  :arith-eq-adapter        756
;  :arith-fixed-eqs         376
;  :arith-offset-eqs        55
;  :arith-pivots            377
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 3241
;  :datatype-occurs-check   830
;  :datatype-splits         2038
;  :decisions               3340
;  :del-clause              2480
;  :final-checks            212
;  :interface-eqs           24
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6007
;  :mk-clause               2562
;  :num-allocs              5503895
;  :num-checks              418
;  :propagations            1787
;  :quant-instantiations    646
;  :rlimit-count            307832
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15490
;  :arith-add-rows          184
;  :arith-assert-diseq      701
;  :arith-assert-lower      1121
;  :arith-assert-upper      911
;  :arith-bound-prop        114
;  :arith-conflicts         25
;  :arith-eq-adapter        766
;  :arith-fixed-eqs         379
;  :arith-offset-eqs        56
;  :arith-pivots            384
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 3287
;  :datatype-occurs-check   846
;  :datatype-splits         2078
;  :decisions               3389
;  :del-clause              2523
;  :final-checks            216
;  :interface-eqs           25
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6082
;  :mk-clause               2605
;  :num-allocs              5503895
;  :num-checks              419
;  :propagations            1816
;  :quant-instantiations    650
;  :rlimit-count            309575
;  :time                    0.00)
; [then-branch: 80 | First:(Second:(Second:(Second:($t@74@04))))[0] < -1 | live]
; [else-branch: 80 | !(First:(Second:(Second:(Second:($t@74@04))))[0] < -1) | live]
(push) ; 9
; [then-branch: 80 | First:(Second:(Second:(Second:($t@74@04))))[0] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    0)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 80 | !(First:(Second:(Second:(Second:($t@74@04))))[0] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] - min_advance__90
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15490
;  :arith-add-rows          184
;  :arith-assert-diseq      701
;  :arith-assert-lower      1123
;  :arith-assert-upper      911
;  :arith-bound-prop        114
;  :arith-conflicts         25
;  :arith-eq-adapter        766
;  :arith-fixed-eqs         379
;  :arith-offset-eqs        56
;  :arith-pivots            384
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 3287
;  :datatype-occurs-check   846
;  :datatype-splits         2078
;  :decisions               3389
;  :del-clause              2523
;  :final-checks            216
;  :interface-eqs           25
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6082
;  :mk-clause               2605
;  :num-allocs              5503895
;  :num-checks              420
;  :propagations            1818
;  :quant-instantiations    650
;  :rlimit-count            309738)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] (diz.Main_event_state[1] < -1 ? -3 : diz.Main_event_state[1] - min_advance__90)
; [eval] diz.Main_event_state[1] < -1
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15490
;  :arith-add-rows          184
;  :arith-assert-diseq      701
;  :arith-assert-lower      1123
;  :arith-assert-upper      911
;  :arith-bound-prop        114
;  :arith-conflicts         25
;  :arith-eq-adapter        766
;  :arith-fixed-eqs         379
;  :arith-offset-eqs        56
;  :arith-pivots            384
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    372
;  :datatype-constructor-ax 3287
;  :datatype-occurs-check   846
;  :datatype-splits         2078
;  :decisions               3389
;  :del-clause              2523
;  :final-checks            216
;  :interface-eqs           25
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6082
;  :mk-clause               2605
;  :num-allocs              5503895
;  :num-checks              421
;  :propagations            1818
;  :quant-instantiations    650
;  :rlimit-count            309753)
; [eval] -1
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15686
;  :arith-add-rows          184
;  :arith-assert-diseq      714
;  :arith-assert-lower      1135
;  :arith-assert-upper      928
;  :arith-bound-prop        118
;  :arith-conflicts         25
;  :arith-eq-adapter        776
;  :arith-fixed-eqs         381
;  :arith-offset-eqs        59
;  :arith-pivots            390
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    375
;  :datatype-constructor-ax 3333
;  :datatype-occurs-check   862
;  :datatype-splits         2118
;  :decisions               3437
;  :del-clause              2559
;  :final-checks            220
;  :interface-eqs           26
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6155
;  :mk-clause               2641
;  :num-allocs              5503895
;  :num-checks              422
;  :propagations            1847
;  :quant-instantiations    654
;  :rlimit-count            311463
;  :time                    0.00)
(push) ; 9
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    1)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15880
;  :arith-add-rows          186
;  :arith-assert-diseq      726
;  :arith-assert-lower      1157
;  :arith-assert-upper      935
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        786
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        59
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6231
;  :mk-clause               2677
;  :num-allocs              5503895
;  :num-checks              423
;  :propagations            1874
;  :quant-instantiations    658
;  :rlimit-count            313212
;  :time                    0.00)
; [then-branch: 81 | First:(Second:(Second:(Second:($t@74@04))))[1] < -1 | live]
; [else-branch: 81 | !(First:(Second:(Second:(Second:($t@74@04))))[1] < -1) | live]
(push) ; 9
; [then-branch: 81 | First:(Second:(Second:(Second:($t@74@04))))[1] < -1]
(assert (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
    1)
  (- 0 1)))
; [eval] -3
(pop) ; 9
(push) ; 9
; [else-branch: 81 | !(First:(Second:(Second:(Second:($t@74@04))))[1] < -1)]
(assert (not
  (<
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] - min_advance__90
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15880
;  :arith-add-rows          186
;  :arith-assert-diseq      726
;  :arith-assert-lower      1159
;  :arith-assert-upper      935
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        786
;  :arith-fixed-eqs         385
;  :arith-offset-eqs        59
;  :arith-pivots            397
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6231
;  :mk-clause               2677
;  :num-allocs              5503895
;  :num-checks              424
;  :propagations            1876
;  :quant-instantiations    658
;  :rlimit-count            313375)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            0)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            0)
          min_advance__90@76@04)))
      (Seq_singleton (ite
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            1)
          (- 0 1))
        (- 0 3)
        (-
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
            1)
          min_advance__90@76@04)))))
  2))
(declare-const __flatten_64__89@89@04 Seq<Int>)
(assert (Seq_equal
  __flatten_64__89@89@04
  (Seq_append
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          0)
        (- 0 1))
      (- 0 3)
      (-
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          0)
        min_advance__90@76@04)))
    (Seq_singleton (ite
      (<
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          1)
        (- 0 1))
      (- 0 3)
      (-
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))
          1)
        min_advance__90@76@04))))))
; [exec]
; __flatten_63__88 := __flatten_64__89
; [exec]
; diz.Main_event_state := __flatten_63__88
; [exec]
; Main_wakeup_after_wait_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(push) ; 8
(assert (not (= (Seq_length __flatten_64__89@89@04) 2)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15890
;  :arith-add-rows          191
;  :arith-assert-diseq      726
;  :arith-assert-lower      1163
;  :arith-assert-upper      938
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        791
;  :arith-fixed-eqs         387
;  :arith-offset-eqs        61
;  :arith-pivots            399
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6264
;  :mk-clause               2698
;  :num-allocs              5503895
;  :num-checks              425
;  :propagations            1881
;  :quant-instantiations    662
;  :rlimit-count            314155)
(assert (= (Seq_length __flatten_64__89@89@04) 2))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@90@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 82 | 0 <= i@90@04 | live]
; [else-branch: 82 | !(0 <= i@90@04) | live]
(push) ; 10
; [then-branch: 82 | 0 <= i@90@04]
(assert (<= 0 i@90@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 82 | !(0 <= i@90@04)]
(assert (not (<= 0 i@90@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 83 | i@90@04 < |First:(Second:($t@74@04))| && 0 <= i@90@04 | live]
; [else-branch: 83 | !(i@90@04 < |First:(Second:($t@74@04))| && 0 <= i@90@04) | live]
(push) ; 10
; [then-branch: 83 | i@90@04 < |First:(Second:($t@74@04))| && 0 <= i@90@04]
(assert (and
  (<
    i@90@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
  (<= 0 i@90@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@90@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15892
;  :arith-add-rows          191
;  :arith-assert-diseq      726
;  :arith-assert-lower      1165
;  :arith-assert-upper      940
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        792
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        61
;  :arith-pivots            399
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6269
;  :mk-clause               2698
;  :num-allocs              5503895
;  :num-checks              426
;  :propagations            1881
;  :quant-instantiations    662
;  :rlimit-count            314346)
; [eval] -1
(push) ; 11
; [then-branch: 84 | First:(Second:($t@74@04))[i@90@04] == -1 | live]
; [else-branch: 84 | First:(Second:($t@74@04))[i@90@04] != -1 | live]
(push) ; 12
; [then-branch: 84 | First:(Second:($t@74@04))[i@90@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@90@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 84 | First:(Second:($t@74@04))[i@90@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@90@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@90@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15894
;  :arith-add-rows          191
;  :arith-assert-diseq      727
;  :arith-assert-lower      1165
;  :arith-assert-upper      940
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        792
;  :arith-fixed-eqs         388
;  :arith-offset-eqs        61
;  :arith-pivots            399
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6270
;  :mk-clause               2698
;  :num-allocs              5503895
;  :num-checks              427
;  :propagations            1881
;  :quant-instantiations    662
;  :rlimit-count            314494)
(push) ; 13
; [then-branch: 85 | 0 <= First:(Second:($t@74@04))[i@90@04] | live]
; [else-branch: 85 | !(0 <= First:(Second:($t@74@04))[i@90@04]) | live]
(push) ; 14
; [then-branch: 85 | 0 <= First:(Second:($t@74@04))[i@90@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@90@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@90@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15896
;  :arith-add-rows          192
;  :arith-assert-diseq      727
;  :arith-assert-lower      1167
;  :arith-assert-upper      941
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        793
;  :arith-fixed-eqs         389
;  :arith-offset-eqs        61
;  :arith-pivots            400
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2595
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6274
;  :mk-clause               2698
;  :num-allocs              5503895
;  :num-checks              428
;  :propagations            1881
;  :quant-instantiations    662
;  :rlimit-count            314613)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 85 | !(0 <= First:(Second:($t@74@04))[i@90@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@90@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 83 | !(i@90@04 < |First:(Second:($t@74@04))| && 0 <= i@90@04)]
(assert (not
  (and
    (<
      i@90@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
    (<= 0 i@90@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@90@04 Int)) (!
  (implies
    (and
      (<
        i@90@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@90@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@90@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@90@04)
          (Seq_length __flatten_64__89@89@04))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@90@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@90@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15896
;  :arith-add-rows          192
;  :arith-assert-diseq      728
;  :arith-assert-lower      1168
;  :arith-assert-upper      942
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        795
;  :arith-fixed-eqs         390
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    378
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2620
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6288
;  :mk-clause               2723
;  :num-allocs              5503895
;  :num-checks              429
;  :propagations            1883
;  :quant-instantiations    665
;  :rlimit-count            315105)
(assert (forall ((i@90@04 Int)) (!
  (implies
    (and
      (<
        i@90@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@90@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@90@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@90@04)
          (Seq_length __flatten_64__89@89@04))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@90@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@90@04))
  :qid |prog.l<no position>|)))
(declare-const $t@91@04 $Snap)
(assert (= $t@91@04 ($Snap.combine ($Snap.first $t@91@04) ($Snap.second $t@91@04))))
(assert (=
  ($Snap.second $t@91@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@91@04))
    ($Snap.second ($Snap.second $t@91@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@91@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@91@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@91@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@91@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@92@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 86 | 0 <= i@92@04 | live]
; [else-branch: 86 | !(0 <= i@92@04) | live]
(push) ; 10
; [then-branch: 86 | 0 <= i@92@04]
(assert (<= 0 i@92@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 86 | !(0 <= i@92@04)]
(assert (not (<= 0 i@92@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 87 | i@92@04 < |First:(Second:($t@91@04))| && 0 <= i@92@04 | live]
; [else-branch: 87 | !(i@92@04 < |First:(Second:($t@91@04))| && 0 <= i@92@04) | live]
(push) ; 10
; [then-branch: 87 | i@92@04 < |First:(Second:($t@91@04))| && 0 <= i@92@04]
(assert (and
  (<
    i@92@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
  (<= 0 i@92@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@92@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15934
;  :arith-add-rows          192
;  :arith-assert-diseq      728
;  :arith-assert-lower      1173
;  :arith-assert-upper      945
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2620
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6310
;  :mk-clause               2723
;  :num-allocs              5503895
;  :num-checks              430
;  :propagations            1883
;  :quant-instantiations    670
;  :rlimit-count            316523)
; [eval] -1
(push) ; 11
; [then-branch: 88 | First:(Second:($t@91@04))[i@92@04] == -1 | live]
; [else-branch: 88 | First:(Second:($t@91@04))[i@92@04] != -1 | live]
(push) ; 12
; [then-branch: 88 | First:(Second:($t@91@04))[i@92@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@92@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 88 | First:(Second:($t@91@04))[i@92@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      i@92@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@92@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15934
;  :arith-add-rows          192
;  :arith-assert-diseq      728
;  :arith-assert-lower      1173
;  :arith-assert-upper      945
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        797
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2620
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6311
;  :mk-clause               2723
;  :num-allocs              5503895
;  :num-checks              431
;  :propagations            1883
;  :quant-instantiations    670
;  :rlimit-count            316674)
(push) ; 13
; [then-branch: 89 | 0 <= First:(Second:($t@91@04))[i@92@04] | live]
; [else-branch: 89 | !(0 <= First:(Second:($t@91@04))[i@92@04]) | live]
(push) ; 14
; [then-branch: 89 | 0 <= First:(Second:($t@91@04))[i@92@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@92@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@92@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15934
;  :arith-add-rows          192
;  :arith-assert-diseq      729
;  :arith-assert-lower      1176
;  :arith-assert-upper      945
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        798
;  :arith-fixed-eqs         391
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    384
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2620
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6314
;  :mk-clause               2724
;  :num-allocs              5503895
;  :num-checks              432
;  :propagations            1883
;  :quant-instantiations    670
;  :rlimit-count            316778)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 89 | !(0 <= First:(Second:($t@91@04))[i@92@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      i@92@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 87 | !(i@92@04 < |First:(Second:($t@91@04))| && 0 <= i@92@04)]
(assert (not
  (and
    (<
      i@92@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
    (<= 0 i@92@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@92@04 Int)) (!
  (implies
    (and
      (<
        i@92@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
      (<= 0 i@92@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
          i@92@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@92@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@92@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@92@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
  $Snap.unit))
; [eval] diz.Main_event_state == old(diz.Main_event_state)
; [eval] old(diz.Main_event_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
  __flatten_64__89@89@04))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))))
  $Snap.unit))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1) ==> diz.Main_process_state[0] == -1
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15954
;  :arith-add-rows          192
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6337
;  :mk-clause               2740
;  :num-allocs              5503895
;  :num-checks              433
;  :propagations            1889
;  :quant-instantiations    672
;  :rlimit-count            317807)
(push) ; 8
; [then-branch: 90 | 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 90 | !(0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 90 | 0 <= First:(Second:($t@74@04))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15954
;  :arith-add-rows          192
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6337
;  :mk-clause               2740
;  :num-allocs              5503895
;  :num-checks              434
;  :propagations            1889
;  :quant-instantiations    672
;  :rlimit-count            317907)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15954
;  :arith-add-rows          192
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6337
;  :mk-clause               2740
;  :num-allocs              5503895
;  :num-checks              435
;  :propagations            1889
;  :quant-instantiations    672
;  :rlimit-count            317916)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@89@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15954
;  :arith-add-rows          192
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6337
;  :mk-clause               2740
;  :num-allocs              5503895
;  :num-checks              436
;  :propagations            1889
;  :quant-instantiations    672
;  :rlimit-count            318004)
(push) ; 10
; [then-branch: 91 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 | live]
; [else-branch: 91 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] != 0 | live]
(push) ; 11
; [then-branch: 91 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_64__89@89@04
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 91 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_64__89@89@04
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15955
;  :arith-add-rows          193
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6342
;  :mk-clause               2745
;  :num-allocs              5503895
;  :num-checks              437
;  :propagations            1889
;  :quant-instantiations    673
;  :rlimit-count            318219)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15955
;  :arith-add-rows          193
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6342
;  :mk-clause               2745
;  :num-allocs              5503895
;  :num-checks              438
;  :propagations            1889
;  :quant-instantiations    673
;  :rlimit-count            318228)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@89@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15955
;  :arith-add-rows          193
;  :arith-assert-diseq      729
;  :arith-assert-lower      1177
;  :arith-assert-upper      946
;  :arith-bound-prop        124
;  :arith-conflicts         25
;  :arith-eq-adapter        800
;  :arith-fixed-eqs         392
;  :arith-offset-eqs        61
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    386
;  :datatype-constructor-ax 3379
;  :datatype-occurs-check   878
;  :datatype-splits         2158
;  :decisions               3486
;  :del-clause              2621
;  :final-checks            224
;  :interface-eqs           27
;  :max-generation          3
;  :max-memory              4.95
;  :memory                  4.95
;  :minimized-lits          71
;  :mk-bool-var             6342
;  :mk-clause               2745
;  :num-allocs              5503895
;  :num-checks              439
;  :propagations            1889
;  :quant-instantiations    673
;  :rlimit-count            318316)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 90 | !(0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               16342
;  :arith-add-rows          206
;  :arith-assert-diseq      748
;  :arith-assert-lower      1214
;  :arith-assert-upper      974
;  :arith-bound-prop        129
;  :arith-conflicts         25
;  :arith-eq-adapter        823
;  :arith-fixed-eqs         402
;  :arith-offset-eqs        61
;  :arith-pivots            415
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    391
;  :datatype-constructor-ax 3467
;  :datatype-occurs-check   903
;  :datatype-splits         2206
;  :decisions               3581
;  :del-clause              2719
;  :final-checks            229
;  :interface-eqs           28
;  :max-generation          3
;  :max-memory              5.06
;  :memory                  5.06
;  :minimized-lits          71
;  :mk-bool-var             6493
;  :mk-clause               2838
;  :num-allocs              5755537
;  :num-checks              440
;  :propagations            1945
;  :quant-instantiations    690
;  :rlimit-count            321457
;  :time                    0.00)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17139
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2899
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6829
;  :mk-clause               3018
;  :num-allocs              6262398
;  :num-checks              441
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            326578
;  :time                    0.00)
; [then-branch: 92 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 92 | !(__flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 92 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
; [eval] diz.Main_process_state[0] == -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17139
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2899
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6831
;  :mk-clause               3019
;  :num-allocs              6262398
;  :num-checks              442
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            326746)
; [eval] -1
(pop) ; 9
(push) ; 9
; [else-branch: 92 | !(__flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      0)
    (- 0 1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@91@04))))))))
  $Snap.unit))
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)) ==> diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] !(0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1))
; [eval] 0 <= old(diz.Main_process_state[0]) && (old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1)
; [eval] 0 <= old(diz.Main_process_state[0])
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17144
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6836
;  :mk-clause               3023
;  :num-allocs              6262398
;  :num-checks              443
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            327128)
(push) ; 8
; [then-branch: 93 | 0 <= First:(Second:($t@74@04))[0] | live]
; [else-branch: 93 | !(0 <= First:(Second:($t@74@04))[0]) | live]
(push) ; 9
; [then-branch: 93 | 0 <= First:(Second:($t@74@04))[0]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0 || old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == 0
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17144
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6836
;  :mk-clause               3023
;  :num-allocs              6262398
;  :num-checks              444
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            327228)
(push) ; 10
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17144
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6836
;  :mk-clause               3023
;  :num-allocs              6262398
;  :num-checks              445
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            327237)
(push) ; 10
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@89@04))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17144
;  :arith-add-rows          225
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6836
;  :mk-clause               3023
;  :num-allocs              6262398
;  :num-checks              446
;  :propagations            2050
;  :quant-instantiations    727
;  :rlimit-count            327325)
(push) ; 10
; [then-branch: 94 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 | live]
; [else-branch: 94 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] != 0 | live]
(push) ; 11
; [then-branch: 94 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0]
(assert (=
  (Seq_index
    __flatten_64__89@89@04
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))
  0))
(pop) ; 11
(push) ; 11
; [else-branch: 94 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] != 0]
(assert (not
  (=
    (Seq_index
      __flatten_64__89@89@04
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))
    0)))
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])]) == -1
; [eval] old(diz.Main_event_state[old(diz.Main_process_state[0])])
; [eval] diz.Main_event_state[old(diz.Main_process_state[0])]
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 12
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17145
;  :arith-add-rows          227
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6840
;  :mk-clause               3028
;  :num-allocs              6262398
;  :num-checks              447
;  :propagations            2050
;  :quant-instantiations    728
;  :rlimit-count            327483)
(push) ; 12
(assert (not (>=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17145
;  :arith-add-rows          227
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               374
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6840
;  :mk-clause               3028
;  :num-allocs              6262398
;  :num-checks              448
;  :propagations            2050
;  :quant-instantiations    728
;  :rlimit-count            327492)
(push) ; 12
(assert (not (<
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (Seq_length __flatten_64__89@89@04))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               17145
;  :arith-add-rows          227
;  :arith-assert-diseq      782
;  :arith-assert-lower      1288
;  :arith-assert-upper      1016
;  :arith-bound-prop        135
;  :arith-conflicts         26
;  :arith-eq-adapter        868
;  :arith-fixed-eqs         428
;  :arith-offset-eqs        64
;  :arith-pivots            439
;  :binary-propagations     16
;  :conflicts               375
;  :datatype-accessor-ax    404
;  :datatype-constructor-ax 3644
;  :datatype-occurs-check   952
;  :datatype-splits         2344
;  :decisions               3760
;  :del-clause              2900
;  :final-checks            236
;  :interface-eqs           29
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          75
;  :mk-bool-var             6840
;  :mk-clause               3028
;  :num-allocs              6262398
;  :num-checks              449
;  :propagations            2050
;  :quant-instantiations    728
;  :rlimit-count            327580)
; [eval] -1
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 93 | !(0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (and
  (or
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18058
;  :arith-add-rows          246
;  :arith-assert-diseq      818
;  :arith-assert-lower      1370
;  :arith-assert-upper      1062
;  :arith-bound-prop        141
;  :arith-conflicts         27
;  :arith-eq-adapter        918
;  :arith-fixed-eqs         453
;  :arith-offset-eqs        67
;  :arith-pivots            455
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 3853
;  :datatype-occurs-check   1007
;  :datatype-splits         2515
;  :decisions               3968
;  :del-clause              3099
;  :final-checks            245
;  :interface-eqs           31
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          79
;  :mk-bool-var             7223
;  :mk-clause               3222
;  :num-allocs              6775197
;  :num-checks              450
;  :propagations            2164
;  :quant-instantiations    768
;  :rlimit-count            333148
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18544
;  :arith-add-rows          256
;  :arith-assert-diseq      835
;  :arith-assert-lower      1400
;  :arith-assert-upper      1087
;  :arith-bound-prop        146
;  :arith-conflicts         27
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         462
;  :arith-offset-eqs        67
;  :arith-pivots            465
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 3968
;  :datatype-occurs-check   1038
;  :datatype-splits         2568
;  :decisions               4087
;  :del-clause              3184
;  :final-checks            251
;  :interface-eqs           32
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          79
;  :mk-bool-var             7377
;  :mk-clause               3307
;  :num-allocs              7291340
;  :num-checks              451
;  :propagations            2218
;  :quant-instantiations    783
;  :rlimit-count            336486
;  :time                    0.00)
; [then-branch: 95 | !(__flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]) | live]
; [else-branch: 95 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0] | live]
(push) ; 9
; [then-branch: 95 | !(__flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0])]
(assert (not
  (and
    (or
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        0)
      (=
        (Seq_index
          __flatten_64__89@89@04
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            0))
        (- 0 1)))
    (<=
      0
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
        0)))))
; [eval] diz.Main_process_state[0] == old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18545
;  :arith-add-rows          258
;  :arith-assert-diseq      835
;  :arith-assert-lower      1400
;  :arith-assert-upper      1087
;  :arith-bound-prop        146
;  :arith-conflicts         27
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         462
;  :arith-offset-eqs        67
;  :arith-pivots            465
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 3968
;  :datatype-occurs-check   1038
;  :datatype-splits         2568
;  :decisions               4087
;  :del-clause              3184
;  :final-checks            251
;  :interface-eqs           32
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          79
;  :mk-bool-var             7381
;  :mk-clause               3312
;  :num-allocs              7291340
;  :num-checks              452
;  :propagations            2220
;  :quant-instantiations    784
;  :rlimit-count            336674)
; [eval] old(diz.Main_process_state[0])
; [eval] diz.Main_process_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               18545
;  :arith-add-rows          258
;  :arith-assert-diseq      835
;  :arith-assert-lower      1400
;  :arith-assert-upper      1087
;  :arith-bound-prop        146
;  :arith-conflicts         27
;  :arith-eq-adapter        938
;  :arith-fixed-eqs         462
;  :arith-offset-eqs        67
;  :arith-pivots            465
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    430
;  :datatype-constructor-ax 3968
;  :datatype-occurs-check   1038
;  :datatype-splits         2568
;  :decisions               4087
;  :del-clause              3184
;  :final-checks            251
;  :interface-eqs           32
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          79
;  :mk-bool-var             7381
;  :mk-clause               3312
;  :num-allocs              7291340
;  :num-checks              453
;  :propagations            2220
;  :quant-instantiations    784
;  :rlimit-count            336689)
(pop) ; 9
(push) ; 9
; [else-branch: 95 | __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == 0 || __flatten_64__89@89@04[First:(Second:($t@74@04))[0]] == -1 && 0 <= First:(Second:($t@74@04))[0]]
(assert (and
  (or
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      0)
    (=
      (Seq_index
        __flatten_64__89@89@04
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))
      (- 0 1)))
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (and
      (or
        (=
          (Seq_index
            __flatten_64__89@89@04
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
              0))
          0)
        (=
          (Seq_index
            __flatten_64__89@89@04
            (Seq_index
              ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
              0))
          (- 0 1)))
      (<=
        0
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          0))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Main_reset_all_events_EncodedGlobalVariables(diz, globals)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@93@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 96 | 0 <= i@93@04 | live]
; [else-branch: 96 | !(0 <= i@93@04) | live]
(push) ; 10
; [then-branch: 96 | 0 <= i@93@04]
(assert (<= 0 i@93@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 96 | !(0 <= i@93@04)]
(assert (not (<= 0 i@93@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 97 | i@93@04 < |First:(Second:($t@91@04))| && 0 <= i@93@04 | live]
; [else-branch: 97 | !(i@93@04 < |First:(Second:($t@91@04))| && 0 <= i@93@04) | live]
(push) ; 10
; [then-branch: 97 | i@93@04 < |First:(Second:($t@91@04))| && 0 <= i@93@04]
(assert (and
  (<
    i@93@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
  (<= 0 i@93@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@93@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19342
;  :arith-add-rows          283
;  :arith-assert-diseq      873
;  :arith-assert-lower      1477
;  :arith-assert-upper      1130
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        984
;  :arith-fixed-eqs         493
;  :arith-offset-eqs        71
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    443
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3375
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7721
;  :mk-clause               3510
;  :num-allocs              7812126
;  :num-checks              455
;  :propagations            2336
;  :quant-instantiations    825
;  :rlimit-count            342078)
; [eval] -1
(push) ; 11
; [then-branch: 98 | First:(Second:($t@91@04))[i@93@04] == -1 | live]
; [else-branch: 98 | First:(Second:($t@91@04))[i@93@04] != -1 | live]
(push) ; 12
; [then-branch: 98 | First:(Second:($t@91@04))[i@93@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@93@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 98 | First:(Second:($t@91@04))[i@93@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      i@93@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@93@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19348
;  :arith-add-rows          284
;  :arith-assert-diseq      875
;  :arith-assert-lower      1481
;  :arith-assert-upper      1132
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        986
;  :arith-fixed-eqs         494
;  :arith-offset-eqs        71
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    443
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3375
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7730
;  :mk-clause               3515
;  :num-allocs              7812126
;  :num-checks              456
;  :propagations            2343
;  :quant-instantiations    827
;  :rlimit-count            342277)
(push) ; 13
; [then-branch: 99 | 0 <= First:(Second:($t@91@04))[i@93@04] | live]
; [else-branch: 99 | !(0 <= First:(Second:($t@91@04))[i@93@04]) | live]
(push) ; 14
; [then-branch: 99 | 0 <= First:(Second:($t@91@04))[i@93@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@93@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@93@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19350
;  :arith-add-rows          285
;  :arith-assert-diseq      875
;  :arith-assert-lower      1483
;  :arith-assert-upper      1133
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        987
;  :arith-fixed-eqs         495
;  :arith-offset-eqs        71
;  :arith-pivots            486
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    443
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3375
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7734
;  :mk-clause               3515
;  :num-allocs              7812126
;  :num-checks              457
;  :propagations            2343
;  :quant-instantiations    827
;  :rlimit-count            342394)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 99 | !(0 <= First:(Second:($t@91@04))[i@93@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
      i@93@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 97 | !(i@93@04 < |First:(Second:($t@91@04))| && 0 <= i@93@04)]
(assert (not
  (and
    (<
      i@93@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
    (<= 0 i@93@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@93@04 Int)) (!
  (implies
    (and
      (<
        i@93@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
      (<= 0 i@93@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
          i@93@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@93@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@93@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@93@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19350
;  :arith-add-rows          285
;  :arith-assert-diseq      877
;  :arith-assert-lower      1484
;  :arith-assert-upper      1134
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        988
;  :arith-fixed-eqs         496
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    443
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3394
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7742
;  :mk-clause               3529
;  :num-allocs              7812126
;  :num-checks              458
;  :propagations            2345
;  :quant-instantiations    828
;  :rlimit-count            342820)
(assert (forall ((i@93@04 Int)) (!
  (implies
    (and
      (<
        i@93@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
      (<= 0 i@93@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
          i@93@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@93@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
            i@93@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))
    i@93@04))
  :qid |prog.l<no position>|)))
(declare-const $t@94@04 $Snap)
(assert (= $t@94@04 ($Snap.combine ($Snap.first $t@94@04) ($Snap.second $t@94@04))))
(assert (=
  ($Snap.second $t@94@04)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@94@04))
    ($Snap.second ($Snap.second $t@94@04)))))
(assert (=
  ($Snap.second ($Snap.second $t@94@04))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@94@04)))
    ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@94@04))) $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@94@04)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@95@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 100 | 0 <= i@95@04 | live]
; [else-branch: 100 | !(0 <= i@95@04) | live]
(push) ; 10
; [then-branch: 100 | 0 <= i@95@04]
(assert (<= 0 i@95@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 100 | !(0 <= i@95@04)]
(assert (not (<= 0 i@95@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 101 | i@95@04 < |First:(Second:($t@94@04))| && 0 <= i@95@04 | live]
; [else-branch: 101 | !(i@95@04 < |First:(Second:($t@94@04))| && 0 <= i@95@04) | live]
(push) ; 10
; [then-branch: 101 | i@95@04 < |First:(Second:($t@94@04))| && 0 <= i@95@04]
(assert (and
  (<
    i@95@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
  (<= 0 i@95@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(push) ; 11
(assert (not (>= i@95@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19388
;  :arith-add-rows          285
;  :arith-assert-diseq      877
;  :arith-assert-lower      1489
;  :arith-assert-upper      1137
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        990
;  :arith-fixed-eqs         497
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    449
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3394
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7764
;  :mk-clause               3529
;  :num-allocs              7812126
;  :num-checks              459
;  :propagations            2345
;  :quant-instantiations    832
;  :rlimit-count            344213)
; [eval] -1
(push) ; 11
; [then-branch: 102 | First:(Second:($t@94@04))[i@95@04] == -1 | live]
; [else-branch: 102 | First:(Second:($t@94@04))[i@95@04] != -1 | live]
(push) ; 12
; [then-branch: 102 | First:(Second:($t@94@04))[i@95@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@95@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 102 | First:(Second:($t@94@04))[i@95@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
      i@95@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@95@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19388
;  :arith-add-rows          285
;  :arith-assert-diseq      877
;  :arith-assert-lower      1489
;  :arith-assert-upper      1137
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        990
;  :arith-fixed-eqs         497
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    449
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3394
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7765
;  :mk-clause               3529
;  :num-allocs              7812126
;  :num-checks              460
;  :propagations            2345
;  :quant-instantiations    832
;  :rlimit-count            344364)
(push) ; 13
; [then-branch: 103 | 0 <= First:(Second:($t@94@04))[i@95@04] | live]
; [else-branch: 103 | !(0 <= First:(Second:($t@94@04))[i@95@04]) | live]
(push) ; 14
; [then-branch: 103 | 0 <= First:(Second:($t@94@04))[i@95@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@95@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@95@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19388
;  :arith-add-rows          285
;  :arith-assert-diseq      878
;  :arith-assert-lower      1492
;  :arith-assert-upper      1137
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        991
;  :arith-fixed-eqs         497
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    449
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3394
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7768
;  :mk-clause               3530
;  :num-allocs              7812126
;  :num-checks              461
;  :propagations            2345
;  :quant-instantiations    832
;  :rlimit-count            344468)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 103 | !(0 <= First:(Second:($t@94@04))[i@95@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
      i@95@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 101 | !(i@95@04 < |First:(Second:($t@94@04))| && 0 <= i@95@04)]
(assert (not
  (and
    (<
      i@95@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
    (<= 0 i@95@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@95@04 Int)) (!
  (implies
    (and
      (<
        i@95@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
      (<= 0 i@95@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
          i@95@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@95@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@95@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@95@04))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
  $Snap.unit))
; [eval] diz.Main_process_state == old(diz.Main_process_state)
; [eval] old(diz.Main_process_state)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@91@04)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1 ==> diz.Main_event_state[0] == -2
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19405
;  :arith-add-rows          285
;  :arith-assert-diseq      878
;  :arith-assert-lower      1493
;  :arith-assert-upper      1138
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        992
;  :arith-fixed-eqs         498
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    451
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3395
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7787
;  :mk-clause               3540
;  :num-allocs              7812126
;  :num-checks              462
;  :propagations            2349
;  :quant-instantiations    834
;  :rlimit-count            345481)
(push) ; 8
; [then-branch: 104 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 | live]
; [else-branch: 104 | First:(Second:(Second:(Second:($t@91@04))))[0] != 0 | live]
(push) ; 9
; [then-branch: 104 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 104 | First:(Second:(Second:(Second:($t@91@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19406
;  :arith-add-rows          285
;  :arith-assert-diseq      878
;  :arith-assert-lower      1493
;  :arith-assert-upper      1138
;  :arith-bound-prop        153
;  :arith-conflicts         28
;  :arith-eq-adapter        992
;  :arith-fixed-eqs         498
;  :arith-offset-eqs        71
;  :arith-pivots            487
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    451
;  :datatype-constructor-ax 4142
;  :datatype-occurs-check   1087
;  :datatype-splits         2703
;  :decisions               4266
;  :del-clause              3395
;  :final-checks            258
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7788
;  :mk-clause               3541
;  :num-allocs              7812126
;  :num-checks              463
;  :propagations            2349
;  :quant-instantiations    835
;  :rlimit-count            345690)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               19831
;  :arith-add-rows          290
;  :arith-assert-diseq      899
;  :arith-assert-lower      1538
;  :arith-assert-upper      1153
;  :arith-bound-prop        158
;  :arith-conflicts         28
;  :arith-eq-adapter        1014
;  :arith-fixed-eqs         513
;  :arith-offset-eqs        74
;  :arith-pivots            502
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    458
;  :datatype-constructor-ax 4240
;  :datatype-occurs-check   1113
;  :datatype-splits         2755
;  :decisions               4369
;  :del-clause              3488
;  :final-checks            261
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          83
;  :mk-bool-var             7913
;  :mk-clause               3633
;  :num-allocs              7812126
;  :num-checks              464
;  :propagations            2405
;  :quant-instantiations    851
;  :rlimit-count            348783
;  :time                    0.00)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20518
;  :arith-add-rows          310
;  :arith-assert-diseq      960
;  :arith-assert-lower      1657
;  :arith-assert-upper      1203
;  :arith-bound-prop        168
;  :arith-conflicts         29
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         550
;  :arith-offset-eqs        88
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 4361
;  :datatype-occurs-check   1165
;  :datatype-splits         2899
;  :decisions               4501
;  :del-clause              3739
;  :final-checks            266
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          86
;  :mk-bool-var             8257
;  :mk-clause               3884
;  :num-allocs              7812126
;  :num-checks              465
;  :propagations            2583
;  :quant-instantiations    912
;  :rlimit-count            353607
;  :time                    0.01)
; [then-branch: 105 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1 | live]
; [else-branch: 105 | !(First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1) | live]
(push) ; 9
; [then-branch: 105 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    (- 0 1))))
; [eval] diz.Main_event_state[0] == -2
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20519
;  :arith-add-rows          310
;  :arith-assert-diseq      960
;  :arith-assert-lower      1657
;  :arith-assert-upper      1203
;  :arith-bound-prop        168
;  :arith-conflicts         29
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         550
;  :arith-offset-eqs        88
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    473
;  :datatype-constructor-ax 4361
;  :datatype-occurs-check   1165
;  :datatype-splits         2899
;  :decisions               4501
;  :del-clause              3739
;  :final-checks            266
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          86
;  :mk-bool-var             8259
;  :mk-clause               3885
;  :num-allocs              7812126
;  :num-checks              466
;  :propagations            2583
;  :quant-instantiations    912
;  :rlimit-count            353757)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 105 | !(First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
      0)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
  $Snap.unit))
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1 ==> diz.Main_event_state[1] == -2
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20526
;  :arith-add-rows          310
;  :arith-assert-diseq      960
;  :arith-assert-lower      1657
;  :arith-assert-upper      1203
;  :arith-bound-prop        168
;  :arith-conflicts         29
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         550
;  :arith-offset-eqs        88
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 4361
;  :datatype-occurs-check   1165
;  :datatype-splits         2899
;  :decisions               4501
;  :del-clause              3740
;  :final-checks            266
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          86
;  :mk-bool-var             8265
;  :mk-clause               3889
;  :num-allocs              7812126
;  :num-checks              467
;  :propagations            2583
;  :quant-instantiations    912
;  :rlimit-count            354241)
(push) ; 8
; [then-branch: 106 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 | live]
; [else-branch: 106 | First:(Second:(Second:(Second:($t@91@04))))[1] != 0 | live]
(push) ; 9
; [then-branch: 106 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 106 | First:(Second:(Second:(Second:($t@91@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               20527
;  :arith-add-rows          311
;  :arith-assert-diseq      960
;  :arith-assert-lower      1657
;  :arith-assert-upper      1203
;  :arith-bound-prop        168
;  :arith-conflicts         29
;  :arith-eq-adapter        1077
;  :arith-fixed-eqs         550
;  :arith-offset-eqs        88
;  :arith-pivots            529
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    474
;  :datatype-constructor-ax 4361
;  :datatype-occurs-check   1165
;  :datatype-splits         2899
;  :decisions               4501
;  :del-clause              3740
;  :final-checks            266
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          86
;  :mk-bool-var             8270
;  :mk-clause               3895
;  :num-allocs              7812126
;  :num-checks              468
;  :propagations            2583
;  :quant-instantiations    913
;  :rlimit-count            354426)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               21451
;  :arith-add-rows          320
;  :arith-assert-diseq      998
;  :arith-assert-lower      1738
;  :arith-assert-upper      1241
;  :arith-bound-prop        169
;  :arith-conflicts         31
;  :arith-eq-adapter        1116
;  :arith-fixed-eqs         584
;  :arith-offset-eqs        107
;  :arith-pivots            549
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 4541
;  :datatype-occurs-check   1226
;  :datatype-splits         3013
;  :decisions               4685
;  :del-clause              3901
;  :final-checks            273
;  :interface-eqs           33
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          91
;  :mk-bool-var             8543
;  :mk-clause               4050
;  :num-allocs              7812126
;  :num-checks              469
;  :propagations            2739
;  :quant-instantiations    956
;  :rlimit-count            359886
;  :time                    0.01)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22227
;  :arith-add-rows          332
;  :arith-assert-diseq      1056
;  :arith-assert-lower      1853
;  :arith-assert-upper      1282
;  :arith-bound-prop        176
;  :arith-conflicts         31
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         628
;  :arith-offset-eqs        123
;  :arith-pivots            579
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 4692
;  :datatype-occurs-check   1280
;  :datatype-splits         3119
;  :decisions               4843
;  :del-clause              4122
;  :final-checks            280
;  :interface-eqs           34
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          95
;  :mk-bool-var             8837
;  :mk-clause               4271
;  :num-allocs              7812126
;  :num-checks              470
;  :propagations            2911
;  :quant-instantiations    1003
;  :rlimit-count            364976
;  :time                    0.01)
; [then-branch: 107 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1 | live]
; [else-branch: 107 | !(First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1) | live]
(push) ; 9
; [then-branch: 107 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    (- 0 1))))
; [eval] diz.Main_event_state[1] == -2
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22227
;  :arith-add-rows          332
;  :arith-assert-diseq      1056
;  :arith-assert-lower      1853
;  :arith-assert-upper      1282
;  :arith-bound-prop        176
;  :arith-conflicts         31
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         628
;  :arith-offset-eqs        123
;  :arith-pivots            579
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 4692
;  :datatype-occurs-check   1280
;  :datatype-splits         3119
;  :decisions               4843
;  :del-clause              4122
;  :final-checks            280
;  :interface-eqs           34
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          95
;  :mk-bool-var             8839
;  :mk-clause               4272
;  :num-allocs              7812126
;  :num-checks              471
;  :propagations            2911
;  :quant-instantiations    1003
;  :rlimit-count            365125)
; [eval] -2
(pop) ; 9
(push) ; 9
; [else-branch: 107 | !(First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      (- 0 1)))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      (- 0 1)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
      1)
    (- 0 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1) ==> diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] !(old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1)
; [eval] old(diz.Main_event_state[0]) == 0 || old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0]) == 0
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 8
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22233
;  :arith-add-rows          332
;  :arith-assert-diseq      1056
;  :arith-assert-lower      1853
;  :arith-assert-upper      1282
;  :arith-bound-prop        176
;  :arith-conflicts         31
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         628
;  :arith-offset-eqs        123
;  :arith-pivots            579
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 4692
;  :datatype-occurs-check   1280
;  :datatype-splits         3119
;  :decisions               4843
;  :del-clause              4123
;  :final-checks            280
;  :interface-eqs           34
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          95
;  :mk-bool-var             8845
;  :mk-clause               4276
;  :num-allocs              7812126
;  :num-checks              472
;  :propagations            2911
;  :quant-instantiations    1003
;  :rlimit-count            365614)
(push) ; 8
; [then-branch: 108 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 | live]
; [else-branch: 108 | First:(Second:(Second:(Second:($t@91@04))))[0] != 0 | live]
(push) ; 9
; [then-branch: 108 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
    0)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 108 | First:(Second:(Second:(Second:($t@91@04))))[0] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)))
; [eval] old(diz.Main_event_state[0]) == -1
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               22233
;  :arith-add-rows          332
;  :arith-assert-diseq      1056
;  :arith-assert-lower      1853
;  :arith-assert-upper      1282
;  :arith-bound-prop        176
;  :arith-conflicts         31
;  :arith-eq-adapter        1172
;  :arith-fixed-eqs         628
;  :arith-offset-eqs        123
;  :arith-pivots            579
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    508
;  :datatype-constructor-ax 4692
;  :datatype-occurs-check   1280
;  :datatype-splits         3119
;  :decisions               4843
;  :del-clause              4123
;  :final-checks            280
;  :interface-eqs           34
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          95
;  :mk-bool-var             8845
;  :mk-clause               4277
;  :num-allocs              7812126
;  :num-checks              473
;  :propagations            2911
;  :quant-instantiations    1004
;  :rlimit-count            365778)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23067
;  :arith-add-rows          349
;  :arith-assert-diseq      1118
;  :arith-assert-lower      1976
;  :arith-assert-upper      1334
;  :arith-bound-prop        186
;  :arith-conflicts         31
;  :arith-eq-adapter        1235
;  :arith-fixed-eqs         670
;  :arith-offset-eqs        138
;  :arith-pivots            611
;  :binary-propagations     16
;  :conflicts               441
;  :datatype-accessor-ax    522
;  :datatype-constructor-ax 4844
;  :datatype-occurs-check   1334
;  :datatype-splits         3225
;  :decisions               5008
;  :del-clause              4395
;  :final-checks            286
;  :interface-eqs           34
;  :max-generation          3
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          98
;  :mk-bool-var             9176
;  :mk-clause               4548
;  :num-allocs              7812126
;  :num-checks              474
;  :propagations            3102
;  :quant-instantiations    1071
;  :rlimit-count            371300
;  :time                    0.01)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23851
;  :arith-add-rows          362
;  :arith-assert-diseq      1168
;  :arith-assert-lower      2082
;  :arith-assert-upper      1371
;  :arith-bound-prop        193
;  :arith-conflicts         31
;  :arith-eq-adapter        1287
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        155
;  :arith-pivots            637
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 4995
;  :datatype-occurs-check   1388
;  :datatype-splits         3331
;  :decisions               5172
;  :del-clause              4606
;  :final-checks            292
;  :interface-eqs           34
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          102
;  :mk-bool-var             9470
;  :mk-clause               4759
;  :num-allocs              7812126
;  :num-checks              475
;  :propagations            3252
;  :quant-instantiations    1115
;  :rlimit-count            376399
;  :time                    0.00)
; [then-branch: 109 | !(First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1) | live]
; [else-branch: 109 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1 | live]
(push) ; 9
; [then-branch: 109 | !(First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        0)
      (- 0 1)))))
; [eval] diz.Main_event_state[0] == old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23851
;  :arith-add-rows          362
;  :arith-assert-diseq      1168
;  :arith-assert-lower      2082
;  :arith-assert-upper      1371
;  :arith-bound-prop        193
;  :arith-conflicts         31
;  :arith-eq-adapter        1287
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        155
;  :arith-pivots            637
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 4995
;  :datatype-occurs-check   1388
;  :datatype-splits         3331
;  :decisions               5172
;  :del-clause              4606
;  :final-checks            292
;  :interface-eqs           34
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          102
;  :mk-bool-var             9470
;  :mk-clause               4760
;  :num-allocs              7812126
;  :num-checks              476
;  :propagations            3253
;  :quant-instantiations    1116
;  :rlimit-count            376584)
; [eval] old(diz.Main_event_state[0])
; [eval] diz.Main_event_state[0]
(push) ; 10
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23851
;  :arith-add-rows          362
;  :arith-assert-diseq      1168
;  :arith-assert-lower      2082
;  :arith-assert-upper      1371
;  :arith-bound-prop        193
;  :arith-conflicts         31
;  :arith-eq-adapter        1287
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        155
;  :arith-pivots            637
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 4995
;  :datatype-occurs-check   1388
;  :datatype-splits         3331
;  :decisions               5172
;  :del-clause              4606
;  :final-checks            292
;  :interface-eqs           34
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          102
;  :mk-bool-var             9470
;  :mk-clause               4760
;  :num-allocs              7812126
;  :num-checks              477
;  :propagations            3253
;  :quant-instantiations    1116
;  :rlimit-count            376599)
(pop) ; 9
(push) ; 9
; [else-branch: 109 | First:(Second:(Second:(Second:($t@91@04))))[0] == 0 || First:(Second:(Second:(Second:($t@91@04))))[0] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
          0)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
          0)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
      0)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      0))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@94@04))))))))))
  $Snap.unit))
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1) ==> diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] !(old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1)
; [eval] old(diz.Main_event_state[1]) == 0 || old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1]) == 0
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 8
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23858
;  :arith-add-rows          362
;  :arith-assert-diseq      1168
;  :arith-assert-lower      2082
;  :arith-assert-upper      1371
;  :arith-bound-prop        193
;  :arith-conflicts         31
;  :arith-eq-adapter        1287
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        155
;  :arith-pivots            637
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 4995
;  :datatype-occurs-check   1388
;  :datatype-splits         3331
;  :decisions               5172
;  :del-clause              4607
;  :final-checks            292
;  :interface-eqs           34
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          102
;  :mk-bool-var             9472
;  :mk-clause               4761
;  :num-allocs              7812126
;  :num-checks              478
;  :propagations            3253
;  :quant-instantiations    1116
;  :rlimit-count            376951)
(push) ; 8
; [then-branch: 110 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 | live]
; [else-branch: 110 | First:(Second:(Second:(Second:($t@91@04))))[1] != 0 | live]
(push) ; 9
; [then-branch: 110 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
    1)
  0))
(pop) ; 9
(push) ; 9
; [else-branch: 110 | First:(Second:(Second:(Second:($t@91@04))))[1] != 0]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)))
; [eval] old(diz.Main_event_state[1]) == -1
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               23859
;  :arith-add-rows          363
;  :arith-assert-diseq      1168
;  :arith-assert-lower      2082
;  :arith-assert-upper      1371
;  :arith-bound-prop        193
;  :arith-conflicts         31
;  :arith-eq-adapter        1287
;  :arith-fixed-eqs         713
;  :arith-offset-eqs        155
;  :arith-pivots            637
;  :binary-propagations     16
;  :conflicts               447
;  :datatype-accessor-ax    536
;  :datatype-constructor-ax 4995
;  :datatype-occurs-check   1388
;  :datatype-splits         3331
;  :decisions               5172
;  :del-clause              4607
;  :final-checks            292
;  :interface-eqs           34
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          102
;  :mk-bool-var             9476
;  :mk-clause               4767
;  :num-allocs              7812126
;  :num-checks              479
;  :propagations            3253
;  :quant-instantiations    1117
;  :rlimit-count            377120)
; [eval] -1
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(push) ; 9
(assert (not (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               24636
;  :arith-add-rows          376
;  :arith-assert-diseq      1226
;  :arith-assert-lower      2197
;  :arith-assert-upper      1411
;  :arith-bound-prop        200
;  :arith-conflicts         31
;  :arith-eq-adapter        1342
;  :arith-fixed-eqs         759
;  :arith-offset-eqs        169
;  :arith-pivots            663
;  :binary-propagations     16
;  :conflicts               453
;  :datatype-accessor-ax    550
;  :datatype-constructor-ax 5143
;  :datatype-occurs-check   1438
;  :datatype-splits         3434
;  :decisions               5327
;  :del-clause              4837
;  :final-checks            299
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          106
;  :mk-bool-var             9766
;  :mk-clause               4991
;  :num-allocs              7812126
;  :num-checks              480
;  :propagations            3430
;  :quant-instantiations    1165
;  :rlimit-count            382204
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      (- 0 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25554
;  :arith-add-rows          397
;  :arith-assert-diseq      1264
;  :arith-assert-lower      2278
;  :arith-assert-upper      1449
;  :arith-bound-prop        201
;  :arith-conflicts         33
;  :arith-eq-adapter        1381
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        188
;  :arith-pivots            686
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 5321
;  :datatype-occurs-check   1494
;  :datatype-splits         3546
;  :decisions               5512
;  :del-clause              4992
;  :final-checks            306
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          111
;  :mk-bool-var             10035
;  :mk-clause               5146
;  :num-allocs              7812126
;  :num-checks              481
;  :propagations            3587
;  :quant-instantiations    1208
;  :rlimit-count            387862
;  :time                    0.00)
; [then-branch: 111 | !(First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1) | live]
; [else-branch: 111 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1 | live]
(push) ; 9
; [then-branch: 111 | !(First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1)]
(assert (not
  (or
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      0)
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
        1)
      (- 0 1)))))
; [eval] diz.Main_event_state[1] == old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25555
;  :arith-add-rows          398
;  :arith-assert-diseq      1264
;  :arith-assert-lower      2278
;  :arith-assert-upper      1449
;  :arith-bound-prop        201
;  :arith-conflicts         33
;  :arith-eq-adapter        1381
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        188
;  :arith-pivots            686
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 5321
;  :datatype-occurs-check   1494
;  :datatype-splits         3546
;  :decisions               5512
;  :del-clause              4992
;  :final-checks            306
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          111
;  :mk-bool-var             10039
;  :mk-clause               5152
;  :num-allocs              7812126
;  :num-checks              482
;  :propagations            3588
;  :quant-instantiations    1209
;  :rlimit-count            388052)
; [eval] old(diz.Main_event_state[1])
; [eval] diz.Main_event_state[1]
(push) ; 10
(assert (not (<
  1
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               25555
;  :arith-add-rows          398
;  :arith-assert-diseq      1264
;  :arith-assert-lower      2278
;  :arith-assert-upper      1449
;  :arith-bound-prop        201
;  :arith-conflicts         33
;  :arith-eq-adapter        1381
;  :arith-fixed-eqs         793
;  :arith-offset-eqs        188
;  :arith-pivots            686
;  :binary-propagations     16
;  :conflicts               465
;  :datatype-accessor-ax    569
;  :datatype-constructor-ax 5321
;  :datatype-occurs-check   1494
;  :datatype-splits         3546
;  :decisions               5512
;  :del-clause              4992
;  :final-checks            306
;  :interface-eqs           35
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          111
;  :mk-bool-var             10039
;  :mk-clause               5152
;  :num-allocs              7812126
;  :num-checks              483
;  :propagations            3588
;  :quant-instantiations    1209
;  :rlimit-count            388067)
(pop) ; 9
(push) ; 9
; [else-branch: 111 | First:(Second:(Second:(Second:($t@91@04))))[1] == 0 || First:(Second:(Second:(Second:($t@91@04))))[1] == -1]
(assert (or
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    0)
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1)
    (- 0 1))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (implies
  (not
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
          1)
        0)
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
          1)
        (- 0 1))))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))
      1)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@91@04)))))
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@96@04 Int)
(push) ; 8
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 9
; [then-branch: 112 | 0 <= i@96@04 | live]
; [else-branch: 112 | !(0 <= i@96@04) | live]
(push) ; 10
; [then-branch: 112 | 0 <= i@96@04]
(assert (<= 0 i@96@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 10
(push) ; 10
; [else-branch: 112 | !(0 <= i@96@04)]
(assert (not (<= 0 i@96@04)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 113 | i@96@04 < |First:(Second:($t@94@04))| && 0 <= i@96@04 | live]
; [else-branch: 113 | !(i@96@04 < |First:(Second:($t@94@04))| && 0 <= i@96@04) | live]
(push) ; 10
; [then-branch: 113 | i@96@04 < |First:(Second:($t@94@04))| && 0 <= i@96@04]
(assert (and
  (<
    i@96@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
  (<= 0 i@96@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@96@04 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26320
;  :arith-add-rows          413
;  :arith-assert-diseq      1320
;  :arith-assert-lower      2390
;  :arith-assert-upper      1487
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1435
;  :arith-fixed-eqs         834
;  :arith-offset-eqs        202
;  :arith-pivots            716
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5235
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10337
;  :mk-clause               5391
;  :num-allocs              7812126
;  :num-checks              485
;  :propagations            3764
;  :quant-instantiations    1255
;  :rlimit-count            393369)
; [eval] -1
(push) ; 11
; [then-branch: 114 | First:(Second:($t@94@04))[i@96@04] == -1 | live]
; [else-branch: 114 | First:(Second:($t@94@04))[i@96@04] != -1 | live]
(push) ; 12
; [then-branch: 114 | First:(Second:($t@94@04))[i@96@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@96@04)
  (- 0 1)))
(pop) ; 12
(push) ; 12
; [else-branch: 114 | First:(Second:($t@94@04))[i@96@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
      i@96@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 13
(assert (not (>= i@96@04 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26330
;  :arith-add-rows          415
;  :arith-assert-diseq      1323
;  :arith-assert-lower      2398
;  :arith-assert-upper      1491
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1439
;  :arith-fixed-eqs         836
;  :arith-offset-eqs        202
;  :arith-pivots            718
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5235
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10355
;  :mk-clause               5408
;  :num-allocs              7812126
;  :num-checks              486
;  :propagations            3776
;  :quant-instantiations    1259
;  :rlimit-count            393641)
(push) ; 13
; [then-branch: 115 | 0 <= First:(Second:($t@94@04))[i@96@04] | live]
; [else-branch: 115 | !(0 <= First:(Second:($t@94@04))[i@96@04]) | live]
(push) ; 14
; [then-branch: 115 | 0 <= First:(Second:($t@94@04))[i@96@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@96@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 15
(assert (not (>= i@96@04 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1323
;  :arith-assert-lower      2400
;  :arith-assert-upper      1492
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1440
;  :arith-fixed-eqs         837
;  :arith-offset-eqs        202
;  :arith-pivots            719
;  :binary-propagations     16
;  :conflicts               471
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5235
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10359
;  :mk-clause               5408
;  :num-allocs              7812126
;  :num-checks              487
;  :propagations            3776
;  :quant-instantiations    1259
;  :rlimit-count            393758)
; [eval] |diz.Main_event_state|
(pop) ; 14
(push) ; 14
; [else-branch: 115 | !(0 <= First:(Second:($t@94@04))[i@96@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
      i@96@04))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 113 | !(i@96@04 < |First:(Second:($t@94@04))| && 0 <= i@96@04)]
(assert (not
  (and
    (<
      i@96@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
    (<= 0 i@96@04))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 8
(assert (not (forall ((i@96@04 Int)) (!
  (implies
    (and
      (<
        i@96@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
      (<= 0 i@96@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
          i@96@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@96@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@96@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@96@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1325
;  :arith-assert-lower      2401
;  :arith-assert-upper      1493
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1441
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               472
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10371
;  :mk-clause               5428
;  :num-allocs              7812126
;  :num-checks              488
;  :propagations            3778
;  :quant-instantiations    1262
;  :rlimit-count            394261)
(assert (forall ((i@96@04 Int)) (!
  (implies
    (and
      (<
        i@96@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))))
      (<= 0 i@96@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
          i@96@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@96@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
            i@96@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@94@04)))
    i@96@04))
  :qid |prog.l<no position>|)))
(declare-const $k@97@04 $Perm)
(assert ($Perm.isReadVar $k@97@04 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@97@04 $Perm.No) (< $Perm.No $k@97@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2403
;  :arith-assert-upper      1494
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10376
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              489
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            394786)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@65@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2403
;  :arith-assert-upper      1494
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               473
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10376
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              490
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            394797)
(assert (< $k@97@04 $k@65@04))
(assert (<= $Perm.No (- $k@65@04 $k@97@04)))
(assert (<= (- $k@65@04 $k@97@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@04 $k@97@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_alu != null
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               474
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              491
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395005)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               475
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              492
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395053)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               476
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              493
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395101)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               477
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              494
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395149)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               478
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              495
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395197)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               479
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              496
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395245)
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               480
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              497
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395293)
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               481
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              498
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395341)
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1326
;  :arith-assert-lower      2405
;  :arith-assert-upper      1495
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1442
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               482
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10379
;  :mk-clause               5430
;  :num-allocs              7812126
;  :num-checks              499
;  :propagations            3779
;  :quant-instantiations    1262
;  :rlimit-count            395389)
(declare-const $k@98@04 $Perm)
(assert ($Perm.isReadVar $k@98@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@98@04 $Perm.No) (< $Perm.No $k@98@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2407
;  :arith-assert-upper      1496
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10383
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              500
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395588)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@66@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2407
;  :arith-assert-upper      1496
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               483
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10383
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              501
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395599)
(assert (< $k@98@04 $k@66@04))
(assert (<= $Perm.No (- $k@66@04 $k@98@04)))
(assert (<= (- $k@66@04 $k@98@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@04 $k@98@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_dr != null
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              502
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395807)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               484
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              503
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395820)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               485
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              504
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395868)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               486
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              505
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395916)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               487
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              506
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            395964)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               488
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              507
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            396012)
(push) ; 8
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1327
;  :arith-assert-lower      2409
;  :arith-assert-upper      1497
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1443
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               489
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10386
;  :mk-clause               5432
;  :num-allocs              7812126
;  :num-checks              508
;  :propagations            3780
;  :quant-instantiations    1262
;  :rlimit-count            396060)
(declare-const $k@99@04 $Perm)
(assert ($Perm.isReadVar $k@99@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@99@04 $Perm.No) (< $Perm.No $k@99@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1328
;  :arith-assert-lower      2411
;  :arith-assert-upper      1498
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1444
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10390
;  :mk-clause               5434
;  :num-allocs              7812126
;  :num-checks              509
;  :propagations            3781
;  :quant-instantiations    1262
;  :rlimit-count            396259)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@67@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1328
;  :arith-assert-lower      2411
;  :arith-assert-upper      1498
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1444
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               490
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10390
;  :mk-clause               5434
;  :num-allocs              7812126
;  :num-checks              510
;  :propagations            3781
;  :quant-instantiations    1262
;  :rlimit-count            396270)
(assert (< $k@99@04 $k@67@04))
(assert (<= $Perm.No (- $k@67@04 $k@99@04)))
(assert (<= (- $k@67@04 $k@99@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@67@04 $k@99@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_mon != null
(push) ; 8
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1328
;  :arith-assert-lower      2413
;  :arith-assert-upper      1499
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1444
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10393
;  :mk-clause               5434
;  :num-allocs              7812126
;  :num-checks              511
;  :propagations            3781
;  :quant-instantiations    1262
;  :rlimit-count            396478)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1328
;  :arith-assert-lower      2413
;  :arith-assert-upper      1499
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1444
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               491
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10393
;  :mk-clause               5434
;  :num-allocs              7812126
;  :num-checks              512
;  :propagations            3781
;  :quant-instantiations    1262
;  :rlimit-count            396491)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1328
;  :arith-assert-lower      2413
;  :arith-assert-upper      1499
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1444
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               492
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10393
;  :mk-clause               5434
;  :num-allocs              7812126
;  :num-checks              513
;  :propagations            3781
;  :quant-instantiations    1262
;  :rlimit-count            396539)
(declare-const $k@100@04 $Perm)
(assert ($Perm.isReadVar $k@100@04 $Perm.Write))
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2415
;  :arith-assert-upper      1500
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               493
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10397
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              514
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            396736)
(set-option :timeout 0)
(push) ; 8
(assert (not (or (= $k@100@04 $Perm.No) (< $Perm.No $k@100@04))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2415
;  :arith-assert-upper      1500
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10397
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              515
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            396786)
(set-option :timeout 10)
(push) ; 8
(assert (not (not (= $k@68@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2415
;  :arith-assert-upper      1500
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               494
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10397
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              516
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            396797)
(assert (< $k@100@04 $k@68@04))
(assert (<= $Perm.No (- $k@68@04 $k@100@04)))
(assert (<= (- $k@68@04 $k@100@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@04 $k@100@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
      $Ref.null))))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 8
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2417
;  :arith-assert-upper      1501
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               495
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10400
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              517
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            397005)
(push) ; 8
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          416
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2417
;  :arith-assert-upper      1501
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            722
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5272
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10400
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              518
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            397053)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@94@04))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@94@04))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
                                                          $Snap.unit))))))))))))))))))))))))))))) diz@31@04 globals@32@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 7
(push) ; 7
; [else-branch: 79 | min_advance__90@76@04 == -1]
(assert (= min_advance__90@76@04 (- 0 1)))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 41 | First:(Second:($t@74@04))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (- 0 1)))
(pop) ; 6
; [eval] !(diz.Main_process_state[0] != -1)
; [eval] diz.Main_process_state[0] != -1
; [eval] diz.Main_process_state[0]
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26332
;  :arith-add-rows          419
;  :arith-assert-diseq      1329
;  :arith-assert-lower      2417
;  :arith-assert-upper      1501
;  :arith-bound-prop        208
;  :arith-conflicts         33
;  :arith-eq-adapter        1445
;  :arith-fixed-eqs         838
;  :arith-offset-eqs        202
;  :arith-pivots            727
;  :binary-propagations     16
;  :conflicts               496
;  :datatype-accessor-ax    583
;  :datatype-constructor-ax 5469
;  :datatype-occurs-check   1544
;  :datatype-splits         3649
;  :decisions               5668
;  :del-clause              5408
;  :final-checks            313
;  :interface-eqs           36
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          115
;  :mk-bool-var             10400
;  :mk-clause               5436
;  :num-allocs              7812126
;  :num-checks              519
;  :propagations            3782
;  :quant-instantiations    1262
;  :rlimit-count            397325)
; [eval] -1
(set-option :timeout 10)
(push) ; 6
(assert (not (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)
    (- 0 1)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26643
;  :arith-add-rows          420
;  :arith-assert-diseq      1334
;  :arith-assert-lower      2431
;  :arith-assert-upper      1508
;  :arith-bound-prop        212
;  :arith-conflicts         33
;  :arith-eq-adapter        1455
;  :arith-fixed-eqs         844
;  :arith-offset-eqs        202
;  :arith-pivots            734
;  :binary-propagations     16
;  :conflicts               501
;  :datatype-accessor-ax    590
;  :datatype-constructor-ax 5544
;  :datatype-occurs-check   1570
;  :datatype-splits         3697
;  :decisions               5740
;  :del-clause              5447
;  :final-checks            319
;  :interface-eqs           37
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10503
;  :mk-clause               5475
;  :num-allocs              7812126
;  :num-checks              520
;  :propagations            3801
;  :quant-instantiations    1266
;  :rlimit-count            399413
;  :time                    0.00)
(push) ; 6
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (- 0 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26834
;  :arith-add-rows          423
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2447
;  :arith-assert-upper      1517
;  :arith-bound-prop        212
;  :arith-conflicts         33
;  :arith-eq-adapter        1464
;  :arith-fixed-eqs         848
;  :arith-offset-eqs        202
;  :arith-pivots            740
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5480
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10572
;  :mk-clause               5508
;  :num-allocs              7812126
;  :num-checks              521
;  :propagations            3826
;  :quant-instantiations    1273
;  :rlimit-count            401150
;  :time                    0.00)
; [then-branch: 116 | First:(Second:($t@74@04))[0] == -1 | live]
; [else-branch: 116 | First:(Second:($t@74@04))[0] != -1 | live]
(push) ; 6
; [then-branch: 116 | First:(Second:($t@74@04))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    0)
  (- 0 1)))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@101@04 Int)
(push) ; 7
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 8
; [then-branch: 117 | 0 <= i@101@04 | live]
; [else-branch: 117 | !(0 <= i@101@04) | live]
(push) ; 9
; [then-branch: 117 | 0 <= i@101@04]
(assert (<= 0 i@101@04))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 117 | !(0 <= i@101@04)]
(assert (not (<= 0 i@101@04)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 118 | i@101@04 < |First:(Second:($t@74@04))| && 0 <= i@101@04 | live]
; [else-branch: 118 | !(i@101@04 < |First:(Second:($t@74@04))| && 0 <= i@101@04) | live]
(push) ; 9
; [then-branch: 118 | i@101@04 < |First:(Second:($t@74@04))| && 0 <= i@101@04]
(assert (and
  (<
    i@101@04
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
  (<= 0 i@101@04)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 10
(assert (not (>= i@101@04 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26840
;  :arith-add-rows          424
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2450
;  :arith-assert-upper      1520
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1465
;  :arith-fixed-eqs         850
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               502
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5480
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10577
;  :mk-clause               5513
;  :num-allocs              7812126
;  :num-checks              522
;  :propagations            3829
;  :quant-instantiations    1273
;  :rlimit-count            401424)
; [eval] -1
(push) ; 10
; [then-branch: 119 | First:(Second:($t@74@04))[i@101@04] == -1 | live]
; [else-branch: 119 | First:(Second:($t@74@04))[i@101@04] != -1 | live]
(push) ; 11
; [then-branch: 119 | First:(Second:($t@74@04))[i@101@04] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@101@04)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 119 | First:(Second:($t@74@04))[i@101@04] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@101@04)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 12
(assert (not (>= i@101@04 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2450
;  :arith-assert-upper      1520
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1465
;  :arith-fixed-eqs         850
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5480
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10578
;  :mk-clause               5513
;  :num-allocs              7812126
;  :num-checks              523
;  :propagations            3829
;  :quant-instantiations    1273
;  :rlimit-count            401568)
(push) ; 12
; [then-branch: 120 | 0 <= First:(Second:($t@74@04))[i@101@04] | live]
; [else-branch: 120 | !(0 <= First:(Second:($t@74@04))[i@101@04]) | live]
(push) ; 13
; [then-branch: 120 | 0 <= First:(Second:($t@74@04))[i@101@04]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@101@04)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 14
(assert (not (>= i@101@04 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1338
;  :arith-assert-lower      2450
;  :arith-assert-upper      1520
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1465
;  :arith-fixed-eqs         850
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               503
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5480
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10579
;  :mk-clause               5513
;  :num-allocs              7812126
;  :num-checks              524
;  :propagations            3829
;  :quant-instantiations    1273
;  :rlimit-count            401653)
; [eval] |diz.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 120 | !(0 <= First:(Second:($t@74@04))[i@101@04])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      i@101@04))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 118 | !(i@101@04 < |First:(Second:($t@74@04))| && 0 <= i@101@04)]
(assert (not
  (and
    (<
      i@101@04
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
    (<= 0 i@101@04))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i@101@04 Int)) (!
  (implies
    (and
      (<
        i@101@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@101@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@101@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@101@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@101@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@101@04))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1340
;  :arith-assert-lower      2451
;  :arith-assert-upper      1521
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1466
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               504
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10591
;  :mk-clause               5533
;  :num-allocs              7812126
;  :num-checks              525
;  :propagations            3831
;  :quant-instantiations    1276
;  :rlimit-count            402138)
(assert (forall ((i@101@04 Int)) (!
  (implies
    (and
      (<
        i@101@04
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))))
      (<= 0 i@101@04))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
          i@101@04)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@101@04)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04)))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
            i@101@04)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
    i@101@04))
  :qid |prog.l<no position>|)))
(declare-const $k@102@04 $Perm)
(assert ($Perm.isReadVar $k@102@04 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@102@04 $Perm.No) (< $Perm.No $k@102@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2453
;  :arith-assert-upper      1522
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10596
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              526
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            402665)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@65@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2453
;  :arith-assert-upper      1522
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               505
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10596
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              527
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            402676)
(assert (< $k@102@04 $k@65@04))
(assert (<= $Perm.No (- $k@65@04 $k@102@04)))
(assert (<= (- $k@65@04 $k@102@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@65@04 $k@102@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               506
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              528
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            402884)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               507
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              529
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            402932)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               508
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              530
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            402980)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               509
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              531
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403028)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               510
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              532
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403076)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               511
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              533
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403124)
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               512
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              534
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403172)
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               513
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              535
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403220)
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1341
;  :arith-assert-lower      2455
;  :arith-assert-upper      1523
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1467
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               514
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10599
;  :mk-clause               5535
;  :num-allocs              7812126
;  :num-checks              536
;  :propagations            3832
;  :quant-instantiations    1276
;  :rlimit-count            403268)
(declare-const $k@103@04 $Perm)
(assert ($Perm.isReadVar $k@103@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@103@04 $Perm.No) (< $Perm.No $k@103@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2457
;  :arith-assert-upper      1524
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10603
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              537
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403467)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@66@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2457
;  :arith-assert-upper      1524
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               515
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10603
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              538
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403478)
(assert (< $k@103@04 $k@66@04))
(assert (<= $Perm.No (- $k@66@04 $k@103@04)))
(assert (<= (- $k@66@04 $k@103@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@66@04 $k@103@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              539
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403686)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               516
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              540
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403699)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               517
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              541
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403747)
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               518
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              542
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403795)
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               519
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              543
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403843)
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               520
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              544
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403891)
(push) ; 7
(assert (not (< $Perm.No $k@66@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1342
;  :arith-assert-lower      2459
;  :arith-assert-upper      1525
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1468
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               521
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10606
;  :mk-clause               5537
;  :num-allocs              7812126
;  :num-checks              545
;  :propagations            3833
;  :quant-instantiations    1276
;  :rlimit-count            403939)
(declare-const $k@104@04 $Perm)
(assert ($Perm.isReadVar $k@104@04 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@104@04 $Perm.No) (< $Perm.No $k@104@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1343
;  :arith-assert-lower      2461
;  :arith-assert-upper      1526
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1469
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10610
;  :mk-clause               5539
;  :num-allocs              7812126
;  :num-checks              546
;  :propagations            3834
;  :quant-instantiations    1276
;  :rlimit-count            404137)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@67@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1343
;  :arith-assert-lower      2461
;  :arith-assert-upper      1526
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1469
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            741
;  :binary-propagations     16
;  :conflicts               522
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10610
;  :mk-clause               5539
;  :num-allocs              7812126
;  :num-checks              547
;  :propagations            3834
;  :quant-instantiations    1276
;  :rlimit-count            404148)
(assert (< $k@104@04 $k@67@04))
(assert (<= $Perm.No (- $k@67@04 $k@104@04)))
(assert (<= (- $k@67@04 $k@104@04) $Perm.Write))
(assert (implies (< $Perm.No (- $k@67@04 $k@104@04)) (not (= diz@31@04 $Ref.null))))
; [eval] diz.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1343
;  :arith-assert-lower      2463
;  :arith-assert-upper      1527
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1469
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10613
;  :mk-clause               5539
;  :num-allocs              7812126
;  :num-checks              548
;  :propagations            3834
;  :quant-instantiations    1276
;  :rlimit-count            404368)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1343
;  :arith-assert-lower      2463
;  :arith-assert-upper      1527
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1469
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               523
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10613
;  :mk-clause               5539
;  :num-allocs              7812126
;  :num-checks              549
;  :propagations            3834
;  :quant-instantiations    1276
;  :rlimit-count            404381)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@67@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1343
;  :arith-assert-lower      2463
;  :arith-assert-upper      1527
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1469
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               524
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10613
;  :mk-clause               5539
;  :num-allocs              7812126
;  :num-checks              550
;  :propagations            3834
;  :quant-instantiations    1276
;  :rlimit-count            404429)
(declare-const $k@105@04 $Perm)
(assert ($Perm.isReadVar $k@105@04 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1344
;  :arith-assert-lower      2465
;  :arith-assert-upper      1528
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1470
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               525
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10617
;  :mk-clause               5541
;  :num-allocs              7812126
;  :num-checks              551
;  :propagations            3835
;  :quant-instantiations    1276
;  :rlimit-count            404626)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@105@04 $Perm.No) (< $Perm.No $k@105@04))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1344
;  :arith-assert-lower      2465
;  :arith-assert-upper      1528
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1470
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10617
;  :mk-clause               5541
;  :num-allocs              7812126
;  :num-checks              552
;  :propagations            3835
;  :quant-instantiations    1276
;  :rlimit-count            404676)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@68@04 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1344
;  :arith-assert-lower      2465
;  :arith-assert-upper      1528
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1470
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               526
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10617
;  :mk-clause               5541
;  :num-allocs              7812126
;  :num-checks              553
;  :propagations            3835
;  :quant-instantiations    1276
;  :rlimit-count            404687)
(assert (< $k@105@04 $k@68@04))
(assert (<= $Perm.No (- $k@68@04 $k@105@04)))
(assert (<= (- $k@68@04 $k@105@04) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@68@04 $k@105@04))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))
      $Ref.null))))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 7
(assert (not (< $Perm.No $k@65@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1344
;  :arith-assert-lower      2467
;  :arith-assert-upper      1529
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1470
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               527
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10620
;  :mk-clause               5541
;  :num-allocs              7812126
;  :num-checks              554
;  :propagations            3835
;  :quant-instantiations    1276
;  :rlimit-count            404895)
(push) ; 7
(assert (not (< $Perm.No $k@68@04)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               26841
;  :arith-add-rows          424
;  :arith-assert-diseq      1344
;  :arith-assert-lower      2467
;  :arith-assert-upper      1529
;  :arith-bound-prop        214
;  :arith-conflicts         33
;  :arith-eq-adapter        1470
;  :arith-fixed-eqs         851
;  :arith-offset-eqs        202
;  :arith-pivots            743
;  :binary-propagations     16
;  :conflicts               528
;  :datatype-accessor-ax    593
;  :datatype-constructor-ax 5590
;  :datatype-occurs-check   1586
;  :datatype-splits         3737
;  :decisions               5787
;  :del-clause              5500
;  :final-checks            323
;  :interface-eqs           38
;  :max-generation          4
;  :max-memory              5.07
;  :memory                  5.07
;  :minimized-lits          116
;  :mk-bool-var             10620
;  :mk-clause               5541
;  :num-allocs              7812126
;  :num-checks              555
;  :propagations            3835
;  :quant-instantiations    1276
;  :rlimit-count            404943)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second $t@74@04))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@74@04))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@63@04)))))))))))))))))))))))))))))
                                                          $Snap.unit))))))))))))))))))))))))))))) diz@31@04 globals@32@04))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz, globals), write)
; Loop head block: Re-establish invariant
(pop) ; 6
(push) ; 6
; [else-branch: 116 | First:(Second:($t@74@04))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second $t@74@04)))
      0)
    (- 0 1))))
(pop) ; 6
(pop) ; 5
; [eval] !true
; [then-branch: 121 | False | dead]
; [else-branch: 121 | True | live]
(push) ; 5
; [else-branch: 121 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
