(get-info :version)
; (:version "4.8.6")
; Started: 2024-07-15 15:44:38
; Silicon.version: 1.1-SNAPSHOT (4dbb81fc@(detached))
; Input file: -
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<$Snap>)
(declare-sort frac)
(declare-sort TYPE)
(declare-sort zfrac)
(declare-sort $FVF<Seq<Int>>)
(declare-sort $FVF<$Ref>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
(declare-fun $SortWrappers.TYPETo$Snap (TYPE) $Snap)
(declare-fun $SortWrappers.$SnapToTYPE ($Snap) TYPE)
(assert (forall ((x TYPE)) (!
    (= x ($SortWrappers.$SnapToTYPE($SortWrappers.TYPETo$Snap x)))
    :pattern (($SortWrappers.TYPETo$Snap x))
    :qid |$Snap.$SnapToTYPETo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TYPETo$Snap($SortWrappers.$SnapToTYPE x)))
    :pattern (($SortWrappers.$SnapToTYPE x))
    :qid |$Snap.TYPETo$SnapToTYPE|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
; ////////// Symbols
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-const class_ALU<TYPE> TYPE)
(declare-const class_java_DOT_lang_DOT_Object<TYPE> TYPE)
(declare-const class_Driver<TYPE> TYPE)
(declare-const class_Monitor<TYPE> TYPE)
(declare-const class_Main<TYPE> TYPE)
(declare-const class_EncodedGlobalVariables<TYPE> TYPE)
(declare-fun directSuperclass<TYPE> (TYPE) TYPE)
(declare-fun type_of<TYPE> ($Ref) TYPE)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
; /field_value_functions_declarations.smt2 [Main_process_state: Seq[Int]]
(declare-fun $FVF.domain_Main_process_state ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_Main_process_state ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_Main_process_state ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_Main_process_state (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_Main_process_state ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Main_process_state $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [ALU_m: Ref]
(declare-fun $FVF.domain_ALU_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_ALU_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_ALU_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_ALU_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_ALU_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_ALU_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Driver_m: Ref]
(declare-fun $FVF.domain_Driver_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Driver_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Driver_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Driver_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Driver_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Driver_m $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [Monitor_m: Ref]
(declare-fun $FVF.domain_Monitor_m ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_Monitor_m ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_Monitor_m ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_Monitor_m ($Ref $Ref) Bool)
(declare-fun $FVF.perm_Monitor_m ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Monitor_m $FVF<$Ref>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun instanceof_TYPE_TYPE ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%limited ($Snap TYPE TYPE) Bool)
(declare-fun instanceof_TYPE_TYPE%stateless (TYPE TYPE) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun Main_find_minimum_advance_Sequence$Integer$ ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%limited ($Snap $Ref Seq<Int>) Int)
(declare-fun Main_find_minimum_advance_Sequence$Integer$%stateless ($Ref Seq<Int>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun Driver_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Driver_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_joinToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Monitor_idleToken_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_held_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
(declare-fun Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct class_ALU<TYPE> class_java_DOT_lang_DOT_Object<TYPE> class_Driver<TYPE> class_Monitor<TYPE> class_Main<TYPE> class_EncodedGlobalVariables<TYPE>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (=
  (directSuperclass<TYPE> (as class_ALU<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Driver<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Monitor<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_Main<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (=
  (directSuperclass<TYPE> (as class_EncodedGlobalVariables<TYPE>  TYPE))
  (as class_java_DOT_lang_DOT_Object<TYPE>  TYPE)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
; /field_value_functions_axioms.smt2 [Main_process_state: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Main_process_state vs) ($FVF.domain_Main_process_state ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Main_process_state vs))
            (= ($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x)))
          :pattern (($FVF.lookup_Main_process_state vs x) ($FVF.lookup_Main_process_state ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Main_process_state pm r))
    :pattern ($FVF.perm_Main_process_state pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_Main_process_state f r) true)
    :pattern ($FVF.loc_Main_process_state f r))))
; /field_value_functions_axioms.smt2 [ALU_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_ALU_m vs) ($FVF.domain_ALU_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_ALU_m vs))
            (= ($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x)))
          :pattern (($FVF.lookup_ALU_m vs x) ($FVF.lookup_ALU_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_ALU_m pm r))
    :pattern ($FVF.perm_ALU_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_ALU_m f r) true)
    :pattern ($FVF.loc_ALU_m f r))))
; /field_value_functions_axioms.smt2 [Driver_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Driver_m vs) ($FVF.domain_Driver_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Driver_m vs))
            (= ($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x)))
          :pattern (($FVF.lookup_Driver_m vs x) ($FVF.lookup_Driver_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Driver_m pm r))
    :pattern ($FVF.perm_Driver_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Driver_m f r) true)
    :pattern ($FVF.loc_Driver_m f r))))
; /field_value_functions_axioms.smt2 [Monitor_m: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_Monitor_m vs) ($FVF.domain_Monitor_m ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_Monitor_m vs))
            (= ($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x)))
          :pattern (($FVF.lookup_Monitor_m vs x) ($FVF.lookup_Monitor_m ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Monitor_m pm r))
    :pattern ($FVF.perm_Monitor_m pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_Monitor_m f r) true)
    :pattern ($FVF.loc_Monitor_m f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (=
    (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00)
    (instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  :pattern ((instanceof_TYPE_TYPE s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (instanceof_TYPE_TYPE%stateless t@0@00 u@1@00)
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (t@0@00 TYPE) (u@1@00 TYPE)) (!
  (let ((result@2@00 (instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))) (=
    result@2@00
    (or (= t@0@00 u@1@00) (= (directSuperclass<TYPE> t@0@00) u@1@00))))
  :pattern ((instanceof_TYPE_TYPE%limited s@$ t@0@00 u@1@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (= (new_frac%limited s@$ x@3@00) (new_frac s@$ x@3@00))
  :pattern ((new_frac s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (new_frac%stateless x@3@00)
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@3@00 $Perm)) (!
  (let ((result@4@00 (new_frac%limited s@$ x@3@00))) (implies
    (and (< $Perm.No x@3@00) (<= x@3@00 $Perm.Write))
    (= (frac_val<Perm> result@4@00) x@3@00)))
  :pattern ((new_frac%limited s@$ x@3@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@5@00) (new_zfrac s@$ x@5@00))
  :pattern ((new_zfrac s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (new_zfrac%stateless x@5@00)
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (x@5@00 $Perm)) (!
  (let ((result@6@00 (new_zfrac%limited s@$ x@5@00))) (implies
    (and (<= $Perm.No x@5@00) (<= x@5@00 $Perm.Write))
    (= (zfrac_val<Perm> result@6@00) x@5@00)))
  :pattern ((new_zfrac%limited s@$ x@5@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (=
    (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00)
    (Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$ s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (Main_find_minimum_advance_Sequence$Integer$%stateless diz@7@00 vals@8@00)
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
(assert (forall ((s@$ $Snap) (diz@7@00 $Ref) (vals@8@00 Seq<Int>)) (!
  (let ((result@9@00 (Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))) (implies
    (and (not (= diz@7@00 $Ref.null)) (= (Seq_length vals@8@00) 2))
    (and
      (and
        (or
          (< (Seq_index vals@8@00 0) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 0)))
        (or
          (< (Seq_index vals@8@00 1) (- 0 1))
          (<= result@9@00 (Seq_index vals@8@00 1))))
      (and
        (implies
          (and
            (< (Seq_index vals@8@00 0) (- 0 1))
            (< (Seq_index vals@8@00 1) (- 0 1)))
          (= result@9@00 0))
        (implies
          (or
            (<= (- 0 1) (Seq_index vals@8@00 0))
            (<= (- 0 1) (Seq_index vals@8@00 1)))
          (or
            (and
              (<= (- 0 1) (Seq_index vals@8@00 0))
              (= result@9@00 (Seq_index vals@8@00 0)))
            (and
              (<= (- 0 1) (Seq_index vals@8@00 1))
              (= result@9@00 (Seq_index vals@8@00 1)))))))))
  :pattern ((Main_find_minimum_advance_Sequence$Integer$%limited s@$ diz@7@00 vals@8@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- Driver___contract_unsatisfiable__Driver_EncodedGlobalVariables_Main ----------
(declare-const diz@0@01 $Ref)
(declare-const globals@1@01 $Ref)
(declare-const m_param@2@01 $Ref)
(declare-const diz@3@01 $Ref)
(declare-const globals@4@01 $Ref)
(declare-const m_param@5@01 $Ref)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 $Snap.unit))
; [eval] diz != null
(assert (not (= diz@3@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; inhale true && true
(declare-const $t@7@01 $Snap)
(assert (= $t@7@01 ($Snap.combine ($Snap.first $t@7@01) ($Snap.second $t@7@01))))
(assert (= ($Snap.first $t@7@01) $Snap.unit))
(assert (= ($Snap.second $t@7@01) $Snap.unit))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; // assert
; assert false
(set-option :timeout 10)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(check-sat)
; unknown
(pop) ; 2
(pop) ; 1
; ---------- Driver_Driver_EncodedGlobalVariables_Main ----------
(declare-const globals@8@01 $Ref)
(declare-const m_param@9@01 $Ref)
(declare-const sys__result@10@01 $Ref)
(declare-const globals@11@01 $Ref)
(declare-const m_param@12@01 $Ref)
(declare-const sys__result@13@01 $Ref)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@13@01 $Ref.null)))
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(assert (= ($Snap.first ($Snap.second $t@14@01)) $Snap.unit))
; [eval] type_of(sys__result) == class_Driver()
; [eval] type_of(sys__result)
; [eval] class_Driver()
(assert (= (type_of<TYPE> sys__result@13@01) (as class_Driver<TYPE>  TYPE)))
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
; [eval] !sys__result.Driver_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
  $Snap.unit))
; [eval] sys__result.Driver_m == m_param
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  m_param@12@01))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__51: Ref
(declare-const diz__51@15@01 $Ref)
; [exec]
; diz__51 := new(Driver_m, Driver_init, Driver_z, Driver_x, Driver_y, Driver_a)
(declare-const diz__51@16@01 $Ref)
(assert (not (= diz__51@16@01 $Ref.null)))
(declare-const Driver_m@17@01 $Ref)
(declare-const Driver_init@18@01 Bool)
(declare-const Driver_z@19@01 Int)
(declare-const Driver_x@20@01 Int)
(declare-const Driver_y@21@01 Int)
(declare-const Driver_a@22@01 Int)
(assert (not (= diz__51@16@01 sys__result@13@01)))
(assert (not (= diz__51@16@01 diz__51@15@01)))
(assert (not (= diz__51@16@01 globals@11@01)))
(assert (not (= diz__51@16@01 m_param@12@01)))
; [exec]
; inhale type_of(diz__51) == class_Driver()
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] type_of(diz__51) == class_Driver()
; [eval] type_of(diz__51)
; [eval] class_Driver()
(assert (= (type_of<TYPE> diz__51@16@01) (as class_Driver<TYPE>  TYPE)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz__51.Driver_m := m_param
; [exec]
; diz__51.Driver_init := false
; [exec]
; inhale acc(Driver_idleToken_EncodedGlobalVariables(diz__51, globals), write)
(declare-const $t@24@01 $Snap)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; sys__result := diz__51
; [exec]
; // assert
; assert sys__result != null && type_of(sys__result) == class_Driver() && acc(Driver_idleToken_EncodedGlobalVariables(sys__result, globals), write) && acc(sys__result.Driver_m, write) && acc(sys__result.Driver_init, write) && !sys__result.Driver_init && acc(sys__result.Driver_z, write) && acc(sys__result.Driver_x, write) && acc(sys__result.Driver_y, write) && acc(sys__result.Driver_a, write) && sys__result.Driver_m == m_param
; [eval] sys__result != null
; [eval] type_of(sys__result) == class_Driver()
; [eval] type_of(sys__result)
; [eval] class_Driver()
; [eval] !sys__result.Driver_init
; [eval] sys__result.Driver_m == m_param
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Driver_joinOperator_EncodedGlobalVariables ----------
(declare-const diz@25@01 $Ref)
(declare-const globals@26@01 $Ref)
(declare-const diz@27@01 $Ref)
(declare-const globals@28@01 $Ref)
(push) ; 1
(declare-const $t@29@01 $Snap)
(assert (= $t@29@01 ($Snap.combine ($Snap.first $t@29@01) ($Snap.second $t@29@01))))
(assert (= ($Snap.first $t@29@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@27@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 ($Snap.combine ($Snap.first $t@30@01) ($Snap.second $t@30@01))))
(assert (=
  ($Snap.second $t@30@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@30@01))
    ($Snap.second ($Snap.second $t@30@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               34
;  :arith-assert-lower      1
;  :arith-assert-upper      1
;  :arith-eq-adapter        1
;  :binary-propagations     16
;  :datatype-accessor-ax    7
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             274
;  :mk-clause               1
;  :num-allocs              3508183
;  :num-checks              10
;  :propagations            16
;  :quant-instantiations    1
;  :rlimit-count            114747)
(assert (=
  ($Snap.second ($Snap.second $t@30@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@30@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@30@01))) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@30@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@30@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@30@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))
(declare-const $k@31@01 $Perm)
(assert ($Perm.isReadVar $k@31@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@31@01 $Perm.No) (< $Perm.No $k@31@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               46
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      2
;  :arith-eq-adapter        2
;  :binary-propagations     16
;  :conflicts               1
;  :datatype-accessor-ax    9
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             283
;  :mk-clause               3
;  :num-allocs              3508183
;  :num-checks              11
;  :propagations            17
;  :quant-instantiations    2
;  :rlimit-count            115319)
(assert (<= $Perm.No $k@31@01))
(assert (<= $k@31@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@31@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@30@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@31@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               52
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     16
;  :conflicts               2
;  :datatype-accessor-ax    10
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             286
;  :mk-clause               3
;  :num-allocs              3508183
;  :num-checks              12
;  :propagations            17
;  :quant-instantiations    2
;  :rlimit-count            115592)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
  diz@27@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               59
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     16
;  :conflicts               2
;  :datatype-accessor-ax    11
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             289
;  :mk-clause               3
;  :num-allocs              3508183
;  :num-checks              13
;  :propagations            17
;  :quant-instantiations    3
;  :rlimit-count            115843)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01))))))
  $Snap.unit))
; [eval] !diz.Driver_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@30@01)))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- Driver_run_EncodedGlobalVariables ----------
(declare-const diz@32@01 $Ref)
(declare-const globals@33@01 $Ref)
(declare-const diz@34@01 $Ref)
(declare-const globals@35@01 $Ref)
(push) ; 1
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@34@01 $Ref.null)))
(assert (=
  ($Snap.second $t@36@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@36@01))
    ($Snap.second ($Snap.second $t@36@01)))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               70
;  :arith-assert-diseq      1
;  :arith-assert-lower      3
;  :arith-assert-upper      3
;  :arith-eq-adapter        2
;  :binary-propagations     16
;  :conflicts               2
;  :datatype-accessor-ax    14
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             293
;  :mk-clause               3
;  :num-allocs              3508183
;  :num-checks              14
;  :propagations            17
;  :quant-instantiations    3
;  :rlimit-count            116167)
(assert (=
  ($Snap.second ($Snap.second $t@36@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@36@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@36@01))) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not
  (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01))) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@36@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
(declare-const $k@37@01 $Perm)
(assert ($Perm.isReadVar $k@37@01 $Perm.Write))
(push) ; 2
(assert (not (or (= $k@37@01 $Perm.No) (< $Perm.No $k@37@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               82
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      4
;  :arith-eq-adapter        3
;  :binary-propagations     16
;  :conflicts               3
;  :datatype-accessor-ax    16
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             302
;  :mk-clause               5
;  :num-allocs              3508183
;  :num-checks              15
;  :propagations            18
;  :quant-instantiations    4
;  :rlimit-count            116740)
(assert (<= $Perm.No $k@37@01))
(assert (<= $k@37@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@37@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No $k@37@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               88
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     16
;  :conflicts               4
;  :datatype-accessor-ax    17
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             305
;  :mk-clause               5
;  :num-allocs              3508183
;  :num-checks              16
;  :propagations            18
;  :quant-instantiations    4
;  :rlimit-count            117013)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               95
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     16
;  :conflicts               4
;  :datatype-accessor-ax    18
;  :datatype-constructor-ax 1
;  :datatype-occurs-check   13
;  :datatype-splits         1
;  :decisions               1
;  :del-clause              2
;  :final-checks            10
;  :max-generation          1
;  :max-memory              4.12
;  :memory                  3.78
;  :mk-bool-var             308
;  :mk-clause               5
;  :num-allocs              3508183
;  :num-checks              17
;  :propagations            18
;  :quant-instantiations    5
;  :rlimit-count            117264)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01))))))
  $Snap.unit))
; [eval] !diz.Driver_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@38@01 $Snap)
(assert (= $t@38@01 ($Snap.combine ($Snap.first $t@38@01) ($Snap.second $t@38@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               113
;  :arith-assert-diseq      2
;  :arith-assert-lower      5
;  :arith-assert-upper      5
;  :arith-eq-adapter        3
;  :binary-propagations     16
;  :conflicts               4
;  :datatype-accessor-ax    19
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   15
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            12
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             316
;  :mk-clause               5
;  :num-allocs              3630356
;  :num-checks              19
;  :propagations            18
;  :quant-instantiations    7
;  :rlimit-count            117917)
(assert (=
  ($Snap.second $t@38@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@38@01))
    ($Snap.second ($Snap.second $t@38@01)))))
(assert (= ($Snap.first ($Snap.second $t@38@01)) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@38@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@38@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@38@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))
(declare-const $k@39@01 $Perm)
(assert ($Perm.isReadVar $k@39@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@39@01 $Perm.No) (< $Perm.No $k@39@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               125
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      6
;  :arith-eq-adapter        4
;  :binary-propagations     16
;  :conflicts               5
;  :datatype-accessor-ax    21
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   15
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            12
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             325
;  :mk-clause               7
;  :num-allocs              3630356
;  :num-checks              20
;  :propagations            19
;  :quant-instantiations    8
;  :rlimit-count            118478)
(assert (<= $Perm.No $k@39@01))
(assert (<= $k@39@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@39@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@38@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@38@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@39@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               131
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     16
;  :conflicts               6
;  :datatype-accessor-ax    22
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   15
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            12
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             328
;  :mk-clause               7
;  :num-allocs              3630356
;  :num-checks              21
;  :propagations            19
;  :quant-instantiations    8
;  :rlimit-count            118741)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@38@01))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               139
;  :arith-assert-diseq      3
;  :arith-assert-lower      7
;  :arith-assert-upper      7
;  :arith-eq-adapter        4
;  :binary-propagations     16
;  :conflicts               6
;  :datatype-accessor-ax    23
;  :datatype-constructor-ax 4
;  :datatype-occurs-check   15
;  :datatype-splits         4
;  :decisions               4
;  :del-clause              4
;  :final-checks            12
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             331
;  :mk-clause               7
;  :num-allocs              3630356
;  :num-checks              22
;  :propagations            19
;  :quant-instantiations    9
;  :rlimit-count            118981)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01)))))
  $Snap.unit))
; [eval] !diz.Driver_init
(assert (not
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@38@01))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_26__52: Int
(declare-const __flatten_26__52@40@01 Int)
; [exec]
; var __flatten_27__53: Int
(declare-const __flatten_27__53@41@01 Int)
; [exec]
; var __flatten_28__54: Ref
(declare-const __flatten_28__54@42@01 $Ref)
; [exec]
; var __flatten_29__55: Ref
(declare-const __flatten_29__55@43@01 $Ref)
; [exec]
; var __flatten_30__56: Int
(declare-const __flatten_30__56@44@01 Int)
; [exec]
; var __flatten_31__57: Ref
(declare-const __flatten_31__57@45@01 $Ref)
; [exec]
; var __flatten_32__58: Ref
(declare-const __flatten_32__58@46@01 $Ref)
; [exec]
; var __flatten_33__59: Int
(declare-const __flatten_33__59@47@01 Int)
; [exec]
; var __flatten_34__60: Ref
(declare-const __flatten_34__60@48@01 $Ref)
; [exec]
; var __flatten_35__61: Ref
(declare-const __flatten_35__61@49@01 $Ref)
; [exec]
; var __flatten_36__62: Int
(declare-const __flatten_36__62@50@01 Int)
; [exec]
; var __flatten_37__63: Int
(declare-const __flatten_37__63@51@01 Int)
; [exec]
; var __flatten_38__64: Ref
(declare-const __flatten_38__64@52@01 $Ref)
; [exec]
; var __flatten_39__65: Seq[Int]
(declare-const __flatten_39__65@53@01 Seq<Int>)
; [exec]
; var __flatten_40__66: Ref
(declare-const __flatten_40__66@54@01 $Ref)
; [exec]
; var __flatten_41__67: Ref
(declare-const __flatten_41__67@55@01 $Ref)
; [exec]
; var __flatten_42__68: Seq[Int]
(declare-const __flatten_42__68@56@01 Seq<Int>)
; [exec]
; var __flatten_43__69: Ref
(declare-const __flatten_43__69@57@01 $Ref)
; [exec]
; var __flatten_44__70: Int
(declare-const __flatten_44__70@58@01 Int)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
(declare-const $t@59@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
(assert (= $t@59@01 ($Snap.combine ($Snap.first $t@59@01) ($Snap.second $t@59@01))))
(assert (= ($Snap.first $t@59@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@59@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@59@01))
    ($Snap.second ($Snap.second $t@59@01)))))
(assert (= ($Snap.first ($Snap.second $t@59@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@59@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@59@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@59@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@59@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@60@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 0 | 0 <= i@60@01 | live]
; [else-branch: 0 | !(0 <= i@60@01) | live]
(push) ; 5
; [then-branch: 0 | 0 <= i@60@01]
(assert (<= 0 i@60@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 5
(push) ; 5
; [else-branch: 0 | !(0 <= i@60@01)]
(assert (not (<= 0 i@60@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 1 | i@60@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i@60@01 | live]
; [else-branch: 1 | !(i@60@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i@60@01) | live]
(push) ; 5
; [then-branch: 1 | i@60@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i@60@01]
(assert (and
  (<
    i@60@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
  (<= 0 i@60@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@60@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               198
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               6
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             363
;  :mk-clause               13
;  :num-allocs              3630356
;  :num-checks              24
;  :propagations            21
;  :quant-instantiations    15
;  :rlimit-count            120667)
; [eval] -1
(push) ; 6
; [then-branch: 2 | First:(Second:(Second:(Second:($t@59@01))))[i@60@01] == -1 | live]
; [else-branch: 2 | First:(Second:(Second:(Second:($t@59@01))))[i@60@01] != -1 | live]
(push) ; 7
; [then-branch: 2 | First:(Second:(Second:(Second:($t@59@01))))[i@60@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i@60@01)
  (- 0 1)))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | First:(Second:(Second:(Second:($t@59@01))))[i@60@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
      i@60@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 8
(assert (not (>= i@60@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               198
;  :arith-assert-diseq      5
;  :arith-assert-lower      14
;  :arith-assert-upper      10
;  :arith-eq-adapter        8
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               6
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             364
;  :mk-clause               13
;  :num-allocs              3630356
;  :num-checks              25
;  :propagations            21
;  :quant-instantiations    15
;  :rlimit-count            120842)
(push) ; 8
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@59@01))))[i@60@01] | live]
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@59@01))))[i@60@01]) | live]
(push) ; 9
; [then-branch: 3 | 0 <= First:(Second:(Second:(Second:($t@59@01))))[i@60@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i@60@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 10
(assert (not (>= i@60@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               198
;  :arith-assert-diseq      6
;  :arith-assert-lower      17
;  :arith-assert-upper      10
;  :arith-eq-adapter        9
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               6
;  :datatype-accessor-ax    31
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              6
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             367
;  :mk-clause               14
;  :num-allocs              3630356
;  :num-checks              26
;  :propagations            21
;  :quant-instantiations    15
;  :rlimit-count            120966)
; [eval] |diz.Main_event_state|
(pop) ; 9
(push) ; 9
; [else-branch: 3 | !(0 <= First:(Second:(Second:(Second:($t@59@01))))[i@60@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
      i@60@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(i@60@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i@60@01)]
(assert (not
  (and
    (<
      i@60@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
    (<= 0 i@60@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@60@01 Int)) (!
  (implies
    (and
      (<
        i@60@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
      (<= 0 i@60@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
          i@60@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i@60@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i@60@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i@60@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01 $Perm.Write))
(push) ; 3
(assert (not (or (= $k@61@01 $Perm.No) (< $Perm.No $k@61@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               203
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      11
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               7
;  :datatype-accessor-ax    32
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             373
;  :mk-clause               16
;  :num-allocs              3630356
;  :num-checks              27
;  :propagations            22
;  :quant-instantiations    15
;  :rlimit-count            121735)
(assert (<= $Perm.No $k@61@01))
(assert (<= $k@61@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@61@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
  $Snap.unit))
; [eval] diz.Main_alu != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               209
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               8
;  :datatype-accessor-ax    33
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.87
;  :mk-bool-var             376
;  :mk-clause               16
;  :num-allocs              3630356
;  :num-checks              28
;  :propagations            22
;  :quant-instantiations    15
;  :rlimit-count            122058)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               215
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               9
;  :datatype-accessor-ax    34
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             379
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              29
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            122414)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               220
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               10
;  :datatype-accessor-ax    35
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             380
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              30
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            122671)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               225
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               11
;  :datatype-accessor-ax    36
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             381
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              31
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            122938)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               230
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               12
;  :datatype-accessor-ax    37
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             382
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              32
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            123215)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               235
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               13
;  :datatype-accessor-ax    38
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             383
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              33
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            123502)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               240
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               14
;  :datatype-accessor-ax    39
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             384
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              34
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            123799)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               246
;  :arith-assert-diseq      7
;  :arith-assert-lower      19
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               15
;  :datatype-accessor-ax    40
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             386
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              35
;  :propagations            22
;  :quant-instantiations    16
;  :rlimit-count            124138)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               253
;  :arith-assert-diseq      7
;  :arith-assert-lower      20
;  :arith-assert-upper      12
;  :arith-eq-adapter        10
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               16
;  :datatype-accessor-ax    41
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             390
;  :mk-clause               16
;  :num-allocs              3756108
;  :num-checks              36
;  :propagations            22
;  :quant-instantiations    17
;  :rlimit-count            124585)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@62@01 $Perm.No) (< $Perm.No $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               258
;  :arith-assert-diseq      8
;  :arith-assert-lower      22
;  :arith-assert-upper      14
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         1
;  :binary-propagations     16
;  :conflicts               17
;  :datatype-accessor-ax    42
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             396
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              37
;  :propagations            23
;  :quant-instantiations    17
;  :rlimit-count            125103)
(declare-const $t@63@01 $Ref)
(assert (and
  (implies
    (< $Perm.No $k@37@01)
    (=
      $t@63@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
  (implies
    (< $Perm.No $k@62@01)
    (=
      $t@63@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))
(assert (<= $Perm.No (+ $k@37@01 $k@62@01)))
(assert (<= (+ $k@37@01 $k@62@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ $k@37@01 $k@62@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               268
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      16
;  :arith-conflicts         1
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         2
;  :binary-propagations     16
;  :conflicts               18
;  :datatype-accessor-ax    43
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             404
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              38
;  :propagations            23
;  :quant-instantiations    18
;  :rlimit-count            125774)
(assert (not (= $t@63@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               19
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             407
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              39
;  :propagations            23
;  :quant-instantiations    18
;  :rlimit-count            126178)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               19
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             407
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              40
;  :propagations            23
;  :quant-instantiations    18
;  :rlimit-count            126191)
(set-option :timeout 10)
(push) ; 3
(assert (not (= diz@34@01 $t@63@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               274
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      17
;  :arith-conflicts         2
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         3
;  :binary-propagations     16
;  :conflicts               20
;  :datatype-accessor-ax    44
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             408
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              41
;  :propagations            23
;  :quant-instantiations    18
;  :rlimit-count            126251)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@36@01)))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               282
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      18
;  :arith-conflicts         3
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         4
;  :binary-propagations     16
;  :conflicts               21
;  :datatype-accessor-ax    45
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             412
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              42
;  :propagations            23
;  :quant-instantiations    19
;  :rlimit-count            126709)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               287
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      19
;  :arith-conflicts         4
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         5
;  :binary-propagations     16
;  :conflicts               22
;  :datatype-accessor-ax    46
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             414
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              43
;  :propagations            23
;  :quant-instantiations    19
;  :rlimit-count            127088)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               292
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      20
;  :arith-conflicts         5
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         6
;  :binary-propagations     16
;  :conflicts               23
;  :datatype-accessor-ax    47
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             416
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              44
;  :propagations            23
;  :quant-instantiations    19
;  :rlimit-count            127477)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               297
;  :arith-assert-diseq      8
;  :arith-assert-lower      23
;  :arith-assert-upper      21
;  :arith-conflicts         6
;  :arith-eq-adapter        11
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               24
;  :datatype-accessor-ax    48
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             418
;  :mk-clause               18
;  :num-allocs              3756108
;  :num-checks              45
;  :propagations            23
;  :quant-instantiations    19
;  :rlimit-count            127876)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))))
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@64@01 $Perm.No) (< $Perm.No $k@64@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               302
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      22
;  :arith-conflicts         6
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               25
;  :datatype-accessor-ax    49
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             423
;  :mk-clause               20
;  :num-allocs              3756108
;  :num-checks              46
;  :propagations            24
;  :quant-instantiations    19
;  :rlimit-count            128417)
(assert (<= $Perm.No $k@64@01))
(assert (<= $k@64@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@64@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               308
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      23
;  :arith-conflicts         6
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               26
;  :datatype-accessor-ax    50
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             426
;  :mk-clause               20
;  :num-allocs              3756108
;  :num-checks              47
;  :propagations            24
;  :quant-instantiations    19
;  :rlimit-count            128910)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      23
;  :arith-conflicts         6
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               27
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             429
;  :mk-clause               20
;  :num-allocs              3756108
;  :num-checks              48
;  :propagations            24
;  :quant-instantiations    20
;  :rlimit-count            129440)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               314
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      23
;  :arith-conflicts         6
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               27
;  :datatype-accessor-ax    51
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             429
;  :mk-clause               20
;  :num-allocs              3756108
;  :num-checks              49
;  :propagations            24
;  :quant-instantiations    20
;  :rlimit-count            129453)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               319
;  :arith-assert-diseq      9
;  :arith-assert-lower      25
;  :arith-assert-upper      23
;  :arith-conflicts         6
;  :arith-eq-adapter        12
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               28
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             430
;  :mk-clause               20
;  :num-allocs              3756108
;  :num-checks              50
;  :propagations            24
;  :quant-instantiations    20
;  :rlimit-count            129880)
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 3
(assert (not (or (= $k@65@01 $Perm.No) (< $Perm.No $k@65@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               319
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      24
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               29
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             434
;  :mk-clause               22
;  :num-allocs              3756108
;  :num-checks              51
;  :propagations            25
;  :quant-instantiations    20
;  :rlimit-count            130079)
(assert (<= $Perm.No $k@65@01))
(assert (<= $k@65@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@65@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_m == diz
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               320
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               30
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             436
;  :mk-clause               22
;  :num-allocs              3756108
;  :num-checks              52
;  :propagations            25
;  :quant-instantiations    20
;  :rlimit-count            130515)
(push) ; 3
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               320
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               31
;  :datatype-accessor-ax    52
;  :datatype-constructor-ax 7
;  :datatype-occurs-check   16
;  :datatype-splits         4
;  :decisions               7
;  :del-clause              7
;  :final-checks            13
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  3.97
;  :mk-bool-var             436
;  :mk-clause               22
;  :num-allocs              3756108
;  :num-checks              53
;  :propagations            25
;  :quant-instantiations    20
;  :rlimit-count            130563)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@59@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01))) globals@35@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Driver_m, globals), write)
(declare-const $t@66@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; diz.Driver_init := true
; [exec]
; diz.Driver_z := 0
(set-option :timeout 10)
(push) ; 3
(assert (not (= $t@63@01 diz@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               33
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             475
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              56
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            132361)
; [exec]
; diz.Driver_x := 0
(push) ; 3
(assert (not (= $t@63@01 diz@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               34
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             475
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              57
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            132413)
; [exec]
; diz.Driver_y := 0
(push) ; 3
(assert (not (= $t@63@01 diz@34@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               439
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               35
;  :datatype-accessor-ax    54
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             475
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              58
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            132465)
(declare-const __flatten_26__52@67@01 Int)
(declare-const __flatten_27__53@68@01 Int)
(declare-const __flatten_29__55@69@01 $Ref)
(declare-const __flatten_28__54@70@01 $Ref)
(declare-const __flatten_30__56@71@01 Int)
(declare-const __flatten_32__58@72@01 $Ref)
(declare-const __flatten_31__57@73@01 $Ref)
(declare-const __flatten_33__59@74@01 Int)
(declare-const __flatten_35__61@75@01 $Ref)
(declare-const __flatten_34__60@76@01 $Ref)
(declare-const __flatten_36__62@77@01 Int)
(declare-const __flatten_37__63@78@01 Int)
(declare-const __flatten_38__64@79@01 $Ref)
(declare-const __flatten_40__66@80@01 $Ref)
(declare-const __flatten_39__65@81@01 Seq<Int>)
(declare-const __flatten_41__67@82@01 $Ref)
(declare-const __flatten_43__69@83@01 $Ref)
(declare-const __flatten_42__68@84@01 Seq<Int>)
(declare-const __flatten_44__70@85@01 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               444
;  :arith-assert-diseq      10
;  :arith-assert-lower      27
;  :arith-assert-upper      25
;  :arith-conflicts         6
;  :arith-eq-adapter        13
;  :arith-fixed-eqs         7
;  :binary-propagations     16
;  :conflicts               35
;  :datatype-accessor-ax    55
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             476
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              59
;  :propagations            26
;  :quant-instantiations    21
;  :rlimit-count            132578)
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (= ($Snap.first ($Snap.second $t@86@01)) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@86@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  $Snap.unit))
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@87@01 Int)
(push) ; 4
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 5
; [then-branch: 4 | 0 <= i__71@87@01 | live]
; [else-branch: 4 | !(0 <= i__71@87@01) | live]
(push) ; 6
; [then-branch: 4 | 0 <= i__71@87@01]
(assert (<= 0 i__71@87@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(0 <= i__71@87@01)]
(assert (not (<= 0 i__71@87@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 5 | i__71@87@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__71@87@01 | live]
; [else-branch: 5 | !(i__71@87@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__71@87@01) | live]
(push) ; 6
; [then-branch: 5 | i__71@87@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__71@87@01]
(assert (and
  (<
    i__71@87@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  (<= 0 i__71@87@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 7
(assert (not (>= i__71@87@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               35
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             501
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              60
;  :propagations            26
;  :quant-instantiations    26
;  :rlimit-count            133860)
; [eval] -1
(push) ; 7
; [then-branch: 6 | First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01] == -1 | live]
; [else-branch: 6 | First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01] != -1 | live]
(push) ; 8
; [then-branch: 6 | First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__71@87@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 6 | First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
      i__71@87@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 9
(assert (not (>= i__71@87@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      10
;  :arith-assert-lower      32
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        15
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               35
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             502
;  :mk-clause               23
;  :num-allocs              3886839
;  :num-checks              61
;  :propagations            26
;  :quant-instantiations    26
;  :rlimit-count            134035)
(push) ; 9
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01] | live]
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01]) | live]
(push) ; 10
; [then-branch: 7 | 0 <= First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__71@87@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 11
(assert (not (>= i__71@87@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               489
;  :arith-assert-diseq      11
;  :arith-assert-lower      35
;  :arith-assert-upper      28
;  :arith-conflicts         6
;  :arith-eq-adapter        16
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               35
;  :datatype-accessor-ax    62
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              21
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             505
;  :mk-clause               24
;  :num-allocs              3886839
;  :num-checks              62
;  :propagations            26
;  :quant-instantiations    26
;  :rlimit-count            134159)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 7 | !(0 <= First:(Second:(Second:(Second:($t@86@01))))[i__71@87@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
      i__71@87@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 5 | !(i__71@87@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__71@87@01)]
(assert (not
  (and
    (<
      i__71@87@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    (<= 0 i__71@87@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__71@87@01 Int)) (!
  (implies
    (and
      (<
        i__71@87@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
      (<= 0 i__71@87@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
          i__71@87@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__71@87@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__71@87@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__71@87@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
(declare-const $k@88@01 $Perm)
(assert ($Perm.isReadVar $k@88@01 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@88@01 $Perm.No) (< $Perm.No $k@88@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               494
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      29
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               36
;  :datatype-accessor-ax    63
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             511
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              63
;  :propagations            27
;  :quant-instantiations    26
;  :rlimit-count            134927)
(assert (<= $Perm.No $k@88@01))
(assert (<= $k@88@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@88@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               500
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               37
;  :datatype-accessor-ax    64
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             514
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              64
;  :propagations            27
;  :quant-instantiations    26
;  :rlimit-count            135250)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               506
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               38
;  :datatype-accessor-ax    65
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             517
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              65
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            135606)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               511
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               39
;  :datatype-accessor-ax    66
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             518
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              66
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            135863)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               516
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               40
;  :datatype-accessor-ax    67
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             519
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              67
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            136130)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               521
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               41
;  :datatype-accessor-ax    68
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             520
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              68
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            136407)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               526
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               42
;  :datatype-accessor-ax    69
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             521
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              69
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            136694)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               531
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               43
;  :datatype-accessor-ax    70
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             522
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              70
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            136991)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               537
;  :arith-assert-diseq      12
;  :arith-assert-lower      37
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               44
;  :datatype-accessor-ax    71
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.12
;  :memory                  4.06
;  :mk-bool-var             524
;  :mk-clause               26
;  :num-allocs              3886839
;  :num-checks              71
;  :propagations            27
;  :quant-instantiations    27
;  :rlimit-count            137330)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               544
;  :arith-assert-diseq      12
;  :arith-assert-lower      38
;  :arith-assert-upper      30
;  :arith-conflicts         6
;  :arith-eq-adapter        17
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               45
;  :datatype-accessor-ax    72
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             528
;  :mk-clause               26
;  :num-allocs              4022244
;  :num-checks              72
;  :propagations            27
;  :quant-instantiations    28
;  :rlimit-count            137778)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(declare-const $k@89@01 $Perm)
(assert ($Perm.isReadVar $k@89@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@89@01 $Perm.No) (< $Perm.No $k@89@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               549
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      32
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               46
;  :datatype-accessor-ax    73
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             534
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              73
;  :propagations            28
;  :quant-instantiations    28
;  :rlimit-count            138295)
(assert (<= $Perm.No $k@89@01))
(assert (<= $k@89@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@89@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               555
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               47
;  :datatype-accessor-ax    74
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             537
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              74
;  :propagations            28
;  :quant-instantiations    28
;  :rlimit-count            138718)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               561
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               48
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             540
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              75
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            139174)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               561
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               48
;  :datatype-accessor-ax    75
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             540
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              76
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            139187)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               566
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               49
;  :datatype-accessor-ax    76
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             541
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              77
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            139544)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               571
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               50
;  :datatype-accessor-ax    77
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             542
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              78
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            139911)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               576
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               51
;  :datatype-accessor-ax    78
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             543
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              79
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            140288)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               581
;  :arith-assert-diseq      13
;  :arith-assert-lower      40
;  :arith-assert-upper      33
;  :arith-conflicts         6
;  :arith-eq-adapter        18
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               52
;  :datatype-accessor-ax    79
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             544
;  :mk-clause               28
;  :num-allocs              4022244
;  :num-checks              80
;  :propagations            28
;  :quant-instantiations    29
;  :rlimit-count            140675)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@90@01 $Perm.No) (< $Perm.No $k@90@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               586
;  :arith-assert-diseq      14
;  :arith-assert-lower      42
;  :arith-assert-upper      34
;  :arith-conflicts         6
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               53
;  :datatype-accessor-ax    80
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             549
;  :mk-clause               30
;  :num-allocs              4022244
;  :num-checks              81
;  :propagations            29
;  :quant-instantiations    29
;  :rlimit-count            141215)
(assert (<= $Perm.No $k@90@01))
(assert (<= $k@90@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@90@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_mon != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               592
;  :arith-assert-diseq      14
;  :arith-assert-lower      42
;  :arith-assert-upper      35
;  :arith-conflicts         6
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               54
;  :datatype-accessor-ax    81
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             552
;  :mk-clause               30
;  :num-allocs              4022244
;  :num-checks              82
;  :propagations            29
;  :quant-instantiations    29
;  :rlimit-count            141708)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               598
;  :arith-assert-diseq      14
;  :arith-assert-lower      42
;  :arith-assert-upper      35
;  :arith-conflicts         6
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               55
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             555
;  :mk-clause               30
;  :num-allocs              4022244
;  :num-checks              83
;  :propagations            29
;  :quant-instantiations    30
;  :rlimit-count            142242)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               598
;  :arith-assert-diseq      14
;  :arith-assert-lower      42
;  :arith-assert-upper      35
;  :arith-conflicts         6
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               55
;  :datatype-accessor-ax    82
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             555
;  :mk-clause               30
;  :num-allocs              4022244
;  :num-checks              84
;  :propagations            29
;  :quant-instantiations    30
;  :rlimit-count            142255)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-assert-diseq      14
;  :arith-assert-lower      42
;  :arith-assert-upper      35
;  :arith-conflicts         6
;  :arith-eq-adapter        19
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               56
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             556
;  :mk-clause               30
;  :num-allocs              4022244
;  :num-checks              85
;  :propagations            29
;  :quant-instantiations    30
;  :rlimit-count            142682)
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@91@01 $Perm.No) (< $Perm.No $k@91@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               603
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      36
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               57
;  :datatype-accessor-ax    83
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             560
;  :mk-clause               32
;  :num-allocs              4022244
;  :num-checks              86
;  :propagations            30
;  :quant-instantiations    30
;  :rlimit-count            142881)
(assert (<= $Perm.No $k@91@01))
(assert (<= $k@91@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@91@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               609
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      37
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               58
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             563
;  :mk-clause               32
;  :num-allocs              4022244
;  :num-checks              87
;  :propagations            30
;  :quant-instantiations    30
;  :rlimit-count            143404)
(push) ; 4
(assert (not (< $Perm.No $k@91@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               609
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      37
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               59
;  :datatype-accessor-ax    84
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.17
;  :memory                  4.17
;  :mk-bool-var             563
;  :mk-clause               32
;  :num-allocs              4022244
;  :num-checks              88
;  :propagations            30
;  :quant-instantiations    30
;  :rlimit-count            143452)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 4
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               618
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      37
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    85
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             567
;  :mk-clause               32
;  :num-allocs              4161048
;  :num-checks              89
;  :propagations            30
;  :quant-instantiations    31
;  :rlimit-count            144050)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               626
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      37
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              22
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             569
;  :mk-clause               32
;  :num-allocs              4161048
;  :num-checks              90
;  :propagations            30
;  :quant-instantiations    31
;  :rlimit-count            144524)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
(pop) ; 4
(push) ; 4
; [eval] !true
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               634
;  :arith-assert-diseq      15
;  :arith-assert-lower      44
;  :arith-assert-upper      37
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         8
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              30
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             575
;  :mk-clause               32
;  :num-allocs              4161048
;  :num-checks              91
;  :propagations            30
;  :quant-instantiations    34
;  :rlimit-count            145097)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@92@01 Int)
(push) ; 4
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 5
; [then-branch: 8 | 0 <= i__71@92@01 | live]
; [else-branch: 8 | !(0 <= i__71@92@01) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i__71@92@01]
(assert (<= 0 i__71@92@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i__71@92@01)]
(assert (not (<= 0 i__71@92@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 9 | i__71@92@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i__71@92@01 | live]
; [else-branch: 9 | !(i__71@92@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i__71@92@01) | live]
(push) ; 6
; [then-branch: 9 | i__71@92@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i__71@92@01]
(assert (and
  (<
    i__71@92@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
  (<= 0 i__71@92@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 7
(assert (not (>= i__71@92@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               635
;  :arith-assert-diseq      15
;  :arith-assert-lower      45
;  :arith-assert-upper      38
;  :arith-conflicts         6
;  :arith-eq-adapter        20
;  :arith-fixed-eqs         9
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              30
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             577
;  :mk-clause               32
;  :num-allocs              4161048
;  :num-checks              92
;  :propagations            30
;  :quant-instantiations    34
;  :rlimit-count            145237)
; [eval] -1
(push) ; 7
; [then-branch: 10 | First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01] == -1 | live]
; [else-branch: 10 | First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01] != -1 | live]
(push) ; 8
; [then-branch: 10 | First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i__71@92@01)
  (- 0 1)))
(pop) ; 8
(push) ; 8
; [else-branch: 10 | First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
      i__71@92@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 9
(assert (not (>= i__71@92@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               637
;  :arith-assert-diseq      17
;  :arith-assert-lower      48
;  :arith-assert-upper      39
;  :arith-conflicts         6
;  :arith-eq-adapter        21
;  :arith-fixed-eqs         9
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              30
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             584
;  :mk-clause               44
;  :num-allocs              4161048
;  :num-checks              93
;  :propagations            35
;  :quant-instantiations    35
;  :rlimit-count            145474)
(push) ; 9
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01] | live]
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01]) | live]
(push) ; 10
; [then-branch: 11 | 0 <= First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i__71@92@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 11
(assert (not (>= i__71@92@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      17
;  :arith-assert-lower      50
;  :arith-assert-upper      40
;  :arith-conflicts         6
;  :arith-eq-adapter        22
;  :arith-fixed-eqs         10
;  :binary-propagations     16
;  :conflicts               60
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              30
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             588
;  :mk-clause               44
;  :num-allocs              4161048
;  :num-checks              94
;  :propagations            35
;  :quant-instantiations    35
;  :rlimit-count            145605)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 10
(push) ; 10
; [else-branch: 11 | !(0 <= First:(Second:(Second:(Second:($t@59@01))))[i__71@92@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
      i__71@92@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(i__71@92@01 < |First:(Second:(Second:(Second:($t@59@01))))| && 0 <= i__71@92@01)]
(assert (not
  (and
    (<
      i__71@92@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
    (<= 0 i__71@92@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((i__71@92@01 Int)) (!
  (implies
    (and
      (<
        i__71@92@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
      (<= 0 i__71@92@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
          i__71@92@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i__71@92@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i__71@92@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i__71@92@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      18
;  :arith-assert-lower      51
;  :arith-assert-upper      41
;  :arith-conflicts         6
;  :arith-eq-adapter        23
;  :arith-fixed-eqs         11
;  :binary-propagations     16
;  :conflicts               61
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             596
;  :mk-clause               56
;  :num-allocs              4161048
;  :num-checks              95
;  :propagations            37
;  :quant-instantiations    36
;  :rlimit-count            146051)
(assert (forall ((i__71@92@01 Int)) (!
  (implies
    (and
      (<
        i__71@92@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))
      (<= 0 i__71@92@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
          i__71@92@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i__71@92@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
            i__71@92@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))
    i__71@92@01))
  :qid |prog.l<no position>|)))
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@93@01 $Perm.No) (< $Perm.No $k@93@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      53
;  :arith-assert-upper      42
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             601
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              96
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146612)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@61@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      53
;  :arith-assert-upper      42
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :binary-propagations     16
;  :conflicts               62
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             601
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              97
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146623)
(assert (< $k@93@01 $k@61@01))
(assert (<= $Perm.No (- $k@61@01 $k@93@01)))
(assert (<= (- $k@61@01 $k@93@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@61@01 $k@93@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               63
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              98
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146837)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               64
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              99
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146885)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               65
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              100
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146933)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               66
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              101
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            146981)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               67
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              102
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            147029)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               68
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              103
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            147077)
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               69
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              104
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            147125)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               70
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              105
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            147173)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      19
;  :arith-assert-lower      55
;  :arith-assert-upper      43
;  :arith-conflicts         6
;  :arith-eq-adapter        24
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               71
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             604
;  :mk-clause               58
;  :num-allocs              4161048
;  :num-checks              106
;  :propagations            38
;  :quant-instantiations    36
;  :rlimit-count            147221)
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@94@01 $Perm.No) (< $Perm.No $k@94@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               639
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      44
;  :arith-conflicts         6
;  :arith-eq-adapter        25
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               72
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              54
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             608
;  :mk-clause               60
;  :num-allocs              4161048
;  :num-checks              107
;  :propagations            39
;  :quant-instantiations    36
;  :rlimit-count            147420)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= (+ $k@37@01 $k@62@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               640
;  :arith-assert-diseq      20
;  :arith-assert-lower      57
;  :arith-assert-upper      45
;  :arith-conflicts         7
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         11
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               73
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              56
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             610
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              108
;  :propagations            40
;  :quant-instantiations    36
;  :rlimit-count            147480)
(assert (< $k@94@01 (+ $k@37@01 $k@62@01)))
(assert (<= $Perm.No (- (+ $k@37@01 $k@62@01) $k@94@01)))
(assert (<= (- (+ $k@37@01 $k@62@01) $k@94@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ $k@37@01 $k@62@01) $k@94@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               640
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              56
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             614
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              109
;  :propagations            40
;  :quant-instantiations    36
;  :rlimit-count            147708)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               640
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      47
;  :arith-conflicts         8
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         12
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               74
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              56
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             614
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              110
;  :propagations            40
;  :quant-instantiations    36
;  :rlimit-count            147721)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               640
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      48
;  :arith-conflicts         9
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               75
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              56
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             615
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              111
;  :propagations            40
;  :quant-instantiations    36
;  :rlimit-count            147781)
(push) ; 4
(assert (not (= diz@34@01 $t@63@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               640
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      48
;  :arith-conflicts         9
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    86
;  :datatype-constructor-ax 48
;  :datatype-occurs-check   32
;  :datatype-splits         38
;  :decisions               46
;  :del-clause              56
;  :final-checks            19
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             616
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              112
;  :propagations            40
;  :quant-instantiations    36
;  :rlimit-count            147841)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      48
;  :arith-conflicts         9
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         13
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               76
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             632
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              113
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148490
;  :time                    0.00)
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         10
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         14
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               77
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             633
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              114
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148550)
(push) ; 4
(assert (not (= diz@34@01 $t@63@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      49
;  :arith-conflicts         10
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         14
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               78
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             634
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              115
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148610)
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      50
;  :arith-conflicts         11
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         15
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               79
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             635
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              116
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148670)
(push) ; 4
(assert (not (= diz@34@01 $t@63@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      50
;  :arith-conflicts         11
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         15
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               80
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             636
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              117
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148730)
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      51
;  :arith-conflicts         12
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               81
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             637
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              118
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148790)
(push) ; 4
(assert (not (= diz@34@01 $t@63@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      51
;  :arith-conflicts         12
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         16
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               82
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             638
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              119
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148850)
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      20
;  :arith-assert-lower      59
;  :arith-assert-upper      52
;  :arith-conflicts         13
;  :arith-eq-adapter        26
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               83
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             639
;  :mk-clause               62
;  :num-allocs              4161048
;  :num-checks              120
;  :propagations            41
;  :quant-instantiations    36
;  :rlimit-count            148910)
(declare-const $k@95@01 $Perm)
(assert ($Perm.isReadVar $k@95@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@95@01 $Perm.No) (< $Perm.No $k@95@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      21
;  :arith-assert-lower      61
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             643
;  :mk-clause               64
;  :num-allocs              4161048
;  :num-checks              121
;  :propagations            42
;  :quant-instantiations    36
;  :rlimit-count            149108)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@64@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      21
;  :arith-assert-lower      61
;  :arith-assert-upper      53
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         17
;  :arith-pivots            1
;  :binary-propagations     16
;  :conflicts               84
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             643
;  :mk-clause               64
;  :num-allocs              4161048
;  :num-checks              122
;  :propagations            42
;  :quant-instantiations    36
;  :rlimit-count            149119)
(assert (< $k@95@01 $k@64@01))
(assert (<= $Perm.No (- $k@64@01 $k@95@01)))
(assert (<= (- $k@64@01 $k@95@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@64@01 $k@95@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01)))
      $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 4
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               64
;  :num-allocs              4161048
;  :num-checks              123
;  :propagations            42
;  :quant-instantiations    36
;  :rlimit-count            149339)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               85
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               64
;  :num-allocs              4161048
;  :num-checks              124
;  :propagations            42
;  :quant-instantiations    36
;  :rlimit-count            149352)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      21
;  :arith-assert-lower      63
;  :arith-assert-upper      54
;  :arith-conflicts         13
;  :arith-eq-adapter        27
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               86
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             646
;  :mk-clause               64
;  :num-allocs              4161048
;  :num-checks              125
;  :propagations            42
;  :quant-instantiations    36
;  :rlimit-count            149400)
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01 $Perm.Write))
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               87
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              126
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149597)
(set-option :timeout 0)
(push) ; 4
(assert (not (or (= $k@96@01 $Perm.No) (< $Perm.No $k@96@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              127
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149647)
(set-option :timeout 10)
(push) ; 4
(assert (not (not (= $k@65@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      65
;  :arith-assert-upper      55
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            3
;  :binary-propagations     16
;  :conflicts               88
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             650
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              128
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149658)
(assert (< $k@96@01 $k@65@01))
(assert (<= $Perm.No (- $k@65@01 $k@96@01)))
(assert (<= (- $k@65@01 $k@96@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@65@01 $k@96@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 4
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               89
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              129
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149872)
(push) ; 4
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      56
;  :arith-conflicts         13
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         17
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               90
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             653
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              130
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149920)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 4
(assert (not (< $Perm.No (+ $k@37@01 $k@62@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         14
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         18
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               91
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             654
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              131
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            149980)
(set-option :timeout 0)
(push) ; 4
(assert (not (= $t@63@01 diz@34@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         14
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         18
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             654
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              132
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            150032)
(assert (= $t@63@01 diz@34@01))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               696
;  :arith-assert-diseq      22
;  :arith-assert-lower      67
;  :arith-assert-upper      57
;  :arith-conflicts         14
;  :arith-eq-adapter        28
;  :arith-fixed-eqs         18
;  :arith-pivots            4
;  :binary-propagations     16
;  :conflicts               92
;  :datatype-accessor-ax    87
;  :datatype-constructor-ax 68
;  :datatype-occurs-check   40
;  :datatype-splits         55
;  :decisions               65
;  :del-clause              56
;  :final-checks            22
;  :max-generation          2
;  :max-memory              4.26
;  :memory                  4.26
;  :mk-bool-var             654
;  :mk-clause               66
;  :num-allocs              4161048
;  :num-checks              133
;  :propagations            43
;  :quant-instantiations    36
;  :rlimit-count            150080)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert ($Perm.isReadVar $k@88@01 $Perm.Write))
(assert ($Perm.isReadVar $k@89@01 $Perm.Write))
(assert ($Perm.isReadVar $k@90@01 $Perm.Write))
(assert ($Perm.isReadVar $k@91@01 $Perm.Write))
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (= ($Snap.first ($Snap.second $t@86@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@86@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  $Snap.unit))
(assert (forall ((i__71@87@01 Int)) (!
  (implies
    (and
      (<
        i__71@87@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
      (<= 0 i__71@87@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
          i__71@87@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__71@87@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__71@87@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__71@87@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
(assert (<= $Perm.No $k@88@01))
(assert (<= $k@88@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@88@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(assert (<= $Perm.No $k@89@01))
(assert (<= $k@89@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@89@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@90@01))
(assert (<= $k@90@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@90@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@91@01))
(assert (<= $k@91@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@91@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1365
;  :arith-assert-diseq      26
;  :arith-assert-lower      84
;  :arith-assert-upper      72
;  :arith-conflicts         14
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    130
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              70
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             879
;  :mk-clause               82
;  :num-allocs              4307401
;  :num-checks              136
;  :propagations            56
;  :quant-instantiations    49
;  :rlimit-count            158739
;  :time                    0.00)
; [then-branch: 12 | True | live]
; [else-branch: 12 | False | dead]
(push) ; 5
; [then-branch: 12 | True]
; [exec]
; diz.Driver_a := 0
(declare-const __flatten_26__52@97@01 Int)
(declare-const __flatten_27__53@98@01 Int)
(declare-const __flatten_29__55@99@01 $Ref)
(declare-const __flatten_28__54@100@01 $Ref)
(declare-const __flatten_30__56@101@01 Int)
(declare-const __flatten_32__58@102@01 $Ref)
(declare-const __flatten_31__57@103@01 $Ref)
(declare-const __flatten_33__59@104@01 Int)
(declare-const __flatten_35__61@105@01 $Ref)
(declare-const __flatten_34__60@106@01 $Ref)
(declare-const __flatten_36__62@107@01 Int)
(declare-const __flatten_37__63@108@01 Int)
(declare-const __flatten_38__64@109@01 $Ref)
(declare-const __flatten_40__66@110@01 $Ref)
(declare-const __flatten_39__65@111@01 Seq<Int>)
(declare-const __flatten_41__67@112@01 $Ref)
(declare-const __flatten_43__69@113@01 $Ref)
(declare-const __flatten_42__68@114@01 Seq<Int>)
(declare-const __flatten_44__70@115@01 Int)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 ($Snap.combine ($Snap.first $t@116@01) ($Snap.second $t@116@01))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1370
;  :arith-assert-diseq      26
;  :arith-assert-lower      84
;  :arith-assert-upper      72
;  :arith-conflicts         14
;  :arith-eq-adapter        38
;  :arith-fixed-eqs         22
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    131
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              70
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             880
;  :mk-clause               82
;  :num-allocs              4307401
;  :num-checks              137
;  :propagations            56
;  :quant-instantiations    49
;  :rlimit-count            158857)
(assert (=
  ($Snap.second $t@116@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@116@01))
    ($Snap.second ($Snap.second $t@116@01)))))
(assert (= ($Snap.first ($Snap.second $t@116@01)) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@116@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@116@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@116@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  $Snap.unit))
; [eval] (forall i__72: Int :: { diz.Driver_m.Main_process_state[i__72] } 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|)
(declare-const i__72@117@01 Int)
(push) ; 7
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__72
(push) ; 8
; [then-branch: 13 | 0 <= i__72@117@01 | live]
; [else-branch: 13 | !(0 <= i__72@117@01) | live]
(push) ; 9
; [then-branch: 13 | 0 <= i__72@117@01]
(assert (<= 0 i__72@117@01))
; [eval] i__72 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 13 | !(0 <= i__72@117@01)]
(assert (not (<= 0 i__72@117@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 14 | i__72@117@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__72@117@01 | live]
; [else-branch: 14 | !(i__72@117@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__72@117@01) | live]
(push) ; 9
; [then-branch: 14 | i__72@117@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__72@117@01]
(assert (and
  (<
    i__72@117@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  (<= 0 i__72@117@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72] == -1
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 10
(assert (not (>= i__72@117@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1415
;  :arith-assert-diseq      26
;  :arith-assert-lower      89
;  :arith-assert-upper      75
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              70
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             905
;  :mk-clause               82
;  :num-allocs              4307401
;  :num-checks              138
;  :propagations            56
;  :quant-instantiations    54
;  :rlimit-count            160140)
; [eval] -1
(push) ; 10
; [then-branch: 15 | First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01] == -1 | live]
; [else-branch: 15 | First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01] != -1 | live]
(push) ; 11
; [then-branch: 15 | First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__72@117@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 15 | First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__72@117@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72]
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 12
(assert (not (>= i__72@117@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1415
;  :arith-assert-diseq      26
;  :arith-assert-lower      89
;  :arith-assert-upper      75
;  :arith-conflicts         14
;  :arith-eq-adapter        40
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              70
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             906
;  :mk-clause               82
;  :num-allocs              4307401
;  :num-checks              139
;  :propagations            56
;  :quant-instantiations    54
;  :rlimit-count            160315)
(push) ; 12
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01] | live]
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01]) | live]
(push) ; 13
; [then-branch: 16 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__72@117@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 14
(assert (not (>= i__72@117@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1415
;  :arith-assert-diseq      27
;  :arith-assert-lower      92
;  :arith-assert-upper      75
;  :arith-conflicts         14
;  :arith-eq-adapter        41
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               94
;  :datatype-accessor-ax    138
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              70
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             909
;  :mk-clause               83
;  :num-allocs              4307401
;  :num-checks              140
;  :propagations            56
;  :quant-instantiations    54
;  :rlimit-count            160439)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 16 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__72@117@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__72@117@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 14 | !(i__72@117@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__72@117@01)]
(assert (not
  (and
    (<
      i__72@117@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    (<= 0 i__72@117@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__72@117@01 Int)) (!
  (implies
    (and
      (<
        i__72@117@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__72@117@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__72@117@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__72@117@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__72@117@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__72@117@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@118@01 $Perm.No) (< $Perm.No $k@118@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1420
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      76
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               95
;  :datatype-accessor-ax    139
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             915
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              141
;  :propagations            57
;  :quant-instantiations    54
;  :rlimit-count            161207)
(assert (<= $Perm.No $k@118@01))
(assert (<= $k@118@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@118@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1426
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               96
;  :datatype-accessor-ax    140
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             918
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              142
;  :propagations            57
;  :quant-instantiations    54
;  :rlimit-count            161530)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1432
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               97
;  :datatype-accessor-ax    141
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             921
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              143
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            161886)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1437
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               98
;  :datatype-accessor-ax    142
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             922
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              144
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            162143)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1442
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               99
;  :datatype-accessor-ax    143
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             923
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              145
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            162410)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1447
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               100
;  :datatype-accessor-ax    144
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             924
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              146
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            162687)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1452
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               101
;  :datatype-accessor-ax    145
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             925
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              147
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            162974)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1457
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               102
;  :datatype-accessor-ax    146
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             926
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              148
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            163271)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1463
;  :arith-assert-diseq      28
;  :arith-assert-lower      94
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               103
;  :datatype-accessor-ax    147
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             928
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              149
;  :propagations            57
;  :quant-instantiations    55
;  :rlimit-count            163610)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1470
;  :arith-assert-diseq      28
;  :arith-assert-lower      95
;  :arith-assert-upper      77
;  :arith-conflicts         14
;  :arith-eq-adapter        42
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               104
;  :datatype-accessor-ax    148
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             932
;  :mk-clause               85
;  :num-allocs              4307401
;  :num-checks              150
;  :propagations            57
;  :quant-instantiations    56
;  :rlimit-count            164057)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
(declare-const $k@119@01 $Perm)
(assert ($Perm.isReadVar $k@119@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@119@01 $Perm.No) (< $Perm.No $k@119@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1475
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      79
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               105
;  :datatype-accessor-ax    149
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.36
;  :memory                  4.36
;  :mk-bool-var             938
;  :mk-clause               87
;  :num-allocs              4307401
;  :num-checks              151
;  :propagations            58
;  :quant-instantiations    56
;  :rlimit-count            164575)
(assert (<= $Perm.No $k@119@01))
(assert (<= $k@119@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1481
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               106
;  :datatype-accessor-ax    150
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             941
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              152
;  :propagations            58
;  :quant-instantiations    56
;  :rlimit-count            164998)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1487
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             944
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              153
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            165454)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1487
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               107
;  :datatype-accessor-ax    151
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             944
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              154
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            165467)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1492
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               108
;  :datatype-accessor-ax    152
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             945
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              155
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            165824)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1497
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               109
;  :datatype-accessor-ax    153
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             946
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              156
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            166191)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1502
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               110
;  :datatype-accessor-ax    154
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             947
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              157
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            166568)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1507
;  :arith-assert-diseq      29
;  :arith-assert-lower      97
;  :arith-assert-upper      80
;  :arith-conflicts         14
;  :arith-eq-adapter        43
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               111
;  :datatype-accessor-ax    155
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             948
;  :mk-clause               87
;  :num-allocs              4460351
;  :num-checks              158
;  :propagations            58
;  :quant-instantiations    57
;  :rlimit-count            166955)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@120@01 $Perm.No) (< $Perm.No $k@120@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1512
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      81
;  :arith-conflicts         14
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               112
;  :datatype-accessor-ax    156
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             953
;  :mk-clause               89
;  :num-allocs              4460351
;  :num-checks              159
;  :propagations            59
;  :quant-instantiations    57
;  :rlimit-count            167495)
(assert (<= $Perm.No $k@120@01))
(assert (<= $k@120@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_mon != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1518
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      82
;  :arith-conflicts         14
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               113
;  :datatype-accessor-ax    157
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             956
;  :mk-clause               89
;  :num-allocs              4460351
;  :num-checks              160
;  :propagations            59
;  :quant-instantiations    57
;  :rlimit-count            167988)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
(push) ; 7
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1524
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      82
;  :arith-conflicts         14
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             959
;  :mk-clause               89
;  :num-allocs              4460351
;  :num-checks              161
;  :propagations            59
;  :quant-instantiations    58
;  :rlimit-count            168522)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1524
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      82
;  :arith-conflicts         14
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               114
;  :datatype-accessor-ax    158
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             959
;  :mk-clause               89
;  :num-allocs              4460351
;  :num-checks              162
;  :propagations            59
;  :quant-instantiations    58
;  :rlimit-count            168535)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1529
;  :arith-assert-diseq      30
;  :arith-assert-lower      99
;  :arith-assert-upper      82
;  :arith-conflicts         14
;  :arith-eq-adapter        44
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               115
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             960
;  :mk-clause               89
;  :num-allocs              4460351
;  :num-checks              163
;  :propagations            59
;  :quant-instantiations    58
;  :rlimit-count            168962)
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@121@01 $Perm.No) (< $Perm.No $k@121@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1529
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      83
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               116
;  :datatype-accessor-ax    159
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             964
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              164
;  :propagations            60
;  :quant-instantiations    58
;  :rlimit-count            169161)
(assert (<= $Perm.No $k@121@01))
(assert (<= $k@121@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1535
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      84
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               117
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             967
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              165
;  :propagations            60
;  :quant-instantiations    58
;  :rlimit-count            169684)
(push) ; 7
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1535
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      84
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               118
;  :datatype-accessor-ax    160
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             967
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              166
;  :propagations            60
;  :quant-instantiations    58
;  :rlimit-count            169732)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 7
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1544
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      84
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    161
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             971
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              167
;  :propagations            60
;  :quant-instantiations    59
;  :rlimit-count            170330)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1552
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      84
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              71
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             973
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              168
;  :propagations            60
;  :quant-instantiations    59
;  :rlimit-count            170804)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 7
; [eval] diz.Driver_a < 8
(pop) ; 7
(push) ; 7
; [eval] !(diz.Driver_a < 8)
; [eval] diz.Driver_a < 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1562
;  :arith-assert-diseq      31
;  :arith-assert-lower      101
;  :arith-assert-upper      84
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         23
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              79
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             978
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              169
;  :propagations            60
;  :quant-instantiations    61
;  :rlimit-count            171360)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__72: Int :: { diz.Driver_m.Main_process_state[i__72] } 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|)
(declare-const i__72@122@01 Int)
(push) ; 7
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__72
(push) ; 8
; [then-branch: 17 | 0 <= i__72@122@01 | live]
; [else-branch: 17 | !(0 <= i__72@122@01) | live]
(push) ; 9
; [then-branch: 17 | 0 <= i__72@122@01]
(assert (<= 0 i__72@122@01))
; [eval] i__72 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 9
(push) ; 9
; [else-branch: 17 | !(0 <= i__72@122@01)]
(assert (not (<= 0 i__72@122@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 18 | i__72@122@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__72@122@01 | live]
; [else-branch: 18 | !(i__72@122@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__72@122@01) | live]
(push) ; 9
; [then-branch: 18 | i__72@122@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__72@122@01]
(assert (and
  (<
    i__72@122@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  (<= 0 i__72@122@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72] == -1
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 10
(assert (not (>= i__72@122@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1563
;  :arith-assert-diseq      31
;  :arith-assert-lower      102
;  :arith-assert-upper      85
;  :arith-conflicts         14
;  :arith-eq-adapter        45
;  :arith-fixed-eqs         24
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              79
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             980
;  :mk-clause               91
;  :num-allocs              4460351
;  :num-checks              170
;  :propagations            60
;  :quant-instantiations    61
;  :rlimit-count            171500)
; [eval] -1
(push) ; 10
; [then-branch: 19 | First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01] == -1 | live]
; [else-branch: 19 | First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01] != -1 | live]
(push) ; 11
; [then-branch: 19 | First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__72@122@01)
  (- 0 1)))
(pop) ; 11
(push) ; 11
; [else-branch: 19 | First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
      i__72@122@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72]
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 12
(assert (not (>= i__72@122@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1565
;  :arith-assert-diseq      33
;  :arith-assert-lower      105
;  :arith-assert-upper      86
;  :arith-conflicts         14
;  :arith-eq-adapter        46
;  :arith-fixed-eqs         24
;  :arith-pivots            12
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              79
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             987
;  :mk-clause               101
;  :num-allocs              4460351
;  :num-checks              171
;  :propagations            65
;  :quant-instantiations    62
;  :rlimit-count            171730)
(push) ; 12
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01] | live]
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01]) | live]
(push) ; 13
; [then-branch: 20 | 0 <= First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__72@122@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 14
(assert (not (>= i__72@122@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      33
;  :arith-assert-lower      107
;  :arith-assert-upper      87
;  :arith-conflicts         14
;  :arith-eq-adapter        47
;  :arith-fixed-eqs         25
;  :arith-pivots            13
;  :binary-propagations     16
;  :conflicts               119
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              79
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             991
;  :mk-clause               101
;  :num-allocs              4460351
;  :num-checks              172
;  :propagations            65
;  :quant-instantiations    62
;  :rlimit-count            171865)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 13
(push) ; 13
; [else-branch: 20 | !(0 <= First:(Second:(Second:(Second:($t@86@01))))[i__72@122@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
      i__72@122@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 18 | !(i__72@122@01 < |First:(Second:(Second:(Second:($t@86@01))))| && 0 <= i__72@122@01)]
(assert (not
  (and
    (<
      i__72@122@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    (<= 0 i__72@122@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((i__72@122@01 Int)) (!
  (implies
    (and
      (<
        i__72@122@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
      (<= 0 i__72@122@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
          i__72@122@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__72@122@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__72@122@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__72@122@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      34
;  :arith-assert-lower      108
;  :arith-assert-upper      88
;  :arith-conflicts         14
;  :arith-eq-adapter        48
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               120
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             999
;  :mk-clause               113
;  :num-allocs              4460351
;  :num-checks              173
;  :propagations            67
;  :quant-instantiations    63
;  :rlimit-count            172314)
(assert (forall ((i__72@122@01 Int)) (!
  (implies
    (and
      (<
        i__72@122@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
      (<= 0 i__72@122@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
          i__72@122@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__72@122@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
            i__72@122@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    i__72@122@01))
  :qid |prog.l<no position>|)))
(declare-const $k@123@01 $Perm)
(assert ($Perm.isReadVar $k@123@01 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@123@01 $Perm.No) (< $Perm.No $k@123@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      110
;  :arith-assert-upper      89
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               121
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1004
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              174
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            172875)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@88@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      110
;  :arith-assert-upper      89
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               121
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1004
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              175
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            172886)
(assert (< $k@123@01 $k@88@01))
(assert (<= $Perm.No (- $k@88@01 $k@123@01)))
(assert (<= (- $k@88@01 $k@123@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@88@01 $k@123@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               122
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              176
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173094)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               123
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              177
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173142)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               124
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              178
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173190)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               125
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              179
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173238)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               126
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              180
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173286)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               127
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              181
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173334)
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               128
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              182
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173382)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               129
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              183
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173430)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      35
;  :arith-assert-lower      112
;  :arith-assert-upper      90
;  :arith-conflicts         14
;  :arith-eq-adapter        49
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               130
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1007
;  :mk-clause               115
;  :num-allocs              4460351
;  :num-checks              184
;  :propagations            68
;  :quant-instantiations    63
;  :rlimit-count            173478)
(declare-const $k@124@01 $Perm)
(assert ($Perm.isReadVar $k@124@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@124@01 $Perm.No) (< $Perm.No $k@124@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      36
;  :arith-assert-lower      114
;  :arith-assert-upper      91
;  :arith-conflicts         14
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1011
;  :mk-clause               117
;  :num-allocs              4460351
;  :num-checks              185
;  :propagations            69
;  :quant-instantiations    63
;  :rlimit-count            173677)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@89@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      36
;  :arith-assert-lower      114
;  :arith-assert-upper      91
;  :arith-conflicts         14
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               131
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1011
;  :mk-clause               117
;  :num-allocs              4460351
;  :num-checks              186
;  :propagations            69
;  :quant-instantiations    63
;  :rlimit-count            173688)
(assert (< $k@124@01 $k@89@01))
(assert (<= $Perm.No (- $k@89@01 $k@124@01)))
(assert (<= (- $k@89@01 $k@124@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@89@01 $k@124@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      36
;  :arith-assert-lower      116
;  :arith-assert-upper      92
;  :arith-conflicts         14
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1014
;  :mk-clause               117
;  :num-allocs              4460351
;  :num-checks              187
;  :propagations            69
;  :quant-instantiations    63
;  :rlimit-count            173896)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      36
;  :arith-assert-lower      116
;  :arith-assert-upper      92
;  :arith-conflicts         14
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               132
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1014
;  :mk-clause               117
;  :num-allocs              4460351
;  :num-checks              188
;  :propagations            69
;  :quant-instantiations    63
;  :rlimit-count            173909)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1567
;  :arith-assert-diseq      36
;  :arith-assert-lower      116
;  :arith-assert-upper      92
;  :arith-conflicts         14
;  :arith-eq-adapter        50
;  :arith-fixed-eqs         26
;  :arith-pivots            14
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    162
;  :datatype-constructor-ax 236
;  :datatype-occurs-check   70
;  :datatype-splits         172
;  :decisions               222
;  :del-clause              101
;  :final-checks            31
;  :max-generation          2
;  :max-memory              4.45
;  :memory                  4.45
;  :mk-bool-var             1014
;  :mk-clause               117
;  :num-allocs              4460351
;  :num-checks              189
;  :propagations            69
;  :quant-instantiations    63
;  :rlimit-count            173957)
(push) ; 7
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               133
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              190
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175001
;  :time                    0.00)
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               134
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              191
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175049)
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               135
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              192
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175097)
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               136
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              193
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175145)
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              194
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175193)
(push) ; 7
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      36
;  :arith-assert-lower      117
;  :arith-assert-upper      93
;  :arith-conflicts         14
;  :arith-eq-adapter        51
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               137
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1055
;  :mk-clause               118
;  :num-allocs              4619696
;  :num-checks              195
;  :propagations            72
;  :quant-instantiations    63
;  :rlimit-count            175204)
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@125@01 $Perm.No) (< $Perm.No $k@125@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      94
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1059
;  :mk-clause               120
;  :num-allocs              4619696
;  :num-checks              196
;  :propagations            73
;  :quant-instantiations    63
;  :rlimit-count            175402)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@90@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      37
;  :arith-assert-lower      119
;  :arith-assert-upper      94
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         27
;  :arith-pivots            16
;  :binary-propagations     16
;  :conflicts               138
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1059
;  :mk-clause               120
;  :num-allocs              4619696
;  :num-checks              197
;  :propagations            73
;  :quant-instantiations    63
;  :rlimit-count            175413)
(assert (< $k@125@01 $k@90@01))
(assert (<= $Perm.No (- $k@90@01 $k@125@01)))
(assert (<= (- $k@90@01 $k@125@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@90@01 $k@125@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 7
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      95
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1062
;  :mk-clause               120
;  :num-allocs              4619696
;  :num-checks              198
;  :propagations            73
;  :quant-instantiations    63
;  :rlimit-count            175627)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      95
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               139
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1062
;  :mk-clause               120
;  :num-allocs              4619696
;  :num-checks              199
;  :propagations            73
;  :quant-instantiations    63
;  :rlimit-count            175640)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      37
;  :arith-assert-lower      121
;  :arith-assert-upper      95
;  :arith-conflicts         14
;  :arith-eq-adapter        52
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               140
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1062
;  :mk-clause               120
;  :num-allocs              4619696
;  :num-checks              200
;  :propagations            73
;  :quant-instantiations    63
;  :rlimit-count            175688)
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01 $Perm.Write))
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      96
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               141
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1066
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              201
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            175884)
(set-option :timeout 0)
(push) ; 7
(assert (not (or (= $k@126@01 $Perm.No) (< $Perm.No $k@126@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      96
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1066
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              202
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            175934)
(set-option :timeout 10)
(push) ; 7
(assert (not (not (= $k@91@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      123
;  :arith-assert-upper      96
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            17
;  :binary-propagations     16
;  :conflicts               142
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1066
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              203
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            175945)
(assert (< $k@126@01 $k@91@01))
(assert (<= $Perm.No (- $k@91@01 $k@126@01)))
(assert (<= (- $k@91@01 $k@126@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@91@01 $k@126@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 7
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      97
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               143
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1069
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              204
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            176159)
(push) ; 7
(assert (not (< $Perm.No $k@91@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      97
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               144
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1069
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              205
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            176207)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 7
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      97
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1069
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              206
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            176255)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               1686
;  :arith-assert-diseq      38
;  :arith-assert-lower      125
;  :arith-assert-upper      97
;  :arith-conflicts         14
;  :arith-eq-adapter        53
;  :arith-fixed-eqs         27
;  :arith-pivots            18
;  :binary-propagations     16
;  :conflicts               145
;  :datatype-accessor-ax    165
;  :datatype-constructor-ax 278
;  :datatype-occurs-check   80
;  :datatype-splits         211
;  :decisions               261
;  :del-clause              102
;  :final-checks            34
;  :max-generation          2
;  :max-memory              4.55
;  :memory                  4.55
;  :mk-bool-var             1069
;  :mk-clause               122
;  :num-allocs              4619696
;  :num-checks              207
;  :propagations            74
;  :quant-instantiations    63
;  :rlimit-count            176268)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert ($Perm.isReadVar $k@118@01 $Perm.Write))
(assert ($Perm.isReadVar $k@119@01 $Perm.Write))
(assert ($Perm.isReadVar $k@120@01 $Perm.Write))
(assert ($Perm.isReadVar $k@121@01 $Perm.Write))
(assert (= $t@116@01 ($Snap.combine ($Snap.first $t@116@01) ($Snap.second $t@116@01))))
(assert (=
  ($Snap.second $t@116@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@116@01))
    ($Snap.second ($Snap.second $t@116@01)))))
(assert (= ($Snap.first ($Snap.second $t@116@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@116@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@116@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@116@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  $Snap.unit))
(assert (forall ((i__72@117@01 Int)) (!
  (implies
    (and
      (<
        i__72@117@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__72@117@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__72@117@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__72@117@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__72@117@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__72@117@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
(assert (<= $Perm.No $k@118@01))
(assert (<= $k@118@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@118@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  $Snap.unit))
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
(assert (<= $Perm.No $k@119@01))
(assert (<= $k@119@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@119@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@120@01))
(assert (<= $k@120@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@120@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@121@01))
(assert (<= $k@121@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@121@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Driver_a < 8
(push) ; 8
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    8))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2574
;  :arith-add-rows          4
;  :arith-assert-diseq      42
;  :arith-assert-lower      146
;  :arith-assert-upper      118
;  :arith-conflicts         14
;  :arith-eq-adapter        68
;  :arith-fixed-eqs         34
;  :arith-offset-eqs        2
;  :arith-pivots            34
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    209
;  :datatype-constructor-ax 492
;  :datatype-occurs-check   116
;  :datatype-splits         384
;  :decisions               465
;  :del-clause              125
;  :final-checks            45
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1361
;  :mk-clause               146
;  :num-allocs              4782781
;  :num-checks              210
;  :propagations            92
;  :quant-instantiations    76
;  :rlimit-count            186398
;  :time                    0.00)
(push) ; 8
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  8)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2779
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      150
;  :arith-assert-upper      121
;  :arith-conflicts         14
;  :arith-eq-adapter        71
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            40
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1429
;  :mk-clause               149
;  :num-allocs              4782781
;  :num-checks              211
;  :propagations            96
;  :quant-instantiations    77
;  :rlimit-count            188214
;  :time                    0.00)
; [then-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8 | live]
; [else-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8) | live]
(push) ; 8
; [then-branch: 21 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  8))
; [exec]
; __flatten_26__52 := diz.Driver_y
(declare-const __flatten_26__52@127@01 Int)
(assert (=
  __flatten_26__52@127@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))))
; [exec]
; diz.Driver_y := diz.Driver_y + 1
; [eval] diz.Driver_y + 1
(declare-const Driver_y@128@01 Int)
(assert (=
  Driver_y@128@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    1)))
; [exec]
; __flatten_27__53 := 16 - diz.Driver_y
; [eval] 16 - diz.Driver_y
(declare-const __flatten_27__53@129@01 Int)
(assert (= __flatten_27__53@129@01 (- 16 Driver_y@128@01)))
; [exec]
; diz.Driver_x := __flatten_27__53
; [exec]
; __flatten_29__55 := diz.Driver_m
(declare-const __flatten_29__55@130@01 $Ref)
(assert (= __flatten_29__55@130@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_28__54 := __flatten_29__55.Main_alu
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_29__55@130@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2785
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               146
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1440
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              212
;  :propagations            100
;  :quant-instantiations    79
;  :rlimit-count            188853)
(push) ; 9
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2785
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1440
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              213
;  :propagations            100
;  :quant-instantiations    79
;  :rlimit-count            188901)
(declare-const __flatten_28__54@131@01 $Ref)
(assert (=
  __flatten_28__54@131@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
; [exec]
; __flatten_30__56 := diz.Driver_z
(declare-const __flatten_30__56@132@01 Int)
(assert (=
  __flatten_30__56@132@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
; [exec]
; __flatten_28__54.ALU_OPCODE := __flatten_30__56
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  __flatten_28__54@131@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2788
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1443
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              214
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189268)
(assert (not (= __flatten_28__54@131@01 $Ref.null)))
; [exec]
; __flatten_32__58 := diz.Driver_m
(declare-const __flatten_32__58@133@01 $Ref)
(assert (= __flatten_32__58@133@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_31__57 := __flatten_32__58.Main_alu
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_32__58@133@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2790
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               147
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1445
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              215
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189365)
(push) ; 9
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2790
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1445
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              216
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189413)
(declare-const __flatten_31__57@134@01 $Ref)
(assert (=
  __flatten_31__57@134@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
; [exec]
; __flatten_33__59 := diz.Driver_x
; [exec]
; __flatten_31__57.ALU_OP1 := __flatten_33__59
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  __flatten_31__57@134@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2791
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1446
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              217
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189461)
(assert (not (= __flatten_31__57@134@01 $Ref.null)))
; [exec]
; __flatten_35__61 := diz.Driver_m
(declare-const __flatten_35__61@135@01 $Ref)
(assert (= __flatten_35__61@135@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_34__60 := __flatten_35__61.Main_alu
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_35__61@135@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2792
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               148
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1447
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              218
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189525)
(push) ; 9
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2792
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1447
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              219
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189573)
(declare-const __flatten_34__60@136@01 $Ref)
(assert (=
  __flatten_34__60@136@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))
; [exec]
; __flatten_36__62 := diz.Driver_y
; [exec]
; __flatten_34__60.ALU_OP2 := __flatten_36__62
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  __flatten_34__60@136@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2793
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      152
;  :arith-assert-upper      124
;  :arith-conflicts         14
;  :arith-eq-adapter        73
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            42
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1448
;  :mk-clause               155
;  :num-allocs              4782781
;  :num-checks              220
;  :propagations            100
;  :quant-instantiations    80
;  :rlimit-count            189621)
(assert (not (= __flatten_34__60@136@01 $Ref.null)))
; [exec]
; __flatten_37__63 := diz.Driver_z
(declare-const __flatten_37__63@137@01 Int)
(assert (=
  __flatten_37__63@137@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
; [exec]
; diz.Driver_z := diz.Driver_z + 1
; [eval] diz.Driver_z + 1
(declare-const Driver_z@138@01 Int)
(assert (=
  Driver_z@138@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    1)))
; [exec]
; __flatten_38__64 := diz.Driver_m
(declare-const __flatten_38__64@139@01 $Ref)
(assert (= __flatten_38__64@139@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_40__66 := diz.Driver_m
(declare-const __flatten_40__66@140@01 $Ref)
(assert (= __flatten_40__66@140@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_39__65 := __flatten_40__66.Main_process_state[0 := 0]
; [eval] __flatten_40__66.Main_process_state[0 := 0]
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_40__66@140@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2797
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      153
;  :arith-assert-upper      125
;  :arith-conflicts         14
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            43
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1454
;  :mk-clause               158
;  :num-allocs              4782781
;  :num-checks              221
;  :propagations            102
;  :quant-instantiations    80
;  :rlimit-count            189832)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2797
;  :arith-add-rows          8
;  :arith-assert-diseq      42
;  :arith-assert-lower      153
;  :arith-assert-upper      125
;  :arith-conflicts         14
;  :arith-eq-adapter        74
;  :arith-fixed-eqs         37
;  :arith-offset-eqs        2
;  :arith-pivots            43
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1454
;  :mk-clause               158
;  :num-allocs              4782781
;  :num-checks              222
;  :propagations            102
;  :quant-instantiations    80
;  :rlimit-count            189847)
(declare-const __flatten_39__65@141@01 Seq<Int>)
(assert (Seq_equal
  __flatten_39__65@141@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    0
    0)))
; [exec]
; __flatten_38__64.Main_process_state := __flatten_39__65
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_38__64@139@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2807
;  :arith-add-rows          9
;  :arith-assert-diseq      43
;  :arith-assert-lower      157
;  :arith-assert-upper      127
;  :arith-conflicts         14
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1477
;  :mk-clause               177
;  :num-allocs              4782781
;  :num-checks              223
;  :propagations            111
;  :quant-instantiations    85
;  :rlimit-count            190291)
(assert (not (= __flatten_38__64@139@01 $Ref.null)))
; [exec]
; __flatten_41__67 := diz.Driver_m
(declare-const __flatten_41__67@142@01 $Ref)
(assert (= __flatten_41__67@142@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_43__69 := diz.Driver_m
(declare-const __flatten_43__69@143@01 $Ref)
(assert (= __flatten_43__69@143@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))))
; [exec]
; __flatten_42__68 := __flatten_43__69.Main_event_state[0 := 5]
; [eval] __flatten_43__69.Main_event_state[0 := 5]
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_43__69@143@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2810
;  :arith-add-rows          9
;  :arith-assert-diseq      43
;  :arith-assert-lower      157
;  :arith-assert-upper      127
;  :arith-conflicts         14
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1480
;  :mk-clause               177
;  :num-allocs              4782781
;  :num-checks              224
;  :propagations            111
;  :quant-instantiations    85
;  :rlimit-count            190418)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2810
;  :arith-add-rows          9
;  :arith-assert-diseq      43
;  :arith-assert-lower      157
;  :arith-assert-upper      127
;  :arith-conflicts         14
;  :arith-eq-adapter        77
;  :arith-fixed-eqs         39
;  :arith-offset-eqs        2
;  :arith-pivots            44
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1480
;  :mk-clause               177
;  :num-allocs              4782781
;  :num-checks              225
;  :propagations            111
;  :quant-instantiations    85
;  :rlimit-count            190433)
(declare-const __flatten_42__68@144@01 Seq<Int>)
(assert (Seq_equal
  __flatten_42__68@144@01
  (Seq_update
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    0
    5)))
; [exec]
; __flatten_41__67.Main_event_state := __flatten_42__68
(set-option :timeout 10)
(push) ; 9
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) __flatten_41__67@142@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2820
;  :arith-add-rows          12
;  :arith-assert-diseq      44
;  :arith-assert-lower      161
;  :arith-assert-upper      129
;  :arith-conflicts         14
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    213
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1503
;  :mk-clause               196
;  :num-allocs              4782781
;  :num-checks              226
;  :propagations            120
;  :quant-instantiations    90
;  :rlimit-count            190931)
(assert (not (= __flatten_41__67@142@01 $Ref.null)))
(push) ; 9
; Loop head block: Check well-definedness of invariant
(declare-const $t@145@01 $Snap)
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2825
;  :arith-add-rows          12
;  :arith-assert-diseq      44
;  :arith-assert-lower      161
;  :arith-assert-upper      129
;  :arith-conflicts         14
;  :arith-eq-adapter        80
;  :arith-fixed-eqs         41
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    214
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.65
;  :memory                  4.65
;  :mk-bool-var             1504
;  :mk-clause               196
;  :num-allocs              4782781
;  :num-checks              227
;  :propagations            120
;  :quant-instantiations    90
;  :rlimit-count            191064)
(assert (=
  ($Snap.second $t@145@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@145@01))
    ($Snap.second ($Snap.second $t@145@01)))))
(assert (= ($Snap.first ($Snap.second $t@145@01)) $Snap.unit))
; [eval] diz.Driver_m != null
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@145@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@145@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@145@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  $Snap.unit))
; [eval] (forall i__73: Int :: { diz.Driver_m.Main_process_state[i__73] } 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|)
(declare-const i__73@146@01 Int)
(push) ; 10
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__73
(push) ; 11
; [then-branch: 22 | 0 <= i__73@146@01 | live]
; [else-branch: 22 | !(0 <= i__73@146@01) | live]
(push) ; 12
; [then-branch: 22 | 0 <= i__73@146@01]
(assert (<= 0 i__73@146@01))
; [eval] i__73 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 22 | !(0 <= i__73@146@01)]
(assert (not (<= 0 i__73@146@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 23 | i__73@146@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__73@146@01 | live]
; [else-branch: 23 | !(i__73@146@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__73@146@01) | live]
(push) ; 12
; [then-branch: 23 | i__73@146@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__73@146@01]
(assert (and
  (<
    i__73@146@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  (<= 0 i__73@146@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73] == -1
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 13
(assert (not (>= i__73@146@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2870
;  :arith-add-rows          12
;  :arith-assert-diseq      44
;  :arith-assert-lower      166
;  :arith-assert-upper      132
;  :arith-conflicts         14
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1529
;  :mk-clause               196
;  :num-allocs              4953017
;  :num-checks              228
;  :propagations            120
;  :quant-instantiations    95
;  :rlimit-count            192347)
; [eval] -1
(push) ; 13
; [then-branch: 24 | First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01] == -1 | live]
; [else-branch: 24 | First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01] != -1 | live]
(push) ; 14
; [then-branch: 24 | First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__73@146@01)
  (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 24 | First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i__73@146@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73]
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 15
(assert (not (>= i__73@146@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2870
;  :arith-add-rows          12
;  :arith-assert-diseq      44
;  :arith-assert-lower      166
;  :arith-assert-upper      132
;  :arith-conflicts         14
;  :arith-eq-adapter        82
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1530
;  :mk-clause               196
;  :num-allocs              4953017
;  :num-checks              229
;  :propagations            120
;  :quant-instantiations    95
;  :rlimit-count            192522)
(push) ; 15
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01]) | live]
(push) ; 16
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__73@146@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 17
(assert (not (>= i__73@146@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2870
;  :arith-add-rows          12
;  :arith-assert-diseq      45
;  :arith-assert-lower      169
;  :arith-assert-upper      132
;  :arith-conflicts         14
;  :arith-eq-adapter        83
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               149
;  :datatype-accessor-ax    221
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              128
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1533
;  :mk-clause               197
;  :num-allocs              4953017
;  :num-checks              230
;  :propagations            120
;  :quant-instantiations    95
;  :rlimit-count            192646)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i__73@146@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i__73@146@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 23 | !(i__73@146@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__73@146@01)]
(assert (not
  (and
    (<
      i__73@146@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    (<= 0 i__73@146@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i__73@146@01 Int)) (!
  (implies
    (and
      (<
        i__73@146@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i__73@146@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i__73@146@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__73@146@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__73@146@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__73@146@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@147@01 $Perm.No) (< $Perm.No $k@147@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2875
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      133
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               150
;  :datatype-accessor-ax    222
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1539
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              231
;  :propagations            121
;  :quant-instantiations    95
;  :rlimit-count            193414)
(assert (<= $Perm.No $k@147@01))
(assert (<= $k@147@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@147@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2881
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               151
;  :datatype-accessor-ax    223
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1542
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              232
;  :propagations            121
;  :quant-instantiations    95
;  :rlimit-count            193737)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2887
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               152
;  :datatype-accessor-ax    224
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1545
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              233
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            194093)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2892
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               153
;  :datatype-accessor-ax    225
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1546
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              234
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            194350)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2897
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               154
;  :datatype-accessor-ax    226
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1547
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              235
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            194617)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2902
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               155
;  :datatype-accessor-ax    227
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1548
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              236
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            194894)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2907
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               156
;  :datatype-accessor-ax    228
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1549
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              237
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            195181)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2912
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               157
;  :datatype-accessor-ax    229
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1550
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              238
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            195478)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2918
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      171
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               158
;  :datatype-accessor-ax    230
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1552
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              239
;  :propagations            121
;  :quant-instantiations    96
;  :rlimit-count            195817)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2925
;  :arith-add-rows          12
;  :arith-assert-diseq      46
;  :arith-assert-lower      172
;  :arith-assert-upper      134
;  :arith-conflicts         14
;  :arith-eq-adapter        84
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               159
;  :datatype-accessor-ax    231
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1556
;  :mk-clause               199
;  :num-allocs              4953017
;  :num-checks              240
;  :propagations            121
;  :quant-instantiations    97
;  :rlimit-count            196264)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@148@01 $Perm.No) (< $Perm.No $k@148@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2930
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      136
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               160
;  :datatype-accessor-ax    232
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1562
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              241
;  :propagations            122
;  :quant-instantiations    97
;  :rlimit-count            196782)
(assert (<= $Perm.No $k@148@01))
(assert (<= $k@148@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@148@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2936
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               161
;  :datatype-accessor-ax    233
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1565
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              242
;  :propagations            122
;  :quant-instantiations    97
;  :rlimit-count            197205)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2942
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    234
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1568
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              243
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            197661)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2942
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               162
;  :datatype-accessor-ax    234
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1568
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              244
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            197674)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2947
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               163
;  :datatype-accessor-ax    235
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1569
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              245
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            198031)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2952
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               164
;  :datatype-accessor-ax    236
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1570
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              246
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            198398)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2957
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               165
;  :datatype-accessor-ax    237
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1571
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              247
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            198775)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2962
;  :arith-add-rows          12
;  :arith-assert-diseq      47
;  :arith-assert-lower      174
;  :arith-assert-upper      137
;  :arith-conflicts         14
;  :arith-eq-adapter        85
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               166
;  :datatype-accessor-ax    238
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1572
;  :mk-clause               201
;  :num-allocs              4953017
;  :num-checks              248
;  :propagations            122
;  :quant-instantiations    98
;  :rlimit-count            199162)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@149@01 $Perm.No) (< $Perm.No $k@149@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2967
;  :arith-add-rows          12
;  :arith-assert-diseq      48
;  :arith-assert-lower      176
;  :arith-assert-upper      138
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               167
;  :datatype-accessor-ax    239
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1577
;  :mk-clause               203
;  :num-allocs              4953017
;  :num-checks              249
;  :propagations            123
;  :quant-instantiations    98
;  :rlimit-count            199703)
(assert (<= $Perm.No $k@149@01))
(assert (<= $k@149@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@149@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_mon != null
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2973
;  :arith-add-rows          12
;  :arith-assert-diseq      48
;  :arith-assert-lower      176
;  :arith-assert-upper      139
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               168
;  :datatype-accessor-ax    240
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1580
;  :mk-clause               203
;  :num-allocs              4953017
;  :num-checks              250
;  :propagations            123
;  :quant-instantiations    98
;  :rlimit-count            200196)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
(push) ; 10
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2979
;  :arith-add-rows          12
;  :arith-assert-diseq      48
;  :arith-assert-lower      176
;  :arith-assert-upper      139
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1583
;  :mk-clause               203
;  :num-allocs              4953017
;  :num-checks              251
;  :propagations            123
;  :quant-instantiations    99
;  :rlimit-count            200730)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2979
;  :arith-add-rows          12
;  :arith-assert-diseq      48
;  :arith-assert-lower      176
;  :arith-assert-upper      139
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               169
;  :datatype-accessor-ax    241
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1583
;  :mk-clause               203
;  :num-allocs              4953017
;  :num-checks              252
;  :propagations            123
;  :quant-instantiations    99
;  :rlimit-count            200743)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          12
;  :arith-assert-diseq      48
;  :arith-assert-lower      176
;  :arith-assert-upper      139
;  :arith-conflicts         14
;  :arith-eq-adapter        86
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               170
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1584
;  :mk-clause               203
;  :num-allocs              4953017
;  :num-checks              253
;  :propagations            123
;  :quant-instantiations    99
;  :rlimit-count            201170)
(declare-const $k@150@01 $Perm)
(assert ($Perm.isReadVar $k@150@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@150@01 $Perm.No) (< $Perm.No $k@150@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2984
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      140
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               171
;  :datatype-accessor-ax    242
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1588
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              254
;  :propagations            124
;  :quant-instantiations    99
;  :rlimit-count            201368)
(assert (<= $Perm.No $k@150@01))
(assert (<= $k@150@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@150@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2990
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               172
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1591
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              255
;  :propagations            124
;  :quant-instantiations    99
;  :rlimit-count            201891)
(push) ; 10
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2990
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               173
;  :datatype-accessor-ax    243
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1591
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              256
;  :propagations            124
;  :quant-instantiations    99
;  :rlimit-count            201939)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 10
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               2999
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    244
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1595
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              257
;  :propagations            124
;  :quant-instantiations    100
;  :rlimit-count            202537)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3007
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1597
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              258
;  :propagations            124
;  :quant-instantiations    100
;  :rlimit-count            203011)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 10
; [eval] diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_process_state[0] != -1
; [eval] diz.Driver_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3017
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1602
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              259
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203559)
; [eval] -1
(push) ; 11
; [then-branch: 26 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 | live]
; [else-branch: 26 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1 | live]
(push) ; 12
; [then-branch: 26 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 26 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    0)
  (- 0 1)))
; [eval] diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_event_state[0]
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3018
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1603
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              260
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203721)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [eval] !(diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2)
; [eval] diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_process_state[0] != -1
; [eval] diz.Driver_m.Main_process_state[0]
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3018
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1603
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              261
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203741)
; [eval] -1
(push) ; 11
; [then-branch: 27 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 | live]
; [else-branch: 27 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1 | live]
(push) ; 12
; [then-branch: 27 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 27 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    0)
  (- 0 1)))
; [eval] diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_event_state[0]
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3019
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              129
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1604
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              262
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203899)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
(push) ; 9
; Loop head block: Establish invariant
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3019
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        87
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               174
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1604
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              263
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203917)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_39__65@141@01) 1)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3019
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      178
;  :arith-assert-upper      141
;  :arith-conflicts         14
;  :arith-eq-adapter        88
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               175
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1607
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              264
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            203991)
(assert (= (Seq_length __flatten_39__65@141@01) 1))
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
(push) ; 10
(assert (not (= (Seq_length __flatten_42__68@144@01) 2)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3020
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      179
;  :arith-assert-upper      142
;  :arith-conflicts         14
;  :arith-eq-adapter        90
;  :arith-fixed-eqs         42
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1613
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              265
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            204116)
(assert (= (Seq_length __flatten_42__68@144@01) 2))
; [eval] (forall i__73: Int :: { diz.Driver_m.Main_process_state[i__73] } 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|)
(declare-const i__73@151@01 Int)
(push) ; 10
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__73
(push) ; 11
; [then-branch: 28 | 0 <= i__73@151@01 | live]
; [else-branch: 28 | !(0 <= i__73@151@01) | live]
(push) ; 12
; [then-branch: 28 | 0 <= i__73@151@01]
(assert (<= 0 i__73@151@01))
; [eval] i__73 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 12
(push) ; 12
; [else-branch: 28 | !(0 <= i__73@151@01)]
(assert (not (<= 0 i__73@151@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 29 | i__73@151@01 < |__flatten_39__65@141@01| && 0 <= i__73@151@01 | live]
; [else-branch: 29 | !(i__73@151@01 < |__flatten_39__65@141@01| && 0 <= i__73@151@01) | live]
(push) ; 12
; [then-branch: 29 | i__73@151@01 < |__flatten_39__65@141@01| && 0 <= i__73@151@01]
(assert (and (< i__73@151@01 (Seq_length __flatten_39__65@141@01)) (<= 0 i__73@151@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73] == -1
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 13
(assert (not (>= i__73@151@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3022
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      181
;  :arith-assert-upper      144
;  :arith-conflicts         14
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1618
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              266
;  :propagations            124
;  :quant-instantiations    102
;  :rlimit-count            204307)
; [eval] -1
(push) ; 13
; [then-branch: 30 | __flatten_39__65@141@01[i__73@151@01] == -1 | live]
; [else-branch: 30 | __flatten_39__65@141@01[i__73@151@01] != -1 | live]
(push) ; 14
; [then-branch: 30 | __flatten_39__65@141@01[i__73@151@01] == -1]
(assert (= (Seq_index __flatten_39__65@141@01 i__73@151@01) (- 0 1)))
(pop) ; 14
(push) ; 14
; [else-branch: 30 | __flatten_39__65@141@01[i__73@151@01] != -1]
(assert (not (= (Seq_index __flatten_39__65@141@01 i__73@151@01) (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73]
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 15
(assert (not (>= i__73@151@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3024
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      181
;  :arith-assert-upper      144
;  :arith-conflicts         14
;  :arith-eq-adapter        91
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1620
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              267
;  :propagations            124
;  :quant-instantiations    103
;  :rlimit-count            204467)
(push) ; 15
; [then-branch: 31 | 0 <= __flatten_39__65@141@01[i__73@151@01] | live]
; [else-branch: 31 | !(0 <= __flatten_39__65@141@01[i__73@151@01]) | live]
(push) ; 16
; [then-branch: 31 | 0 <= __flatten_39__65@141@01[i__73@151@01]]
(assert (<= 0 (Seq_index __flatten_39__65@141@01 i__73@151@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 17
(assert (not (>= i__73@151@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3025
;  :arith-add-rows          12
;  :arith-assert-diseq      49
;  :arith-assert-lower      182
;  :arith-assert-upper      145
;  :arith-conflicts         14
;  :arith-eq-adapter        92
;  :arith-fixed-eqs         43
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               176
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              137
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1623
;  :mk-clause               205
;  :num-allocs              4953017
;  :num-checks              268
;  :propagations            124
;  :quant-instantiations    103
;  :rlimit-count            204541)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 16
(push) ; 16
; [else-branch: 31 | !(0 <= __flatten_39__65@141@01[i__73@151@01])]
(assert (not (<= 0 (Seq_index __flatten_39__65@141@01 i__73@151@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 29 | !(i__73@151@01 < |__flatten_39__65@141@01| && 0 <= i__73@151@01)]
(assert (not
  (and (< i__73@151@01 (Seq_length __flatten_39__65@141@01)) (<= 0 i__73@151@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((i__73@151@01 Int)) (!
  (implies
    (and
      (< i__73@151@01 (Seq_length __flatten_39__65@141@01))
      (<= 0 i__73@151@01))
    (or
      (= (Seq_index __flatten_39__65@141@01 i__73@151@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_39__65@141@01 i__73@151@01)
          (Seq_length __flatten_42__68@144@01))
        (<= 0 (Seq_index __flatten_39__65@141@01 i__73@151@01)))))
  :pattern ((Seq_index __flatten_39__65@141@01 i__73@151@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      51
;  :arith-assert-lower      187
;  :arith-assert-upper      148
;  :arith-conflicts         15
;  :arith-eq-adapter        95
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               177
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1638
;  :mk-clause               227
;  :num-allocs              4953017
;  :num-checks              269
;  :propagations            130
;  :quant-instantiations    104
;  :rlimit-count            204959)
(assert (forall ((i__73@151@01 Int)) (!
  (implies
    (and
      (< i__73@151@01 (Seq_length __flatten_39__65@141@01))
      (<= 0 i__73@151@01))
    (or
      (= (Seq_index __flatten_39__65@141@01 i__73@151@01) (- 0 1))
      (and
        (<
          (Seq_index __flatten_39__65@141@01 i__73@151@01)
          (Seq_length __flatten_42__68@144@01))
        (<= 0 (Seq_index __flatten_39__65@141@01 i__73@151@01)))))
  :pattern ((Seq_index __flatten_39__65@141@01 i__73@151@01))
  :qid |prog.l<no position>|)))
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@152@01 $Perm.No) (< $Perm.No $k@152@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      149
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1643
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              270
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205429)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@118@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      189
;  :arith-assert-upper      149
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            46
;  :binary-propagations     16
;  :conflicts               178
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1643
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              271
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205440)
(assert (< $k@152@01 $k@118@01))
(assert (<= $Perm.No (- $k@118@01 $k@152@01)))
(assert (<= (- $k@118@01 $k@152@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@01 $k@152@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               179
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              272
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205660)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               180
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              273
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205708)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               181
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              274
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205756)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               182
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              275
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205804)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               183
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              276
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205852)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               184
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              277
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205900)
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               185
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              278
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205948)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               186
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              279
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            205996)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      52
;  :arith-assert-lower      191
;  :arith-assert-upper      150
;  :arith-conflicts         15
;  :arith-eq-adapter        96
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               187
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1646
;  :mk-clause               229
;  :num-allocs              4953017
;  :num-checks              280
;  :propagations            131
;  :quant-instantiations    104
;  :rlimit-count            206044)
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@153@01 $Perm.No) (< $Perm.No $k@153@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      53
;  :arith-assert-lower      193
;  :arith-assert-upper      151
;  :arith-conflicts         15
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1650
;  :mk-clause               231
;  :num-allocs              4953017
;  :num-checks              281
;  :propagations            132
;  :quant-instantiations    104
;  :rlimit-count            206243)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@119@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      53
;  :arith-assert-lower      193
;  :arith-assert-upper      151
;  :arith-conflicts         15
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            48
;  :binary-propagations     16
;  :conflicts               188
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1650
;  :mk-clause               231
;  :num-allocs              4953017
;  :num-checks              282
;  :propagations            132
;  :quant-instantiations    104
;  :rlimit-count            206254)
(assert (< $k@153@01 $k@119@01))
(assert (<= $Perm.No (- $k@119@01 $k@153@01)))
(assert (<= (- $k@119@01 $k@153@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@01 $k@153@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      53
;  :arith-assert-lower      195
;  :arith-assert-upper      152
;  :arith-conflicts         15
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1653
;  :mk-clause               231
;  :num-allocs              4953017
;  :num-checks              283
;  :propagations            132
;  :quant-instantiations    104
;  :rlimit-count            206468)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      53
;  :arith-assert-lower      195
;  :arith-assert-upper      152
;  :arith-conflicts         15
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               189
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1653
;  :mk-clause               231
;  :num-allocs              4953017
;  :num-checks              284
;  :propagations            132
;  :quant-instantiations    104
;  :rlimit-count            206481)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3030
;  :arith-add-rows          12
;  :arith-assert-diseq      53
;  :arith-assert-lower      195
;  :arith-assert-upper      152
;  :arith-conflicts         15
;  :arith-eq-adapter        97
;  :arith-fixed-eqs         44
;  :arith-offset-eqs        2
;  :arith-pivots            49
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    245
;  :datatype-constructor-ax 553
;  :datatype-occurs-check   128
;  :datatype-splits         442
;  :decisions               522
;  :del-clause              159
;  :final-checks            48
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.75
;  :memory                  4.75
;  :mk-bool-var             1653
;  :mk-clause               231
;  :num-allocs              4953017
;  :num-checks              285
;  :propagations            132
;  :quant-instantiations    104
;  :rlimit-count            206529)
(push) ; 10
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               190
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              286
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208463
;  :time                    0.00)
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              287
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208511)
(push) ; 10
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               191
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              288
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208522)
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              289
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208570)
(push) ; 10
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               192
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              290
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208581)
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              291
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208629)
(push) ; 10
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               193
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              292
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208640)
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      53
;  :arith-assert-lower      200
;  :arith-assert-upper      157
;  :arith-conflicts         15
;  :arith-eq-adapter        102
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               194
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1725
;  :mk-clause               236
;  :num-allocs              5133148
;  :num-checks              293
;  :propagations            136
;  :quant-instantiations    104
;  :rlimit-count            208688)
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@154@01 $Perm.No) (< $Perm.No $k@154@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      54
;  :arith-assert-lower      202
;  :arith-assert-upper      158
;  :arith-conflicts         15
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1729
;  :mk-clause               238
;  :num-allocs              5133148
;  :num-checks              294
;  :propagations            137
;  :quant-instantiations    104
;  :rlimit-count            208887)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@120@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      54
;  :arith-assert-lower      202
;  :arith-assert-upper      158
;  :arith-conflicts         15
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            61
;  :binary-propagations     16
;  :conflicts               195
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1729
;  :mk-clause               238
;  :num-allocs              5133148
;  :num-checks              295
;  :propagations            137
;  :quant-instantiations    104
;  :rlimit-count            208898)
(assert (< $k@154@01 $k@120@01))
(assert (<= $Perm.No (- $k@120@01 $k@154@01)))
(assert (<= (- $k@120@01 $k@154@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@01 $k@154@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 10
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      54
;  :arith-assert-lower      204
;  :arith-assert-upper      159
;  :arith-conflicts         15
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1732
;  :mk-clause               238
;  :num-allocs              5133148
;  :num-checks              296
;  :propagations            137
;  :quant-instantiations    104
;  :rlimit-count            209112)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      54
;  :arith-assert-lower      204
;  :arith-assert-upper      159
;  :arith-conflicts         15
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               196
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1732
;  :mk-clause               238
;  :num-allocs              5133148
;  :num-checks              297
;  :propagations            137
;  :quant-instantiations    104
;  :rlimit-count            209125)
(set-option :timeout 10)
(push) ; 10
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      54
;  :arith-assert-lower      204
;  :arith-assert-upper      159
;  :arith-conflicts         15
;  :arith-eq-adapter        103
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               197
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1732
;  :mk-clause               238
;  :num-allocs              5133148
;  :num-checks              298
;  :propagations            137
;  :quant-instantiations    104
;  :rlimit-count            209173)
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01 $Perm.Write))
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      206
;  :arith-assert-upper      160
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               198
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1736
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              299
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209370)
(set-option :timeout 0)
(push) ; 10
(assert (not (or (= $k@155@01 $Perm.No) (< $Perm.No $k@155@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      206
;  :arith-assert-upper      160
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1736
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              300
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209420)
(set-option :timeout 10)
(push) ; 10
(assert (not (not (= $k@121@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      206
;  :arith-assert-upper      160
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               199
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1736
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              301
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209431)
(assert (< $k@155@01 $k@121@01))
(assert (<= $Perm.No (- $k@121@01 $k@155@01)))
(assert (<= (- $k@121@01 $k@155@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@01 $k@155@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 10
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      208
;  :arith-assert-upper      161
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               200
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1739
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              302
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209639)
(push) ; 10
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      208
;  :arith-assert-upper      161
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               201
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1739
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              303
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209687)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 10
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      208
;  :arith-assert-upper      161
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1739
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              304
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209735)
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               3241
;  :arith-add-rows          39
;  :arith-assert-diseq      55
;  :arith-assert-lower      208
;  :arith-assert-upper      161
;  :arith-conflicts         15
;  :arith-eq-adapter        104
;  :arith-fixed-eqs         49
;  :arith-offset-eqs        3
;  :arith-pivots            62
;  :binary-propagations     16
;  :conflicts               202
;  :datatype-accessor-ax    249
;  :datatype-constructor-ax 614
;  :datatype-occurs-check   140
;  :datatype-splits         500
;  :decisions               579
;  :del-clause              164
;  :final-checks            51
;  :interface-eqs           2
;  :max-generation          2
;  :max-memory              4.84
;  :memory                  4.84
;  :mk-bool-var             1739
;  :mk-clause               240
;  :num-allocs              5133148
;  :num-checks              305
;  :propagations            138
;  :quant-instantiations    104
;  :rlimit-count            209748)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 10
(assert ($Perm.isReadVar $k@147@01 $Perm.Write))
(assert ($Perm.isReadVar $k@148@01 $Perm.Write))
(assert ($Perm.isReadVar $k@149@01 $Perm.Write))
(assert ($Perm.isReadVar $k@150@01 $Perm.Write))
(assert (= $t@145@01 ($Snap.combine ($Snap.first $t@145@01) ($Snap.second $t@145@01))))
(assert (=
  ($Snap.second $t@145@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@145@01))
    ($Snap.second ($Snap.second $t@145@01)))))
(assert (= ($Snap.first ($Snap.second $t@145@01)) $Snap.unit))
(assert (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@145@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@145@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@145@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  $Snap.unit))
(assert (forall ((i__73@146@01 Int)) (!
  (implies
    (and
      (<
        i__73@146@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i__73@146@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i__73@146@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__73@146@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__73@146@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__73@146@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
(assert (<= $Perm.No $k@147@01))
(assert (<= $k@147@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@147@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  $Snap.unit))
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  $Snap.unit))
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
(assert (<= $Perm.No $k@148@01))
(assert (<= $k@148@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@148@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@149@01))
(assert (<= $k@149@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@149@01)
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
(assert (<= $Perm.No $k@150@01))
(assert (<= $k@150@01 $Perm.Write))
(assert (implies
  (< $Perm.No $k@150@01)
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  diz@34@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_process_state[0] != -1
; [eval] diz.Driver_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4184
;  :arith-add-rows          71
;  :arith-assert-diseq      59
;  :arith-assert-lower      239
;  :arith-assert-upper      190
;  :arith-conflicts         15
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        6
;  :arith-pivots            96
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 822
;  :datatype-occurs-check   168
;  :datatype-splits         654
;  :decisions               778
;  :del-clause              195
;  :final-checks            58
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2039
;  :mk-clause               272
;  :num-allocs              5876028
;  :num-checks              308
;  :propagations            153
;  :quant-instantiations    116
;  :rlimit-count            219795)
; [eval] -1
(push) ; 11
; [then-branch: 32 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 | live]
; [else-branch: 32 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1 | live]
(push) ; 12
; [then-branch: 32 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 32 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    0)
  (- 0 1)))
; [eval] diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_event_state[0]
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4185
;  :arith-add-rows          71
;  :arith-assert-diseq      59
;  :arith-assert-lower      239
;  :arith-assert-upper      190
;  :arith-conflicts         15
;  :arith-eq-adapter        128
;  :arith-fixed-eqs         66
;  :arith-offset-eqs        6
;  :arith-pivots            96
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    291
;  :datatype-constructor-ax 822
;  :datatype-occurs-check   168
;  :datatype-splits         654
;  :decisions               778
;  :del-clause              195
;  :final-checks            58
;  :interface-eqs           3
;  :max-generation          2
;  :max-memory              5.06
;  :memory                  5.06
;  :mk-bool-var             2040
;  :mk-clause               272
;  :num-allocs              5876028
;  :num-checks              309
;  :propagations            153
;  :quant-instantiations    116
;  :rlimit-count            219953)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4491
;  :arith-add-rows          83
;  :arith-assert-diseq      63
;  :arith-assert-lower      261
;  :arith-assert-upper      204
;  :arith-conflicts         15
;  :arith-eq-adapter        142
;  :arith-fixed-eqs         75
;  :arith-offset-eqs        7
;  :arith-pivots            114
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    296
;  :datatype-constructor-ax 902
;  :datatype-occurs-check   182
;  :datatype-splits         731
;  :decisions               855
;  :del-clause              237
;  :final-checks            62
;  :interface-eqs           4
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  5.09
;  :mk-bool-var             2171
;  :mk-clause               314
;  :num-allocs              6252427
;  :num-checks              310
;  :propagations            173
;  :quant-instantiations    122
;  :rlimit-count            222562
;  :time                    0.00)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4787
;  :arith-add-rows          97
;  :arith-assert-diseq      63
;  :arith-assert-lower      268
;  :arith-assert-upper      211
;  :arith-conflicts         15
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         81
;  :arith-offset-eqs        8
;  :arith-pivots            126
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              247
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2270
;  :mk-clause               324
;  :num-allocs              6441759
;  :num-checks              311
;  :propagations            180
;  :quant-instantiations    122
;  :rlimit-count            224859
;  :time                    0.00)
; [then-branch: 33 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2 | live]
; [else-branch: 33 | !(First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2) | live]
(push) ; 11
; [then-branch: 33 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        0)
      (- 0 2)))))
; [exec]
; exhale acc(Main_lock_held_EncodedGlobalVariables(diz.Driver_m, globals), write)
; [exec]
; fold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
; [eval] diz != null
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@156@01 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 34 | 0 <= i@156@01 | live]
; [else-branch: 34 | !(0 <= i@156@01) | live]
(push) ; 14
; [then-branch: 34 | 0 <= i@156@01]
(assert (<= 0 i@156@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 34 | !(0 <= i@156@01)]
(assert (not (<= 0 i@156@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 35 | i@156@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i@156@01 | live]
; [else-branch: 35 | !(i@156@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i@156@01) | live]
(push) ; 14
; [then-branch: 35 | i@156@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i@156@01]
(assert (and
  (<
    i@156@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  (<= 0 i@156@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@156@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4788
;  :arith-add-rows          97
;  :arith-assert-diseq      63
;  :arith-assert-lower      269
;  :arith-assert-upper      212
;  :arith-conflicts         15
;  :arith-eq-adapter        149
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        8
;  :arith-pivots            126
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              247
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2274
;  :mk-clause               325
;  :num-allocs              6441759
;  :num-checks              312
;  :propagations            180
;  :quant-instantiations    122
;  :rlimit-count            225229)
; [eval] -1
(push) ; 15
; [then-branch: 36 | First:(Second:(Second:(Second:($t@145@01))))[i@156@01] == -1 | live]
; [else-branch: 36 | First:(Second:(Second:(Second:($t@145@01))))[i@156@01] != -1 | live]
(push) ; 16
; [then-branch: 36 | First:(Second:(Second:(Second:($t@145@01))))[i@156@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i@156@01)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 36 | First:(Second:(Second:(Second:($t@145@01))))[i@156@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i@156@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@156@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4790
;  :arith-add-rows          97
;  :arith-assert-diseq      65
;  :arith-assert-lower      272
;  :arith-assert-upper      213
;  :arith-conflicts         15
;  :arith-eq-adapter        150
;  :arith-fixed-eqs         82
;  :arith-offset-eqs        8
;  :arith-pivots            126
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              247
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2280
;  :mk-clause               329
;  :num-allocs              6441759
;  :num-checks              313
;  :propagations            182
;  :quant-instantiations    123
;  :rlimit-count            225445)
(push) ; 17
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i@156@01] | live]
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i@156@01]) | live]
(push) ; 18
; [then-branch: 37 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i@156@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i@156@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@156@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      65
;  :arith-assert-lower      274
;  :arith-assert-upper      214
;  :arith-conflicts         15
;  :arith-eq-adapter        151
;  :arith-fixed-eqs         83
;  :arith-offset-eqs        8
;  :arith-pivots            127
;  :binary-propagations     16
;  :conflicts               203
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              247
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2284
;  :mk-clause               329
;  :num-allocs              6441759
;  :num-checks              314
;  :propagations            182
;  :quant-instantiations    123
;  :rlimit-count            225582)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 37 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i@156@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i@156@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 35 | !(i@156@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i@156@01)]
(assert (not
  (and
    (<
      i@156@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    (<= 0 i@156@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i@156@01 Int)) (!
  (implies
    (and
      (<
        i@156@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i@156@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i@156@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i@156@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i@156@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i@156@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      67
;  :arith-assert-lower      275
;  :arith-assert-upper      215
;  :arith-conflicts         15
;  :arith-eq-adapter        152
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            128
;  :binary-propagations     16
;  :conflicts               204
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2292
;  :mk-clause               343
;  :num-allocs              6441759
;  :num-checks              315
;  :propagations            184
;  :quant-instantiations    124
;  :rlimit-count            226031)
(assert (forall ((i@156@01 Int)) (!
  (implies
    (and
      (<
        i@156@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i@156@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i@156@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i@156@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i@156@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i@156@01))
  :qid |prog.l<no position>|)))
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@157@01 $Perm.No) (< $Perm.No $k@157@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      277
;  :arith-assert-upper      216
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            128
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2297
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              316
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226591)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@147@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      277
;  :arith-assert-upper      216
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            128
;  :binary-propagations     16
;  :conflicts               205
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2297
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              317
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226602)
(assert (< $k@157@01 $k@147@01))
(assert (<= $Perm.No (- $k@147@01 $k@157@01)))
(assert (<= (- $k@147@01 $k@157@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@147@01 $k@157@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Main_alu != null
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               206
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              318
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226822)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               207
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              319
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226870)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               208
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              320
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226918)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               209
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              321
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            226966)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               210
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              322
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            227014)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               211
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              323
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            227062)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               212
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              324
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            227110)
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               213
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              325
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            227158)
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      68
;  :arith-assert-lower      279
;  :arith-assert-upper      217
;  :arith-conflicts         15
;  :arith-eq-adapter        153
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               214
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2300
;  :mk-clause               345
;  :num-allocs              6441759
;  :num-checks              326
;  :propagations            185
;  :quant-instantiations    124
;  :rlimit-count            227206)
(declare-const $k@158@01 $Perm)
(assert ($Perm.isReadVar $k@158@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@158@01 $Perm.No) (< $Perm.No $k@158@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      69
;  :arith-assert-lower      281
;  :arith-assert-upper      218
;  :arith-conflicts         15
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2304
;  :mk-clause               347
;  :num-allocs              6441759
;  :num-checks              327
;  :propagations            186
;  :quant-instantiations    124
;  :rlimit-count            227405)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@148@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      69
;  :arith-assert-lower      281
;  :arith-assert-upper      218
;  :arith-conflicts         15
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            130
;  :binary-propagations     16
;  :conflicts               215
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2304
;  :mk-clause               347
;  :num-allocs              6441759
;  :num-checks              328
;  :propagations            186
;  :quant-instantiations    124
;  :rlimit-count            227416)
(assert (< $k@158@01 $k@148@01))
(assert (<= $Perm.No (- $k@148@01 $k@158@01)))
(assert (<= (- $k@148@01 $k@158@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@148@01 $k@158@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Main_dr != null
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      69
;  :arith-assert-lower      283
;  :arith-assert-upper      219
;  :arith-conflicts         15
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            131
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2307
;  :mk-clause               347
;  :num-allocs              6441759
;  :num-checks              329
;  :propagations            186
;  :quant-instantiations    124
;  :rlimit-count            227630)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      69
;  :arith-assert-lower      283
;  :arith-assert-upper      219
;  :arith-conflicts         15
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            131
;  :binary-propagations     16
;  :conflicts               216
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2307
;  :mk-clause               347
;  :num-allocs              6441759
;  :num-checks              330
;  :propagations            186
;  :quant-instantiations    124
;  :rlimit-count            227643)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               4792
;  :arith-add-rows          97
;  :arith-assert-diseq      69
;  :arith-assert-lower      283
;  :arith-assert-upper      219
;  :arith-conflicts         15
;  :arith-eq-adapter        154
;  :arith-fixed-eqs         84
;  :arith-offset-eqs        8
;  :arith-pivots            131
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    301
;  :datatype-constructor-ax 982
;  :datatype-occurs-check   196
;  :datatype-splits         808
;  :decisions               931
;  :del-clause              265
;  :final-checks            66
;  :interface-eqs           5
;  :max-generation          2
;  :max-memory              5.09
;  :memory                  4.99
;  :mk-bool-var             2307
;  :mk-clause               347
;  :num-allocs              6441759
;  :num-checks              331
;  :propagations            186
;  :quant-instantiations    124
;  :rlimit-count            227691)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      73
;  :arith-assert-lower      304
;  :arith-assert-upper      233
;  :arith-conflicts         15
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               217
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2435
;  :mk-clause               386
;  :num-allocs              6636479
;  :num-checks              332
;  :propagations            205
;  :quant-instantiations    131
;  :rlimit-count            230286
;  :time                    0.00)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      73
;  :arith-assert-lower      304
;  :arith-assert-upper      233
;  :arith-conflicts         15
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               218
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2435
;  :mk-clause               386
;  :num-allocs              6636479
;  :num-checks              333
;  :propagations            205
;  :quant-instantiations    131
;  :rlimit-count            230334)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      73
;  :arith-assert-lower      304
;  :arith-assert-upper      233
;  :arith-conflicts         15
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               219
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2435
;  :mk-clause               386
;  :num-allocs              6636479
;  :num-checks              334
;  :propagations            205
;  :quant-instantiations    131
;  :rlimit-count            230382)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      73
;  :arith-assert-lower      304
;  :arith-assert-upper      233
;  :arith-conflicts         15
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               220
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2435
;  :mk-clause               386
;  :num-allocs              6636479
;  :num-checks              335
;  :propagations            205
;  :quant-instantiations    131
;  :rlimit-count            230430)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      73
;  :arith-assert-lower      304
;  :arith-assert-upper      233
;  :arith-conflicts         15
;  :arith-eq-adapter        168
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               221
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2435
;  :mk-clause               386
;  :num-allocs              6636479
;  :num-checks              336
;  :propagations            205
;  :quant-instantiations    131
;  :rlimit-count            230478)
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@159@01 $Perm.No) (< $Perm.No $k@159@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      74
;  :arith-assert-lower      306
;  :arith-assert-upper      234
;  :arith-conflicts         15
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2439
;  :mk-clause               388
;  :num-allocs              6636479
;  :num-checks              337
;  :propagations            206
;  :quant-instantiations    131
;  :rlimit-count            230676)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@149@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      74
;  :arith-assert-lower      306
;  :arith-assert-upper      234
;  :arith-conflicts         15
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            149
;  :binary-propagations     16
;  :conflicts               222
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2439
;  :mk-clause               388
;  :num-allocs              6636479
;  :num-checks              338
;  :propagations            206
;  :quant-instantiations    131
;  :rlimit-count            230687)
(assert (< $k@159@01 $k@149@01))
(assert (<= $Perm.No (- $k@149@01 $k@159@01)))
(assert (<= (- $k@149@01 $k@159@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@149@01 $k@159@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Main_mon != null
(push) ; 12
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      74
;  :arith-assert-lower      308
;  :arith-assert-upper      235
;  :arith-conflicts         15
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2442
;  :mk-clause               388
;  :num-allocs              6636479
;  :num-checks              339
;  :propagations            206
;  :quant-instantiations    131
;  :rlimit-count            230901)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      74
;  :arith-assert-lower      308
;  :arith-assert-upper      235
;  :arith-conflicts         15
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               223
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2442
;  :mk-clause               388
;  :num-allocs              6636479
;  :num-checks              340
;  :propagations            206
;  :quant-instantiations    131
;  :rlimit-count            230914)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      74
;  :arith-assert-lower      308
;  :arith-assert-upper      235
;  :arith-conflicts         15
;  :arith-eq-adapter        169
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               224
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2442
;  :mk-clause               388
;  :num-allocs              6636479
;  :num-checks              341
;  :propagations            206
;  :quant-instantiations    131
;  :rlimit-count            230962)
(declare-const $k@160@01 $Perm)
(assert ($Perm.isReadVar $k@160@01 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      75
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         15
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               225
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2446
;  :mk-clause               390
;  :num-allocs              6636479
;  :num-checks              342
;  :propagations            207
;  :quant-instantiations    131
;  :rlimit-count            231158)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@160@01 $Perm.No) (< $Perm.No $k@160@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      75
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         15
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2446
;  :mk-clause               390
;  :num-allocs              6636479
;  :num-checks              343
;  :propagations            207
;  :quant-instantiations    131
;  :rlimit-count            231208)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@150@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      75
;  :arith-assert-lower      310
;  :arith-assert-upper      236
;  :arith-conflicts         15
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            150
;  :binary-propagations     16
;  :conflicts               226
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2446
;  :mk-clause               390
;  :num-allocs              6636479
;  :num-checks              344
;  :propagations            207
;  :quant-instantiations    131
;  :rlimit-count            231219)
(assert (< $k@160@01 $k@150@01))
(assert (<= $Perm.No (- $k@150@01 $k@160@01)))
(assert (<= (- $k@150@01 $k@160@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@150@01 $k@160@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      75
;  :arith-assert-lower      312
;  :arith-assert-upper      237
;  :arith-conflicts         15
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            152
;  :binary-propagations     16
;  :conflicts               227
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2449
;  :mk-clause               390
;  :num-allocs              6636479
;  :num-checks              345
;  :propagations            207
;  :quant-instantiations    131
;  :rlimit-count            231439)
(push) ; 12
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5101
;  :arith-add-rows          120
;  :arith-assert-diseq      75
;  :arith-assert-lower      312
;  :arith-assert-upper      237
;  :arith-conflicts         15
;  :arith-eq-adapter        170
;  :arith-fixed-eqs         94
;  :arith-offset-eqs        11
;  :arith-pivots            152
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    306
;  :datatype-constructor-ax 1062
;  :datatype-occurs-check   210
;  :datatype-splits         885
;  :decisions               1008
;  :del-clause              304
;  :final-checks            70
;  :interface-eqs           6
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2449
;  :mk-clause               390
;  :num-allocs              6636479
;  :num-checks              346
;  :propagations            207
;  :quant-instantiations    131
;  :rlimit-count            231487)
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
                        ($Snap.combine
                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))
                          ($Snap.combine
                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))
                            ($Snap.combine
                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))
                              ($Snap.combine
                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))
                                ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine
                                      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))
                                      ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine
                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))
                                          ($Snap.combine
                                            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
                                            ($Snap.combine
                                              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
                                              ($Snap.combine
                                                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))
                                                ($Snap.combine
                                                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))
                                                  ($Snap.combine
                                                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
                                                    ($Snap.combine
                                                      $Snap.unit
                                                      ($Snap.combine
                                                        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
                                                        ($Snap.combine
                                                          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
                                                          $Snap.unit))))))))))))))))))))))))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) globals@35@01))
; [exec]
; exhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
; [exec]
; inhale acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
(declare-const $t@161@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(Main_lock_invariant_EncodedGlobalVariables(diz.Driver_m, globals), write)
(assert (= $t@161@01 ($Snap.combine ($Snap.first $t@161@01) ($Snap.second $t@161@01))))
(assert (= ($Snap.first $t@161@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@161@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@161@01))
    ($Snap.second ($Snap.second $t@161@01)))))
(assert (= ($Snap.first ($Snap.second $t@161@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@161@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@161@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@161@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@161@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
  $Snap.unit))
; [eval] |diz.Main_process_state| == 1
; [eval] |diz.Main_process_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))
  1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
  $Snap.unit))
; [eval] |diz.Main_event_state| == 2
; [eval] |diz.Main_event_state|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))
  2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.Main_process_state[i] } 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|)
(declare-const i@162@01 Int)
(push) ; 12
; [eval] 0 <= i && i < |diz.Main_process_state| ==> diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= i && i < |diz.Main_process_state|
; [eval] 0 <= i
(push) ; 13
; [then-branch: 38 | 0 <= i@162@01 | live]
; [else-branch: 38 | !(0 <= i@162@01) | live]
(push) ; 14
; [then-branch: 38 | 0 <= i@162@01]
(assert (<= 0 i@162@01))
; [eval] i < |diz.Main_process_state|
; [eval] |diz.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 38 | !(0 <= i@162@01)]
(assert (not (<= 0 i@162@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 39 | i@162@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i@162@01 | live]
; [else-branch: 39 | !(i@162@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i@162@01) | live]
(push) ; 14
; [then-branch: 39 | i@162@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i@162@01]
(assert (and
  (<
    i@162@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
  (<= 0 i@162@01)))
; [eval] diz.Main_process_state[i] == -1 || 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i] == -1
; [eval] diz.Main_process_state[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@162@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          130
;  :arith-assert-diseq      79
;  :arith-assert-lower      339
;  :arith-assert-upper      254
;  :arith-conflicts         15
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        12
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              353
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2605
;  :mk-clause               431
;  :num-allocs              6636479
;  :num-checks              348
;  :propagations            227
;  :quant-instantiations    142
;  :rlimit-count            236336)
; [eval] -1
(push) ; 15
; [then-branch: 40 | First:(Second:(Second:(Second:($t@161@01))))[i@162@01] == -1 | live]
; [else-branch: 40 | First:(Second:(Second:(Second:($t@161@01))))[i@162@01] != -1 | live]
(push) ; 16
; [then-branch: 40 | First:(Second:(Second:(Second:($t@161@01))))[i@162@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i@162@01)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 40 | First:(Second:(Second:(Second:($t@161@01))))[i@162@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
      i@162@01)
    (- 0 1))))
; [eval] 0 <= diz.Main_process_state[i] && diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] 0 <= diz.Main_process_state[i]
; [eval] diz.Main_process_state[i]
(push) ; 17
(assert (not (>= i@162@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          130
;  :arith-assert-diseq      79
;  :arith-assert-lower      339
;  :arith-assert-upper      254
;  :arith-conflicts         15
;  :arith-eq-adapter        186
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        12
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              353
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2606
;  :mk-clause               431
;  :num-allocs              6636479
;  :num-checks              349
;  :propagations            227
;  :quant-instantiations    142
;  :rlimit-count            236511)
(push) ; 17
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@161@01))))[i@162@01] | live]
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@161@01))))[i@162@01]) | live]
(push) ; 18
; [then-branch: 41 | 0 <= First:(Second:(Second:(Second:($t@161@01))))[i@162@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i@162@01)))
; [eval] diz.Main_process_state[i] < |diz.Main_event_state|
; [eval] diz.Main_process_state[i]
(push) ; 19
(assert (not (>= i@162@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5524
;  :arith-add-rows          130
;  :arith-assert-diseq      80
;  :arith-assert-lower      342
;  :arith-assert-upper      254
;  :arith-conflicts         15
;  :arith-eq-adapter        187
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        12
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               228
;  :datatype-accessor-ax    348
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              353
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2609
;  :mk-clause               432
;  :num-allocs              6636479
;  :num-checks              350
;  :propagations            227
;  :quant-instantiations    142
;  :rlimit-count            236635)
; [eval] |diz.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 41 | !(0 <= First:(Second:(Second:(Second:($t@161@01))))[i@162@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
      i@162@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 39 | !(i@162@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i@162@01)]
(assert (not
  (and
    (<
      i@162@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
    (<= 0 i@162@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@162@01 Int)) (!
  (implies
    (and
      (<
        i@162@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
      (<= 0 i@162@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
          i@162@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i@162@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i@162@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i@162@01))
  :qid |prog.l<no position>|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@163@01 $Perm.No) (< $Perm.No $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5529
;  :arith-add-rows          130
;  :arith-assert-diseq      81
;  :arith-assert-lower      344
;  :arith-assert-upper      255
;  :arith-conflicts         15
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         104
;  :arith-offset-eqs        12
;  :arith-pivots            170
;  :binary-propagations     16
;  :conflicts               229
;  :datatype-accessor-ax    349
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2615
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              351
;  :propagations            228
;  :quant-instantiations    142
;  :rlimit-count            237403)
(declare-const $t@164@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@147@01 $k@157@01))
    (=
      $t@164@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))
  (implies
    (< $Perm.No $k@163@01)
    (=
      $t@164@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))
(assert (<= $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01)))
(assert (<= (+ (- $k@147@01 $k@157@01) $k@163@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))
  $Snap.unit))
; [eval] diz.Main_alu != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5539
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      257
;  :arith-conflicts         16
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         105
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               230
;  :datatype-accessor-ax    350
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2623
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              352
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            238089)
(assert (not (= $t@164@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5545
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      258
;  :arith-conflicts         17
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         106
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               231
;  :datatype-accessor-ax    351
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2626
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              353
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            238413)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5550
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      259
;  :arith-conflicts         18
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         107
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               232
;  :datatype-accessor-ax    352
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2628
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              354
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            238702)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5555
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      260
;  :arith-conflicts         19
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         108
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               233
;  :datatype-accessor-ax    353
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2630
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              355
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            239001)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5560
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      261
;  :arith-conflicts         20
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         109
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               234
;  :datatype-accessor-ax    354
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2632
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              356
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            239310)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5565
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      262
;  :arith-conflicts         21
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         110
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               235
;  :datatype-accessor-ax    355
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2634
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              357
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            239629)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5570
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      263
;  :arith-conflicts         22
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         111
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               236
;  :datatype-accessor-ax    356
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2636
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              358
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            239958)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.Main_alu.ALU_RESULT
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5576
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      345
;  :arith-assert-upper      264
;  :arith-conflicts         23
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         112
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               237
;  :datatype-accessor-ax    357
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2639
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              359
;  :propagations            228
;  :quant-instantiations    143
;  :rlimit-count            240329)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_RESULT <= 16
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5583
;  :arith-add-rows          131
;  :arith-assert-diseq      81
;  :arith-assert-lower      346
;  :arith-assert-upper      265
;  :arith-conflicts         24
;  :arith-eq-adapter        188
;  :arith-fixed-eqs         113
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               238
;  :datatype-accessor-ax    358
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2644
;  :mk-clause               434
;  :num-allocs              6636479
;  :num-checks              360
;  :propagations            228
;  :quant-instantiations    144
;  :rlimit-count            240809)
(assert (<=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))
  16))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))
(declare-const $k@165@01 $Perm)
(assert ($Perm.isReadVar $k@165@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@165@01 $Perm.No) (< $Perm.No $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5588
;  :arith-add-rows          131
;  :arith-assert-diseq      82
;  :arith-assert-lower      348
;  :arith-assert-upper      267
;  :arith-conflicts         24
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         113
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               239
;  :datatype-accessor-ax    359
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2650
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              361
;  :propagations            229
;  :quant-instantiations    144
;  :rlimit-count            241326)
(declare-const $t@166@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@148@01 $k@158@01))
    (=
      $t@166@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  (implies
    (< $Perm.No $k@165@01)
    (=
      $t@166@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01)))
(assert (<= (+ (- $k@148@01 $k@158@01) $k@165@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_dr != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5598
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      269
;  :arith-conflicts         25
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         114
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               240
;  :datatype-accessor-ax    360
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2658
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              362
;  :propagations            229
;  :quant-instantiations    145
;  :rlimit-count            242012)
(assert (not (= $t@166@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5603
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      270
;  :arith-conflicts         26
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         115
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    361
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2660
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              363
;  :propagations            229
;  :quant-instantiations    145
;  :rlimit-count            242407)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5603
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      270
;  :arith-conflicts         26
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         115
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    361
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2660
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              364
;  :propagations            229
;  :quant-instantiations    145
;  :rlimit-count            242420)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $t@166@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5603
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      270
;  :arith-conflicts         26
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         115
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               241
;  :datatype-accessor-ax    361
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2660
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              365
;  :propagations            229
;  :quant-instantiations    145
;  :rlimit-count            242431)
(assert (=
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5611
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      271
;  :arith-conflicts         27
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         116
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               242
;  :datatype-accessor-ax    362
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2664
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              366
;  :propagations            229
;  :quant-instantiations    146
;  :rlimit-count            242895)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5616
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      272
;  :arith-conflicts         28
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         117
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               243
;  :datatype-accessor-ax    363
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2666
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              367
;  :propagations            229
;  :quant-instantiations    146
;  :rlimit-count            243292)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5621
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      273
;  :arith-conflicts         29
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         118
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               244
;  :datatype-accessor-ax    364
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2668
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              368
;  :propagations            229
;  :quant-instantiations    146
;  :rlimit-count            243699)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5626
;  :arith-add-rows          132
;  :arith-assert-diseq      82
;  :arith-assert-lower      349
;  :arith-assert-upper      274
;  :arith-conflicts         30
;  :arith-eq-adapter        189
;  :arith-fixed-eqs         119
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               245
;  :datatype-accessor-ax    365
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.10
;  :memory                  5.10
;  :mk-bool-var             2670
;  :mk-clause               436
;  :num-allocs              6636479
;  :num-checks              369
;  :propagations            229
;  :quant-instantiations    146
;  :rlimit-count            244116)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))))
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@167@01 $Perm.No) (< $Perm.No $k@167@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5631
;  :arith-add-rows          132
;  :arith-assert-diseq      83
;  :arith-assert-lower      351
;  :arith-assert-upper      275
;  :arith-conflicts         30
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         119
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               246
;  :datatype-accessor-ax    366
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2675
;  :mk-clause               438
;  :num-allocs              7043665
;  :num-checks              370
;  :propagations            230
;  :quant-instantiations    146
;  :rlimit-count            244657)
(declare-const $t@168@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@149@01 $k@159@01))
    (=
      $t@168@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@167@01)
    (=
      $t@168@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01)))
(assert (<= (+ (- $k@149@01 $k@159@01) $k@167@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_mon != null
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5641
;  :arith-add-rows          133
;  :arith-assert-diseq      83
;  :arith-assert-lower      352
;  :arith-assert-upper      277
;  :arith-conflicts         31
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         120
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               247
;  :datatype-accessor-ax    367
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2683
;  :mk-clause               438
;  :num-allocs              7043665
;  :num-checks              371
;  :propagations            230
;  :quant-instantiations    147
;  :rlimit-count            245681)
(assert (not (= $t@168@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))))))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5647
;  :arith-add-rows          133
;  :arith-assert-diseq      83
;  :arith-assert-lower      352
;  :arith-assert-upper      278
;  :arith-conflicts         32
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         121
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    368
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2686
;  :mk-clause               438
;  :num-allocs              7043665
;  :num-checks              372
;  :propagations            230
;  :quant-instantiations    147
;  :rlimit-count            246173)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5647
;  :arith-add-rows          133
;  :arith-assert-diseq      83
;  :arith-assert-lower      352
;  :arith-assert-upper      278
;  :arith-conflicts         32
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         121
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               248
;  :datatype-accessor-ax    368
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2686
;  :mk-clause               438
;  :num-allocs              7043665
;  :num-checks              373
;  :propagations            230
;  :quant-instantiations    147
;  :rlimit-count            246186)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))))))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          133
;  :arith-assert-diseq      83
;  :arith-assert-lower      352
;  :arith-assert-upper      279
;  :arith-conflicts         33
;  :arith-eq-adapter        190
;  :arith-fixed-eqs         122
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               249
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2688
;  :mk-clause               438
;  :num-allocs              7043665
;  :num-checks              374
;  :propagations            230
;  :quant-instantiations    147
;  :rlimit-count            246645)
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@169@01 $Perm.No) (< $Perm.No $k@169@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          133
;  :arith-assert-diseq      84
;  :arith-assert-lower      354
;  :arith-assert-upper      280
;  :arith-conflicts         33
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         122
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2692
;  :mk-clause               440
;  :num-allocs              7043665
;  :num-checks              375
;  :propagations            231
;  :quant-instantiations    147
;  :rlimit-count            246843)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $t@164@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5652
;  :arith-add-rows          133
;  :arith-assert-diseq      84
;  :arith-assert-lower      354
;  :arith-assert-upper      280
;  :arith-conflicts         33
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         122
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               250
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2692
;  :mk-clause               440
;  :num-allocs              7043665
;  :num-checks              376
;  :propagations            231
;  :quant-instantiations    147
;  :rlimit-count            246854)
(declare-const $t@170@01 $Ref)
(assert (and
  (implies
    (< $Perm.No (- $k@150@01 $k@160@01))
    (=
      $t@170@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))))))
  (implies
    (< $Perm.No $k@169@01)
    (=
      $t@170@01
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01))))))))))))))))))))))))))))))))))
(assert (<= $Perm.No (+ (- $k@150@01 $k@160@01) $k@169@01)))
(assert (<= (+ (- $k@150@01 $k@160@01) $k@169@01) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (- $k@150@01 $k@160@01) $k@169@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))))))))))))))))))))))
  $Snap.unit))
; [eval] diz.Main_alu.ALU_m == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5658
;  :arith-add-rows          134
;  :arith-assert-diseq      84
;  :arith-assert-lower      355
;  :arith-assert-upper      282
;  :arith-conflicts         34
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         123
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2699
;  :mk-clause               440
;  :num-allocs              7043665
;  :num-checks              377
;  :propagations            231
;  :quant-instantiations    148
;  :rlimit-count            247551)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $t@164@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5658
;  :arith-add-rows          134
;  :arith-assert-diseq      84
;  :arith-assert-lower      355
;  :arith-assert-upper      282
;  :arith-conflicts         34
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         123
;  :arith-offset-eqs        12
;  :arith-pivots            171
;  :binary-propagations     16
;  :conflicts               251
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2699
;  :mk-clause               440
;  :num-allocs              7043665
;  :num-checks              378
;  :propagations            231
;  :quant-instantiations    148
;  :rlimit-count            247562)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@150@01 $k@160@01) $k@169@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               5658
;  :arith-add-rows          134
;  :arith-assert-diseq      84
;  :arith-assert-lower      355
;  :arith-assert-upper      283
;  :arith-conflicts         35
;  :arith-eq-adapter        191
;  :arith-fixed-eqs         124
;  :arith-offset-eqs        12
;  :arith-pivots            172
;  :binary-propagations     16
;  :conflicts               252
;  :datatype-accessor-ax    369
;  :datatype-constructor-ax 1142
;  :datatype-occurs-check   295
;  :datatype-splits         962
;  :decisions               1085
;  :del-clause              354
;  :final-checks            74
;  :interface-eqs           7
;  :max-generation          2
;  :max-memory              5.45
;  :memory                  5.30
;  :mk-bool-var             2700
;  :mk-clause               440
;  :num-allocs              7043665
;  :num-checks              379
;  :propagations            231
;  :quant-instantiations    148
;  :rlimit-count            247646)
(assert (= $t@170@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (Main_lock_invariant_EncodedGlobalVariables%trigger $t@161@01 ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) globals@35@01))
; [exec]
; inhale acc(Main_lock_held_EncodedGlobalVariables(diz.Driver_m, globals), write)
(declare-const $t@171@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6671
;  :arith-add-rows          195
;  :arith-assert-diseq      98
;  :arith-assert-lower      428
;  :arith-assert-upper      329
;  :arith-conflicts         35
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         156
;  :arith-offset-eqs        16
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              493
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3061
;  :mk-clause               572
;  :num-allocs              7456256
;  :num-checks              382
;  :propagations            291
;  :quant-instantiations    170
;  :rlimit-count            254966)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__73: Int :: { diz.Driver_m.Main_process_state[i__73] } 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|)
(declare-const i__73@172@01 Int)
(push) ; 12
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__73 && i__73 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__73
(push) ; 13
; [then-branch: 42 | 0 <= i__73@172@01 | live]
; [else-branch: 42 | !(0 <= i__73@172@01) | live]
(push) ; 14
; [then-branch: 42 | 0 <= i__73@172@01]
(assert (<= 0 i__73@172@01))
; [eval] i__73 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 42 | !(0 <= i__73@172@01)]
(assert (not (<= 0 i__73@172@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 43 | i__73@172@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i__73@172@01 | live]
; [else-branch: 43 | !(i__73@172@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i__73@172@01) | live]
(push) ; 14
; [then-branch: 43 | i__73@172@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i__73@172@01]
(assert (and
  (<
    i__73@172@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
  (<= 0 i__73@172@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] == -1 || 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73] == -1
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 15
(assert (not (>= i__73@172@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6672
;  :arith-add-rows          195
;  :arith-assert-diseq      98
;  :arith-assert-lower      429
;  :arith-assert-upper      330
;  :arith-conflicts         35
;  :arith-eq-adapter        237
;  :arith-fixed-eqs         157
;  :arith-offset-eqs        16
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              493
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3063
;  :mk-clause               572
;  :num-allocs              7456256
;  :num-checks              383
;  :propagations            291
;  :quant-instantiations    170
;  :rlimit-count            255106)
; [eval] -1
(push) ; 15
; [then-branch: 44 | First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01] == -1 | live]
; [else-branch: 44 | First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01] != -1 | live]
(push) ; 16
; [then-branch: 44 | First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i__73@172@01)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 44 | First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
      i__73@172@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73] && diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__73]
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 17
(assert (not (>= i__73@172@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6674
;  :arith-add-rows          195
;  :arith-assert-diseq      100
;  :arith-assert-lower      432
;  :arith-assert-upper      331
;  :arith-conflicts         35
;  :arith-eq-adapter        238
;  :arith-fixed-eqs         157
;  :arith-offset-eqs        16
;  :arith-pivots            233
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              493
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3070
;  :mk-clause               582
;  :num-allocs              7456256
;  :num-checks              384
;  :propagations            296
;  :quant-instantiations    171
;  :rlimit-count            255301)
(push) ; 17
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01] | live]
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01]) | live]
(push) ; 18
; [then-branch: 45 | 0 <= First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i__73@172@01)))
; [eval] diz.Driver_m.Main_process_state[i__73] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__73]
(push) ; 19
(assert (not (>= i__73@172@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6676
;  :arith-add-rows          195
;  :arith-assert-diseq      100
;  :arith-assert-lower      434
;  :arith-assert-upper      332
;  :arith-conflicts         35
;  :arith-eq-adapter        239
;  :arith-fixed-eqs         158
;  :arith-offset-eqs        16
;  :arith-pivots            235
;  :binary-propagations     16
;  :conflicts               253
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              493
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3074
;  :mk-clause               582
;  :num-allocs              7456256
;  :num-checks              385
;  :propagations            296
;  :quant-instantiations    171
;  :rlimit-count            255442)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 45 | !(0 <= First:(Second:(Second:(Second:($t@161@01))))[i__73@172@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
      i__73@172@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 43 | !(i__73@172@01 < |First:(Second:(Second:(Second:($t@161@01))))| && 0 <= i__73@172@01)]
(assert (not
  (and
    (<
      i__73@172@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
    (<= 0 i__73@172@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__73@172@01 Int)) (!
  (implies
    (and
      (<
        i__73@172@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
      (<= 0 i__73@172@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
          i__73@172@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i__73@172@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i__73@172@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i__73@172@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6676
;  :arith-add-rows          195
;  :arith-assert-diseq      102
;  :arith-assert-lower      435
;  :arith-assert-upper      333
;  :arith-conflicts         35
;  :arith-eq-adapter        240
;  :arith-fixed-eqs         159
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               254
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              517
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3082
;  :mk-clause               596
;  :num-allocs              7456256
;  :num-checks              386
;  :propagations            298
;  :quant-instantiations    172
;  :rlimit-count            255891)
(assert (forall ((i__73@172@01 Int)) (!
  (implies
    (and
      (<
        i__73@172@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))
      (<= 0 i__73@172@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
          i__73@172@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i__73@172@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
            i__73@172@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@161@01)))))
    i__73@172@01))
  :qid |prog.l<no position>|)))
(declare-const $k@173@01 $Perm)
(assert ($Perm.isReadVar $k@173@01 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@173@01 $Perm.No) (< $Perm.No $k@173@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6676
;  :arith-add-rows          195
;  :arith-assert-diseq      103
;  :arith-assert-lower      437
;  :arith-assert-upper      334
;  :arith-conflicts         35
;  :arith-eq-adapter        241
;  :arith-fixed-eqs         159
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               255
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              517
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3087
;  :mk-clause               598
;  :num-allocs              7456256
;  :num-checks              387
;  :propagations            299
;  :quant-instantiations    172
;  :rlimit-count            256451)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@147@01 $k@157@01) $k@163@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          195
;  :arith-assert-diseq      103
;  :arith-assert-lower      437
;  :arith-assert-upper      335
;  :arith-conflicts         36
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         159
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               256
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3089
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              388
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            256531)
(assert (< $k@173@01 (+ (- $k@147@01 $k@157@01) $k@163@01)))
(assert (<= $Perm.No (- (+ (- $k@147@01 $k@157@01) $k@163@01) $k@173@01)))
(assert (<= (- (+ (- $k@147@01 $k@157@01) $k@163@01) $k@173@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@147@01 $k@157@01) $k@163@01) $k@173@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      337
;  :arith-conflicts         37
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         160
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               257
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3093
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              389
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            256800)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      338
;  :arith-conflicts         38
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         161
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               258
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3094
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              390
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            256881)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      339
;  :arith-conflicts         39
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         162
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               259
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3095
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              391
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            256962)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      340
;  :arith-conflicts         40
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         163
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               260
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3096
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              392
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257043)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      341
;  :arith-conflicts         41
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         164
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               261
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3097
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              393
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257124)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      342
;  :arith-conflicts         42
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         165
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               262
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3098
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              394
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257205)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      343
;  :arith-conflicts         43
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         166
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               263
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3099
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              395
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257286)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      344
;  :arith-conflicts         44
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         167
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               264
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3100
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              396
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257367)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      103
;  :arith-assert-lower      439
;  :arith-assert-upper      345
;  :arith-conflicts         45
;  :arith-eq-adapter        242
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               265
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3101
;  :mk-clause               600
;  :num-allocs              7456256
;  :num-checks              397
;  :propagations            300
;  :quant-instantiations    172
;  :rlimit-count            257448)
(declare-const $k@174@01 $Perm)
(assert ($Perm.isReadVar $k@174@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@174@01 $Perm.No) (< $Perm.No $k@174@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6677
;  :arith-add-rows          197
;  :arith-assert-diseq      104
;  :arith-assert-lower      441
;  :arith-assert-upper      346
;  :arith-conflicts         45
;  :arith-eq-adapter        243
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               266
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              519
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3105
;  :mk-clause               602
;  :num-allocs              7456256
;  :num-checks              398
;  :propagations            301
;  :quant-instantiations    172
;  :rlimit-count            257646)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@148@01 $k@158@01) $k@165@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6678
;  :arith-add-rows          197
;  :arith-assert-diseq      104
;  :arith-assert-lower      441
;  :arith-assert-upper      347
;  :arith-conflicts         46
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         168
;  :arith-offset-eqs        16
;  :arith-pivots            236
;  :binary-propagations     16
;  :conflicts               267
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              521
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3107
;  :mk-clause               604
;  :num-allocs              7456256
;  :num-checks              399
;  :propagations            302
;  :quant-instantiations    172
;  :rlimit-count            257724)
(assert (< $k@174@01 (+ (- $k@148@01 $k@158@01) $k@165@01)))
(assert (<= $Perm.No (- (+ (- $k@148@01 $k@158@01) $k@165@01) $k@174@01)))
(assert (<= (- (+ (- $k@148@01 $k@158@01) $k@165@01) $k@174@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@148@01 $k@158@01) $k@165@01) $k@174@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6678
;  :arith-add-rows          198
;  :arith-assert-diseq      104
;  :arith-assert-lower      443
;  :arith-assert-upper      349
;  :arith-conflicts         47
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         169
;  :arith-offset-eqs        16
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              521
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3111
;  :mk-clause               604
;  :num-allocs              7456256
;  :num-checks              400
;  :propagations            302
;  :quant-instantiations    172
;  :rlimit-count            257996)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6678
;  :arith-add-rows          198
;  :arith-assert-diseq      104
;  :arith-assert-lower      443
;  :arith-assert-upper      349
;  :arith-conflicts         47
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         169
;  :arith-offset-eqs        16
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               268
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              521
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3111
;  :mk-clause               604
;  :num-allocs              7456256
;  :num-checks              401
;  :propagations            302
;  :quant-instantiations    172
;  :rlimit-count            258009)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6678
;  :arith-add-rows          198
;  :arith-assert-diseq      104
;  :arith-assert-lower      443
;  :arith-assert-upper      350
;  :arith-conflicts         48
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        16
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              521
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3112
;  :mk-clause               604
;  :num-allocs              7456256
;  :num-checks              402
;  :propagations            302
;  :quant-instantiations    172
;  :rlimit-count            258087)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))
  $t@166@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               6678
;  :arith-add-rows          198
;  :arith-assert-diseq      104
;  :arith-assert-lower      443
;  :arith-assert-upper      350
;  :arith-conflicts         48
;  :arith-eq-adapter        244
;  :arith-fixed-eqs         170
;  :arith-offset-eqs        16
;  :arith-pivots            237
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    381
;  :datatype-constructor-ax 1393
;  :datatype-occurs-check   397
;  :datatype-splits         1145
;  :decisions               1328
;  :del-clause              521
;  :final-checks            82
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3112
;  :mk-clause               604
;  :num-allocs              7456256
;  :num-checks              403
;  :propagations            302
;  :quant-instantiations    172
;  :rlimit-count            258098)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      109
;  :arith-assert-lower      469
;  :arith-assert-upper      366
;  :arith-conflicts         48
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         181
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               269
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3265
;  :mk-clause               649
;  :num-allocs              7456256
;  :num-checks              404
;  :propagations            324
;  :quant-instantiations    181
;  :rlimit-count            261175
;  :time                    0.00)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      109
;  :arith-assert-lower      469
;  :arith-assert-upper      367
;  :arith-conflicts         49
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         182
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               270
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3266
;  :mk-clause               649
;  :num-allocs              7456256
;  :num-checks              405
;  :propagations            324
;  :quant-instantiations    181
;  :rlimit-count            261253)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      109
;  :arith-assert-lower      469
;  :arith-assert-upper      368
;  :arith-conflicts         50
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         183
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               271
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3267
;  :mk-clause               649
;  :num-allocs              7456256
;  :num-checks              406
;  :propagations            324
;  :quant-instantiations    181
;  :rlimit-count            261331)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      109
;  :arith-assert-lower      469
;  :arith-assert-upper      369
;  :arith-conflicts         51
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         184
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               272
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3268
;  :mk-clause               649
;  :num-allocs              7456256
;  :num-checks              407
;  :propagations            324
;  :quant-instantiations    181
;  :rlimit-count            261409)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      109
;  :arith-assert-lower      469
;  :arith-assert-upper      370
;  :arith-conflicts         52
;  :arith-eq-adapter        260
;  :arith-fixed-eqs         185
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               273
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3269
;  :mk-clause               649
;  :num-allocs              7456256
;  :num-checks              408
;  :propagations            324
;  :quant-instantiations    181
;  :rlimit-count            261487)
(declare-const $k@175@01 $Perm)
(assert ($Perm.isReadVar $k@175@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@175@01 $Perm.No) (< $Perm.No $k@175@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7063
;  :arith-add-rows          225
;  :arith-assert-diseq      110
;  :arith-assert-lower      471
;  :arith-assert-upper      371
;  :arith-conflicts         52
;  :arith-eq-adapter        261
;  :arith-fixed-eqs         185
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               274
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              566
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3273
;  :mk-clause               651
;  :num-allocs              7456256
;  :num-checks              409
;  :propagations            325
;  :quant-instantiations    181
;  :rlimit-count            261686)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= (+ (- $k@149@01 $k@159@01) $k@167@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          225
;  :arith-assert-diseq      110
;  :arith-assert-lower      471
;  :arith-assert-upper      372
;  :arith-conflicts         53
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         185
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               275
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3275
;  :mk-clause               653
;  :num-allocs              7456256
;  :num-checks              410
;  :propagations            326
;  :quant-instantiations    181
;  :rlimit-count            261764)
(assert (< $k@175@01 (+ (- $k@149@01 $k@159@01) $k@167@01)))
(assert (<= $Perm.No (- (+ (- $k@149@01 $k@159@01) $k@167@01) $k@175@01)))
(assert (<= (- (+ (- $k@149@01 $k@159@01) $k@167@01) $k@175@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@149@01 $k@159@01) $k@167@01) $k@175@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      110
;  :arith-assert-lower      473
;  :arith-assert-upper      374
;  :arith-conflicts         54
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3279
;  :mk-clause               653
;  :num-allocs              7456256
;  :num-checks              411
;  :propagations            326
;  :quant-instantiations    181
;  :rlimit-count            262029)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      110
;  :arith-assert-lower      473
;  :arith-assert-upper      374
;  :arith-conflicts         54
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         186
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               276
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3279
;  :mk-clause               653
;  :num-allocs              7456256
;  :num-checks              412
;  :propagations            326
;  :quant-instantiations    181
;  :rlimit-count            262042)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@149@01 $k@159@01) $k@167@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      110
;  :arith-assert-lower      473
;  :arith-assert-upper      375
;  :arith-conflicts         55
;  :arith-eq-adapter        262
;  :arith-fixed-eqs         187
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               277
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3280
;  :mk-clause               653
;  :num-allocs              7456256
;  :num-checks              413
;  :propagations            326
;  :quant-instantiations    181
;  :rlimit-count            262120)
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      111
;  :arith-assert-lower      475
;  :arith-assert-upper      377
;  :arith-conflicts         56
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               278
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3285
;  :mk-clause               655
;  :num-allocs              7456256
;  :num-checks              414
;  :propagations            327
;  :quant-instantiations    181
;  :rlimit-count            262350)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@176@01 $Perm.No) (< $Perm.No $k@176@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      111
;  :arith-assert-lower      475
;  :arith-assert-upper      377
;  :arith-conflicts         56
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3285
;  :mk-clause               655
;  :num-allocs              7456256
;  :num-checks              415
;  :propagations            327
;  :quant-instantiations    181
;  :rlimit-count            262400)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $t@164@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7064
;  :arith-add-rows          226
;  :arith-assert-diseq      111
;  :arith-assert-lower      475
;  :arith-assert-upper      377
;  :arith-conflicts         56
;  :arith-eq-adapter        263
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               279
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              568
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3285
;  :mk-clause               655
;  :num-allocs              7456256
;  :num-checks              416
;  :propagations            327
;  :quant-instantiations    181
;  :rlimit-count            262411)
(push) ; 12
(assert (not (not (= (+ (- $k@150@01 $k@160@01) $k@169@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          226
;  :arith-assert-diseq      111
;  :arith-assert-lower      475
;  :arith-assert-upper      378
;  :arith-conflicts         57
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         188
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               280
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3287
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              417
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262491)
(assert (< $k@176@01 (+ (- $k@150@01 $k@160@01) $k@169@01)))
(assert (<= $Perm.No (- (+ (- $k@150@01 $k@160@01) $k@169@01) $k@176@01)))
(assert (<= (- (+ (- $k@150@01 $k@160@01) $k@169@01) $k@176@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@150@01 $k@160@01) $k@169@01) $k@176@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@147@01 $k@157@01) $k@163@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      380
;  :arith-conflicts         58
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3291
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              418
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262760)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  $t@164@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      380
;  :arith-conflicts         58
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         189
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               281
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3291
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              419
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262771)
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@150@01 $k@160@01) $k@169@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      381
;  :arith-conflicts         59
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         190
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               282
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3292
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              420
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262852)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 12
(assert (not (< $Perm.No (+ (- $k@148@01 $k@158@01) $k@165@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      382
;  :arith-conflicts         60
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3293
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              421
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262930)
(set-option :timeout 0)
(push) ; 12
(assert (not (= $t@166@01 diz@34@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      382
;  :arith-conflicts         60
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3293
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              422
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262941)
(assert (= $t@166@01 diz@34@01))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7065
;  :arith-add-rows          228
;  :arith-assert-diseq      111
;  :arith-assert-lower      477
;  :arith-assert-upper      382
;  :arith-conflicts         60
;  :arith-eq-adapter        264
;  :arith-fixed-eqs         191
;  :arith-offset-eqs        17
;  :arith-pivots            260
;  :binary-propagations     16
;  :conflicts               283
;  :datatype-accessor-ax    387
;  :datatype-constructor-ax 1488
;  :datatype-occurs-check   448
;  :datatype-splits         1237
;  :decisions               1418
;  :del-clause              570
;  :final-checks            85
;  :interface-eqs           9
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3293
;  :mk-clause               657
;  :num-allocs              7456256
;  :num-checks              423
;  :propagations            328
;  :quant-instantiations    181
;  :rlimit-count            262957)
(pop) ; 11
(push) ; 11
; [else-branch: 33 | !(First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          0)
        (- 0 2))))))
(pop) ; 11
(set-option :timeout 10)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7427
;  :arith-add-rows          249
;  :arith-assert-diseq      111
;  :arith-assert-lower      487
;  :arith-assert-upper      392
;  :arith-conflicts         60
;  :arith-eq-adapter        274
;  :arith-fixed-eqs         201
;  :arith-offset-eqs        19
;  :arith-pivots            287
;  :binary-propagations     16
;  :conflicts               284
;  :datatype-accessor-ax    393
;  :datatype-constructor-ax 1585
;  :datatype-occurs-check   463
;  :datatype-splits         1315
;  :decisions               1510
;  :del-clause              594
;  :final-checks            89
;  :interface-eqs           10
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3404
;  :mk-clause               671
;  :num-allocs              7456256
;  :num-checks              424
;  :propagations            335
;  :quant-instantiations    181
;  :rlimit-count            265725
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               7736
;  :arith-add-rows          272
;  :arith-assert-diseq      111
;  :arith-assert-lower      494
;  :arith-assert-upper      399
;  :arith-conflicts         60
;  :arith-eq-adapter        281
;  :arith-fixed-eqs         208
;  :arith-offset-eqs        20
;  :arith-pivots            301
;  :binary-propagations     16
;  :conflicts               285
;  :datatype-accessor-ax    399
;  :datatype-constructor-ax 1682
;  :datatype-occurs-check   478
;  :datatype-splits         1393
;  :decisions               1602
;  :del-clause              605
;  :final-checks            93
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3506
;  :mk-clause               682
;  :num-allocs              7456256
;  :num-checks              425
;  :propagations            342
;  :quant-instantiations    181
;  :rlimit-count            268234
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8047
;  :arith-add-rows          295
;  :arith-assert-diseq      111
;  :arith-assert-lower      501
;  :arith-assert-upper      406
;  :arith-conflicts         60
;  :arith-eq-adapter        288
;  :arith-fixed-eqs         215
;  :arith-offset-eqs        21
;  :arith-pivots            315
;  :binary-propagations     16
;  :conflicts               286
;  :datatype-accessor-ax    405
;  :datatype-constructor-ax 1780
;  :datatype-occurs-check   493
;  :datatype-splits         1472
;  :decisions               1694
;  :del-clause              613
;  :final-checks            96
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3609
;  :mk-clause               690
;  :num-allocs              7456256
;  :num-checks              426
;  :propagations            347
;  :quant-instantiations    181
;  :rlimit-count            270748
;  :time                    0.00)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8358
;  :arith-add-rows          322
;  :arith-assert-diseq      111
;  :arith-assert-lower      508
;  :arith-assert-upper      413
;  :arith-conflicts         60
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         222
;  :arith-offset-eqs        22
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 1878
;  :datatype-occurs-check   508
;  :datatype-splits         1551
;  :decisions               1786
;  :del-clause              621
;  :final-checks            99
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3712
;  :mk-clause               698
;  :num-allocs              7456256
;  :num-checks              427
;  :propagations            352
;  :quant-instantiations    181
;  :rlimit-count            273324
;  :time                    0.00)
; [eval] !(diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2)
; [eval] diz.Driver_m.Main_process_state[0] != -1 || diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_process_state[0] != -1
; [eval] diz.Driver_m.Main_process_state[0]
(set-option :timeout 0)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8358
;  :arith-add-rows          322
;  :arith-assert-diseq      111
;  :arith-assert-lower      508
;  :arith-assert-upper      413
;  :arith-conflicts         60
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         222
;  :arith-offset-eqs        22
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 1878
;  :datatype-occurs-check   508
;  :datatype-splits         1551
;  :decisions               1786
;  :del-clause              621
;  :final-checks            99
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3712
;  :mk-clause               698
;  :num-allocs              7456256
;  :num-checks              428
;  :propagations            352
;  :quant-instantiations    181
;  :rlimit-count            273339)
; [eval] -1
(push) ; 11
; [then-branch: 46 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 | live]
; [else-branch: 46 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1 | live]
(push) ; 12
; [then-branch: 46 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      0)
    (- 0 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 46 | First:(Second:(Second:(Second:($t@145@01))))[0] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    0)
  (- 0 1)))
; [eval] diz.Driver_m.Main_event_state[0] != -2
; [eval] diz.Driver_m.Main_event_state[0]
(push) ; 13
(assert (not (<
  0
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8359
;  :arith-add-rows          322
;  :arith-assert-diseq      111
;  :arith-assert-lower      508
;  :arith-assert-upper      413
;  :arith-conflicts         60
;  :arith-eq-adapter        295
;  :arith-fixed-eqs         222
;  :arith-offset-eqs        22
;  :arith-pivots            330
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    411
;  :datatype-constructor-ax 1878
;  :datatype-occurs-check   508
;  :datatype-splits         1551
;  :decisions               1786
;  :del-clause              621
;  :final-checks            99
;  :interface-eqs           11
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3713
;  :mk-clause               698
;  :num-allocs              7456256
;  :num-checks              429
;  :propagations            352
;  :quant-instantiations    181
;  :rlimit-count            273497)
; [eval] -2
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(set-option :timeout 10)
(push) ; 11
(assert (not (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        0)
      (- 0 2))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8652
;  :arith-add-rows          349
;  :arith-assert-diseq      111
;  :arith-assert-lower      514
;  :arith-assert-upper      419
;  :arith-conflicts         60
;  :arith-eq-adapter        301
;  :arith-fixed-eqs         228
;  :arith-offset-eqs        23
;  :arith-pivots            343
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    416
;  :datatype-constructor-ax 1957
;  :datatype-occurs-check   522
;  :datatype-splits         1627
;  :decisions               1861
;  :del-clause              630
;  :final-checks            103
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3808
;  :mk-clause               707
;  :num-allocs              7456256
;  :num-checks              430
;  :propagations            359
;  :quant-instantiations    181
;  :rlimit-count            276024
;  :time                    0.00)
(push) ; 11
(assert (not (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          0)
        (- 0 2)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8957
;  :arith-add-rows          364
;  :arith-assert-diseq      115
;  :arith-assert-lower      535
;  :arith-assert-upper      432
;  :arith-conflicts         60
;  :arith-eq-adapter        314
;  :arith-fixed-eqs         237
;  :arith-offset-eqs        24
;  :arith-pivots            361
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              668
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3936
;  :mk-clause               745
;  :num-allocs              7456256
;  :num-checks              431
;  :propagations            377
;  :quant-instantiations    187
;  :rlimit-count            278613
;  :time                    0.00)
; [then-branch: 47 | !(First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2) | live]
; [else-branch: 47 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2 | live]
(push) ; 11
; [then-branch: 47 | !(First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2)]
(assert (not
  (or
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          0)
        (- 0 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
          0)
        (- 0 2))))))
; [exec]
; __flatten_44__70 := diz.Driver_a
(declare-const __flatten_44__70@177@01 Int)
(assert (=
  __flatten_44__70@177@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))))
; [exec]
; diz.Driver_a := diz.Driver_a + 1
; [eval] diz.Driver_a + 1
(declare-const Driver_a@178@01 Int)
(assert (=
  Driver_a@178@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))))))))))))))))))
    1)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8962
;  :arith-add-rows          364
;  :arith-assert-diseq      115
;  :arith-assert-lower      536
;  :arith-assert-upper      433
;  :arith-conflicts         60
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         237
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              668
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3943
;  :mk-clause               748
;  :num-allocs              7456256
;  :num-checks              432
;  :propagations            379
;  :quant-instantiations    188
;  :rlimit-count            279193)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__72: Int :: { diz.Driver_m.Main_process_state[i__72] } 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|)
(declare-const i__72@179@01 Int)
(push) ; 12
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__72 && i__72 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__72
(push) ; 13
; [then-branch: 48 | 0 <= i__72@179@01 | live]
; [else-branch: 48 | !(0 <= i__72@179@01) | live]
(push) ; 14
; [then-branch: 48 | 0 <= i__72@179@01]
(assert (<= 0 i__72@179@01))
; [eval] i__72 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 14
(push) ; 14
; [else-branch: 48 | !(0 <= i__72@179@01)]
(assert (not (<= 0 i__72@179@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 49 | i__72@179@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__72@179@01 | live]
; [else-branch: 49 | !(i__72@179@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__72@179@01) | live]
(push) ; 14
; [then-branch: 49 | i__72@179@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__72@179@01]
(assert (and
  (<
    i__72@179@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
  (<= 0 i__72@179@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] == -1 || 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72] == -1
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 15
(assert (not (>= i__72@179@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8963
;  :arith-add-rows          364
;  :arith-assert-diseq      115
;  :arith-assert-lower      537
;  :arith-assert-upper      434
;  :arith-conflicts         60
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         238
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               287
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              668
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3945
;  :mk-clause               748
;  :num-allocs              7456256
;  :num-checks              433
;  :propagations            379
;  :quant-instantiations    188
;  :rlimit-count            279333)
; [eval] -1
(push) ; 15
; [then-branch: 50 | First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01] == -1 | live]
; [else-branch: 50 | First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01] != -1 | live]
(push) ; 16
; [then-branch: 50 | First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__72@179@01)
  (- 0 1)))
(pop) ; 16
(push) ; 16
; [else-branch: 50 | First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i__72@179@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72] && diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__72]
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 17
(assert (not (>= i__72@179@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      115
;  :arith-assert-lower      537
;  :arith-assert-upper      434
;  :arith-conflicts         60
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         238
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              668
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3946
;  :mk-clause               748
;  :num-allocs              7456256
;  :num-checks              434
;  :propagations            379
;  :quant-instantiations    188
;  :rlimit-count            279501)
(push) ; 17
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01] | live]
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01]) | live]
(push) ; 18
; [then-branch: 51 | 0 <= First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__72@179@01)))
; [eval] diz.Driver_m.Main_process_state[i__72] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__72]
(push) ; 19
(assert (not (>= i__72@179@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      115
;  :arith-assert-lower      537
;  :arith-assert-upper      434
;  :arith-conflicts         60
;  :arith-eq-adapter        315
;  :arith-fixed-eqs         238
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               288
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              668
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3947
;  :mk-clause               748
;  :num-allocs              7456256
;  :num-checks              435
;  :propagations            379
;  :quant-instantiations    188
;  :rlimit-count            279606)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 18
(push) ; 18
; [else-branch: 51 | !(0 <= First:(Second:(Second:(Second:($t@145@01))))[i__72@179@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
      i__72@179@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 49 | !(i__72@179@01 < |First:(Second:(Second:(Second:($t@145@01))))| && 0 <= i__72@179@01)]
(assert (not
  (and
    (<
      i__72@179@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
    (<= 0 i__72@179@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i__72@179@01 Int)) (!
  (implies
    (and
      (<
        i__72@179@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i__72@179@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i__72@179@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__72@179@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__72@179@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__72@179@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      116
;  :arith-assert-lower      538
;  :arith-assert-upper      435
;  :arith-conflicts         60
;  :arith-eq-adapter        316
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               289
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3955
;  :mk-clause               760
;  :num-allocs              7456256
;  :num-checks              436
;  :propagations            381
;  :quant-instantiations    189
;  :rlimit-count            280049)
(assert (forall ((i__72@179@01 Int)) (!
  (implies
    (and
      (<
        i__72@179@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
      (<= 0 i__72@179@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
          i__72@179@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__72@179@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
            i__72@179@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
    i__72@179@01))
  :qid |prog.l<no position>|)))
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@180@01 $Perm.No) (< $Perm.No $k@180@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      540
;  :arith-assert-upper      436
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3960
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              437
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280610)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@147@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      540
;  :arith-assert-upper      436
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            362
;  :binary-propagations     16
;  :conflicts               290
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3960
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              438
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280621)
(assert (< $k@180@01 $k@147@01))
(assert (<= $Perm.No (- $k@147@01 $k@180@01)))
(assert (<= (- $k@147@01 $k@180@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@147@01 $k@180@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               291
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              439
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280841)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               292
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              440
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280889)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               293
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              441
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280937)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               294
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              442
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            280985)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               295
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              443
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            281033)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               296
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              444
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            281081)
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               297
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              445
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            281129)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               298
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              446
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            281177)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      117
;  :arith-assert-lower      542
;  :arith-assert-upper      437
;  :arith-conflicts         60
;  :arith-eq-adapter        317
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               299
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3963
;  :mk-clause               762
;  :num-allocs              7456256
;  :num-checks              447
;  :propagations            382
;  :quant-instantiations    189
;  :rlimit-count            281225)
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@181@01 $Perm.No) (< $Perm.No $k@181@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      118
;  :arith-assert-lower      544
;  :arith-assert-upper      438
;  :arith-conflicts         60
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3967
;  :mk-clause               764
;  :num-allocs              7456256
;  :num-checks              448
;  :propagations            383
;  :quant-instantiations    189
;  :rlimit-count            281423)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@148@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      118
;  :arith-assert-lower      544
;  :arith-assert-upper      438
;  :arith-conflicts         60
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            364
;  :binary-propagations     16
;  :conflicts               300
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3967
;  :mk-clause               764
;  :num-allocs              7456256
;  :num-checks              449
;  :propagations            383
;  :quant-instantiations    189
;  :rlimit-count            281434)
(assert (< $k@181@01 $k@148@01))
(assert (<= $Perm.No (- $k@148@01 $k@181@01)))
(assert (<= (- $k@148@01 $k@181@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@148@01 $k@181@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      118
;  :arith-assert-lower      546
;  :arith-assert-upper      439
;  :arith-conflicts         60
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            365
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3970
;  :mk-clause               764
;  :num-allocs              7456256
;  :num-checks              450
;  :propagations            383
;  :quant-instantiations    189
;  :rlimit-count            281648)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      118
;  :arith-assert-lower      546
;  :arith-assert-upper      439
;  :arith-conflicts         60
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            365
;  :binary-propagations     16
;  :conflicts               301
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3970
;  :mk-clause               764
;  :num-allocs              7456256
;  :num-checks              451
;  :propagations            383
;  :quant-instantiations    189
;  :rlimit-count            281661)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               8964
;  :arith-add-rows          364
;  :arith-assert-diseq      118
;  :arith-assert-lower      546
;  :arith-assert-upper      439
;  :arith-conflicts         60
;  :arith-eq-adapter        318
;  :arith-fixed-eqs         239
;  :arith-offset-eqs        24
;  :arith-pivots            365
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    421
;  :datatype-constructor-ax 2037
;  :datatype-occurs-check   536
;  :datatype-splits         1704
;  :decisions               1937
;  :del-clause              680
;  :final-checks            106
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             3970
;  :mk-clause               764
;  :num-allocs              7456256
;  :num-checks              452
;  :propagations            383
;  :quant-instantiations    189
;  :rlimit-count            281709)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               302
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              453
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            283843
;  :time                    0.00)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               303
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              454
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            283891)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               304
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              455
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            283939)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               305
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              456
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            283987)
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              457
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            284035)
(push) ; 12
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      118
;  :arith-assert-lower      553
;  :arith-assert-upper      446
;  :arith-conflicts         60
;  :arith-eq-adapter        325
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               306
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4067
;  :mk-clause               771
;  :num-allocs              7456256
;  :num-checks              458
;  :propagations            388
;  :quant-instantiations    189
;  :rlimit-count            284046)
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@182@01 $Perm.No) (< $Perm.No $k@182@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      119
;  :arith-assert-lower      555
;  :arith-assert-upper      447
;  :arith-conflicts         60
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4071
;  :mk-clause               773
;  :num-allocs              7456256
;  :num-checks              459
;  :propagations            389
;  :quant-instantiations    189
;  :rlimit-count            284245)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@149@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      119
;  :arith-assert-lower      555
;  :arith-assert-upper      447
;  :arith-conflicts         60
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               307
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4071
;  :mk-clause               773
;  :num-allocs              7456256
;  :num-checks              460
;  :propagations            389
;  :quant-instantiations    189
;  :rlimit-count            284256)
(assert (< $k@182@01 $k@149@01))
(assert (<= $Perm.No (- $k@149@01 $k@182@01)))
(assert (<= (- $k@149@01 $k@182@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@149@01 $k@182@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@145@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 12
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      119
;  :arith-assert-lower      557
;  :arith-assert-upper      448
;  :arith-conflicts         60
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4074
;  :mk-clause               773
;  :num-allocs              7456256
;  :num-checks              461
;  :propagations            389
;  :quant-instantiations    189
;  :rlimit-count            284464)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      119
;  :arith-assert-lower      557
;  :arith-assert-upper      448
;  :arith-conflicts         60
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               308
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4074
;  :mk-clause               773
;  :num-allocs              7456256
;  :num-checks              462
;  :propagations            389
;  :quant-instantiations    189
;  :rlimit-count            284477)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      119
;  :arith-assert-lower      557
;  :arith-assert-upper      448
;  :arith-conflicts         60
;  :arith-eq-adapter        326
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               309
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4074
;  :mk-clause               773
;  :num-allocs              7456256
;  :num-checks              463
;  :propagations            389
;  :quant-instantiations    189
;  :rlimit-count            284525)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01 $Perm.Write))
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      559
;  :arith-assert-upper      449
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               310
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4078
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              464
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            284722)
(set-option :timeout 0)
(push) ; 12
(assert (not (or (= $k@183@01 $Perm.No) (< $Perm.No $k@183@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      559
;  :arith-assert-upper      449
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4078
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              465
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            284772)
(set-option :timeout 10)
(push) ; 12
(assert (not (not (= $k@150@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      559
;  :arith-assert-upper      449
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               311
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4078
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              466
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            284783)
(assert (< $k@183@01 $k@150@01))
(assert (<= $Perm.No (- $k@150@01 $k@183@01)))
(assert (<= (- $k@150@01 $k@183@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@150@01 $k@183@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 12
(assert (not (< $Perm.No $k@147@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      561
;  :arith-assert-upper      450
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               312
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4081
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              467
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            284991)
(push) ; 12
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      561
;  :arith-assert-upper      450
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               313
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4081
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              468
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            285039)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 12
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      561
;  :arith-assert-upper      450
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4081
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              469
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            285087)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9261
;  :arith-add-rows          379
;  :arith-assert-diseq      120
;  :arith-assert-lower      561
;  :arith-assert-upper      450
;  :arith-conflicts         60
;  :arith-eq-adapter        327
;  :arith-fixed-eqs         246
;  :arith-offset-eqs        26
;  :arith-pivots            379
;  :binary-propagations     16
;  :conflicts               314
;  :datatype-accessor-ax    426
;  :datatype-constructor-ax 2117
;  :datatype-occurs-check   550
;  :datatype-splits         1781
;  :decisions               2012
;  :del-clause              687
;  :final-checks            109
;  :interface-eqs           12
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4081
;  :mk-clause               775
;  :num-allocs              7456256
;  :num-checks              470
;  :propagations            390
;  :quant-instantiations    189
;  :rlimit-count            285100)
(pop) ; 11
(push) ; 11
; [else-branch: 47 | First:(Second:(Second:(Second:($t@145@01))))[0] != -1 || First:(Second:(Second:(Second:(Second:(Second:($t@145@01))))))[0] != -2]
(assert (or
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))
        0)
      (- 0 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@145@01)))))))
        0)
      (- 0 2)))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 21 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    8)))
(pop) ; 8
(set-option :timeout 10)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9493
;  :arith-add-rows          383
;  :arith-assert-diseq      120
;  :arith-assert-lower      563
;  :arith-assert-upper      452
;  :arith-conflicts         60
;  :arith-eq-adapter        329
;  :arith-fixed-eqs         248
;  :arith-offset-eqs        26
;  :arith-pivots            395
;  :binary-propagations     16
;  :conflicts               315
;  :datatype-accessor-ax    431
;  :datatype-constructor-ax 2194
;  :datatype-occurs-check   563
;  :datatype-splits         1840
;  :decisions               2085
;  :del-clause              760
;  :final-checks            113
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4149
;  :mk-clause               781
;  :num-allocs              7688531
;  :num-checks              471
;  :propagations            396
;  :quant-instantiations    189
;  :rlimit-count            287170
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9712
;  :arith-add-rows          385
;  :arith-assert-diseq      120
;  :arith-assert-lower      566
;  :arith-assert-upper      455
;  :arith-conflicts         60
;  :arith-eq-adapter        332
;  :arith-fixed-eqs         251
;  :arith-offset-eqs        26
;  :arith-pivots            401
;  :binary-propagations     16
;  :conflicts               316
;  :datatype-accessor-ax    436
;  :datatype-constructor-ax 2273
;  :datatype-occurs-check   576
;  :datatype-splits         1900
;  :decisions               2159
;  :del-clause              764
;  :final-checks            116
;  :interface-eqs           13
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4221
;  :mk-clause               785
;  :num-allocs              7688531
;  :num-checks              472
;  :propagations            400
;  :quant-instantiations    189
;  :rlimit-count            288923
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               9924
;  :arith-add-rows          385
;  :arith-assert-diseq      120
;  :arith-assert-lower      568
;  :arith-assert-upper      457
;  :arith-conflicts         60
;  :arith-eq-adapter        334
;  :arith-fixed-eqs         253
;  :arith-offset-eqs        26
;  :arith-pivots            405
;  :binary-propagations     16
;  :conflicts               317
;  :datatype-accessor-ax    441
;  :datatype-constructor-ax 2350
;  :datatype-occurs-check   589
;  :datatype-splits         1959
;  :decisions               2232
;  :del-clause              770
;  :final-checks            120
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4289
;  :mk-clause               791
;  :num-allocs              7688531
;  :num-checks              473
;  :propagations            406
;  :quant-instantiations    189
;  :rlimit-count            290611
;  :time                    0.00)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10143
;  :arith-add-rows          387
;  :arith-assert-diseq      120
;  :arith-assert-lower      571
;  :arith-assert-upper      460
;  :arith-conflicts         60
;  :arith-eq-adapter        337
;  :arith-fixed-eqs         256
;  :arith-offset-eqs        26
;  :arith-pivots            411
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    446
;  :datatype-constructor-ax 2429
;  :datatype-occurs-check   602
;  :datatype-splits         2019
;  :decisions               2306
;  :del-clause              774
;  :final-checks            123
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4361
;  :mk-clause               795
;  :num-allocs              7688531
;  :num-checks              474
;  :propagations            410
;  :quant-instantiations    189
;  :rlimit-count            292364
;  :time                    0.00)
; [eval] !(diz.Driver_a < 8)
; [eval] diz.Driver_a < 8
(push) ; 8
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  8)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10348
;  :arith-add-rows          389
;  :arith-assert-diseq      120
;  :arith-assert-lower      575
;  :arith-assert-upper      463
;  :arith-conflicts         60
;  :arith-eq-adapter        340
;  :arith-fixed-eqs         259
;  :arith-offset-eqs        26
;  :arith-pivots            417
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    450
;  :datatype-constructor-ax 2490
;  :datatype-occurs-check   614
;  :datatype-splits         2077
;  :decisions               2363
;  :del-clause              777
;  :final-checks            126
;  :interface-eqs           14
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4429
;  :mk-clause               798
;  :num-allocs              7688531
;  :num-checks              475
;  :propagations            414
;  :quant-instantiations    190
;  :rlimit-count            294132
;  :time                    0.00)
(push) ; 8
(assert (not (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    8))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10551
;  :arith-add-rows          390
;  :arith-assert-diseq      120
;  :arith-assert-lower      578
;  :arith-assert-upper      467
;  :arith-conflicts         60
;  :arith-eq-adapter        343
;  :arith-fixed-eqs         262
;  :arith-offset-eqs        26
;  :arith-pivots            423
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    454
;  :datatype-constructor-ax 2550
;  :datatype-occurs-check   626
;  :datatype-splits         2134
;  :decisions               2420
;  :del-clause              783
;  :final-checks            130
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4496
;  :mk-clause               804
;  :num-allocs              7688531
;  :num-checks              476
;  :propagations            420
;  :quant-instantiations    191
;  :rlimit-count            295910
;  :time                    0.00)
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8) | live]
; [else-branch: 52 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8 | live]
(push) ; 8
; [then-branch: 52 | !(First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8)]
(assert (not
  (<
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
    8)))
; [eval] diz.Driver_z == 8
(push) ; 9
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    8))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10760
;  :arith-add-rows          392
;  :arith-assert-diseq      120
;  :arith-assert-lower      583
;  :arith-assert-upper      471
;  :arith-conflicts         60
;  :arith-eq-adapter        347
;  :arith-fixed-eqs         265
;  :arith-offset-eqs        26
;  :arith-pivots            430
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    458
;  :datatype-constructor-ax 2611
;  :datatype-occurs-check   638
;  :datatype-splits         2192
;  :decisions               2477
;  :del-clause              787
;  :final-checks            133
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4569
;  :mk-clause               808
;  :num-allocs              7688531
;  :num-checks              477
;  :propagations            424
;  :quant-instantiations    193
;  :rlimit-count            297999
;  :time                    0.00)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  8)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               10967
;  :arith-add-rows          394
;  :arith-assert-diseq      122
;  :arith-assert-lower      588
;  :arith-assert-upper      474
;  :arith-conflicts         60
;  :arith-eq-adapter        351
;  :arith-fixed-eqs         268
;  :arith-offset-eqs        26
;  :arith-pivots            436
;  :binary-propagations     16
;  :conflicts               318
;  :datatype-accessor-ax    462
;  :datatype-constructor-ax 2672
;  :datatype-occurs-check   650
;  :datatype-splits         2250
;  :decisions               2535
;  :del-clause              794
;  :final-checks            136
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4640
;  :mk-clause               815
;  :num-allocs              7688531
;  :num-checks              478
;  :propagations            429
;  :quant-instantiations    194
;  :rlimit-count            299775
;  :time                    0.00)
; [then-branch: 53 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) == 8 | live]
; [else-branch: 53 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) != 8 | live]
(push) ; 9
; [then-branch: 53 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) == 8]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  8))
; [exec]
; diz.Driver_z := 0
; [eval] diz.Driver_y == 16
(push) ; 10
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11166
;  :arith-add-rows          394
;  :arith-assert-diseq      122
;  :arith-assert-lower      592
;  :arith-assert-upper      478
;  :arith-conflicts         60
;  :arith-eq-adapter        355
;  :arith-fixed-eqs         271
;  :arith-offset-eqs        26
;  :arith-pivots            442
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    467
;  :datatype-constructor-ax 2737
;  :datatype-occurs-check   663
;  :datatype-splits         2310
;  :decisions               2595
;  :del-clause              799
;  :final-checks            139
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4719
;  :mk-clause               820
;  :num-allocs              7932303
;  :num-checks              479
;  :propagations            433
;  :quant-instantiations    196
;  :rlimit-count            301854
;  :time                    0.00)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11375
;  :arith-add-rows          396
;  :arith-assert-diseq      124
;  :arith-assert-lower      596
;  :arith-assert-upper      483
;  :arith-conflicts         60
;  :arith-eq-adapter        360
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        26
;  :arith-pivots            449
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              803
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4792
;  :mk-clause               824
;  :num-allocs              8176615
;  :num-checks              480
;  :propagations            437
;  :quant-instantiations    197
;  :rlimit-count            303663
;  :time                    0.00)
; [then-branch: 54 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16 | live]
; [else-branch: 54 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16 | live]
(push) ; 10
; [then-branch: 54 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16))
; [exec]
; diz.Driver_y := 0
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11377
;  :arith-add-rows          396
;  :arith-assert-diseq      124
;  :arith-assert-lower      596
;  :arith-assert-upper      483
;  :arith-conflicts         60
;  :arith-eq-adapter        360
;  :arith-fixed-eqs         274
;  :arith-offset-eqs        26
;  :arith-pivots            449
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              803
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4794
;  :mk-clause               824
;  :num-allocs              8176615
;  :num-checks              481
;  :propagations            437
;  :quant-instantiations    198
;  :rlimit-count            303981)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@184@01 Int)
(push) ; 11
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 12
; [then-branch: 55 | 0 <= i__71@184@01 | live]
; [else-branch: 55 | !(0 <= i__71@184@01) | live]
(push) ; 13
; [then-branch: 55 | 0 <= i__71@184@01]
(assert (<= 0 i__71@184@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 13
(push) ; 13
; [else-branch: 55 | !(0 <= i__71@184@01)]
(assert (not (<= 0 i__71@184@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 56 | i__71@184@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@184@01 | live]
; [else-branch: 56 | !(i__71@184@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@184@01) | live]
(push) ; 13
; [then-branch: 56 | i__71@184@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@184@01]
(assert (and
  (<
    i__71@184@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  (<= 0 i__71@184@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 14
(assert (not (>= i__71@184@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11378
;  :arith-add-rows          396
;  :arith-assert-diseq      124
;  :arith-assert-lower      597
;  :arith-assert-upper      484
;  :arith-conflicts         60
;  :arith-eq-adapter        360
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        26
;  :arith-pivots            449
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              803
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4796
;  :mk-clause               824
;  :num-allocs              8176615
;  :num-checks              482
;  :propagations            437
;  :quant-instantiations    198
;  :rlimit-count            304121)
; [eval] -1
(push) ; 14
; [then-branch: 57 | First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01] == -1 | live]
; [else-branch: 57 | First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01] != -1 | live]
(push) ; 15
; [then-branch: 57 | First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@184@01)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 57 | First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@184@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 16
(assert (not (>= i__71@184@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11380
;  :arith-add-rows          396
;  :arith-assert-diseq      126
;  :arith-assert-lower      600
;  :arith-assert-upper      485
;  :arith-conflicts         60
;  :arith-eq-adapter        361
;  :arith-fixed-eqs         275
;  :arith-offset-eqs        26
;  :arith-pivots            449
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              803
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4803
;  :mk-clause               834
;  :num-allocs              8176615
;  :num-checks              483
;  :propagations            442
;  :quant-instantiations    199
;  :rlimit-count            304337)
(push) ; 16
; [then-branch: 58 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01] | live]
; [else-branch: 58 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01]) | live]
(push) ; 17
; [then-branch: 58 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@184@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 18
(assert (not (>= i__71@184@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      126
;  :arith-assert-lower      602
;  :arith-assert-upper      486
;  :arith-conflicts         60
;  :arith-eq-adapter        362
;  :arith-fixed-eqs         276
;  :arith-offset-eqs        26
;  :arith-pivots            450
;  :binary-propagations     16
;  :conflicts               319
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              803
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4807
;  :mk-clause               834
;  :num-allocs              8176615
;  :num-checks              484
;  :propagations            442
;  :quant-instantiations    199
;  :rlimit-count            304472)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 17
(push) ; 17
; [else-branch: 58 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@184@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@184@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 56 | !(i__71@184@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@184@01)]
(assert (not
  (and
    (<
      i__71@184@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    (<= 0 i__71@184@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 11
(assert (not (forall ((i__71@184@01 Int)) (!
  (implies
    (and
      (<
        i__71@184@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@184@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@184@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@184@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@184@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@184@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      127
;  :arith-assert-lower      603
;  :arith-assert-upper      487
;  :arith-conflicts         60
;  :arith-eq-adapter        363
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            451
;  :binary-propagations     16
;  :conflicts               320
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4815
;  :mk-clause               846
;  :num-allocs              8176615
;  :num-checks              485
;  :propagations            444
;  :quant-instantiations    200
;  :rlimit-count            304921)
(assert (forall ((i__71@184@01 Int)) (!
  (implies
    (and
      (<
        i__71@184@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@184@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@184@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@184@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@184@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@184@01))
  :qid |prog.l<no position>|)))
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@185@01 $Perm.No) (< $Perm.No $k@185@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      605
;  :arith-assert-upper      488
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            451
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4820
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              486
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305481)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@118@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      605
;  :arith-assert-upper      488
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            451
;  :binary-propagations     16
;  :conflicts               321
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4820
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              487
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305492)
(assert (< $k@185@01 $k@118@01))
(assert (<= $Perm.No (- $k@118@01 $k@185@01)))
(assert (<= (- $k@118@01 $k@185@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@01 $k@185@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               322
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              488
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305706)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               323
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              489
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305754)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               324
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              490
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305802)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               325
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              491
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305850)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               326
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              492
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305898)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               327
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              493
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305946)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               328
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              494
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            305994)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               329
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              495
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            306042)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      128
;  :arith-assert-lower      607
;  :arith-assert-upper      489
;  :arith-conflicts         60
;  :arith-eq-adapter        364
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               330
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4823
;  :mk-clause               848
;  :num-allocs              8176615
;  :num-checks              496
;  :propagations            445
;  :quant-instantiations    200
;  :rlimit-count            306090)
(declare-const $k@186@01 $Perm)
(assert ($Perm.isReadVar $k@186@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@186@01 $Perm.No) (< $Perm.No $k@186@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      609
;  :arith-assert-upper      490
;  :arith-conflicts         60
;  :arith-eq-adapter        365
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4827
;  :mk-clause               850
;  :num-allocs              8176615
;  :num-checks              497
;  :propagations            446
;  :quant-instantiations    200
;  :rlimit-count            306288)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@119@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      609
;  :arith-assert-upper      490
;  :arith-conflicts         60
;  :arith-eq-adapter        365
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            452
;  :binary-propagations     16
;  :conflicts               331
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4827
;  :mk-clause               850
;  :num-allocs              8176615
;  :num-checks              498
;  :propagations            446
;  :quant-instantiations    200
;  :rlimit-count            306299)
(assert (< $k@186@01 $k@119@01))
(assert (<= $Perm.No (- $k@119@01 $k@186@01)))
(assert (<= (- $k@119@01 $k@186@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@01 $k@186@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      611
;  :arith-assert-upper      491
;  :arith-conflicts         60
;  :arith-eq-adapter        365
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4830
;  :mk-clause               850
;  :num-allocs              8176615
;  :num-checks              499
;  :propagations            446
;  :quant-instantiations    200
;  :rlimit-count            306513)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      611
;  :arith-assert-upper      491
;  :arith-conflicts         60
;  :arith-eq-adapter        365
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               332
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4830
;  :mk-clause               850
;  :num-allocs              8176615
;  :num-checks              500
;  :propagations            446
;  :quant-instantiations    200
;  :rlimit-count            306526)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11382
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      611
;  :arith-assert-upper      491
;  :arith-conflicts         60
;  :arith-eq-adapter        365
;  :arith-fixed-eqs         277
;  :arith-offset-eqs        26
;  :arith-pivots            453
;  :binary-propagations     16
;  :conflicts               333
;  :datatype-accessor-ax    471
;  :datatype-constructor-ax 2798
;  :datatype-occurs-check   675
;  :datatype-splits         2368
;  :decisions               2652
;  :del-clause              825
;  :final-checks            142
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.42
;  :mk-bool-var             4830
;  :mk-clause               850
;  :num-allocs              8176615
;  :num-checks              501
;  :propagations            446
;  :quant-instantiations    200
;  :rlimit-count            306574)
(push) ; 11
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               334
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              502
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308080
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              503
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308128)
(push) ; 11
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               335
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              504
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308139)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               336
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              505
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308187)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              506
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308235)
(push) ; 11
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               337
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              507
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308246)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      129
;  :arith-assert-lower      615
;  :arith-assert-upper      495
;  :arith-conflicts         60
;  :arith-eq-adapter        369
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               338
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4905
;  :mk-clause               855
;  :num-allocs              8425560
;  :num-checks              508
;  :propagations            450
;  :quant-instantiations    200
;  :rlimit-count            308294)
(declare-const $k@187@01 $Perm)
(assert ($Perm.isReadVar $k@187@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@187@01 $Perm.No) (< $Perm.No $k@187@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      130
;  :arith-assert-lower      617
;  :arith-assert-upper      496
;  :arith-conflicts         60
;  :arith-eq-adapter        370
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4909
;  :mk-clause               857
;  :num-allocs              8425560
;  :num-checks              509
;  :propagations            451
;  :quant-instantiations    200
;  :rlimit-count            308493)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@120@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      130
;  :arith-assert-lower      617
;  :arith-assert-upper      496
;  :arith-conflicts         60
;  :arith-eq-adapter        370
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               339
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4909
;  :mk-clause               857
;  :num-allocs              8425560
;  :num-checks              510
;  :propagations            451
;  :quant-instantiations    200
;  :rlimit-count            308504)
(assert (< $k@187@01 $k@120@01))
(assert (<= $Perm.No (- $k@120@01 $k@187@01)))
(assert (<= (- $k@120@01 $k@187@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@01 $k@187@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      130
;  :arith-assert-lower      619
;  :arith-assert-upper      497
;  :arith-conflicts         60
;  :arith-eq-adapter        370
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4912
;  :mk-clause               857
;  :num-allocs              8425560
;  :num-checks              511
;  :propagations            451
;  :quant-instantiations    200
;  :rlimit-count            308712)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      130
;  :arith-assert-lower      619
;  :arith-assert-upper      497
;  :arith-conflicts         60
;  :arith-eq-adapter        370
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               340
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4912
;  :mk-clause               857
;  :num-allocs              8425560
;  :num-checks              512
;  :propagations            451
;  :quant-instantiations    200
;  :rlimit-count            308725)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      130
;  :arith-assert-lower      619
;  :arith-assert-upper      497
;  :arith-conflicts         60
;  :arith-eq-adapter        370
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               341
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4912
;  :mk-clause               857
;  :num-allocs              8425560
;  :num-checks              513
;  :propagations            451
;  :quant-instantiations    200
;  :rlimit-count            308773)
(declare-const $k@188@01 $Perm)
(assert ($Perm.isReadVar $k@188@01 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      621
;  :arith-assert-upper      498
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               342
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4916
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              514
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            308969)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@188@01 $Perm.No) (< $Perm.No $k@188@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      621
;  :arith-assert-upper      498
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4916
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              515
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309019)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@121@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      621
;  :arith-assert-upper      498
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            459
;  :binary-propagations     16
;  :conflicts               343
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4916
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              516
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309030)
(assert (< $k@188@01 $k@121@01))
(assert (<= $Perm.No (- $k@121@01 $k@188@01)))
(assert (<= (- $k@121@01 $k@188@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@01 $k@188@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      623
;  :arith-assert-upper      499
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            460
;  :binary-propagations     16
;  :conflicts               344
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4919
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              517
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309244)
(push) ; 11
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      623
;  :arith-assert-upper      499
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            460
;  :binary-propagations     16
;  :conflicts               345
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4919
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              518
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309292)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      623
;  :arith-assert-upper      499
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            460
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4919
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              519
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309340)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11577
;  :arith-add-rows          396
;  :arith-assert-diseq      131
;  :arith-assert-lower      623
;  :arith-assert-upper      499
;  :arith-conflicts         60
;  :arith-eq-adapter        371
;  :arith-fixed-eqs         280
;  :arith-offset-eqs        26
;  :arith-pivots            460
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    476
;  :datatype-constructor-ax 2863
;  :datatype-occurs-check   688
;  :datatype-splits         2428
;  :decisions               2712
;  :del-clause              830
;  :final-checks            145
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             4919
;  :mk-clause               859
;  :num-allocs              8425560
;  :num-checks              520
;  :propagations            452
;  :quant-instantiations    200
;  :rlimit-count            309353)
(pop) ; 10
(push) ; 10
; [else-branch: 54 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16)))
(pop) ; 10
; [eval] !(diz.Driver_y == 16)
; [eval] diz.Driver_y == 16
(set-option :timeout 10)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               11786
;  :arith-add-rows          396
;  :arith-assert-diseq      133
;  :arith-assert-lower      627
;  :arith-assert-upper      504
;  :arith-conflicts         60
;  :arith-eq-adapter        376
;  :arith-fixed-eqs         283
;  :arith-offset-eqs        26
;  :arith-pivots            469
;  :binary-propagations     16
;  :conflicts               346
;  :datatype-accessor-ax    480
;  :datatype-constructor-ax 2924
;  :datatype-occurs-check   700
;  :datatype-splits         2486
;  :decisions               2769
;  :del-clause              842
;  :final-checks            148
;  :interface-eqs           15
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             4992
;  :mk-clause               863
;  :num-allocs              8676679
;  :num-checks              521
;  :propagations            456
;  :quant-instantiations    201
;  :rlimit-count            311213
;  :time                    0.00)
(push) ; 10
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12022
;  :arith-add-rows          396
;  :arith-assert-diseq      133
;  :arith-assert-lower      632
;  :arith-assert-upper      507
;  :arith-conflicts         60
;  :arith-eq-adapter        382
;  :arith-fixed-eqs         286
;  :arith-offset-eqs        26
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              850
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5071
;  :mk-clause               871
;  :num-allocs              8676679
;  :num-checks              522
;  :propagations            461
;  :quant-instantiations    202
;  :rlimit-count            313202
;  :time                    0.00)
; [then-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16 | live]
; [else-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16 | live]
(push) ; 10
; [then-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12023
;  :arith-add-rows          396
;  :arith-assert-diseq      133
;  :arith-assert-lower      632
;  :arith-assert-upper      507
;  :arith-conflicts         60
;  :arith-eq-adapter        382
;  :arith-fixed-eqs         286
;  :arith-offset-eqs        26
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              850
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5073
;  :mk-clause               871
;  :num-allocs              8676679
;  :num-checks              523
;  :propagations            461
;  :quant-instantiations    203
;  :rlimit-count            313538)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@189@01 Int)
(push) ; 11
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 12
; [then-branch: 60 | 0 <= i__71@189@01 | live]
; [else-branch: 60 | !(0 <= i__71@189@01) | live]
(push) ; 13
; [then-branch: 60 | 0 <= i__71@189@01]
(assert (<= 0 i__71@189@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 13
(push) ; 13
; [else-branch: 60 | !(0 <= i__71@189@01)]
(assert (not (<= 0 i__71@189@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 61 | i__71@189@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@189@01 | live]
; [else-branch: 61 | !(i__71@189@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@189@01) | live]
(push) ; 13
; [then-branch: 61 | i__71@189@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@189@01]
(assert (and
  (<
    i__71@189@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  (<= 0 i__71@189@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 14
(assert (not (>= i__71@189@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12024
;  :arith-add-rows          396
;  :arith-assert-diseq      133
;  :arith-assert-lower      633
;  :arith-assert-upper      508
;  :arith-conflicts         60
;  :arith-eq-adapter        382
;  :arith-fixed-eqs         287
;  :arith-offset-eqs        26
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              850
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5075
;  :mk-clause               871
;  :num-allocs              8676679
;  :num-checks              524
;  :propagations            461
;  :quant-instantiations    203
;  :rlimit-count            313678)
; [eval] -1
(push) ; 14
; [then-branch: 62 | First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01] == -1 | live]
; [else-branch: 62 | First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01] != -1 | live]
(push) ; 15
; [then-branch: 62 | First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@189@01)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 62 | First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@189@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 16
(assert (not (>= i__71@189@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12026
;  :arith-add-rows          396
;  :arith-assert-diseq      135
;  :arith-assert-lower      636
;  :arith-assert-upper      509
;  :arith-conflicts         60
;  :arith-eq-adapter        383
;  :arith-fixed-eqs         287
;  :arith-offset-eqs        26
;  :arith-pivots            475
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              850
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5082
;  :mk-clause               881
;  :num-allocs              8676679
;  :num-checks              525
;  :propagations            466
;  :quant-instantiations    204
;  :rlimit-count            313895)
(push) ; 16
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01] | live]
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01]) | live]
(push) ; 17
; [then-branch: 63 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@189@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 18
(assert (not (>= i__71@189@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      135
;  :arith-assert-lower      638
;  :arith-assert-upper      510
;  :arith-conflicts         60
;  :arith-eq-adapter        384
;  :arith-fixed-eqs         288
;  :arith-offset-eqs        26
;  :arith-pivots            477
;  :binary-propagations     16
;  :conflicts               347
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              850
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5086
;  :mk-clause               881
;  :num-allocs              8676679
;  :num-checks              526
;  :propagations            466
;  :quant-instantiations    204
;  :rlimit-count            314036)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 17
(push) ; 17
; [else-branch: 63 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@189@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@189@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 61 | !(i__71@189@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@189@01)]
(assert (not
  (and
    (<
      i__71@189@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    (<= 0 i__71@189@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 11
(assert (not (forall ((i__71@189@01 Int)) (!
  (implies
    (and
      (<
        i__71@189@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@189@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@189@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@189@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@189@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@189@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      136
;  :arith-assert-lower      639
;  :arith-assert-upper      511
;  :arith-conflicts         60
;  :arith-eq-adapter        385
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            478
;  :binary-propagations     16
;  :conflicts               348
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5094
;  :mk-clause               893
;  :num-allocs              8676679
;  :num-checks              527
;  :propagations            468
;  :quant-instantiations    205
;  :rlimit-count            314485)
(assert (forall ((i__71@189@01 Int)) (!
  (implies
    (and
      (<
        i__71@189@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@189@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@189@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@189@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@189@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@189@01))
  :qid |prog.l<no position>|)))
(declare-const $k@190@01 $Perm)
(assert ($Perm.isReadVar $k@190@01 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@190@01 $Perm.No) (< $Perm.No $k@190@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      641
;  :arith-assert-upper      512
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            478
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5099
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              528
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315045)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@118@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      641
;  :arith-assert-upper      512
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            478
;  :binary-propagations     16
;  :conflicts               349
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5099
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              529
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315056)
(assert (< $k@190@01 $k@118@01))
(assert (<= $Perm.No (- $k@118@01 $k@190@01)))
(assert (<= (- $k@118@01 $k@190@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@01 $k@190@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               350
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              530
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315270)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               351
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              531
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315318)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               352
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              532
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315366)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               353
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              533
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315414)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               354
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              534
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315462)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               355
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              535
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315510)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               356
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              536
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315558)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               357
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              537
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315606)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      137
;  :arith-assert-lower      643
;  :arith-assert-upper      513
;  :arith-conflicts         60
;  :arith-eq-adapter        386
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               358
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5102
;  :mk-clause               895
;  :num-allocs              8676679
;  :num-checks              538
;  :propagations            469
;  :quant-instantiations    205
;  :rlimit-count            315654)
(declare-const $k@191@01 $Perm)
(assert ($Perm.isReadVar $k@191@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@191@01 $Perm.No) (< $Perm.No $k@191@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      138
;  :arith-assert-lower      645
;  :arith-assert-upper      514
;  :arith-conflicts         60
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5106
;  :mk-clause               897
;  :num-allocs              8676679
;  :num-checks              539
;  :propagations            470
;  :quant-instantiations    205
;  :rlimit-count            315853)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@119@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      138
;  :arith-assert-lower      645
;  :arith-assert-upper      514
;  :arith-conflicts         60
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               359
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5106
;  :mk-clause               897
;  :num-allocs              8676679
;  :num-checks              540
;  :propagations            470
;  :quant-instantiations    205
;  :rlimit-count            315864)
(assert (< $k@191@01 $k@119@01))
(assert (<= $Perm.No (- $k@119@01 $k@191@01)))
(assert (<= (- $k@119@01 $k@191@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@01 $k@191@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      138
;  :arith-assert-lower      647
;  :arith-assert-upper      515
;  :arith-conflicts         60
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5109
;  :mk-clause               897
;  :num-allocs              8676679
;  :num-checks              541
;  :propagations            470
;  :quant-instantiations    205
;  :rlimit-count            316072)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      138
;  :arith-assert-lower      647
;  :arith-assert-upper      515
;  :arith-conflicts         60
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               360
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5109
;  :mk-clause               897
;  :num-allocs              8676679
;  :num-checks              542
;  :propagations            470
;  :quant-instantiations    205
;  :rlimit-count            316085)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12028
;  :arith-add-rows          396
;  :arith-assert-diseq      138
;  :arith-assert-lower      647
;  :arith-assert-upper      515
;  :arith-conflicts         60
;  :arith-eq-adapter        387
;  :arith-fixed-eqs         289
;  :arith-offset-eqs        26
;  :arith-pivots            479
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    485
;  :datatype-constructor-ax 3003
;  :datatype-occurs-check   713
;  :datatype-splits         2545
;  :decisions               2844
;  :del-clause              872
;  :final-checks            152
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5109
;  :mk-clause               897
;  :num-allocs              8676679
;  :num-checks              543
;  :propagations            470
;  :quant-instantiations    205
;  :rlimit-count            316133)
(push) ; 11
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               361
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              544
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317620
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              545
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317668)
(push) ; 11
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               362
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              546
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317679)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               363
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              547
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317727)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               364
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              548
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317775)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      140
;  :arith-assert-lower      651
;  :arith-assert-upper      520
;  :arith-conflicts         60
;  :arith-eq-adapter        392
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               365
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5180
;  :mk-clause               901
;  :num-allocs              8676679
;  :num-checks              549
;  :propagations            474
;  :quant-instantiations    205
;  :rlimit-count            317823)
(declare-const $k@192@01 $Perm)
(assert ($Perm.isReadVar $k@192@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@192@01 $Perm.No) (< $Perm.No $k@192@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      141
;  :arith-assert-lower      653
;  :arith-assert-upper      521
;  :arith-conflicts         60
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5184
;  :mk-clause               903
;  :num-allocs              8676679
;  :num-checks              550
;  :propagations            475
;  :quant-instantiations    205
;  :rlimit-count            318022)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@120@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      141
;  :arith-assert-lower      653
;  :arith-assert-upper      521
;  :arith-conflicts         60
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               366
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5184
;  :mk-clause               903
;  :num-allocs              8676679
;  :num-checks              551
;  :propagations            475
;  :quant-instantiations    205
;  :rlimit-count            318033)
(assert (< $k@192@01 $k@120@01))
(assert (<= $Perm.No (- $k@120@01 $k@192@01)))
(assert (<= (- $k@120@01 $k@192@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@01 $k@192@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      141
;  :arith-assert-lower      655
;  :arith-assert-upper      522
;  :arith-conflicts         60
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5187
;  :mk-clause               903
;  :num-allocs              8676679
;  :num-checks              552
;  :propagations            475
;  :quant-instantiations    205
;  :rlimit-count            318241)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      141
;  :arith-assert-lower      655
;  :arith-assert-upper      522
;  :arith-conflicts         60
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               367
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5187
;  :mk-clause               903
;  :num-allocs              8676679
;  :num-checks              553
;  :propagations            475
;  :quant-instantiations    205
;  :rlimit-count            318254)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      141
;  :arith-assert-lower      655
;  :arith-assert-upper      522
;  :arith-conflicts         60
;  :arith-eq-adapter        393
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               368
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5187
;  :mk-clause               903
;  :num-allocs              8676679
;  :num-checks              554
;  :propagations            475
;  :quant-instantiations    205
;  :rlimit-count            318302)
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      657
;  :arith-assert-upper      523
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               369
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5191
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              555
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318499)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@193@01 $Perm.No) (< $Perm.No $k@193@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      657
;  :arith-assert-upper      523
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5191
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              556
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318549)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@121@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      657
;  :arith-assert-upper      523
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               370
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5191
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              557
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318560)
(assert (< $k@193@01 $k@121@01))
(assert (<= $Perm.No (- $k@121@01 $k@193@01)))
(assert (<= (- $k@121@01 $k@193@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@01 $k@193@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      659
;  :arith-assert-upper      524
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               371
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5194
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              558
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318768)
(push) ; 11
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      659
;  :arith-assert-upper      524
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               372
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5194
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              559
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318816)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      659
;  :arith-assert-upper      524
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5194
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              560
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318864)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12236
;  :arith-add-rows          396
;  :arith-assert-diseq      142
;  :arith-assert-lower      659
;  :arith-assert-upper      524
;  :arith-conflicts         60
;  :arith-eq-adapter        394
;  :arith-fixed-eqs         292
;  :arith-offset-eqs        26
;  :arith-pivots            485
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    489
;  :datatype-constructor-ax 3064
;  :datatype-occurs-check   725
;  :datatype-splits         2603
;  :decisions               2901
;  :del-clause              876
;  :final-checks            155
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5194
;  :mk-clause               905
;  :num-allocs              8676679
;  :num-checks              561
;  :propagations            476
;  :quant-instantiations    205
;  :rlimit-count            318877)
(pop) ; 10
(push) ; 10
; [else-branch: 59 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 53 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) != 8]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    8)))
(pop) ; 9
; [eval] !(diz.Driver_z == 8)
; [eval] diz.Driver_z == 8
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  8)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12443
;  :arith-add-rows          398
;  :arith-assert-diseq      144
;  :arith-assert-lower      664
;  :arith-assert-upper      527
;  :arith-conflicts         60
;  :arith-eq-adapter        398
;  :arith-fixed-eqs         295
;  :arith-offset-eqs        26
;  :arith-pivots            492
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    493
;  :datatype-constructor-ax 3125
;  :datatype-occurs-check   737
;  :datatype-splits         2661
;  :decisions               2959
;  :del-clause              891
;  :final-checks            158
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5265
;  :mk-clause               912
;  :num-allocs              8676679
;  :num-checks              562
;  :propagations            481
;  :quant-instantiations    206
;  :rlimit-count            320770
;  :time                    0.00)
(push) ; 9
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    8))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               12651
;  :arith-add-rows          398
;  :arith-assert-diseq      144
;  :arith-assert-lower      668
;  :arith-assert-upper      531
;  :arith-conflicts         60
;  :arith-eq-adapter        402
;  :arith-fixed-eqs         298
;  :arith-offset-eqs        26
;  :arith-pivots            498
;  :binary-propagations     16
;  :conflicts               373
;  :datatype-accessor-ax    497
;  :datatype-constructor-ax 3186
;  :datatype-occurs-check   749
;  :datatype-splits         2719
;  :decisions               3016
;  :del-clause              895
;  :final-checks            161
;  :interface-eqs           16
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5336
;  :mk-clause               916
;  :num-allocs              8676679
;  :num-checks              563
;  :propagations            485
;  :quant-instantiations    207
;  :rlimit-count            322515
;  :time                    0.00)
; [then-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) != 8 | live]
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) == 8 | live]
(push) ; 9
; [then-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) != 8]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
    8)))
; [eval] diz.Driver_y == 16
(push) ; 10
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13118
;  :arith-add-rows          406
;  :arith-assert-diseq      157
;  :arith-assert-lower      679
;  :arith-assert-upper      545
;  :arith-conflicts         62
;  :arith-eq-adapter        422
;  :arith-fixed-eqs         305
;  :arith-offset-eqs        27
;  :arith-pivots            506
;  :binary-propagations     16
;  :conflicts               378
;  :datatype-accessor-ax    503
;  :datatype-constructor-ax 3348
;  :datatype-occurs-check   762
;  :datatype-splits         2781
;  :decisions               3174
;  :del-clause              938
;  :final-checks            165
;  :interface-eqs           17
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.52
;  :mk-bool-var             5466
;  :mk-clause               959
;  :num-allocs              8939575
;  :num-checks              564
;  :propagations            492
;  :quant-instantiations    209
;  :rlimit-count            326060
;  :time                    0.00)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13410
;  :arith-add-rows          406
;  :arith-assert-diseq      165
;  :arith-assert-lower      687
;  :arith-assert-upper      551
;  :arith-conflicts         63
;  :arith-eq-adapter        430
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        27
;  :arith-pivots            514
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              956
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5548
;  :mk-clause               977
;  :num-allocs              9203054
;  :num-checks              565
;  :propagations            502
;  :quant-instantiations    210
;  :rlimit-count            328232
;  :time                    0.00)
; [then-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16 | live]
; [else-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16 | live]
(push) ; 10
; [then-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16))
; [exec]
; diz.Driver_y := 0
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13412
;  :arith-add-rows          406
;  :arith-assert-diseq      165
;  :arith-assert-lower      687
;  :arith-assert-upper      551
;  :arith-conflicts         63
;  :arith-eq-adapter        430
;  :arith-fixed-eqs         309
;  :arith-offset-eqs        27
;  :arith-pivots            514
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              956
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5550
;  :mk-clause               977
;  :num-allocs              9203054
;  :num-checks              566
;  :propagations            502
;  :quant-instantiations    211
;  :rlimit-count            328550)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@194@01 Int)
(push) ; 11
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 12
; [then-branch: 66 | 0 <= i__71@194@01 | live]
; [else-branch: 66 | !(0 <= i__71@194@01) | live]
(push) ; 13
; [then-branch: 66 | 0 <= i__71@194@01]
(assert (<= 0 i__71@194@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 13
(push) ; 13
; [else-branch: 66 | !(0 <= i__71@194@01)]
(assert (not (<= 0 i__71@194@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 67 | i__71@194@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@194@01 | live]
; [else-branch: 67 | !(i__71@194@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@194@01) | live]
(push) ; 13
; [then-branch: 67 | i__71@194@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@194@01]
(assert (and
  (<
    i__71@194@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  (<= 0 i__71@194@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 14
(assert (not (>= i__71@194@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13413
;  :arith-add-rows          406
;  :arith-assert-diseq      165
;  :arith-assert-lower      688
;  :arith-assert-upper      552
;  :arith-conflicts         63
;  :arith-eq-adapter        430
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        27
;  :arith-pivots            514
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              956
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5552
;  :mk-clause               977
;  :num-allocs              9203054
;  :num-checks              567
;  :propagations            502
;  :quant-instantiations    211
;  :rlimit-count            328690)
; [eval] -1
(push) ; 14
; [then-branch: 68 | First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01] == -1 | live]
; [else-branch: 68 | First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01] != -1 | live]
(push) ; 15
; [then-branch: 68 | First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@194@01)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 68 | First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@194@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 16
(assert (not (>= i__71@194@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13415
;  :arith-add-rows          406
;  :arith-assert-diseq      167
;  :arith-assert-lower      691
;  :arith-assert-upper      553
;  :arith-conflicts         63
;  :arith-eq-adapter        431
;  :arith-fixed-eqs         310
;  :arith-offset-eqs        27
;  :arith-pivots            514
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              956
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5559
;  :mk-clause               987
;  :num-allocs              9203054
;  :num-checks              568
;  :propagations            507
;  :quant-instantiations    212
;  :rlimit-count            328907)
(push) ; 16
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01] | live]
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01]) | live]
(push) ; 17
; [then-branch: 69 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@194@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 18
(assert (not (>= i__71@194@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      167
;  :arith-assert-lower      693
;  :arith-assert-upper      554
;  :arith-conflicts         63
;  :arith-eq-adapter        432
;  :arith-fixed-eqs         311
;  :arith-offset-eqs        27
;  :arith-pivots            516
;  :binary-propagations     16
;  :conflicts               379
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              956
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5563
;  :mk-clause               987
;  :num-allocs              9203054
;  :num-checks              569
;  :propagations            507
;  :quant-instantiations    212
;  :rlimit-count            329048)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 17
(push) ; 17
; [else-branch: 69 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@194@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@194@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 67 | !(i__71@194@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@194@01)]
(assert (not
  (and
    (<
      i__71@194@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    (<= 0 i__71@194@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 11
(assert (not (forall ((i__71@194@01 Int)) (!
  (implies
    (and
      (<
        i__71@194@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@194@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@194@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@194@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@194@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@194@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      168
;  :arith-assert-lower      694
;  :arith-assert-upper      555
;  :arith-conflicts         63
;  :arith-eq-adapter        433
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               380
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5571
;  :mk-clause               999
;  :num-allocs              9203054
;  :num-checks              570
;  :propagations            509
;  :quant-instantiations    213
;  :rlimit-count            329497)
(assert (forall ((i__71@194@01 Int)) (!
  (implies
    (and
      (<
        i__71@194@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@194@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@194@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@194@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@194@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@194@01))
  :qid |prog.l<no position>|)))
(declare-const $k@195@01 $Perm)
(assert ($Perm.isReadVar $k@195@01 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@195@01 $Perm.No) (< $Perm.No $k@195@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      696
;  :arith-assert-upper      556
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5576
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              571
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330057)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@118@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      696
;  :arith-assert-upper      556
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            517
;  :binary-propagations     16
;  :conflicts               381
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5576
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              572
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330068)
(assert (< $k@195@01 $k@118@01))
(assert (<= $Perm.No (- $k@118@01 $k@195@01)))
(assert (<= (- $k@118@01 $k@195@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@01 $k@195@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               382
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              573
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330282)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               383
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              574
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330330)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               384
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              575
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330378)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               385
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              576
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330426)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               386
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              577
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330474)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               387
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              578
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330522)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               388
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              579
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330570)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               389
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              580
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330618)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      169
;  :arith-assert-lower      698
;  :arith-assert-upper      557
;  :arith-conflicts         63
;  :arith-eq-adapter        434
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               390
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5579
;  :mk-clause               1001
;  :num-allocs              9203054
;  :num-checks              581
;  :propagations            510
;  :quant-instantiations    213
;  :rlimit-count            330666)
(declare-const $k@196@01 $Perm)
(assert ($Perm.isReadVar $k@196@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@196@01 $Perm.No) (< $Perm.No $k@196@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      170
;  :arith-assert-lower      700
;  :arith-assert-upper      558
;  :arith-conflicts         63
;  :arith-eq-adapter        435
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5583
;  :mk-clause               1003
;  :num-allocs              9203054
;  :num-checks              582
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            330865)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@119@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      170
;  :arith-assert-lower      700
;  :arith-assert-upper      558
;  :arith-conflicts         63
;  :arith-eq-adapter        435
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               391
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5583
;  :mk-clause               1003
;  :num-allocs              9203054
;  :num-checks              583
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            330876)
(assert (< $k@196@01 $k@119@01))
(assert (<= $Perm.No (- $k@119@01 $k@196@01)))
(assert (<= (- $k@119@01 $k@196@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@01 $k@196@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      170
;  :arith-assert-lower      702
;  :arith-assert-upper      559
;  :arith-conflicts         63
;  :arith-eq-adapter        435
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5586
;  :mk-clause               1003
;  :num-allocs              9203054
;  :num-checks              584
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            331084)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      170
;  :arith-assert-lower      702
;  :arith-assert-upper      559
;  :arith-conflicts         63
;  :arith-eq-adapter        435
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               392
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5586
;  :mk-clause               1003
;  :num-allocs              9203054
;  :num-checks              585
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            331097)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13417
;  :arith-add-rows          406
;  :arith-assert-diseq      170
;  :arith-assert-lower      702
;  :arith-assert-upper      559
;  :arith-conflicts         63
;  :arith-eq-adapter        435
;  :arith-fixed-eqs         312
;  :arith-offset-eqs        27
;  :arith-pivots            518
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    507
;  :datatype-constructor-ax 3430
;  :datatype-occurs-check   774
;  :datatype-splits         2838
;  :decisions               3254
;  :del-clause              978
;  :final-checks            169
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5586
;  :mk-clause               1003
;  :num-allocs              9203054
;  :num-checks              586
;  :propagations            511
;  :quant-instantiations    213
;  :rlimit-count            331145)
(push) ; 11
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               393
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              587
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332636
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               394
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              588
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332684)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               395
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              589
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332732)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              590
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332780)
(push) ; 11
(assert (not (=
  diz@34@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               396
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              591
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332791)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      172
;  :arith-assert-lower      708
;  :arith-assert-upper      562
;  :arith-conflicts         63
;  :arith-eq-adapter        440
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               397
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5657
;  :mk-clause               1012
;  :num-allocs              9203054
;  :num-checks              592
;  :propagations            517
;  :quant-instantiations    213
;  :rlimit-count            332839)
(declare-const $k@197@01 $Perm)
(assert ($Perm.isReadVar $k@197@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@197@01 $Perm.No) (< $Perm.No $k@197@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      173
;  :arith-assert-lower      710
;  :arith-assert-upper      563
;  :arith-conflicts         63
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5661
;  :mk-clause               1014
;  :num-allocs              9203054
;  :num-checks              593
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            333037)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@120@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      173
;  :arith-assert-lower      710
;  :arith-assert-upper      563
;  :arith-conflicts         63
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            524
;  :binary-propagations     16
;  :conflicts               398
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5661
;  :mk-clause               1014
;  :num-allocs              9203054
;  :num-checks              594
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            333048)
(assert (< $k@197@01 $k@120@01))
(assert (<= $Perm.No (- $k@120@01 $k@197@01)))
(assert (<= (- $k@120@01 $k@197@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@01 $k@197@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      173
;  :arith-assert-lower      712
;  :arith-assert-upper      564
;  :arith-conflicts         63
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5664
;  :mk-clause               1014
;  :num-allocs              9203054
;  :num-checks              595
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            333262)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      173
;  :arith-assert-lower      712
;  :arith-assert-upper      564
;  :arith-conflicts         63
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               399
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5664
;  :mk-clause               1014
;  :num-allocs              9203054
;  :num-checks              596
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            333275)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      173
;  :arith-assert-lower      712
;  :arith-assert-upper      564
;  :arith-conflicts         63
;  :arith-eq-adapter        441
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               400
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5664
;  :mk-clause               1014
;  :num-allocs              9203054
;  :num-checks              597
;  :propagations            518
;  :quant-instantiations    213
;  :rlimit-count            333323)
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      714
;  :arith-assert-upper      565
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               401
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5668
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              598
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333519)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@198@01 $Perm.No) (< $Perm.No $k@198@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      714
;  :arith-assert-upper      565
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5668
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              599
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333569)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@121@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      714
;  :arith-assert-upper      565
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            525
;  :binary-propagations     16
;  :conflicts               402
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5668
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              600
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333580)
(assert (< $k@198@01 $k@121@01))
(assert (<= $Perm.No (- $k@121@01 $k@198@01)))
(assert (<= (- $k@121@01 $k@198@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@01 $k@198@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      716
;  :arith-assert-upper      566
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               403
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5671
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              601
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333794)
(push) ; 11
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      716
;  :arith-assert-upper      566
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               404
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5671
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              602
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333842)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      716
;  :arith-assert-upper      566
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5671
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              603
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333890)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13625
;  :arith-add-rows          406
;  :arith-assert-diseq      174
;  :arith-assert-lower      716
;  :arith-assert-upper      566
;  :arith-conflicts         63
;  :arith-eq-adapter        442
;  :arith-fixed-eqs         315
;  :arith-offset-eqs        27
;  :arith-pivots            526
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    511
;  :datatype-constructor-ax 3491
;  :datatype-occurs-check   786
;  :datatype-splits         2896
;  :decisions               3311
;  :del-clause              987
;  :final-checks            172
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5671
;  :mk-clause               1016
;  :num-allocs              9203054
;  :num-checks              604
;  :propagations            519
;  :quant-instantiations    213
;  :rlimit-count            333903)
(pop) ; 10
(push) ; 10
; [else-branch: 65 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16)))
(pop) ; 10
; [eval] !(diz.Driver_y == 16)
; [eval] diz.Driver_y == 16
(set-option :timeout 10)
(push) ; 10
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               13834
;  :arith-add-rows          406
;  :arith-assert-diseq      178
;  :arith-assert-lower      721
;  :arith-assert-upper      570
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        447
;  :arith-fixed-eqs         318
;  :arith-offset-eqs        27
;  :arith-pivots            535
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    515
;  :datatype-constructor-ax 3552
;  :datatype-occurs-check   798
;  :datatype-splits         2954
;  :decisions               3368
;  :del-clause              1007
;  :final-checks            175
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5746
;  :mk-clause               1028
;  :num-allocs              9203054
;  :num-checks              605
;  :propagations            525
;  :quant-instantiations    214
;  :rlimit-count            335771
;  :time                    0.00)
(push) ; 10
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14044
;  :arith-add-rows          406
;  :arith-assert-diseq      180
;  :arith-assert-lower      727
;  :arith-assert-upper      573
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        452
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        27
;  :arith-pivots            541
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1016
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5819
;  :mk-clause               1037
;  :num-allocs              9203054
;  :num-checks              606
;  :propagations            531
;  :quant-instantiations    215
;  :rlimit-count            337551
;  :time                    0.00)
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16 | live]
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16 | live]
(push) ; 10
; [then-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) != 16]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
    16)))
; Loop head block: Re-establish invariant
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14045
;  :arith-add-rows          406
;  :arith-assert-diseq      180
;  :arith-assert-lower      727
;  :arith-assert-upper      573
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        452
;  :arith-fixed-eqs         321
;  :arith-offset-eqs        27
;  :arith-pivots            541
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1016
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5821
;  :mk-clause               1037
;  :num-allocs              9203054
;  :num-checks              607
;  :propagations            531
;  :quant-instantiations    216
;  :rlimit-count            337887)
; [eval] diz.Driver_m != null
; [eval] |diz.Driver_m.Main_process_state| == 1
; [eval] |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_event_state| == 2
; [eval] |diz.Driver_m.Main_event_state|
; [eval] (forall i__71: Int :: { diz.Driver_m.Main_process_state[i__71] } 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|)
(declare-const i__71@199@01 Int)
(push) ; 11
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state| ==> diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= i__71 && i__71 < |diz.Driver_m.Main_process_state|
; [eval] 0 <= i__71
(push) ; 12
; [then-branch: 71 | 0 <= i__71@199@01 | live]
; [else-branch: 71 | !(0 <= i__71@199@01) | live]
(push) ; 13
; [then-branch: 71 | 0 <= i__71@199@01]
(assert (<= 0 i__71@199@01))
; [eval] i__71 < |diz.Driver_m.Main_process_state|
; [eval] |diz.Driver_m.Main_process_state|
(pop) ; 13
(push) ; 13
; [else-branch: 71 | !(0 <= i__71@199@01)]
(assert (not (<= 0 i__71@199@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 72 | i__71@199@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@199@01 | live]
; [else-branch: 72 | !(i__71@199@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@199@01) | live]
(push) ; 13
; [then-branch: 72 | i__71@199@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@199@01]
(assert (and
  (<
    i__71@199@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
  (<= 0 i__71@199@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] == -1 || 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71] == -1
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 14
(assert (not (>= i__71@199@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14046
;  :arith-add-rows          406
;  :arith-assert-diseq      180
;  :arith-assert-lower      728
;  :arith-assert-upper      574
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        452
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        27
;  :arith-pivots            541
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1016
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5823
;  :mk-clause               1037
;  :num-allocs              9203054
;  :num-checks              608
;  :propagations            531
;  :quant-instantiations    216
;  :rlimit-count            338027)
; [eval] -1
(push) ; 14
; [then-branch: 73 | First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01] == -1 | live]
; [else-branch: 73 | First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01] != -1 | live]
(push) ; 15
; [then-branch: 73 | First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01] == -1]
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@199@01)
  (- 0 1)))
(pop) ; 15
(push) ; 15
; [else-branch: 73 | First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01] != -1]
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@199@01)
    (- 0 1))))
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71] && diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] 0 <= diz.Driver_m.Main_process_state[i__71]
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 16
(assert (not (>= i__71@199@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14048
;  :arith-add-rows          406
;  :arith-assert-diseq      182
;  :arith-assert-lower      731
;  :arith-assert-upper      575
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        453
;  :arith-fixed-eqs         322
;  :arith-offset-eqs        27
;  :arith-pivots            541
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1016
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5830
;  :mk-clause               1047
;  :num-allocs              9203054
;  :num-checks              609
;  :propagations            536
;  :quant-instantiations    217
;  :rlimit-count            338243)
(push) ; 16
; [then-branch: 74 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01] | live]
; [else-branch: 74 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01]) | live]
(push) ; 17
; [then-branch: 74 | 0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01]]
(assert (<=
  0
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@199@01)))
; [eval] diz.Driver_m.Main_process_state[i__71] < |diz.Driver_m.Main_event_state|
; [eval] diz.Driver_m.Main_process_state[i__71]
(push) ; 18
(assert (not (>= i__71@199@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      182
;  :arith-assert-lower      733
;  :arith-assert-upper      576
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        454
;  :arith-fixed-eqs         323
;  :arith-offset-eqs        27
;  :arith-pivots            542
;  :binary-propagations     16
;  :conflicts               405
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1016
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5834
;  :mk-clause               1047
;  :num-allocs              9203054
;  :num-checks              610
;  :propagations            536
;  :quant-instantiations    217
;  :rlimit-count            338378)
; [eval] |diz.Driver_m.Main_event_state|
(pop) ; 17
(push) ; 17
; [else-branch: 74 | !(0 <= First:(Second:(Second:(Second:($t@116@01))))[i__71@199@01])]
(assert (not
  (<=
    0
    (Seq_index
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
      i__71@199@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 72 | !(i__71@199@01 < |First:(Second:(Second:(Second:($t@116@01))))| && 0 <= i__71@199@01)]
(assert (not
  (and
    (<
      i__71@199@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
    (<= 0 i__71@199@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 11
(assert (not (forall ((i__71@199@01 Int)) (!
  (implies
    (and
      (<
        i__71@199@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@199@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@199@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@199@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@199@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@199@01))
  :qid |prog.l<no position>|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      183
;  :arith-assert-lower      734
;  :arith-assert-upper      577
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        455
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               406
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5842
;  :mk-clause               1059
;  :num-allocs              9203054
;  :num-checks              611
;  :propagations            538
;  :quant-instantiations    218
;  :rlimit-count            338827)
(assert (forall ((i__71@199@01 Int)) (!
  (implies
    (and
      (<
        i__71@199@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))
      (<= 0 i__71@199@01))
    (or
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
          i__71@199@01)
        (- 0 1))
      (and
        (<
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@199@01)
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))
        (<=
          0
          (Seq_index
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
            i__71@199@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))
    i__71@199@01))
  :qid |prog.l<no position>|)))
(declare-const $k@200@01 $Perm)
(assert ($Perm.isReadVar $k@200@01 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@200@01 $Perm.No) (< $Perm.No $k@200@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      736
;  :arith-assert-upper      578
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5847
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              612
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339388)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@118@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      736
;  :arith-assert-upper      578
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               407
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5847
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              613
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339399)
(assert (< $k@200@01 $k@118@01))
(assert (<= $Perm.No (- $k@118@01 $k@200@01)))
(assert (<= (- $k@118@01 $k@200@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@118@01 $k@200@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_alu != null
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               408
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              614
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339607)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               409
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              615
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339655)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               410
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              616
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339703)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               411
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              617
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339751)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               412
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              618
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339799)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               413
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              619
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339847)
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               414
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              620
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339895)
; [eval] 0 <= diz.Driver_m.Main_alu.ALU_RESULT
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               415
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              621
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339943)
; [eval] diz.Driver_m.Main_alu.ALU_RESULT <= 16
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      184
;  :arith-assert-lower      738
;  :arith-assert-upper      579
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        456
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               416
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5850
;  :mk-clause               1061
;  :num-allocs              9203054
;  :num-checks              622
;  :propagations            539
;  :quant-instantiations    218
;  :rlimit-count            339991)
(declare-const $k@201@01 $Perm)
(assert ($Perm.isReadVar $k@201@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@201@01 $Perm.No) (< $Perm.No $k@201@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      185
;  :arith-assert-lower      740
;  :arith-assert-upper      580
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5854
;  :mk-clause               1063
;  :num-allocs              9203054
;  :num-checks              623
;  :propagations            540
;  :quant-instantiations    218
;  :rlimit-count            340189)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@119@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      185
;  :arith-assert-lower      740
;  :arith-assert-upper      580
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            543
;  :binary-propagations     16
;  :conflicts               417
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5854
;  :mk-clause               1063
;  :num-allocs              9203054
;  :num-checks              624
;  :propagations            540
;  :quant-instantiations    218
;  :rlimit-count            340200)
(assert (< $k@201@01 $k@119@01))
(assert (<= $Perm.No (- $k@119@01 $k@201@01)))
(assert (<= (- $k@119@01 $k@201@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@119@01 $k@201@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_dr != null
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      185
;  :arith-assert-lower      742
;  :arith-assert-upper      581
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            545
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5857
;  :mk-clause               1063
;  :num-allocs              9203054
;  :num-checks              625
;  :propagations            540
;  :quant-instantiations    218
;  :rlimit-count            340420)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      185
;  :arith-assert-lower      742
;  :arith-assert-upper      581
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            545
;  :binary-propagations     16
;  :conflicts               418
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5857
;  :mk-clause               1063
;  :num-allocs              9203054
;  :num-checks              626
;  :propagations            540
;  :quant-instantiations    218
;  :rlimit-count            340433)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14050
;  :arith-add-rows          406
;  :arith-assert-diseq      185
;  :arith-assert-lower      742
;  :arith-assert-upper      581
;  :arith-bound-prop        1
;  :arith-conflicts         63
;  :arith-eq-adapter        457
;  :arith-fixed-eqs         324
;  :arith-offset-eqs        27
;  :arith-pivots            545
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    519
;  :datatype-constructor-ax 3613
;  :datatype-occurs-check   810
;  :datatype-splits         3012
;  :decisions               3425
;  :del-clause              1038
;  :final-checks            178
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5857
;  :mk-clause               1063
;  :num-allocs              9203054
;  :num-checks              627
;  :propagations            540
;  :quant-instantiations    218
;  :rlimit-count            340481)
(push) ; 11
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      189
;  :arith-assert-lower      747
;  :arith-assert-upper      585
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               419
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5930
;  :mk-clause               1075
;  :num-allocs              9203054
;  :num-checks              628
;  :propagations            546
;  :quant-instantiations    218
;  :rlimit-count            341977
;  :time                    0.00)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      189
;  :arith-assert-lower      747
;  :arith-assert-upper      585
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               420
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5930
;  :mk-clause               1075
;  :num-allocs              9203054
;  :num-checks              629
;  :propagations            546
;  :quant-instantiations    218
;  :rlimit-count            342025)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      189
;  :arith-assert-lower      747
;  :arith-assert-upper      585
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               421
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5930
;  :mk-clause               1075
;  :num-allocs              9203054
;  :num-checks              630
;  :propagations            546
;  :quant-instantiations    218
;  :rlimit-count            342073)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      189
;  :arith-assert-lower      747
;  :arith-assert-upper      585
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               422
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5930
;  :mk-clause               1075
;  :num-allocs              9203054
;  :num-checks              631
;  :propagations            546
;  :quant-instantiations    218
;  :rlimit-count            342121)
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      189
;  :arith-assert-lower      747
;  :arith-assert-upper      585
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        462
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               423
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5930
;  :mk-clause               1075
;  :num-allocs              9203054
;  :num-checks              632
;  :propagations            546
;  :quant-instantiations    218
;  :rlimit-count            342169)
(declare-const $k@202@01 $Perm)
(assert ($Perm.isReadVar $k@202@01 $Perm.Write))
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@202@01 $Perm.No) (< $Perm.No $k@202@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      190
;  :arith-assert-lower      749
;  :arith-assert-upper      586
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5934
;  :mk-clause               1077
;  :num-allocs              9203054
;  :num-checks              633
;  :propagations            547
;  :quant-instantiations    218
;  :rlimit-count            342367)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@120@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      190
;  :arith-assert-lower      749
;  :arith-assert-upper      586
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            551
;  :binary-propagations     16
;  :conflicts               424
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5934
;  :mk-clause               1077
;  :num-allocs              9203054
;  :num-checks              634
;  :propagations            547
;  :quant-instantiations    218
;  :rlimit-count            342378)
(assert (< $k@202@01 $k@120@01))
(assert (<= $Perm.No (- $k@120@01 $k@202@01)))
(assert (<= (- $k@120@01 $k@202@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@120@01 $k@202@01))
  (not (= ($SortWrappers.$SnapTo$Ref ($Snap.first $t@116@01)) $Ref.null))))
; [eval] diz.Driver_m.Main_mon != null
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      190
;  :arith-assert-lower      751
;  :arith-assert-upper      587
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5937
;  :mk-clause               1077
;  :num-allocs              9203054
;  :num-checks              635
;  :propagations            547
;  :quant-instantiations    218
;  :rlimit-count            342592)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      190
;  :arith-assert-lower      751
;  :arith-assert-upper      587
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               425
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5937
;  :mk-clause               1077
;  :num-allocs              9203054
;  :num-checks              636
;  :propagations            547
;  :quant-instantiations    218
;  :rlimit-count            342605)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No $k@120@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      190
;  :arith-assert-lower      751
;  :arith-assert-upper      587
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        463
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               426
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5937
;  :mk-clause               1077
;  :num-allocs              9203054
;  :num-checks              637
;  :propagations            547
;  :quant-instantiations    218
;  :rlimit-count            342653)
(declare-const $k@203@01 $Perm)
(assert ($Perm.isReadVar $k@203@01 $Perm.Write))
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      753
;  :arith-assert-upper      588
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               427
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5941
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              638
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            342849)
(set-option :timeout 0)
(push) ; 11
(assert (not (or (= $k@203@01 $Perm.No) (< $Perm.No $k@203@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      753
;  :arith-assert-upper      588
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5941
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              639
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            342899)
(set-option :timeout 10)
(push) ; 11
(assert (not (not (= $k@121@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      753
;  :arith-assert-upper      588
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            552
;  :binary-propagations     16
;  :conflicts               428
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5941
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              640
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            342910)
(assert (< $k@203@01 $k@121@01))
(assert (<= $Perm.No (- $k@121@01 $k@203@01)))
(assert (<= (- $k@121@01 $k@203@01) $Perm.Write))
(assert (implies
  (< $Perm.No (- $k@121@01 $k@203@01))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))
      $Ref.null))))
; [eval] diz.Driver_m.Main_alu.ALU_m == diz.Driver_m
(push) ; 11
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      755
;  :arith-assert-upper      589
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               429
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5944
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              641
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            343124)
(push) ; 11
(assert (not (< $Perm.No $k@121@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      755
;  :arith-assert-upper      589
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               430
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5944
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              642
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            343172)
; [eval] diz.Driver_m.Main_dr == diz
(push) ; 11
(assert (not (< $Perm.No $k@119@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      755
;  :arith-assert-upper      589
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5944
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              643
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            343220)
(set-option :timeout 0)
(push) ; 11
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14258
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      755
;  :arith-assert-upper      589
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        464
;  :arith-fixed-eqs         327
;  :arith-offset-eqs        27
;  :arith-pivots            553
;  :binary-propagations     16
;  :conflicts               431
;  :datatype-accessor-ax    523
;  :datatype-constructor-ax 3674
;  :datatype-occurs-check   822
;  :datatype-splits         3070
;  :decisions               3482
;  :del-clause              1050
;  :final-checks            181
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5944
;  :mk-clause               1079
;  :num-allocs              9203054
;  :num-checks              644
;  :propagations            548
;  :quant-instantiations    218
;  :rlimit-count            343233)
(pop) ; 10
(push) ; 10
; [else-branch: 70 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))))) == 16]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))))
  16))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 64 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01)))))))))))))))))))))) == 8]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01)))))))))))))))))))))))
  8))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 52 | First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@116@01))))))))))))))))))))))))) < 8]
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@116@01))))))))))))))))))))))))))
  8))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@59@01)))))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14422
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      756
;  :arith-assert-upper      590
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        465
;  :arith-fixed-eqs         328
;  :arith-offset-eqs        27
;  :arith-pivots            560
;  :binary-propagations     16
;  :conflicts               432
;  :datatype-accessor-ax    527
;  :datatype-constructor-ax 3733
;  :datatype-occurs-check   832
;  :datatype-splits         3111
;  :decisions               3537
;  :del-clause              1069
;  :final-checks            184
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             5991
;  :mk-clause               1081
;  :num-allocs              9203054
;  :num-checks              645
;  :propagations            551
;  :quant-instantiations    218
;  :rlimit-count            344921
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14647
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      758
;  :arith-assert-upper      592
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        467
;  :arith-fixed-eqs         330
;  :arith-offset-eqs        27
;  :arith-pivots            564
;  :binary-propagations     16
;  :conflicts               433
;  :datatype-accessor-ax    534
;  :datatype-constructor-ax 3812
;  :datatype-occurs-check   844
;  :datatype-splits         3184
;  :decisions               3609
;  :del-clause              1072
;  :final-checks            188
;  :interface-eqs           18
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             6072
;  :mk-clause               1084
;  :num-allocs              9203054
;  :num-checks              646
;  :propagations            557
;  :quant-instantiations    218
;  :rlimit-count            346544
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               14870
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      760
;  :arith-assert-upper      594
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        469
;  :arith-fixed-eqs         332
;  :arith-offset-eqs        27
;  :arith-pivots            568
;  :binary-propagations     16
;  :conflicts               434
;  :datatype-accessor-ax    541
;  :datatype-constructor-ax 3890
;  :datatype-occurs-check   856
;  :datatype-splits         3256
;  :decisions               3681
;  :del-clause              1078
;  :final-checks            193
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             6152
;  :mk-clause               1090
;  :num-allocs              9203054
;  :num-checks              647
;  :propagations            565
;  :quant-instantiations    218
;  :rlimit-count            348162
;  :time                    0.00)
(push) ; 5
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first $t@86@01))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@36@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(get-info :all-statistics)
; (:added-eqs               15095
;  :arith-add-rows          406
;  :arith-assert-diseq      191
;  :arith-assert-lower      762
;  :arith-assert-upper      596
;  :arith-bound-prop        2
;  :arith-conflicts         63
;  :arith-eq-adapter        471
;  :arith-fixed-eqs         334
;  :arith-offset-eqs        27
;  :arith-pivots            572
;  :binary-propagations     16
;  :conflicts               435
;  :datatype-accessor-ax    548
;  :datatype-constructor-ax 3969
;  :datatype-occurs-check   868
;  :datatype-splits         3329
;  :decisions               3753
;  :del-clause              1081
;  :final-checks            197
;  :interface-eqs           19
;  :max-generation          2
;  :max-memory              5.52
;  :memory                  5.43
;  :mk-bool-var             6233
;  :mk-clause               1093
;  :num-allocs              9203054
;  :num-checks              648
;  :propagations            571
;  :quant-instantiations    218
;  :rlimit-count            349785
;  :time                    0.00)
; [eval] !true
; [then-branch: 75 | False | dead]
; [else-branch: 75 | True | live]
(push) ; 5
; [else-branch: 75 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
